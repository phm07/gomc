// Code generated by generation/gen.go. DO NOT EDIT.

package data

type Air struct{}

func (x Air) Id() uint16 {
	return 0
}

type Stone struct{}

func (x Stone) Id() uint16 {
	return 1
}

type Granite struct{}

func (x Granite) Id() uint16 {
	return 2
}

type PolishedGranite struct{}

func (x PolishedGranite) Id() uint16 {
	return 3
}

type Diorite struct{}

func (x Diorite) Id() uint16 {
	return 4
}

type PolishedDiorite struct{}

func (x PolishedDiorite) Id() uint16 {
	return 5
}

type Andesite struct{}

func (x Andesite) Id() uint16 {
	return 6
}

type PolishedAndesite struct{}

func (x PolishedAndesite) Id() uint16 {
	return 7
}

type GrassBlock struct {
	Snowy bool
}

func (x GrassBlock) Id() uint16 {
	switch x.Snowy {
	case true:
		return 8
	case false:
		return 9
	}
	return 9 // default state
}

type Dirt struct{}

func (x Dirt) Id() uint16 {
	return 10
}

type CoarseDirt struct{}

func (x CoarseDirt) Id() uint16 {
	return 11
}

type Podzol struct {
	Snowy bool
}

func (x Podzol) Id() uint16 {
	switch x.Snowy {
	case true:
		return 12
	case false:
		return 13
	}
	return 13 // default state
}

type Cobblestone struct{}

func (x Cobblestone) Id() uint16 {
	return 14
}

type OakPlanks struct{}

func (x OakPlanks) Id() uint16 {
	return 15
}

type SprucePlanks struct{}

func (x SprucePlanks) Id() uint16 {
	return 16
}

type BirchPlanks struct{}

func (x BirchPlanks) Id() uint16 {
	return 17
}

type JunglePlanks struct{}

func (x JunglePlanks) Id() uint16 {
	return 18
}

type AcaciaPlanks struct{}

func (x AcaciaPlanks) Id() uint16 {
	return 19
}

type CherryPlanks struct{}

func (x CherryPlanks) Id() uint16 {
	return 20
}

type DarkOakPlanks struct{}

func (x DarkOakPlanks) Id() uint16 {
	return 21
}

type MangrovePlanks struct{}

func (x MangrovePlanks) Id() uint16 {
	return 22
}

type BambooPlanks struct{}

func (x BambooPlanks) Id() uint16 {
	return 23
}

type BambooMosaic struct{}

func (x BambooMosaic) Id() uint16 {
	return 24
}

type OakSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x OakSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 25
	case 1:
		return 26
	}
	return 25 // default state
}

type SpruceSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x SpruceSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 27
	case 1:
		return 28
	}
	return 27 // default state
}

type BirchSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x BirchSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 29
	case 1:
		return 30
	}
	return 29 // default state
}

type JungleSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x JungleSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 31
	case 1:
		return 32
	}
	return 31 // default state
}

type AcaciaSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x AcaciaSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 33
	case 1:
		return 34
	}
	return 33 // default state
}

type CherrySapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x CherrySapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 35
	case 1:
		return 36
	}
	return 35 // default state
}

type DarkOakSapling struct {
	// Valid values: 0, 1
	Stage int
}

func (x DarkOakSapling) Id() uint16 {
	switch x.Stage {
	case 0:
		return 37
	case 1:
		return 38
	}
	return 37 // default state
}

type MangrovePropagule struct {
	Waterlogged bool
	// Valid values: 0, 1, 2, 3, 4
	Age     int
	Hanging bool
	// Valid values: 0, 1
	Stage int
}

func (x MangrovePropagule) Id() uint16 {
	switch x.Stage {
	case 0:
		switch x.Waterlogged {
		case true:
			switch x.Age {
			case 0:
				switch x.Hanging {
				case true:
					return 39
				case false:
					return 43
				}
			case 1:
				switch x.Hanging {
				case true:
					return 47
				case false:
					return 51
				}
			case 2:
				switch x.Hanging {
				case true:
					return 55
				case false:
					return 59
				}
			case 3:
				switch x.Hanging {
				case true:
					return 63
				case false:
					return 67
				}
			case 4:
				switch x.Hanging {
				case true:
					return 71
				case false:
					return 75
				}
			}
		case false:
			switch x.Age {
			case 0:
				switch x.Hanging {
				case true:
					return 40
				case false:
					return 44
				}
			case 1:
				switch x.Hanging {
				case true:
					return 48
				case false:
					return 52
				}
			case 2:
				switch x.Hanging {
				case true:
					return 56
				case false:
					return 60
				}
			case 3:
				switch x.Hanging {
				case true:
					return 64
				case false:
					return 68
				}
			case 4:
				switch x.Hanging {
				case true:
					return 72
				case false:
					return 76
				}
			}
		}
	case 1:
		switch x.Waterlogged {
		case true:
			switch x.Age {
			case 0:
				switch x.Hanging {
				case true:
					return 41
				case false:
					return 45
				}
			case 1:
				switch x.Hanging {
				case true:
					return 49
				case false:
					return 53
				}
			case 2:
				switch x.Hanging {
				case true:
					return 57
				case false:
					return 61
				}
			case 3:
				switch x.Hanging {
				case true:
					return 65
				case false:
					return 69
				}
			case 4:
				switch x.Hanging {
				case true:
					return 73
				case false:
					return 77
				}
			}
		case false:
			switch x.Age {
			case 0:
				switch x.Hanging {
				case true:
					return 42
				case false:
					return 46
				}
			case 1:
				switch x.Hanging {
				case true:
					return 50
				case false:
					return 54
				}
			case 2:
				switch x.Hanging {
				case true:
					return 58
				case false:
					return 62
				}
			case 3:
				switch x.Hanging {
				case true:
					return 66
				case false:
					return 70
				}
			case 4:
				switch x.Hanging {
				case true:
					return 74
				case false:
					return 78
				}
			}
		}
	}
	return 44 // default state
}

type Bedrock struct{}

func (x Bedrock) Id() uint16 {
	return 79
}

type Water struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Level int
}

func (x Water) Id() uint16 {
	switch x.Level {
	case 0:
		return 80
	case 1:
		return 81
	case 2:
		return 82
	case 3:
		return 83
	case 4:
		return 84
	case 5:
		return 85
	case 6:
		return 86
	case 7:
		return 87
	case 8:
		return 88
	case 9:
		return 89
	case 10:
		return 90
	case 11:
		return 91
	case 12:
		return 92
	case 13:
		return 93
	case 14:
		return 94
	case 15:
		return 95
	}
	return 80 // default state
}

type Lava struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Level int
}

func (x Lava) Id() uint16 {
	switch x.Level {
	case 0:
		return 96
	case 1:
		return 97
	case 2:
		return 98
	case 3:
		return 99
	case 4:
		return 100
	case 5:
		return 101
	case 6:
		return 102
	case 7:
		return 103
	case 8:
		return 104
	case 9:
		return 105
	case 10:
		return 106
	case 11:
		return 107
	case 12:
		return 108
	case 13:
		return 109
	case 14:
		return 110
	case 15:
		return 111
	}
	return 96 // default state
}

type Sand struct{}

func (x Sand) Id() uint16 {
	return 112
}

type SuspiciousSand struct {
	// Valid values: 0, 1, 2, 3
	Dusted int
}

func (x SuspiciousSand) Id() uint16 {
	switch x.Dusted {
	case 0:
		return 113
	case 1:
		return 114
	case 2:
		return 115
	case 3:
		return 116
	}
	return 113 // default state
}

type RedSand struct{}

func (x RedSand) Id() uint16 {
	return 117
}

type Gravel struct{}

func (x Gravel) Id() uint16 {
	return 118
}

type SuspiciousGravel struct {
	// Valid values: 0, 1, 2, 3
	Dusted int
}

func (x SuspiciousGravel) Id() uint16 {
	switch x.Dusted {
	case 0:
		return 119
	case 1:
		return 120
	case 2:
		return 121
	case 3:
		return 122
	}
	return 119 // default state
}

type GoldOre struct{}

func (x GoldOre) Id() uint16 {
	return 123
}

type DeepslateGoldOre struct{}

func (x DeepslateGoldOre) Id() uint16 {
	return 124
}

type IronOre struct{}

func (x IronOre) Id() uint16 {
	return 125
}

type DeepslateIronOre struct{}

func (x DeepslateIronOre) Id() uint16 {
	return 126
}

type CoalOre struct{}

func (x CoalOre) Id() uint16 {
	return 127
}

type DeepslateCoalOre struct{}

func (x DeepslateCoalOre) Id() uint16 {
	return 128
}

type NetherGoldOre struct{}

func (x NetherGoldOre) Id() uint16 {
	return 129
}

type OakLogAxis string

const (
	OakLogAxisX OakLogAxis = "x"
	OakLogAxisY OakLogAxis = "y"
	OakLogAxisZ OakLogAxis = "z"
)

type OakLog struct {
	Axis OakLogAxis
}

func (x OakLog) Id() uint16 {
	switch x.Axis {
	case OakLogAxisX:
		return 130
	case OakLogAxisY:
		return 131
	case OakLogAxisZ:
		return 132
	}
	return 131 // default state
}

type SpruceLogAxis string

const (
	SpruceLogAxisX SpruceLogAxis = "x"
	SpruceLogAxisY SpruceLogAxis = "y"
	SpruceLogAxisZ SpruceLogAxis = "z"
)

type SpruceLog struct {
	Axis SpruceLogAxis
}

func (x SpruceLog) Id() uint16 {
	switch x.Axis {
	case SpruceLogAxisX:
		return 133
	case SpruceLogAxisY:
		return 134
	case SpruceLogAxisZ:
		return 135
	}
	return 134 // default state
}

type BirchLogAxis string

const (
	BirchLogAxisX BirchLogAxis = "x"
	BirchLogAxisY BirchLogAxis = "y"
	BirchLogAxisZ BirchLogAxis = "z"
)

type BirchLog struct {
	Axis BirchLogAxis
}

func (x BirchLog) Id() uint16 {
	switch x.Axis {
	case BirchLogAxisX:
		return 136
	case BirchLogAxisY:
		return 137
	case BirchLogAxisZ:
		return 138
	}
	return 137 // default state
}

type JungleLogAxis string

const (
	JungleLogAxisX JungleLogAxis = "x"
	JungleLogAxisY JungleLogAxis = "y"
	JungleLogAxisZ JungleLogAxis = "z"
)

type JungleLog struct {
	Axis JungleLogAxis
}

func (x JungleLog) Id() uint16 {
	switch x.Axis {
	case JungleLogAxisX:
		return 139
	case JungleLogAxisY:
		return 140
	case JungleLogAxisZ:
		return 141
	}
	return 140 // default state
}

type AcaciaLogAxis string

const (
	AcaciaLogAxisX AcaciaLogAxis = "x"
	AcaciaLogAxisY AcaciaLogAxis = "y"
	AcaciaLogAxisZ AcaciaLogAxis = "z"
)

type AcaciaLog struct {
	Axis AcaciaLogAxis
}

func (x AcaciaLog) Id() uint16 {
	switch x.Axis {
	case AcaciaLogAxisX:
		return 142
	case AcaciaLogAxisY:
		return 143
	case AcaciaLogAxisZ:
		return 144
	}
	return 143 // default state
}

type CherryLogAxis string

const (
	CherryLogAxisX CherryLogAxis = "x"
	CherryLogAxisY CherryLogAxis = "y"
	CherryLogAxisZ CherryLogAxis = "z"
)

type CherryLog struct {
	Axis CherryLogAxis
}

func (x CherryLog) Id() uint16 {
	switch x.Axis {
	case CherryLogAxisX:
		return 145
	case CherryLogAxisY:
		return 146
	case CherryLogAxisZ:
		return 147
	}
	return 146 // default state
}

type DarkOakLogAxis string

const (
	DarkOakLogAxisX DarkOakLogAxis = "x"
	DarkOakLogAxisY DarkOakLogAxis = "y"
	DarkOakLogAxisZ DarkOakLogAxis = "z"
)

type DarkOakLog struct {
	Axis DarkOakLogAxis
}

func (x DarkOakLog) Id() uint16 {
	switch x.Axis {
	case DarkOakLogAxisX:
		return 148
	case DarkOakLogAxisY:
		return 149
	case DarkOakLogAxisZ:
		return 150
	}
	return 149 // default state
}

type MangroveLogAxis string

const (
	MangroveLogAxisX MangroveLogAxis = "x"
	MangroveLogAxisY MangroveLogAxis = "y"
	MangroveLogAxisZ MangroveLogAxis = "z"
)

type MangroveLog struct {
	Axis MangroveLogAxis
}

func (x MangroveLog) Id() uint16 {
	switch x.Axis {
	case MangroveLogAxisX:
		return 151
	case MangroveLogAxisY:
		return 152
	case MangroveLogAxisZ:
		return 153
	}
	return 152 // default state
}

type MangroveRoots struct {
	Waterlogged bool
}

func (x MangroveRoots) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 154
	case false:
		return 155
	}
	return 155 // default state
}

type MuddyMangroveRootsAxis string

const (
	MuddyMangroveRootsAxisX MuddyMangroveRootsAxis = "x"
	MuddyMangroveRootsAxisY MuddyMangroveRootsAxis = "y"
	MuddyMangroveRootsAxisZ MuddyMangroveRootsAxis = "z"
)

type MuddyMangroveRoots struct {
	Axis MuddyMangroveRootsAxis
}

func (x MuddyMangroveRoots) Id() uint16 {
	switch x.Axis {
	case MuddyMangroveRootsAxisX:
		return 156
	case MuddyMangroveRootsAxisY:
		return 157
	case MuddyMangroveRootsAxisZ:
		return 158
	}
	return 157 // default state
}

type BambooBlockAxis string

const (
	BambooBlockAxisX BambooBlockAxis = "x"
	BambooBlockAxisY BambooBlockAxis = "y"
	BambooBlockAxisZ BambooBlockAxis = "z"
)

type BambooBlock struct {
	Axis BambooBlockAxis
}

func (x BambooBlock) Id() uint16 {
	switch x.Axis {
	case BambooBlockAxisX:
		return 159
	case BambooBlockAxisY:
		return 160
	case BambooBlockAxisZ:
		return 161
	}
	return 160 // default state
}

type StrippedSpruceLogAxis string

const (
	StrippedSpruceLogAxisX StrippedSpruceLogAxis = "x"
	StrippedSpruceLogAxisY StrippedSpruceLogAxis = "y"
	StrippedSpruceLogAxisZ StrippedSpruceLogAxis = "z"
)

type StrippedSpruceLog struct {
	Axis StrippedSpruceLogAxis
}

func (x StrippedSpruceLog) Id() uint16 {
	switch x.Axis {
	case StrippedSpruceLogAxisX:
		return 162
	case StrippedSpruceLogAxisY:
		return 163
	case StrippedSpruceLogAxisZ:
		return 164
	}
	return 163 // default state
}

type StrippedBirchLogAxis string

const (
	StrippedBirchLogAxisX StrippedBirchLogAxis = "x"
	StrippedBirchLogAxisY StrippedBirchLogAxis = "y"
	StrippedBirchLogAxisZ StrippedBirchLogAxis = "z"
)

type StrippedBirchLog struct {
	Axis StrippedBirchLogAxis
}

func (x StrippedBirchLog) Id() uint16 {
	switch x.Axis {
	case StrippedBirchLogAxisX:
		return 165
	case StrippedBirchLogAxisY:
		return 166
	case StrippedBirchLogAxisZ:
		return 167
	}
	return 166 // default state
}

type StrippedJungleLogAxis string

const (
	StrippedJungleLogAxisX StrippedJungleLogAxis = "x"
	StrippedJungleLogAxisY StrippedJungleLogAxis = "y"
	StrippedJungleLogAxisZ StrippedJungleLogAxis = "z"
)

type StrippedJungleLog struct {
	Axis StrippedJungleLogAxis
}

func (x StrippedJungleLog) Id() uint16 {
	switch x.Axis {
	case StrippedJungleLogAxisX:
		return 168
	case StrippedJungleLogAxisY:
		return 169
	case StrippedJungleLogAxisZ:
		return 170
	}
	return 169 // default state
}

type StrippedAcaciaLogAxis string

const (
	StrippedAcaciaLogAxisX StrippedAcaciaLogAxis = "x"
	StrippedAcaciaLogAxisY StrippedAcaciaLogAxis = "y"
	StrippedAcaciaLogAxisZ StrippedAcaciaLogAxis = "z"
)

type StrippedAcaciaLog struct {
	Axis StrippedAcaciaLogAxis
}

func (x StrippedAcaciaLog) Id() uint16 {
	switch x.Axis {
	case StrippedAcaciaLogAxisX:
		return 171
	case StrippedAcaciaLogAxisY:
		return 172
	case StrippedAcaciaLogAxisZ:
		return 173
	}
	return 172 // default state
}

type StrippedCherryLogAxis string

const (
	StrippedCherryLogAxisX StrippedCherryLogAxis = "x"
	StrippedCherryLogAxisY StrippedCherryLogAxis = "y"
	StrippedCherryLogAxisZ StrippedCherryLogAxis = "z"
)

type StrippedCherryLog struct {
	Axis StrippedCherryLogAxis
}

func (x StrippedCherryLog) Id() uint16 {
	switch x.Axis {
	case StrippedCherryLogAxisX:
		return 174
	case StrippedCherryLogAxisY:
		return 175
	case StrippedCherryLogAxisZ:
		return 176
	}
	return 175 // default state
}

type StrippedDarkOakLogAxis string

const (
	StrippedDarkOakLogAxisX StrippedDarkOakLogAxis = "x"
	StrippedDarkOakLogAxisY StrippedDarkOakLogAxis = "y"
	StrippedDarkOakLogAxisZ StrippedDarkOakLogAxis = "z"
)

type StrippedDarkOakLog struct {
	Axis StrippedDarkOakLogAxis
}

func (x StrippedDarkOakLog) Id() uint16 {
	switch x.Axis {
	case StrippedDarkOakLogAxisX:
		return 177
	case StrippedDarkOakLogAxisY:
		return 178
	case StrippedDarkOakLogAxisZ:
		return 179
	}
	return 178 // default state
}

type StrippedOakLogAxis string

const (
	StrippedOakLogAxisX StrippedOakLogAxis = "x"
	StrippedOakLogAxisY StrippedOakLogAxis = "y"
	StrippedOakLogAxisZ StrippedOakLogAxis = "z"
)

type StrippedOakLog struct {
	Axis StrippedOakLogAxis
}

func (x StrippedOakLog) Id() uint16 {
	switch x.Axis {
	case StrippedOakLogAxisX:
		return 180
	case StrippedOakLogAxisY:
		return 181
	case StrippedOakLogAxisZ:
		return 182
	}
	return 181 // default state
}

type StrippedMangroveLogAxis string

const (
	StrippedMangroveLogAxisX StrippedMangroveLogAxis = "x"
	StrippedMangroveLogAxisY StrippedMangroveLogAxis = "y"
	StrippedMangroveLogAxisZ StrippedMangroveLogAxis = "z"
)

type StrippedMangroveLog struct {
	Axis StrippedMangroveLogAxis
}

func (x StrippedMangroveLog) Id() uint16 {
	switch x.Axis {
	case StrippedMangroveLogAxisX:
		return 183
	case StrippedMangroveLogAxisY:
		return 184
	case StrippedMangroveLogAxisZ:
		return 185
	}
	return 184 // default state
}

type StrippedBambooBlockAxis string

const (
	StrippedBambooBlockAxisX StrippedBambooBlockAxis = "x"
	StrippedBambooBlockAxisY StrippedBambooBlockAxis = "y"
	StrippedBambooBlockAxisZ StrippedBambooBlockAxis = "z"
)

type StrippedBambooBlock struct {
	Axis StrippedBambooBlockAxis
}

func (x StrippedBambooBlock) Id() uint16 {
	switch x.Axis {
	case StrippedBambooBlockAxisX:
		return 186
	case StrippedBambooBlockAxisY:
		return 187
	case StrippedBambooBlockAxisZ:
		return 188
	}
	return 187 // default state
}

type OakWoodAxis string

const (
	OakWoodAxisX OakWoodAxis = "x"
	OakWoodAxisY OakWoodAxis = "y"
	OakWoodAxisZ OakWoodAxis = "z"
)

type OakWood struct {
	Axis OakWoodAxis
}

func (x OakWood) Id() uint16 {
	switch x.Axis {
	case OakWoodAxisX:
		return 189
	case OakWoodAxisY:
		return 190
	case OakWoodAxisZ:
		return 191
	}
	return 190 // default state
}

type SpruceWoodAxis string

const (
	SpruceWoodAxisX SpruceWoodAxis = "x"
	SpruceWoodAxisY SpruceWoodAxis = "y"
	SpruceWoodAxisZ SpruceWoodAxis = "z"
)

type SpruceWood struct {
	Axis SpruceWoodAxis
}

func (x SpruceWood) Id() uint16 {
	switch x.Axis {
	case SpruceWoodAxisX:
		return 192
	case SpruceWoodAxisY:
		return 193
	case SpruceWoodAxisZ:
		return 194
	}
	return 193 // default state
}

type BirchWoodAxis string

const (
	BirchWoodAxisX BirchWoodAxis = "x"
	BirchWoodAxisY BirchWoodAxis = "y"
	BirchWoodAxisZ BirchWoodAxis = "z"
)

type BirchWood struct {
	Axis BirchWoodAxis
}

func (x BirchWood) Id() uint16 {
	switch x.Axis {
	case BirchWoodAxisX:
		return 195
	case BirchWoodAxisY:
		return 196
	case BirchWoodAxisZ:
		return 197
	}
	return 196 // default state
}

type JungleWoodAxis string

const (
	JungleWoodAxisX JungleWoodAxis = "x"
	JungleWoodAxisY JungleWoodAxis = "y"
	JungleWoodAxisZ JungleWoodAxis = "z"
)

type JungleWood struct {
	Axis JungleWoodAxis
}

func (x JungleWood) Id() uint16 {
	switch x.Axis {
	case JungleWoodAxisX:
		return 198
	case JungleWoodAxisY:
		return 199
	case JungleWoodAxisZ:
		return 200
	}
	return 199 // default state
}

type AcaciaWoodAxis string

const (
	AcaciaWoodAxisX AcaciaWoodAxis = "x"
	AcaciaWoodAxisY AcaciaWoodAxis = "y"
	AcaciaWoodAxisZ AcaciaWoodAxis = "z"
)

type AcaciaWood struct {
	Axis AcaciaWoodAxis
}

func (x AcaciaWood) Id() uint16 {
	switch x.Axis {
	case AcaciaWoodAxisX:
		return 201
	case AcaciaWoodAxisY:
		return 202
	case AcaciaWoodAxisZ:
		return 203
	}
	return 202 // default state
}

type CherryWoodAxis string

const (
	CherryWoodAxisX CherryWoodAxis = "x"
	CherryWoodAxisY CherryWoodAxis = "y"
	CherryWoodAxisZ CherryWoodAxis = "z"
)

type CherryWood struct {
	Axis CherryWoodAxis
}

func (x CherryWood) Id() uint16 {
	switch x.Axis {
	case CherryWoodAxisX:
		return 204
	case CherryWoodAxisY:
		return 205
	case CherryWoodAxisZ:
		return 206
	}
	return 205 // default state
}

type DarkOakWoodAxis string

const (
	DarkOakWoodAxisX DarkOakWoodAxis = "x"
	DarkOakWoodAxisY DarkOakWoodAxis = "y"
	DarkOakWoodAxisZ DarkOakWoodAxis = "z"
)

type DarkOakWood struct {
	Axis DarkOakWoodAxis
}

func (x DarkOakWood) Id() uint16 {
	switch x.Axis {
	case DarkOakWoodAxisX:
		return 207
	case DarkOakWoodAxisY:
		return 208
	case DarkOakWoodAxisZ:
		return 209
	}
	return 208 // default state
}

type MangroveWoodAxis string

const (
	MangroveWoodAxisX MangroveWoodAxis = "x"
	MangroveWoodAxisY MangroveWoodAxis = "y"
	MangroveWoodAxisZ MangroveWoodAxis = "z"
)

type MangroveWood struct {
	Axis MangroveWoodAxis
}

func (x MangroveWood) Id() uint16 {
	switch x.Axis {
	case MangroveWoodAxisX:
		return 210
	case MangroveWoodAxisY:
		return 211
	case MangroveWoodAxisZ:
		return 212
	}
	return 211 // default state
}

type StrippedOakWoodAxis string

const (
	StrippedOakWoodAxisX StrippedOakWoodAxis = "x"
	StrippedOakWoodAxisY StrippedOakWoodAxis = "y"
	StrippedOakWoodAxisZ StrippedOakWoodAxis = "z"
)

type StrippedOakWood struct {
	Axis StrippedOakWoodAxis
}

func (x StrippedOakWood) Id() uint16 {
	switch x.Axis {
	case StrippedOakWoodAxisX:
		return 213
	case StrippedOakWoodAxisY:
		return 214
	case StrippedOakWoodAxisZ:
		return 215
	}
	return 214 // default state
}

type StrippedSpruceWoodAxis string

const (
	StrippedSpruceWoodAxisX StrippedSpruceWoodAxis = "x"
	StrippedSpruceWoodAxisY StrippedSpruceWoodAxis = "y"
	StrippedSpruceWoodAxisZ StrippedSpruceWoodAxis = "z"
)

type StrippedSpruceWood struct {
	Axis StrippedSpruceWoodAxis
}

func (x StrippedSpruceWood) Id() uint16 {
	switch x.Axis {
	case StrippedSpruceWoodAxisX:
		return 216
	case StrippedSpruceWoodAxisY:
		return 217
	case StrippedSpruceWoodAxisZ:
		return 218
	}
	return 217 // default state
}

type StrippedBirchWoodAxis string

const (
	StrippedBirchWoodAxisX StrippedBirchWoodAxis = "x"
	StrippedBirchWoodAxisY StrippedBirchWoodAxis = "y"
	StrippedBirchWoodAxisZ StrippedBirchWoodAxis = "z"
)

type StrippedBirchWood struct {
	Axis StrippedBirchWoodAxis
}

func (x StrippedBirchWood) Id() uint16 {
	switch x.Axis {
	case StrippedBirchWoodAxisX:
		return 219
	case StrippedBirchWoodAxisY:
		return 220
	case StrippedBirchWoodAxisZ:
		return 221
	}
	return 220 // default state
}

type StrippedJungleWoodAxis string

const (
	StrippedJungleWoodAxisX StrippedJungleWoodAxis = "x"
	StrippedJungleWoodAxisY StrippedJungleWoodAxis = "y"
	StrippedJungleWoodAxisZ StrippedJungleWoodAxis = "z"
)

type StrippedJungleWood struct {
	Axis StrippedJungleWoodAxis
}

func (x StrippedJungleWood) Id() uint16 {
	switch x.Axis {
	case StrippedJungleWoodAxisX:
		return 222
	case StrippedJungleWoodAxisY:
		return 223
	case StrippedJungleWoodAxisZ:
		return 224
	}
	return 223 // default state
}

type StrippedAcaciaWoodAxis string

const (
	StrippedAcaciaWoodAxisX StrippedAcaciaWoodAxis = "x"
	StrippedAcaciaWoodAxisY StrippedAcaciaWoodAxis = "y"
	StrippedAcaciaWoodAxisZ StrippedAcaciaWoodAxis = "z"
)

type StrippedAcaciaWood struct {
	Axis StrippedAcaciaWoodAxis
}

func (x StrippedAcaciaWood) Id() uint16 {
	switch x.Axis {
	case StrippedAcaciaWoodAxisX:
		return 225
	case StrippedAcaciaWoodAxisY:
		return 226
	case StrippedAcaciaWoodAxisZ:
		return 227
	}
	return 226 // default state
}

type StrippedCherryWoodAxis string

const (
	StrippedCherryWoodAxisX StrippedCherryWoodAxis = "x"
	StrippedCherryWoodAxisY StrippedCherryWoodAxis = "y"
	StrippedCherryWoodAxisZ StrippedCherryWoodAxis = "z"
)

type StrippedCherryWood struct {
	Axis StrippedCherryWoodAxis
}

func (x StrippedCherryWood) Id() uint16 {
	switch x.Axis {
	case StrippedCherryWoodAxisX:
		return 228
	case StrippedCherryWoodAxisY:
		return 229
	case StrippedCherryWoodAxisZ:
		return 230
	}
	return 229 // default state
}

type StrippedDarkOakWoodAxis string

const (
	StrippedDarkOakWoodAxisX StrippedDarkOakWoodAxis = "x"
	StrippedDarkOakWoodAxisY StrippedDarkOakWoodAxis = "y"
	StrippedDarkOakWoodAxisZ StrippedDarkOakWoodAxis = "z"
)

type StrippedDarkOakWood struct {
	Axis StrippedDarkOakWoodAxis
}

func (x StrippedDarkOakWood) Id() uint16 {
	switch x.Axis {
	case StrippedDarkOakWoodAxisX:
		return 231
	case StrippedDarkOakWoodAxisY:
		return 232
	case StrippedDarkOakWoodAxisZ:
		return 233
	}
	return 232 // default state
}

type StrippedMangroveWoodAxis string

const (
	StrippedMangroveWoodAxisX StrippedMangroveWoodAxis = "x"
	StrippedMangroveWoodAxisY StrippedMangroveWoodAxis = "y"
	StrippedMangroveWoodAxisZ StrippedMangroveWoodAxis = "z"
)

type StrippedMangroveWood struct {
	Axis StrippedMangroveWoodAxis
}

func (x StrippedMangroveWood) Id() uint16 {
	switch x.Axis {
	case StrippedMangroveWoodAxisX:
		return 234
	case StrippedMangroveWoodAxisY:
		return 235
	case StrippedMangroveWoodAxisZ:
		return 236
	}
	return 235 // default state
}

type OakLeaves struct {
	Persistent  bool
	Waterlogged bool
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance int
}

func (x OakLeaves) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Distance {
		case 1:
			switch x.Persistent {
			case true:
				return 237
			case false:
				return 239
			}
		case 2:
			switch x.Persistent {
			case true:
				return 241
			case false:
				return 243
			}
		case 3:
			switch x.Persistent {
			case true:
				return 245
			case false:
				return 247
			}
		case 4:
			switch x.Persistent {
			case true:
				return 249
			case false:
				return 251
			}
		case 5:
			switch x.Persistent {
			case true:
				return 253
			case false:
				return 255
			}
		case 6:
			switch x.Persistent {
			case true:
				return 257
			case false:
				return 259
			}
		case 7:
			switch x.Persistent {
			case true:
				return 261
			case false:
				return 263
			}
		}
	case false:
		switch x.Distance {
		case 1:
			switch x.Persistent {
			case true:
				return 238
			case false:
				return 240
			}
		case 2:
			switch x.Persistent {
			case true:
				return 242
			case false:
				return 244
			}
		case 3:
			switch x.Persistent {
			case true:
				return 246
			case false:
				return 248
			}
		case 4:
			switch x.Persistent {
			case true:
				return 250
			case false:
				return 252
			}
		case 5:
			switch x.Persistent {
			case true:
				return 254
			case false:
				return 256
			}
		case 6:
			switch x.Persistent {
			case true:
				return 258
			case false:
				return 260
			}
		case 7:
			switch x.Persistent {
			case true:
				return 262
			case false:
				return 264
			}
		}
	}
	return 264 // default state
}

type SpruceLeaves struct {
	Waterlogged bool
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance   int
	Persistent bool
}

func (x SpruceLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 265
			case false:
				return 266
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 267
			case false:
				return 268
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 269
			case false:
				return 270
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 271
			case false:
				return 272
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 273
			case false:
				return 274
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 275
			case false:
				return 276
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 277
			case false:
				return 278
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 279
			case false:
				return 280
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 281
			case false:
				return 282
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 283
			case false:
				return 284
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 285
			case false:
				return 286
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 287
			case false:
				return 288
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 289
			case false:
				return 290
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 291
			case false:
				return 292
			}
		}
	}
	return 292 // default state
}

type BirchLeaves struct {
	Waterlogged bool
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance   int
	Persistent bool
}

func (x BirchLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 293
			case false:
				return 294
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 295
			case false:
				return 296
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 297
			case false:
				return 298
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 299
			case false:
				return 300
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 301
			case false:
				return 302
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 303
			case false:
				return 304
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 305
			case false:
				return 306
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 307
			case false:
				return 308
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 309
			case false:
				return 310
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 311
			case false:
				return 312
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 313
			case false:
				return 314
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 315
			case false:
				return 316
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 317
			case false:
				return 318
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 319
			case false:
				return 320
			}
		}
	}
	return 320 // default state
}

type JungleLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x JungleLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 321
			case false:
				return 322
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 323
			case false:
				return 324
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 325
			case false:
				return 326
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 327
			case false:
				return 328
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 329
			case false:
				return 330
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 331
			case false:
				return 332
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 333
			case false:
				return 334
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 335
			case false:
				return 336
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 337
			case false:
				return 338
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 339
			case false:
				return 340
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 341
			case false:
				return 342
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 343
			case false:
				return 344
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 345
			case false:
				return 346
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 347
			case false:
				return 348
			}
		}
	}
	return 348 // default state
}

type AcaciaLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x AcaciaLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 349
			case false:
				return 350
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 351
			case false:
				return 352
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 353
			case false:
				return 354
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 355
			case false:
				return 356
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 357
			case false:
				return 358
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 359
			case false:
				return 360
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 361
			case false:
				return 362
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 363
			case false:
				return 364
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 365
			case false:
				return 366
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 367
			case false:
				return 368
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 369
			case false:
				return 370
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 371
			case false:
				return 372
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 373
			case false:
				return 374
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 375
			case false:
				return 376
			}
		}
	}
	return 376 // default state
}

type CherryLeaves struct {
	Waterlogged bool
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance   int
	Persistent bool
}

func (x CherryLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 377
			case false:
				return 378
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 379
			case false:
				return 380
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 381
			case false:
				return 382
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 383
			case false:
				return 384
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 385
			case false:
				return 386
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 387
			case false:
				return 388
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 389
			case false:
				return 390
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 391
			case false:
				return 392
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 393
			case false:
				return 394
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 395
			case false:
				return 396
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 397
			case false:
				return 398
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 399
			case false:
				return 400
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 401
			case false:
				return 402
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 403
			case false:
				return 404
			}
		}
	}
	return 404 // default state
}

type DarkOakLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x DarkOakLeaves) Id() uint16 {
	switch x.Persistent {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Distance {
			case 1:
				return 405
			case 2:
				return 409
			case 3:
				return 413
			case 4:
				return 417
			case 5:
				return 421
			case 6:
				return 425
			case 7:
				return 429
			}
		case false:
			switch x.Distance {
			case 1:
				return 406
			case 2:
				return 410
			case 3:
				return 414
			case 4:
				return 418
			case 5:
				return 422
			case 6:
				return 426
			case 7:
				return 430
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Distance {
			case 1:
				return 407
			case 2:
				return 411
			case 3:
				return 415
			case 4:
				return 419
			case 5:
				return 423
			case 6:
				return 427
			case 7:
				return 431
			}
		case false:
			switch x.Distance {
			case 1:
				return 408
			case 2:
				return 412
			case 3:
				return 416
			case 4:
				return 420
			case 5:
				return 424
			case 6:
				return 428
			case 7:
				return 432
			}
		}
	}
	return 432 // default state
}

type MangroveLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x MangroveLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 433
			case false:
				return 434
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 435
			case false:
				return 436
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 437
			case false:
				return 438
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 439
			case false:
				return 440
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 441
			case false:
				return 442
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 443
			case false:
				return 444
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 445
			case false:
				return 446
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 447
			case false:
				return 448
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 449
			case false:
				return 450
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 451
			case false:
				return 452
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 453
			case false:
				return 454
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 455
			case false:
				return 456
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 457
			case false:
				return 458
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 459
			case false:
				return 460
			}
		}
	}
	return 460 // default state
}

type AzaleaLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x AzaleaLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 461
			case false:
				return 462
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 463
			case false:
				return 464
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 465
			case false:
				return 466
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 467
			case false:
				return 468
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 469
			case false:
				return 470
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 471
			case false:
				return 472
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 473
			case false:
				return 474
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 475
			case false:
				return 476
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 477
			case false:
				return 478
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 479
			case false:
				return 480
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 481
			case false:
				return 482
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 483
			case false:
				return 484
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 485
			case false:
				return 486
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 487
			case false:
				return 488
			}
		}
	}
	return 488 // default state
}

type FloweringAzaleaLeaves struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Persistent  bool
	Waterlogged bool
}

func (x FloweringAzaleaLeaves) Id() uint16 {
	switch x.Distance {
	case 1:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 489
			case false:
				return 490
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 491
			case false:
				return 492
			}
		}
	case 2:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 493
			case false:
				return 494
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 495
			case false:
				return 496
			}
		}
	case 3:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 497
			case false:
				return 498
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 499
			case false:
				return 500
			}
		}
	case 4:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 501
			case false:
				return 502
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 503
			case false:
				return 504
			}
		}
	case 5:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 505
			case false:
				return 506
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 507
			case false:
				return 508
			}
		}
	case 6:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 509
			case false:
				return 510
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 511
			case false:
				return 512
			}
		}
	case 7:
		switch x.Persistent {
		case true:
			switch x.Waterlogged {
			case true:
				return 513
			case false:
				return 514
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 515
			case false:
				return 516
			}
		}
	}
	return 516 // default state
}

type Sponge struct{}

func (x Sponge) Id() uint16 {
	return 517
}

type WetSponge struct{}

func (x WetSponge) Id() uint16 {
	return 518
}

type Glass struct{}

func (x Glass) Id() uint16 {
	return 519
}

type LapisOre struct{}

func (x LapisOre) Id() uint16 {
	return 520
}

type DeepslateLapisOre struct{}

func (x DeepslateLapisOre) Id() uint16 {
	return 521
}

type LapisBlock struct{}

func (x LapisBlock) Id() uint16 {
	return 522
}

type DispenserFacing string

const (
	DispenserFacingNorth DispenserFacing = "north"
	DispenserFacingEast  DispenserFacing = "east"
	DispenserFacingSouth DispenserFacing = "south"
	DispenserFacingWest  DispenserFacing = "west"
	DispenserFacingUp    DispenserFacing = "up"
	DispenserFacingDown  DispenserFacing = "down"
)

type Dispenser struct {
	Facing    DispenserFacing
	Triggered bool
}

func (x Dispenser) Id() uint16 {
	switch x.Facing {
	case DispenserFacingNorth:
		switch x.Triggered {
		case true:
			return 523
		case false:
			return 524
		}
	case DispenserFacingEast:
		switch x.Triggered {
		case true:
			return 525
		case false:
			return 526
		}
	case DispenserFacingSouth:
		switch x.Triggered {
		case true:
			return 527
		case false:
			return 528
		}
	case DispenserFacingWest:
		switch x.Triggered {
		case true:
			return 529
		case false:
			return 530
		}
	case DispenserFacingUp:
		switch x.Triggered {
		case true:
			return 531
		case false:
			return 532
		}
	case DispenserFacingDown:
		switch x.Triggered {
		case true:
			return 533
		case false:
			return 534
		}
	}
	return 524 // default state
}

type Sandstone struct{}

func (x Sandstone) Id() uint16 {
	return 535
}

type ChiseledSandstone struct{}

func (x ChiseledSandstone) Id() uint16 {
	return 536
}

type CutSandstone struct{}

func (x CutSandstone) Id() uint16 {
	return 537
}

type NoteBlockInstrument string

const (
	NoteBlockInstrumentHarp           NoteBlockInstrument = "harp"
	NoteBlockInstrumentBasedrum       NoteBlockInstrument = "basedrum"
	NoteBlockInstrumentSnare          NoteBlockInstrument = "snare"
	NoteBlockInstrumentHat            NoteBlockInstrument = "hat"
	NoteBlockInstrumentBass           NoteBlockInstrument = "bass"
	NoteBlockInstrumentFlute          NoteBlockInstrument = "flute"
	NoteBlockInstrumentBell           NoteBlockInstrument = "bell"
	NoteBlockInstrumentGuitar         NoteBlockInstrument = "guitar"
	NoteBlockInstrumentChime          NoteBlockInstrument = "chime"
	NoteBlockInstrumentXylophone      NoteBlockInstrument = "xylophone"
	NoteBlockInstrumentIronXylophone  NoteBlockInstrument = "iron_xylophone"
	NoteBlockInstrumentCowBell        NoteBlockInstrument = "cow_bell"
	NoteBlockInstrumentDidgeridoo     NoteBlockInstrument = "didgeridoo"
	NoteBlockInstrumentBit            NoteBlockInstrument = "bit"
	NoteBlockInstrumentBanjo          NoteBlockInstrument = "banjo"
	NoteBlockInstrumentPling          NoteBlockInstrument = "pling"
	NoteBlockInstrumentZombie         NoteBlockInstrument = "zombie"
	NoteBlockInstrumentSkeleton       NoteBlockInstrument = "skeleton"
	NoteBlockInstrumentCreeper        NoteBlockInstrument = "creeper"
	NoteBlockInstrumentDragon         NoteBlockInstrument = "dragon"
	NoteBlockInstrumentWitherSkeleton NoteBlockInstrument = "wither_skeleton"
	NoteBlockInstrumentPiglin         NoteBlockInstrument = "piglin"
	NoteBlockInstrumentCustomHead     NoteBlockInstrument = "custom_head"
)

type NoteBlock struct {
	Instrument NoteBlockInstrument
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24
	Note    int
	Powered bool
}

func (x NoteBlock) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Instrument {
		case NoteBlockInstrumentHarp:
			switch x.Note {
			case 0:
				return 538
			case 1:
				return 540
			case 2:
				return 542
			case 3:
				return 544
			case 4:
				return 546
			case 5:
				return 548
			case 6:
				return 550
			case 7:
				return 552
			case 8:
				return 554
			case 9:
				return 556
			case 10:
				return 558
			case 11:
				return 560
			case 12:
				return 562
			case 13:
				return 564
			case 14:
				return 566
			case 15:
				return 568
			case 16:
				return 570
			case 17:
				return 572
			case 18:
				return 574
			case 19:
				return 576
			case 20:
				return 578
			case 21:
				return 580
			case 22:
				return 582
			case 23:
				return 584
			case 24:
				return 586
			}
		case NoteBlockInstrumentBasedrum:
			switch x.Note {
			case 0:
				return 588
			case 1:
				return 590
			case 2:
				return 592
			case 3:
				return 594
			case 4:
				return 596
			case 5:
				return 598
			case 6:
				return 600
			case 7:
				return 602
			case 8:
				return 604
			case 9:
				return 606
			case 10:
				return 608
			case 11:
				return 610
			case 12:
				return 612
			case 13:
				return 614
			case 14:
				return 616
			case 15:
				return 618
			case 16:
				return 620
			case 17:
				return 622
			case 18:
				return 624
			case 19:
				return 626
			case 20:
				return 628
			case 21:
				return 630
			case 22:
				return 632
			case 23:
				return 634
			case 24:
				return 636
			}
		case NoteBlockInstrumentSnare:
			switch x.Note {
			case 0:
				return 638
			case 1:
				return 640
			case 2:
				return 642
			case 3:
				return 644
			case 4:
				return 646
			case 5:
				return 648
			case 6:
				return 650
			case 7:
				return 652
			case 8:
				return 654
			case 9:
				return 656
			case 10:
				return 658
			case 11:
				return 660
			case 12:
				return 662
			case 13:
				return 664
			case 14:
				return 666
			case 15:
				return 668
			case 16:
				return 670
			case 17:
				return 672
			case 18:
				return 674
			case 19:
				return 676
			case 20:
				return 678
			case 21:
				return 680
			case 22:
				return 682
			case 23:
				return 684
			case 24:
				return 686
			}
		case NoteBlockInstrumentHat:
			switch x.Note {
			case 0:
				return 688
			case 1:
				return 690
			case 2:
				return 692
			case 3:
				return 694
			case 4:
				return 696
			case 5:
				return 698
			case 6:
				return 700
			case 7:
				return 702
			case 8:
				return 704
			case 9:
				return 706
			case 10:
				return 708
			case 11:
				return 710
			case 12:
				return 712
			case 13:
				return 714
			case 14:
				return 716
			case 15:
				return 718
			case 16:
				return 720
			case 17:
				return 722
			case 18:
				return 724
			case 19:
				return 726
			case 20:
				return 728
			case 21:
				return 730
			case 22:
				return 732
			case 23:
				return 734
			case 24:
				return 736
			}
		case NoteBlockInstrumentBass:
			switch x.Note {
			case 0:
				return 738
			case 1:
				return 740
			case 2:
				return 742
			case 3:
				return 744
			case 4:
				return 746
			case 5:
				return 748
			case 6:
				return 750
			case 7:
				return 752
			case 8:
				return 754
			case 9:
				return 756
			case 10:
				return 758
			case 11:
				return 760
			case 12:
				return 762
			case 13:
				return 764
			case 14:
				return 766
			case 15:
				return 768
			case 16:
				return 770
			case 17:
				return 772
			case 18:
				return 774
			case 19:
				return 776
			case 20:
				return 778
			case 21:
				return 780
			case 22:
				return 782
			case 23:
				return 784
			case 24:
				return 786
			}
		case NoteBlockInstrumentFlute:
			switch x.Note {
			case 0:
				return 788
			case 1:
				return 790
			case 2:
				return 792
			case 3:
				return 794
			case 4:
				return 796
			case 5:
				return 798
			case 6:
				return 800
			case 7:
				return 802
			case 8:
				return 804
			case 9:
				return 806
			case 10:
				return 808
			case 11:
				return 810
			case 12:
				return 812
			case 13:
				return 814
			case 14:
				return 816
			case 15:
				return 818
			case 16:
				return 820
			case 17:
				return 822
			case 18:
				return 824
			case 19:
				return 826
			case 20:
				return 828
			case 21:
				return 830
			case 22:
				return 832
			case 23:
				return 834
			case 24:
				return 836
			}
		case NoteBlockInstrumentBell:
			switch x.Note {
			case 0:
				return 838
			case 1:
				return 840
			case 2:
				return 842
			case 3:
				return 844
			case 4:
				return 846
			case 5:
				return 848
			case 6:
				return 850
			case 7:
				return 852
			case 8:
				return 854
			case 9:
				return 856
			case 10:
				return 858
			case 11:
				return 860
			case 12:
				return 862
			case 13:
				return 864
			case 14:
				return 866
			case 15:
				return 868
			case 16:
				return 870
			case 17:
				return 872
			case 18:
				return 874
			case 19:
				return 876
			case 20:
				return 878
			case 21:
				return 880
			case 22:
				return 882
			case 23:
				return 884
			case 24:
				return 886
			}
		case NoteBlockInstrumentGuitar:
			switch x.Note {
			case 0:
				return 888
			case 1:
				return 890
			case 2:
				return 892
			case 3:
				return 894
			case 4:
				return 896
			case 5:
				return 898
			case 6:
				return 900
			case 7:
				return 902
			case 8:
				return 904
			case 9:
				return 906
			case 10:
				return 908
			case 11:
				return 910
			case 12:
				return 912
			case 13:
				return 914
			case 14:
				return 916
			case 15:
				return 918
			case 16:
				return 920
			case 17:
				return 922
			case 18:
				return 924
			case 19:
				return 926
			case 20:
				return 928
			case 21:
				return 930
			case 22:
				return 932
			case 23:
				return 934
			case 24:
				return 936
			}
		case NoteBlockInstrumentChime:
			switch x.Note {
			case 0:
				return 938
			case 1:
				return 940
			case 2:
				return 942
			case 3:
				return 944
			case 4:
				return 946
			case 5:
				return 948
			case 6:
				return 950
			case 7:
				return 952
			case 8:
				return 954
			case 9:
				return 956
			case 10:
				return 958
			case 11:
				return 960
			case 12:
				return 962
			case 13:
				return 964
			case 14:
				return 966
			case 15:
				return 968
			case 16:
				return 970
			case 17:
				return 972
			case 18:
				return 974
			case 19:
				return 976
			case 20:
				return 978
			case 21:
				return 980
			case 22:
				return 982
			case 23:
				return 984
			case 24:
				return 986
			}
		case NoteBlockInstrumentXylophone:
			switch x.Note {
			case 0:
				return 988
			case 1:
				return 990
			case 2:
				return 992
			case 3:
				return 994
			case 4:
				return 996
			case 5:
				return 998
			case 6:
				return 1000
			case 7:
				return 1002
			case 8:
				return 1004
			case 9:
				return 1006
			case 10:
				return 1008
			case 11:
				return 1010
			case 12:
				return 1012
			case 13:
				return 1014
			case 14:
				return 1016
			case 15:
				return 1018
			case 16:
				return 1020
			case 17:
				return 1022
			case 18:
				return 1024
			case 19:
				return 1026
			case 20:
				return 1028
			case 21:
				return 1030
			case 22:
				return 1032
			case 23:
				return 1034
			case 24:
				return 1036
			}
		case NoteBlockInstrumentIronXylophone:
			switch x.Note {
			case 0:
				return 1038
			case 1:
				return 1040
			case 2:
				return 1042
			case 3:
				return 1044
			case 4:
				return 1046
			case 5:
				return 1048
			case 6:
				return 1050
			case 7:
				return 1052
			case 8:
				return 1054
			case 9:
				return 1056
			case 10:
				return 1058
			case 11:
				return 1060
			case 12:
				return 1062
			case 13:
				return 1064
			case 14:
				return 1066
			case 15:
				return 1068
			case 16:
				return 1070
			case 17:
				return 1072
			case 18:
				return 1074
			case 19:
				return 1076
			case 20:
				return 1078
			case 21:
				return 1080
			case 22:
				return 1082
			case 23:
				return 1084
			case 24:
				return 1086
			}
		case NoteBlockInstrumentCowBell:
			switch x.Note {
			case 0:
				return 1088
			case 1:
				return 1090
			case 2:
				return 1092
			case 3:
				return 1094
			case 4:
				return 1096
			case 5:
				return 1098
			case 6:
				return 1100
			case 7:
				return 1102
			case 8:
				return 1104
			case 9:
				return 1106
			case 10:
				return 1108
			case 11:
				return 1110
			case 12:
				return 1112
			case 13:
				return 1114
			case 14:
				return 1116
			case 15:
				return 1118
			case 16:
				return 1120
			case 17:
				return 1122
			case 18:
				return 1124
			case 19:
				return 1126
			case 20:
				return 1128
			case 21:
				return 1130
			case 22:
				return 1132
			case 23:
				return 1134
			case 24:
				return 1136
			}
		case NoteBlockInstrumentDidgeridoo:
			switch x.Note {
			case 0:
				return 1138
			case 1:
				return 1140
			case 2:
				return 1142
			case 3:
				return 1144
			case 4:
				return 1146
			case 5:
				return 1148
			case 6:
				return 1150
			case 7:
				return 1152
			case 8:
				return 1154
			case 9:
				return 1156
			case 10:
				return 1158
			case 11:
				return 1160
			case 12:
				return 1162
			case 13:
				return 1164
			case 14:
				return 1166
			case 15:
				return 1168
			case 16:
				return 1170
			case 17:
				return 1172
			case 18:
				return 1174
			case 19:
				return 1176
			case 20:
				return 1178
			case 21:
				return 1180
			case 22:
				return 1182
			case 23:
				return 1184
			case 24:
				return 1186
			}
		case NoteBlockInstrumentBit:
			switch x.Note {
			case 0:
				return 1188
			case 1:
				return 1190
			case 2:
				return 1192
			case 3:
				return 1194
			case 4:
				return 1196
			case 5:
				return 1198
			case 6:
				return 1200
			case 7:
				return 1202
			case 8:
				return 1204
			case 9:
				return 1206
			case 10:
				return 1208
			case 11:
				return 1210
			case 12:
				return 1212
			case 13:
				return 1214
			case 14:
				return 1216
			case 15:
				return 1218
			case 16:
				return 1220
			case 17:
				return 1222
			case 18:
				return 1224
			case 19:
				return 1226
			case 20:
				return 1228
			case 21:
				return 1230
			case 22:
				return 1232
			case 23:
				return 1234
			case 24:
				return 1236
			}
		case NoteBlockInstrumentBanjo:
			switch x.Note {
			case 0:
				return 1238
			case 1:
				return 1240
			case 2:
				return 1242
			case 3:
				return 1244
			case 4:
				return 1246
			case 5:
				return 1248
			case 6:
				return 1250
			case 7:
				return 1252
			case 8:
				return 1254
			case 9:
				return 1256
			case 10:
				return 1258
			case 11:
				return 1260
			case 12:
				return 1262
			case 13:
				return 1264
			case 14:
				return 1266
			case 15:
				return 1268
			case 16:
				return 1270
			case 17:
				return 1272
			case 18:
				return 1274
			case 19:
				return 1276
			case 20:
				return 1278
			case 21:
				return 1280
			case 22:
				return 1282
			case 23:
				return 1284
			case 24:
				return 1286
			}
		case NoteBlockInstrumentPling:
			switch x.Note {
			case 0:
				return 1288
			case 1:
				return 1290
			case 2:
				return 1292
			case 3:
				return 1294
			case 4:
				return 1296
			case 5:
				return 1298
			case 6:
				return 1300
			case 7:
				return 1302
			case 8:
				return 1304
			case 9:
				return 1306
			case 10:
				return 1308
			case 11:
				return 1310
			case 12:
				return 1312
			case 13:
				return 1314
			case 14:
				return 1316
			case 15:
				return 1318
			case 16:
				return 1320
			case 17:
				return 1322
			case 18:
				return 1324
			case 19:
				return 1326
			case 20:
				return 1328
			case 21:
				return 1330
			case 22:
				return 1332
			case 23:
				return 1334
			case 24:
				return 1336
			}
		case NoteBlockInstrumentZombie:
			switch x.Note {
			case 0:
				return 1338
			case 1:
				return 1340
			case 2:
				return 1342
			case 3:
				return 1344
			case 4:
				return 1346
			case 5:
				return 1348
			case 6:
				return 1350
			case 7:
				return 1352
			case 8:
				return 1354
			case 9:
				return 1356
			case 10:
				return 1358
			case 11:
				return 1360
			case 12:
				return 1362
			case 13:
				return 1364
			case 14:
				return 1366
			case 15:
				return 1368
			case 16:
				return 1370
			case 17:
				return 1372
			case 18:
				return 1374
			case 19:
				return 1376
			case 20:
				return 1378
			case 21:
				return 1380
			case 22:
				return 1382
			case 23:
				return 1384
			case 24:
				return 1386
			}
		case NoteBlockInstrumentSkeleton:
			switch x.Note {
			case 0:
				return 1388
			case 1:
				return 1390
			case 2:
				return 1392
			case 3:
				return 1394
			case 4:
				return 1396
			case 5:
				return 1398
			case 6:
				return 1400
			case 7:
				return 1402
			case 8:
				return 1404
			case 9:
				return 1406
			case 10:
				return 1408
			case 11:
				return 1410
			case 12:
				return 1412
			case 13:
				return 1414
			case 14:
				return 1416
			case 15:
				return 1418
			case 16:
				return 1420
			case 17:
				return 1422
			case 18:
				return 1424
			case 19:
				return 1426
			case 20:
				return 1428
			case 21:
				return 1430
			case 22:
				return 1432
			case 23:
				return 1434
			case 24:
				return 1436
			}
		case NoteBlockInstrumentCreeper:
			switch x.Note {
			case 0:
				return 1438
			case 1:
				return 1440
			case 2:
				return 1442
			case 3:
				return 1444
			case 4:
				return 1446
			case 5:
				return 1448
			case 6:
				return 1450
			case 7:
				return 1452
			case 8:
				return 1454
			case 9:
				return 1456
			case 10:
				return 1458
			case 11:
				return 1460
			case 12:
				return 1462
			case 13:
				return 1464
			case 14:
				return 1466
			case 15:
				return 1468
			case 16:
				return 1470
			case 17:
				return 1472
			case 18:
				return 1474
			case 19:
				return 1476
			case 20:
				return 1478
			case 21:
				return 1480
			case 22:
				return 1482
			case 23:
				return 1484
			case 24:
				return 1486
			}
		case NoteBlockInstrumentDragon:
			switch x.Note {
			case 0:
				return 1488
			case 1:
				return 1490
			case 2:
				return 1492
			case 3:
				return 1494
			case 4:
				return 1496
			case 5:
				return 1498
			case 6:
				return 1500
			case 7:
				return 1502
			case 8:
				return 1504
			case 9:
				return 1506
			case 10:
				return 1508
			case 11:
				return 1510
			case 12:
				return 1512
			case 13:
				return 1514
			case 14:
				return 1516
			case 15:
				return 1518
			case 16:
				return 1520
			case 17:
				return 1522
			case 18:
				return 1524
			case 19:
				return 1526
			case 20:
				return 1528
			case 21:
				return 1530
			case 22:
				return 1532
			case 23:
				return 1534
			case 24:
				return 1536
			}
		case NoteBlockInstrumentWitherSkeleton:
			switch x.Note {
			case 0:
				return 1538
			case 1:
				return 1540
			case 2:
				return 1542
			case 3:
				return 1544
			case 4:
				return 1546
			case 5:
				return 1548
			case 6:
				return 1550
			case 7:
				return 1552
			case 8:
				return 1554
			case 9:
				return 1556
			case 10:
				return 1558
			case 11:
				return 1560
			case 12:
				return 1562
			case 13:
				return 1564
			case 14:
				return 1566
			case 15:
				return 1568
			case 16:
				return 1570
			case 17:
				return 1572
			case 18:
				return 1574
			case 19:
				return 1576
			case 20:
				return 1578
			case 21:
				return 1580
			case 22:
				return 1582
			case 23:
				return 1584
			case 24:
				return 1586
			}
		case NoteBlockInstrumentPiglin:
			switch x.Note {
			case 0:
				return 1588
			case 1:
				return 1590
			case 2:
				return 1592
			case 3:
				return 1594
			case 4:
				return 1596
			case 5:
				return 1598
			case 6:
				return 1600
			case 7:
				return 1602
			case 8:
				return 1604
			case 9:
				return 1606
			case 10:
				return 1608
			case 11:
				return 1610
			case 12:
				return 1612
			case 13:
				return 1614
			case 14:
				return 1616
			case 15:
				return 1618
			case 16:
				return 1620
			case 17:
				return 1622
			case 18:
				return 1624
			case 19:
				return 1626
			case 20:
				return 1628
			case 21:
				return 1630
			case 22:
				return 1632
			case 23:
				return 1634
			case 24:
				return 1636
			}
		case NoteBlockInstrumentCustomHead:
			switch x.Note {
			case 0:
				return 1638
			case 1:
				return 1640
			case 2:
				return 1642
			case 3:
				return 1644
			case 4:
				return 1646
			case 5:
				return 1648
			case 6:
				return 1650
			case 7:
				return 1652
			case 8:
				return 1654
			case 9:
				return 1656
			case 10:
				return 1658
			case 11:
				return 1660
			case 12:
				return 1662
			case 13:
				return 1664
			case 14:
				return 1666
			case 15:
				return 1668
			case 16:
				return 1670
			case 17:
				return 1672
			case 18:
				return 1674
			case 19:
				return 1676
			case 20:
				return 1678
			case 21:
				return 1680
			case 22:
				return 1682
			case 23:
				return 1684
			case 24:
				return 1686
			}
		}
	case false:
		switch x.Instrument {
		case NoteBlockInstrumentHarp:
			switch x.Note {
			case 0:
				return 539
			case 1:
				return 541
			case 2:
				return 543
			case 3:
				return 545
			case 4:
				return 547
			case 5:
				return 549
			case 6:
				return 551
			case 7:
				return 553
			case 8:
				return 555
			case 9:
				return 557
			case 10:
				return 559
			case 11:
				return 561
			case 12:
				return 563
			case 13:
				return 565
			case 14:
				return 567
			case 15:
				return 569
			case 16:
				return 571
			case 17:
				return 573
			case 18:
				return 575
			case 19:
				return 577
			case 20:
				return 579
			case 21:
				return 581
			case 22:
				return 583
			case 23:
				return 585
			case 24:
				return 587
			}
		case NoteBlockInstrumentBasedrum:
			switch x.Note {
			case 0:
				return 589
			case 1:
				return 591
			case 2:
				return 593
			case 3:
				return 595
			case 4:
				return 597
			case 5:
				return 599
			case 6:
				return 601
			case 7:
				return 603
			case 8:
				return 605
			case 9:
				return 607
			case 10:
				return 609
			case 11:
				return 611
			case 12:
				return 613
			case 13:
				return 615
			case 14:
				return 617
			case 15:
				return 619
			case 16:
				return 621
			case 17:
				return 623
			case 18:
				return 625
			case 19:
				return 627
			case 20:
				return 629
			case 21:
				return 631
			case 22:
				return 633
			case 23:
				return 635
			case 24:
				return 637
			}
		case NoteBlockInstrumentSnare:
			switch x.Note {
			case 0:
				return 639
			case 1:
				return 641
			case 2:
				return 643
			case 3:
				return 645
			case 4:
				return 647
			case 5:
				return 649
			case 6:
				return 651
			case 7:
				return 653
			case 8:
				return 655
			case 9:
				return 657
			case 10:
				return 659
			case 11:
				return 661
			case 12:
				return 663
			case 13:
				return 665
			case 14:
				return 667
			case 15:
				return 669
			case 16:
				return 671
			case 17:
				return 673
			case 18:
				return 675
			case 19:
				return 677
			case 20:
				return 679
			case 21:
				return 681
			case 22:
				return 683
			case 23:
				return 685
			case 24:
				return 687
			}
		case NoteBlockInstrumentHat:
			switch x.Note {
			case 0:
				return 689
			case 1:
				return 691
			case 2:
				return 693
			case 3:
				return 695
			case 4:
				return 697
			case 5:
				return 699
			case 6:
				return 701
			case 7:
				return 703
			case 8:
				return 705
			case 9:
				return 707
			case 10:
				return 709
			case 11:
				return 711
			case 12:
				return 713
			case 13:
				return 715
			case 14:
				return 717
			case 15:
				return 719
			case 16:
				return 721
			case 17:
				return 723
			case 18:
				return 725
			case 19:
				return 727
			case 20:
				return 729
			case 21:
				return 731
			case 22:
				return 733
			case 23:
				return 735
			case 24:
				return 737
			}
		case NoteBlockInstrumentBass:
			switch x.Note {
			case 0:
				return 739
			case 1:
				return 741
			case 2:
				return 743
			case 3:
				return 745
			case 4:
				return 747
			case 5:
				return 749
			case 6:
				return 751
			case 7:
				return 753
			case 8:
				return 755
			case 9:
				return 757
			case 10:
				return 759
			case 11:
				return 761
			case 12:
				return 763
			case 13:
				return 765
			case 14:
				return 767
			case 15:
				return 769
			case 16:
				return 771
			case 17:
				return 773
			case 18:
				return 775
			case 19:
				return 777
			case 20:
				return 779
			case 21:
				return 781
			case 22:
				return 783
			case 23:
				return 785
			case 24:
				return 787
			}
		case NoteBlockInstrumentFlute:
			switch x.Note {
			case 0:
				return 789
			case 1:
				return 791
			case 2:
				return 793
			case 3:
				return 795
			case 4:
				return 797
			case 5:
				return 799
			case 6:
				return 801
			case 7:
				return 803
			case 8:
				return 805
			case 9:
				return 807
			case 10:
				return 809
			case 11:
				return 811
			case 12:
				return 813
			case 13:
				return 815
			case 14:
				return 817
			case 15:
				return 819
			case 16:
				return 821
			case 17:
				return 823
			case 18:
				return 825
			case 19:
				return 827
			case 20:
				return 829
			case 21:
				return 831
			case 22:
				return 833
			case 23:
				return 835
			case 24:
				return 837
			}
		case NoteBlockInstrumentBell:
			switch x.Note {
			case 0:
				return 839
			case 1:
				return 841
			case 2:
				return 843
			case 3:
				return 845
			case 4:
				return 847
			case 5:
				return 849
			case 6:
				return 851
			case 7:
				return 853
			case 8:
				return 855
			case 9:
				return 857
			case 10:
				return 859
			case 11:
				return 861
			case 12:
				return 863
			case 13:
				return 865
			case 14:
				return 867
			case 15:
				return 869
			case 16:
				return 871
			case 17:
				return 873
			case 18:
				return 875
			case 19:
				return 877
			case 20:
				return 879
			case 21:
				return 881
			case 22:
				return 883
			case 23:
				return 885
			case 24:
				return 887
			}
		case NoteBlockInstrumentGuitar:
			switch x.Note {
			case 0:
				return 889
			case 1:
				return 891
			case 2:
				return 893
			case 3:
				return 895
			case 4:
				return 897
			case 5:
				return 899
			case 6:
				return 901
			case 7:
				return 903
			case 8:
				return 905
			case 9:
				return 907
			case 10:
				return 909
			case 11:
				return 911
			case 12:
				return 913
			case 13:
				return 915
			case 14:
				return 917
			case 15:
				return 919
			case 16:
				return 921
			case 17:
				return 923
			case 18:
				return 925
			case 19:
				return 927
			case 20:
				return 929
			case 21:
				return 931
			case 22:
				return 933
			case 23:
				return 935
			case 24:
				return 937
			}
		case NoteBlockInstrumentChime:
			switch x.Note {
			case 0:
				return 939
			case 1:
				return 941
			case 2:
				return 943
			case 3:
				return 945
			case 4:
				return 947
			case 5:
				return 949
			case 6:
				return 951
			case 7:
				return 953
			case 8:
				return 955
			case 9:
				return 957
			case 10:
				return 959
			case 11:
				return 961
			case 12:
				return 963
			case 13:
				return 965
			case 14:
				return 967
			case 15:
				return 969
			case 16:
				return 971
			case 17:
				return 973
			case 18:
				return 975
			case 19:
				return 977
			case 20:
				return 979
			case 21:
				return 981
			case 22:
				return 983
			case 23:
				return 985
			case 24:
				return 987
			}
		case NoteBlockInstrumentXylophone:
			switch x.Note {
			case 0:
				return 989
			case 1:
				return 991
			case 2:
				return 993
			case 3:
				return 995
			case 4:
				return 997
			case 5:
				return 999
			case 6:
				return 1001
			case 7:
				return 1003
			case 8:
				return 1005
			case 9:
				return 1007
			case 10:
				return 1009
			case 11:
				return 1011
			case 12:
				return 1013
			case 13:
				return 1015
			case 14:
				return 1017
			case 15:
				return 1019
			case 16:
				return 1021
			case 17:
				return 1023
			case 18:
				return 1025
			case 19:
				return 1027
			case 20:
				return 1029
			case 21:
				return 1031
			case 22:
				return 1033
			case 23:
				return 1035
			case 24:
				return 1037
			}
		case NoteBlockInstrumentIronXylophone:
			switch x.Note {
			case 0:
				return 1039
			case 1:
				return 1041
			case 2:
				return 1043
			case 3:
				return 1045
			case 4:
				return 1047
			case 5:
				return 1049
			case 6:
				return 1051
			case 7:
				return 1053
			case 8:
				return 1055
			case 9:
				return 1057
			case 10:
				return 1059
			case 11:
				return 1061
			case 12:
				return 1063
			case 13:
				return 1065
			case 14:
				return 1067
			case 15:
				return 1069
			case 16:
				return 1071
			case 17:
				return 1073
			case 18:
				return 1075
			case 19:
				return 1077
			case 20:
				return 1079
			case 21:
				return 1081
			case 22:
				return 1083
			case 23:
				return 1085
			case 24:
				return 1087
			}
		case NoteBlockInstrumentCowBell:
			switch x.Note {
			case 0:
				return 1089
			case 1:
				return 1091
			case 2:
				return 1093
			case 3:
				return 1095
			case 4:
				return 1097
			case 5:
				return 1099
			case 6:
				return 1101
			case 7:
				return 1103
			case 8:
				return 1105
			case 9:
				return 1107
			case 10:
				return 1109
			case 11:
				return 1111
			case 12:
				return 1113
			case 13:
				return 1115
			case 14:
				return 1117
			case 15:
				return 1119
			case 16:
				return 1121
			case 17:
				return 1123
			case 18:
				return 1125
			case 19:
				return 1127
			case 20:
				return 1129
			case 21:
				return 1131
			case 22:
				return 1133
			case 23:
				return 1135
			case 24:
				return 1137
			}
		case NoteBlockInstrumentDidgeridoo:
			switch x.Note {
			case 0:
				return 1139
			case 1:
				return 1141
			case 2:
				return 1143
			case 3:
				return 1145
			case 4:
				return 1147
			case 5:
				return 1149
			case 6:
				return 1151
			case 7:
				return 1153
			case 8:
				return 1155
			case 9:
				return 1157
			case 10:
				return 1159
			case 11:
				return 1161
			case 12:
				return 1163
			case 13:
				return 1165
			case 14:
				return 1167
			case 15:
				return 1169
			case 16:
				return 1171
			case 17:
				return 1173
			case 18:
				return 1175
			case 19:
				return 1177
			case 20:
				return 1179
			case 21:
				return 1181
			case 22:
				return 1183
			case 23:
				return 1185
			case 24:
				return 1187
			}
		case NoteBlockInstrumentBit:
			switch x.Note {
			case 0:
				return 1189
			case 1:
				return 1191
			case 2:
				return 1193
			case 3:
				return 1195
			case 4:
				return 1197
			case 5:
				return 1199
			case 6:
				return 1201
			case 7:
				return 1203
			case 8:
				return 1205
			case 9:
				return 1207
			case 10:
				return 1209
			case 11:
				return 1211
			case 12:
				return 1213
			case 13:
				return 1215
			case 14:
				return 1217
			case 15:
				return 1219
			case 16:
				return 1221
			case 17:
				return 1223
			case 18:
				return 1225
			case 19:
				return 1227
			case 20:
				return 1229
			case 21:
				return 1231
			case 22:
				return 1233
			case 23:
				return 1235
			case 24:
				return 1237
			}
		case NoteBlockInstrumentBanjo:
			switch x.Note {
			case 0:
				return 1239
			case 1:
				return 1241
			case 2:
				return 1243
			case 3:
				return 1245
			case 4:
				return 1247
			case 5:
				return 1249
			case 6:
				return 1251
			case 7:
				return 1253
			case 8:
				return 1255
			case 9:
				return 1257
			case 10:
				return 1259
			case 11:
				return 1261
			case 12:
				return 1263
			case 13:
				return 1265
			case 14:
				return 1267
			case 15:
				return 1269
			case 16:
				return 1271
			case 17:
				return 1273
			case 18:
				return 1275
			case 19:
				return 1277
			case 20:
				return 1279
			case 21:
				return 1281
			case 22:
				return 1283
			case 23:
				return 1285
			case 24:
				return 1287
			}
		case NoteBlockInstrumentPling:
			switch x.Note {
			case 0:
				return 1289
			case 1:
				return 1291
			case 2:
				return 1293
			case 3:
				return 1295
			case 4:
				return 1297
			case 5:
				return 1299
			case 6:
				return 1301
			case 7:
				return 1303
			case 8:
				return 1305
			case 9:
				return 1307
			case 10:
				return 1309
			case 11:
				return 1311
			case 12:
				return 1313
			case 13:
				return 1315
			case 14:
				return 1317
			case 15:
				return 1319
			case 16:
				return 1321
			case 17:
				return 1323
			case 18:
				return 1325
			case 19:
				return 1327
			case 20:
				return 1329
			case 21:
				return 1331
			case 22:
				return 1333
			case 23:
				return 1335
			case 24:
				return 1337
			}
		case NoteBlockInstrumentZombie:
			switch x.Note {
			case 0:
				return 1339
			case 1:
				return 1341
			case 2:
				return 1343
			case 3:
				return 1345
			case 4:
				return 1347
			case 5:
				return 1349
			case 6:
				return 1351
			case 7:
				return 1353
			case 8:
				return 1355
			case 9:
				return 1357
			case 10:
				return 1359
			case 11:
				return 1361
			case 12:
				return 1363
			case 13:
				return 1365
			case 14:
				return 1367
			case 15:
				return 1369
			case 16:
				return 1371
			case 17:
				return 1373
			case 18:
				return 1375
			case 19:
				return 1377
			case 20:
				return 1379
			case 21:
				return 1381
			case 22:
				return 1383
			case 23:
				return 1385
			case 24:
				return 1387
			}
		case NoteBlockInstrumentSkeleton:
			switch x.Note {
			case 0:
				return 1389
			case 1:
				return 1391
			case 2:
				return 1393
			case 3:
				return 1395
			case 4:
				return 1397
			case 5:
				return 1399
			case 6:
				return 1401
			case 7:
				return 1403
			case 8:
				return 1405
			case 9:
				return 1407
			case 10:
				return 1409
			case 11:
				return 1411
			case 12:
				return 1413
			case 13:
				return 1415
			case 14:
				return 1417
			case 15:
				return 1419
			case 16:
				return 1421
			case 17:
				return 1423
			case 18:
				return 1425
			case 19:
				return 1427
			case 20:
				return 1429
			case 21:
				return 1431
			case 22:
				return 1433
			case 23:
				return 1435
			case 24:
				return 1437
			}
		case NoteBlockInstrumentCreeper:
			switch x.Note {
			case 0:
				return 1439
			case 1:
				return 1441
			case 2:
				return 1443
			case 3:
				return 1445
			case 4:
				return 1447
			case 5:
				return 1449
			case 6:
				return 1451
			case 7:
				return 1453
			case 8:
				return 1455
			case 9:
				return 1457
			case 10:
				return 1459
			case 11:
				return 1461
			case 12:
				return 1463
			case 13:
				return 1465
			case 14:
				return 1467
			case 15:
				return 1469
			case 16:
				return 1471
			case 17:
				return 1473
			case 18:
				return 1475
			case 19:
				return 1477
			case 20:
				return 1479
			case 21:
				return 1481
			case 22:
				return 1483
			case 23:
				return 1485
			case 24:
				return 1487
			}
		case NoteBlockInstrumentDragon:
			switch x.Note {
			case 0:
				return 1489
			case 1:
				return 1491
			case 2:
				return 1493
			case 3:
				return 1495
			case 4:
				return 1497
			case 5:
				return 1499
			case 6:
				return 1501
			case 7:
				return 1503
			case 8:
				return 1505
			case 9:
				return 1507
			case 10:
				return 1509
			case 11:
				return 1511
			case 12:
				return 1513
			case 13:
				return 1515
			case 14:
				return 1517
			case 15:
				return 1519
			case 16:
				return 1521
			case 17:
				return 1523
			case 18:
				return 1525
			case 19:
				return 1527
			case 20:
				return 1529
			case 21:
				return 1531
			case 22:
				return 1533
			case 23:
				return 1535
			case 24:
				return 1537
			}
		case NoteBlockInstrumentWitherSkeleton:
			switch x.Note {
			case 0:
				return 1539
			case 1:
				return 1541
			case 2:
				return 1543
			case 3:
				return 1545
			case 4:
				return 1547
			case 5:
				return 1549
			case 6:
				return 1551
			case 7:
				return 1553
			case 8:
				return 1555
			case 9:
				return 1557
			case 10:
				return 1559
			case 11:
				return 1561
			case 12:
				return 1563
			case 13:
				return 1565
			case 14:
				return 1567
			case 15:
				return 1569
			case 16:
				return 1571
			case 17:
				return 1573
			case 18:
				return 1575
			case 19:
				return 1577
			case 20:
				return 1579
			case 21:
				return 1581
			case 22:
				return 1583
			case 23:
				return 1585
			case 24:
				return 1587
			}
		case NoteBlockInstrumentPiglin:
			switch x.Note {
			case 0:
				return 1589
			case 1:
				return 1591
			case 2:
				return 1593
			case 3:
				return 1595
			case 4:
				return 1597
			case 5:
				return 1599
			case 6:
				return 1601
			case 7:
				return 1603
			case 8:
				return 1605
			case 9:
				return 1607
			case 10:
				return 1609
			case 11:
				return 1611
			case 12:
				return 1613
			case 13:
				return 1615
			case 14:
				return 1617
			case 15:
				return 1619
			case 16:
				return 1621
			case 17:
				return 1623
			case 18:
				return 1625
			case 19:
				return 1627
			case 20:
				return 1629
			case 21:
				return 1631
			case 22:
				return 1633
			case 23:
				return 1635
			case 24:
				return 1637
			}
		case NoteBlockInstrumentCustomHead:
			switch x.Note {
			case 0:
				return 1639
			case 1:
				return 1641
			case 2:
				return 1643
			case 3:
				return 1645
			case 4:
				return 1647
			case 5:
				return 1649
			case 6:
				return 1651
			case 7:
				return 1653
			case 8:
				return 1655
			case 9:
				return 1657
			case 10:
				return 1659
			case 11:
				return 1661
			case 12:
				return 1663
			case 13:
				return 1665
			case 14:
				return 1667
			case 15:
				return 1669
			case 16:
				return 1671
			case 17:
				return 1673
			case 18:
				return 1675
			case 19:
				return 1677
			case 20:
				return 1679
			case 21:
				return 1681
			case 22:
				return 1683
			case 23:
				return 1685
			case 24:
				return 1687
			}
		}
	}
	return 539 // default state
}

type WhiteBedFacing string

const (
	WhiteBedFacingNorth WhiteBedFacing = "north"
	WhiteBedFacingSouth WhiteBedFacing = "south"
	WhiteBedFacingWest  WhiteBedFacing = "west"
	WhiteBedFacingEast  WhiteBedFacing = "east"
)

type WhiteBedPart string

const (
	WhiteBedPartHead WhiteBedPart = "head"
	WhiteBedPartFoot WhiteBedPart = "foot"
)

type WhiteBed struct {
	Facing   WhiteBedFacing
	Occupied bool
	Part     WhiteBedPart
}

func (x WhiteBed) Id() uint16 {
	switch x.Facing {
	case WhiteBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case WhiteBedPartHead:
				return 1688
			case WhiteBedPartFoot:
				return 1689
			}
		case false:
			switch x.Part {
			case WhiteBedPartHead:
				return 1690
			case WhiteBedPartFoot:
				return 1691
			}
		}
	case WhiteBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case WhiteBedPartHead:
				return 1692
			case WhiteBedPartFoot:
				return 1693
			}
		case false:
			switch x.Part {
			case WhiteBedPartHead:
				return 1694
			case WhiteBedPartFoot:
				return 1695
			}
		}
	case WhiteBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case WhiteBedPartHead:
				return 1696
			case WhiteBedPartFoot:
				return 1697
			}
		case false:
			switch x.Part {
			case WhiteBedPartHead:
				return 1698
			case WhiteBedPartFoot:
				return 1699
			}
		}
	case WhiteBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case WhiteBedPartHead:
				return 1700
			case WhiteBedPartFoot:
				return 1701
			}
		case false:
			switch x.Part {
			case WhiteBedPartHead:
				return 1702
			case WhiteBedPartFoot:
				return 1703
			}
		}
	}
	return 1691 // default state
}

type OrangeBedFacing string

const (
	OrangeBedFacingNorth OrangeBedFacing = "north"
	OrangeBedFacingSouth OrangeBedFacing = "south"
	OrangeBedFacingWest  OrangeBedFacing = "west"
	OrangeBedFacingEast  OrangeBedFacing = "east"
)

type OrangeBedPart string

const (
	OrangeBedPartHead OrangeBedPart = "head"
	OrangeBedPartFoot OrangeBedPart = "foot"
)

type OrangeBed struct {
	Facing   OrangeBedFacing
	Occupied bool
	Part     OrangeBedPart
}

func (x OrangeBed) Id() uint16 {
	switch x.Facing {
	case OrangeBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case OrangeBedPartHead:
				return 1704
			case OrangeBedPartFoot:
				return 1705
			}
		case false:
			switch x.Part {
			case OrangeBedPartHead:
				return 1706
			case OrangeBedPartFoot:
				return 1707
			}
		}
	case OrangeBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case OrangeBedPartHead:
				return 1708
			case OrangeBedPartFoot:
				return 1709
			}
		case false:
			switch x.Part {
			case OrangeBedPartHead:
				return 1710
			case OrangeBedPartFoot:
				return 1711
			}
		}
	case OrangeBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case OrangeBedPartHead:
				return 1712
			case OrangeBedPartFoot:
				return 1713
			}
		case false:
			switch x.Part {
			case OrangeBedPartHead:
				return 1714
			case OrangeBedPartFoot:
				return 1715
			}
		}
	case OrangeBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case OrangeBedPartHead:
				return 1716
			case OrangeBedPartFoot:
				return 1717
			}
		case false:
			switch x.Part {
			case OrangeBedPartHead:
				return 1718
			case OrangeBedPartFoot:
				return 1719
			}
		}
	}
	return 1707 // default state
}

type MagentaBedPart string

const (
	MagentaBedPartHead MagentaBedPart = "head"
	MagentaBedPartFoot MagentaBedPart = "foot"
)

type MagentaBedFacing string

const (
	MagentaBedFacingNorth MagentaBedFacing = "north"
	MagentaBedFacingSouth MagentaBedFacing = "south"
	MagentaBedFacingWest  MagentaBedFacing = "west"
	MagentaBedFacingEast  MagentaBedFacing = "east"
)

type MagentaBed struct {
	Occupied bool
	Part     MagentaBedPart
	Facing   MagentaBedFacing
}

func (x MagentaBed) Id() uint16 {
	switch x.Facing {
	case MagentaBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case MagentaBedPartHead:
				return 1720
			case MagentaBedPartFoot:
				return 1721
			}
		case false:
			switch x.Part {
			case MagentaBedPartHead:
				return 1722
			case MagentaBedPartFoot:
				return 1723
			}
		}
	case MagentaBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case MagentaBedPartHead:
				return 1724
			case MagentaBedPartFoot:
				return 1725
			}
		case false:
			switch x.Part {
			case MagentaBedPartHead:
				return 1726
			case MagentaBedPartFoot:
				return 1727
			}
		}
	case MagentaBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case MagentaBedPartHead:
				return 1728
			case MagentaBedPartFoot:
				return 1729
			}
		case false:
			switch x.Part {
			case MagentaBedPartHead:
				return 1730
			case MagentaBedPartFoot:
				return 1731
			}
		}
	case MagentaBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case MagentaBedPartHead:
				return 1732
			case MagentaBedPartFoot:
				return 1733
			}
		case false:
			switch x.Part {
			case MagentaBedPartHead:
				return 1734
			case MagentaBedPartFoot:
				return 1735
			}
		}
	}
	return 1723 // default state
}

type LightBlueBedPart string

const (
	LightBlueBedPartHead LightBlueBedPart = "head"
	LightBlueBedPartFoot LightBlueBedPart = "foot"
)

type LightBlueBedFacing string

const (
	LightBlueBedFacingNorth LightBlueBedFacing = "north"
	LightBlueBedFacingSouth LightBlueBedFacing = "south"
	LightBlueBedFacingWest  LightBlueBedFacing = "west"
	LightBlueBedFacingEast  LightBlueBedFacing = "east"
)

type LightBlueBed struct {
	Part     LightBlueBedPart
	Facing   LightBlueBedFacing
	Occupied bool
}

func (x LightBlueBed) Id() uint16 {
	switch x.Facing {
	case LightBlueBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1736
			case LightBlueBedPartFoot:
				return 1737
			}
		case false:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1738
			case LightBlueBedPartFoot:
				return 1739
			}
		}
	case LightBlueBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1740
			case LightBlueBedPartFoot:
				return 1741
			}
		case false:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1742
			case LightBlueBedPartFoot:
				return 1743
			}
		}
	case LightBlueBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1744
			case LightBlueBedPartFoot:
				return 1745
			}
		case false:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1746
			case LightBlueBedPartFoot:
				return 1747
			}
		}
	case LightBlueBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1748
			case LightBlueBedPartFoot:
				return 1749
			}
		case false:
			switch x.Part {
			case LightBlueBedPartHead:
				return 1750
			case LightBlueBedPartFoot:
				return 1751
			}
		}
	}
	return 1739 // default state
}

type YellowBedFacing string

const (
	YellowBedFacingNorth YellowBedFacing = "north"
	YellowBedFacingSouth YellowBedFacing = "south"
	YellowBedFacingWest  YellowBedFacing = "west"
	YellowBedFacingEast  YellowBedFacing = "east"
)

type YellowBedPart string

const (
	YellowBedPartHead YellowBedPart = "head"
	YellowBedPartFoot YellowBedPart = "foot"
)

type YellowBed struct {
	Facing   YellowBedFacing
	Occupied bool
	Part     YellowBedPart
}

func (x YellowBed) Id() uint16 {
	switch x.Facing {
	case YellowBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case YellowBedPartHead:
				return 1752
			case YellowBedPartFoot:
				return 1753
			}
		case false:
			switch x.Part {
			case YellowBedPartHead:
				return 1754
			case YellowBedPartFoot:
				return 1755
			}
		}
	case YellowBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case YellowBedPartHead:
				return 1756
			case YellowBedPartFoot:
				return 1757
			}
		case false:
			switch x.Part {
			case YellowBedPartHead:
				return 1758
			case YellowBedPartFoot:
				return 1759
			}
		}
	case YellowBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case YellowBedPartHead:
				return 1760
			case YellowBedPartFoot:
				return 1761
			}
		case false:
			switch x.Part {
			case YellowBedPartHead:
				return 1762
			case YellowBedPartFoot:
				return 1763
			}
		}
	case YellowBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case YellowBedPartHead:
				return 1764
			case YellowBedPartFoot:
				return 1765
			}
		case false:
			switch x.Part {
			case YellowBedPartHead:
				return 1766
			case YellowBedPartFoot:
				return 1767
			}
		}
	}
	return 1755 // default state
}

type LimeBedFacing string

const (
	LimeBedFacingNorth LimeBedFacing = "north"
	LimeBedFacingSouth LimeBedFacing = "south"
	LimeBedFacingWest  LimeBedFacing = "west"
	LimeBedFacingEast  LimeBedFacing = "east"
)

type LimeBedPart string

const (
	LimeBedPartHead LimeBedPart = "head"
	LimeBedPartFoot LimeBedPart = "foot"
)

type LimeBed struct {
	Facing   LimeBedFacing
	Occupied bool
	Part     LimeBedPart
}

func (x LimeBed) Id() uint16 {
	switch x.Occupied {
	case true:
		switch x.Part {
		case LimeBedPartHead:
			switch x.Facing {
			case LimeBedFacingNorth:
				return 1768
			case LimeBedFacingSouth:
				return 1772
			case LimeBedFacingWest:
				return 1776
			case LimeBedFacingEast:
				return 1780
			}
		case LimeBedPartFoot:
			switch x.Facing {
			case LimeBedFacingNorth:
				return 1769
			case LimeBedFacingSouth:
				return 1773
			case LimeBedFacingWest:
				return 1777
			case LimeBedFacingEast:
				return 1781
			}
		}
	case false:
		switch x.Part {
		case LimeBedPartHead:
			switch x.Facing {
			case LimeBedFacingNorth:
				return 1770
			case LimeBedFacingSouth:
				return 1774
			case LimeBedFacingWest:
				return 1778
			case LimeBedFacingEast:
				return 1782
			}
		case LimeBedPartFoot:
			switch x.Facing {
			case LimeBedFacingNorth:
				return 1771
			case LimeBedFacingSouth:
				return 1775
			case LimeBedFacingWest:
				return 1779
			case LimeBedFacingEast:
				return 1783
			}
		}
	}
	return 1771 // default state
}

type PinkBedFacing string

const (
	PinkBedFacingNorth PinkBedFacing = "north"
	PinkBedFacingSouth PinkBedFacing = "south"
	PinkBedFacingWest  PinkBedFacing = "west"
	PinkBedFacingEast  PinkBedFacing = "east"
)

type PinkBedPart string

const (
	PinkBedPartHead PinkBedPart = "head"
	PinkBedPartFoot PinkBedPart = "foot"
)

type PinkBed struct {
	Facing   PinkBedFacing
	Occupied bool
	Part     PinkBedPart
}

func (x PinkBed) Id() uint16 {
	switch x.Facing {
	case PinkBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PinkBedPartHead:
				return 1784
			case PinkBedPartFoot:
				return 1785
			}
		case false:
			switch x.Part {
			case PinkBedPartHead:
				return 1786
			case PinkBedPartFoot:
				return 1787
			}
		}
	case PinkBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PinkBedPartHead:
				return 1788
			case PinkBedPartFoot:
				return 1789
			}
		case false:
			switch x.Part {
			case PinkBedPartHead:
				return 1790
			case PinkBedPartFoot:
				return 1791
			}
		}
	case PinkBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PinkBedPartHead:
				return 1792
			case PinkBedPartFoot:
				return 1793
			}
		case false:
			switch x.Part {
			case PinkBedPartHead:
				return 1794
			case PinkBedPartFoot:
				return 1795
			}
		}
	case PinkBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PinkBedPartHead:
				return 1796
			case PinkBedPartFoot:
				return 1797
			}
		case false:
			switch x.Part {
			case PinkBedPartHead:
				return 1798
			case PinkBedPartFoot:
				return 1799
			}
		}
	}
	return 1787 // default state
}

type GrayBedPart string

const (
	GrayBedPartHead GrayBedPart = "head"
	GrayBedPartFoot GrayBedPart = "foot"
)

type GrayBedFacing string

const (
	GrayBedFacingNorth GrayBedFacing = "north"
	GrayBedFacingSouth GrayBedFacing = "south"
	GrayBedFacingWest  GrayBedFacing = "west"
	GrayBedFacingEast  GrayBedFacing = "east"
)

type GrayBed struct {
	Occupied bool
	Part     GrayBedPart
	Facing   GrayBedFacing
}

func (x GrayBed) Id() uint16 {
	switch x.Facing {
	case GrayBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case GrayBedPartHead:
				return 1800
			case GrayBedPartFoot:
				return 1801
			}
		case false:
			switch x.Part {
			case GrayBedPartHead:
				return 1802
			case GrayBedPartFoot:
				return 1803
			}
		}
	case GrayBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case GrayBedPartHead:
				return 1804
			case GrayBedPartFoot:
				return 1805
			}
		case false:
			switch x.Part {
			case GrayBedPartHead:
				return 1806
			case GrayBedPartFoot:
				return 1807
			}
		}
	case GrayBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case GrayBedPartHead:
				return 1808
			case GrayBedPartFoot:
				return 1809
			}
		case false:
			switch x.Part {
			case GrayBedPartHead:
				return 1810
			case GrayBedPartFoot:
				return 1811
			}
		}
	case GrayBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case GrayBedPartHead:
				return 1812
			case GrayBedPartFoot:
				return 1813
			}
		case false:
			switch x.Part {
			case GrayBedPartHead:
				return 1814
			case GrayBedPartFoot:
				return 1815
			}
		}
	}
	return 1803 // default state
}

type LightGrayBedFacing string

const (
	LightGrayBedFacingNorth LightGrayBedFacing = "north"
	LightGrayBedFacingSouth LightGrayBedFacing = "south"
	LightGrayBedFacingWest  LightGrayBedFacing = "west"
	LightGrayBedFacingEast  LightGrayBedFacing = "east"
)

type LightGrayBedPart string

const (
	LightGrayBedPartHead LightGrayBedPart = "head"
	LightGrayBedPartFoot LightGrayBedPart = "foot"
)

type LightGrayBed struct {
	Facing   LightGrayBedFacing
	Occupied bool
	Part     LightGrayBedPart
}

func (x LightGrayBed) Id() uint16 {
	switch x.Facing {
	case LightGrayBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1816
			case LightGrayBedPartFoot:
				return 1817
			}
		case false:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1818
			case LightGrayBedPartFoot:
				return 1819
			}
		}
	case LightGrayBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1820
			case LightGrayBedPartFoot:
				return 1821
			}
		case false:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1822
			case LightGrayBedPartFoot:
				return 1823
			}
		}
	case LightGrayBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1824
			case LightGrayBedPartFoot:
				return 1825
			}
		case false:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1826
			case LightGrayBedPartFoot:
				return 1827
			}
		}
	case LightGrayBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1828
			case LightGrayBedPartFoot:
				return 1829
			}
		case false:
			switch x.Part {
			case LightGrayBedPartHead:
				return 1830
			case LightGrayBedPartFoot:
				return 1831
			}
		}
	}
	return 1819 // default state
}

type CyanBedFacing string

const (
	CyanBedFacingNorth CyanBedFacing = "north"
	CyanBedFacingSouth CyanBedFacing = "south"
	CyanBedFacingWest  CyanBedFacing = "west"
	CyanBedFacingEast  CyanBedFacing = "east"
)

type CyanBedPart string

const (
	CyanBedPartHead CyanBedPart = "head"
	CyanBedPartFoot CyanBedPart = "foot"
)

type CyanBed struct {
	Facing   CyanBedFacing
	Occupied bool
	Part     CyanBedPart
}

func (x CyanBed) Id() uint16 {
	switch x.Facing {
	case CyanBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case CyanBedPartHead:
				return 1832
			case CyanBedPartFoot:
				return 1833
			}
		case false:
			switch x.Part {
			case CyanBedPartHead:
				return 1834
			case CyanBedPartFoot:
				return 1835
			}
		}
	case CyanBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case CyanBedPartHead:
				return 1836
			case CyanBedPartFoot:
				return 1837
			}
		case false:
			switch x.Part {
			case CyanBedPartHead:
				return 1838
			case CyanBedPartFoot:
				return 1839
			}
		}
	case CyanBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case CyanBedPartHead:
				return 1840
			case CyanBedPartFoot:
				return 1841
			}
		case false:
			switch x.Part {
			case CyanBedPartHead:
				return 1842
			case CyanBedPartFoot:
				return 1843
			}
		}
	case CyanBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case CyanBedPartHead:
				return 1844
			case CyanBedPartFoot:
				return 1845
			}
		case false:
			switch x.Part {
			case CyanBedPartHead:
				return 1846
			case CyanBedPartFoot:
				return 1847
			}
		}
	}
	return 1835 // default state
}

type PurpleBedFacing string

const (
	PurpleBedFacingNorth PurpleBedFacing = "north"
	PurpleBedFacingSouth PurpleBedFacing = "south"
	PurpleBedFacingWest  PurpleBedFacing = "west"
	PurpleBedFacingEast  PurpleBedFacing = "east"
)

type PurpleBedPart string

const (
	PurpleBedPartHead PurpleBedPart = "head"
	PurpleBedPartFoot PurpleBedPart = "foot"
)

type PurpleBed struct {
	Facing   PurpleBedFacing
	Occupied bool
	Part     PurpleBedPart
}

func (x PurpleBed) Id() uint16 {
	switch x.Facing {
	case PurpleBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PurpleBedPartHead:
				return 1848
			case PurpleBedPartFoot:
				return 1849
			}
		case false:
			switch x.Part {
			case PurpleBedPartHead:
				return 1850
			case PurpleBedPartFoot:
				return 1851
			}
		}
	case PurpleBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PurpleBedPartHead:
				return 1852
			case PurpleBedPartFoot:
				return 1853
			}
		case false:
			switch x.Part {
			case PurpleBedPartHead:
				return 1854
			case PurpleBedPartFoot:
				return 1855
			}
		}
	case PurpleBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PurpleBedPartHead:
				return 1856
			case PurpleBedPartFoot:
				return 1857
			}
		case false:
			switch x.Part {
			case PurpleBedPartHead:
				return 1858
			case PurpleBedPartFoot:
				return 1859
			}
		}
	case PurpleBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case PurpleBedPartHead:
				return 1860
			case PurpleBedPartFoot:
				return 1861
			}
		case false:
			switch x.Part {
			case PurpleBedPartHead:
				return 1862
			case PurpleBedPartFoot:
				return 1863
			}
		}
	}
	return 1851 // default state
}

type BlueBedFacing string

const (
	BlueBedFacingNorth BlueBedFacing = "north"
	BlueBedFacingSouth BlueBedFacing = "south"
	BlueBedFacingWest  BlueBedFacing = "west"
	BlueBedFacingEast  BlueBedFacing = "east"
)

type BlueBedPart string

const (
	BlueBedPartHead BlueBedPart = "head"
	BlueBedPartFoot BlueBedPart = "foot"
)

type BlueBed struct {
	Facing   BlueBedFacing
	Occupied bool
	Part     BlueBedPart
}

func (x BlueBed) Id() uint16 {
	switch x.Facing {
	case BlueBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlueBedPartHead:
				return 1864
			case BlueBedPartFoot:
				return 1865
			}
		case false:
			switch x.Part {
			case BlueBedPartHead:
				return 1866
			case BlueBedPartFoot:
				return 1867
			}
		}
	case BlueBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlueBedPartHead:
				return 1868
			case BlueBedPartFoot:
				return 1869
			}
		case false:
			switch x.Part {
			case BlueBedPartHead:
				return 1870
			case BlueBedPartFoot:
				return 1871
			}
		}
	case BlueBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlueBedPartHead:
				return 1872
			case BlueBedPartFoot:
				return 1873
			}
		case false:
			switch x.Part {
			case BlueBedPartHead:
				return 1874
			case BlueBedPartFoot:
				return 1875
			}
		}
	case BlueBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlueBedPartHead:
				return 1876
			case BlueBedPartFoot:
				return 1877
			}
		case false:
			switch x.Part {
			case BlueBedPartHead:
				return 1878
			case BlueBedPartFoot:
				return 1879
			}
		}
	}
	return 1867 // default state
}

type BrownBedFacing string

const (
	BrownBedFacingNorth BrownBedFacing = "north"
	BrownBedFacingSouth BrownBedFacing = "south"
	BrownBedFacingWest  BrownBedFacing = "west"
	BrownBedFacingEast  BrownBedFacing = "east"
)

type BrownBedPart string

const (
	BrownBedPartHead BrownBedPart = "head"
	BrownBedPartFoot BrownBedPart = "foot"
)

type BrownBed struct {
	Facing   BrownBedFacing
	Occupied bool
	Part     BrownBedPart
}

func (x BrownBed) Id() uint16 {
	switch x.Facing {
	case BrownBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BrownBedPartHead:
				return 1880
			case BrownBedPartFoot:
				return 1881
			}
		case false:
			switch x.Part {
			case BrownBedPartHead:
				return 1882
			case BrownBedPartFoot:
				return 1883
			}
		}
	case BrownBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BrownBedPartHead:
				return 1884
			case BrownBedPartFoot:
				return 1885
			}
		case false:
			switch x.Part {
			case BrownBedPartHead:
				return 1886
			case BrownBedPartFoot:
				return 1887
			}
		}
	case BrownBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BrownBedPartHead:
				return 1888
			case BrownBedPartFoot:
				return 1889
			}
		case false:
			switch x.Part {
			case BrownBedPartHead:
				return 1890
			case BrownBedPartFoot:
				return 1891
			}
		}
	case BrownBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BrownBedPartHead:
				return 1892
			case BrownBedPartFoot:
				return 1893
			}
		case false:
			switch x.Part {
			case BrownBedPartHead:
				return 1894
			case BrownBedPartFoot:
				return 1895
			}
		}
	}
	return 1883 // default state
}

type GreenBedFacing string

const (
	GreenBedFacingNorth GreenBedFacing = "north"
	GreenBedFacingSouth GreenBedFacing = "south"
	GreenBedFacingWest  GreenBedFacing = "west"
	GreenBedFacingEast  GreenBedFacing = "east"
)

type GreenBedPart string

const (
	GreenBedPartHead GreenBedPart = "head"
	GreenBedPartFoot GreenBedPart = "foot"
)

type GreenBed struct {
	Facing   GreenBedFacing
	Occupied bool
	Part     GreenBedPart
}

func (x GreenBed) Id() uint16 {
	switch x.Part {
	case GreenBedPartHead:
		switch x.Facing {
		case GreenBedFacingNorth:
			switch x.Occupied {
			case true:
				return 1896
			case false:
				return 1898
			}
		case GreenBedFacingSouth:
			switch x.Occupied {
			case true:
				return 1900
			case false:
				return 1902
			}
		case GreenBedFacingWest:
			switch x.Occupied {
			case true:
				return 1904
			case false:
				return 1906
			}
		case GreenBedFacingEast:
			switch x.Occupied {
			case true:
				return 1908
			case false:
				return 1910
			}
		}
	case GreenBedPartFoot:
		switch x.Facing {
		case GreenBedFacingNorth:
			switch x.Occupied {
			case true:
				return 1897
			case false:
				return 1899
			}
		case GreenBedFacingSouth:
			switch x.Occupied {
			case true:
				return 1901
			case false:
				return 1903
			}
		case GreenBedFacingWest:
			switch x.Occupied {
			case true:
				return 1905
			case false:
				return 1907
			}
		case GreenBedFacingEast:
			switch x.Occupied {
			case true:
				return 1909
			case false:
				return 1911
			}
		}
	}
	return 1899 // default state
}

type RedBedPart string

const (
	RedBedPartHead RedBedPart = "head"
	RedBedPartFoot RedBedPart = "foot"
)

type RedBedFacing string

const (
	RedBedFacingNorth RedBedFacing = "north"
	RedBedFacingSouth RedBedFacing = "south"
	RedBedFacingWest  RedBedFacing = "west"
	RedBedFacingEast  RedBedFacing = "east"
)

type RedBed struct {
	Part     RedBedPart
	Facing   RedBedFacing
	Occupied bool
}

func (x RedBed) Id() uint16 {
	switch x.Facing {
	case RedBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case RedBedPartHead:
				return 1912
			case RedBedPartFoot:
				return 1913
			}
		case false:
			switch x.Part {
			case RedBedPartHead:
				return 1914
			case RedBedPartFoot:
				return 1915
			}
		}
	case RedBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case RedBedPartHead:
				return 1916
			case RedBedPartFoot:
				return 1917
			}
		case false:
			switch x.Part {
			case RedBedPartHead:
				return 1918
			case RedBedPartFoot:
				return 1919
			}
		}
	case RedBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case RedBedPartHead:
				return 1920
			case RedBedPartFoot:
				return 1921
			}
		case false:
			switch x.Part {
			case RedBedPartHead:
				return 1922
			case RedBedPartFoot:
				return 1923
			}
		}
	case RedBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case RedBedPartHead:
				return 1924
			case RedBedPartFoot:
				return 1925
			}
		case false:
			switch x.Part {
			case RedBedPartHead:
				return 1926
			case RedBedPartFoot:
				return 1927
			}
		}
	}
	return 1915 // default state
}

type BlackBedPart string

const (
	BlackBedPartHead BlackBedPart = "head"
	BlackBedPartFoot BlackBedPart = "foot"
)

type BlackBedFacing string

const (
	BlackBedFacingNorth BlackBedFacing = "north"
	BlackBedFacingSouth BlackBedFacing = "south"
	BlackBedFacingWest  BlackBedFacing = "west"
	BlackBedFacingEast  BlackBedFacing = "east"
)

type BlackBed struct {
	Part     BlackBedPart
	Facing   BlackBedFacing
	Occupied bool
}

func (x BlackBed) Id() uint16 {
	switch x.Facing {
	case BlackBedFacingNorth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlackBedPartHead:
				return 1928
			case BlackBedPartFoot:
				return 1929
			}
		case false:
			switch x.Part {
			case BlackBedPartHead:
				return 1930
			case BlackBedPartFoot:
				return 1931
			}
		}
	case BlackBedFacingSouth:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlackBedPartHead:
				return 1932
			case BlackBedPartFoot:
				return 1933
			}
		case false:
			switch x.Part {
			case BlackBedPartHead:
				return 1934
			case BlackBedPartFoot:
				return 1935
			}
		}
	case BlackBedFacingWest:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlackBedPartHead:
				return 1936
			case BlackBedPartFoot:
				return 1937
			}
		case false:
			switch x.Part {
			case BlackBedPartHead:
				return 1938
			case BlackBedPartFoot:
				return 1939
			}
		}
	case BlackBedFacingEast:
		switch x.Occupied {
		case true:
			switch x.Part {
			case BlackBedPartHead:
				return 1940
			case BlackBedPartFoot:
				return 1941
			}
		case false:
			switch x.Part {
			case BlackBedPartHead:
				return 1942
			case BlackBedPartFoot:
				return 1943
			}
		}
	}
	return 1931 // default state
}

type PoweredRailShape string

const (
	PoweredRailShapeNorthSouth     PoweredRailShape = "north_south"
	PoweredRailShapeEastWest       PoweredRailShape = "east_west"
	PoweredRailShapeAscendingEast  PoweredRailShape = "ascending_east"
	PoweredRailShapeAscendingWest  PoweredRailShape = "ascending_west"
	PoweredRailShapeAscendingNorth PoweredRailShape = "ascending_north"
	PoweredRailShapeAscendingSouth PoweredRailShape = "ascending_south"
)

type PoweredRail struct {
	Powered     bool
	Shape       PoweredRailShape
	Waterlogged bool
}

func (x PoweredRail) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Shape {
		case PoweredRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 1944
			case false:
				return 1945
			}
		case PoweredRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 1946
			case false:
				return 1947
			}
		case PoweredRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 1948
			case false:
				return 1949
			}
		case PoweredRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 1950
			case false:
				return 1951
			}
		case PoweredRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 1952
			case false:
				return 1953
			}
		case PoweredRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 1954
			case false:
				return 1955
			}
		}
	case false:
		switch x.Shape {
		case PoweredRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 1956
			case false:
				return 1957
			}
		case PoweredRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 1958
			case false:
				return 1959
			}
		case PoweredRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 1960
			case false:
				return 1961
			}
		case PoweredRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 1962
			case false:
				return 1963
			}
		case PoweredRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 1964
			case false:
				return 1965
			}
		case PoweredRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 1966
			case false:
				return 1967
			}
		}
	}
	return 1957 // default state
}

type DetectorRailShape string

const (
	DetectorRailShapeNorthSouth     DetectorRailShape = "north_south"
	DetectorRailShapeEastWest       DetectorRailShape = "east_west"
	DetectorRailShapeAscendingEast  DetectorRailShape = "ascending_east"
	DetectorRailShapeAscendingWest  DetectorRailShape = "ascending_west"
	DetectorRailShapeAscendingNorth DetectorRailShape = "ascending_north"
	DetectorRailShapeAscendingSouth DetectorRailShape = "ascending_south"
)

type DetectorRail struct {
	Shape       DetectorRailShape
	Waterlogged bool
	Powered     bool
}

func (x DetectorRail) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Shape {
		case DetectorRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 1968
			case false:
				return 1969
			}
		case DetectorRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 1970
			case false:
				return 1971
			}
		case DetectorRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 1972
			case false:
				return 1973
			}
		case DetectorRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 1974
			case false:
				return 1975
			}
		case DetectorRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 1976
			case false:
				return 1977
			}
		case DetectorRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 1978
			case false:
				return 1979
			}
		}
	case false:
		switch x.Shape {
		case DetectorRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 1980
			case false:
				return 1981
			}
		case DetectorRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 1982
			case false:
				return 1983
			}
		case DetectorRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 1984
			case false:
				return 1985
			}
		case DetectorRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 1986
			case false:
				return 1987
			}
		case DetectorRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 1988
			case false:
				return 1989
			}
		case DetectorRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 1990
			case false:
				return 1991
			}
		}
	}
	return 1981 // default state
}

type StickyPistonFacing string

const (
	StickyPistonFacingNorth StickyPistonFacing = "north"
	StickyPistonFacingEast  StickyPistonFacing = "east"
	StickyPistonFacingSouth StickyPistonFacing = "south"
	StickyPistonFacingWest  StickyPistonFacing = "west"
	StickyPistonFacingUp    StickyPistonFacing = "up"
	StickyPistonFacingDown  StickyPistonFacing = "down"
)

type StickyPiston struct {
	Extended bool
	Facing   StickyPistonFacing
}

func (x StickyPiston) Id() uint16 {
	switch x.Extended {
	case true:
		switch x.Facing {
		case StickyPistonFacingNorth:
			return 1992
		case StickyPistonFacingEast:
			return 1993
		case StickyPistonFacingSouth:
			return 1994
		case StickyPistonFacingWest:
			return 1995
		case StickyPistonFacingUp:
			return 1996
		case StickyPistonFacingDown:
			return 1997
		}
	case false:
		switch x.Facing {
		case StickyPistonFacingNorth:
			return 1998
		case StickyPistonFacingEast:
			return 1999
		case StickyPistonFacingSouth:
			return 2000
		case StickyPistonFacingWest:
			return 2001
		case StickyPistonFacingUp:
			return 2002
		case StickyPistonFacingDown:
			return 2003
		}
	}
	return 1998 // default state
}

type Cobweb struct{}

func (x Cobweb) Id() uint16 {
	return 2004
}

type ShortGrass struct{}

func (x ShortGrass) Id() uint16 {
	return 2005
}

type Fern struct{}

func (x Fern) Id() uint16 {
	return 2006
}

type DeadBush struct{}

func (x DeadBush) Id() uint16 {
	return 2007
}

type Seagrass struct{}

func (x Seagrass) Id() uint16 {
	return 2008
}

type TallSeagrassHalf string

const (
	TallSeagrassHalfUpper TallSeagrassHalf = "upper"
	TallSeagrassHalfLower TallSeagrassHalf = "lower"
)

type TallSeagrass struct {
	Half TallSeagrassHalf
}

func (x TallSeagrass) Id() uint16 {
	switch x.Half {
	case TallSeagrassHalfUpper:
		return 2009
	case TallSeagrassHalfLower:
		return 2010
	}
	return 2010 // default state
}

type PistonFacing string

const (
	PistonFacingNorth PistonFacing = "north"
	PistonFacingEast  PistonFacing = "east"
	PistonFacingSouth PistonFacing = "south"
	PistonFacingWest  PistonFacing = "west"
	PistonFacingUp    PistonFacing = "up"
	PistonFacingDown  PistonFacing = "down"
)

type Piston struct {
	Facing   PistonFacing
	Extended bool
}

func (x Piston) Id() uint16 {
	switch x.Extended {
	case true:
		switch x.Facing {
		case PistonFacingNorth:
			return 2011
		case PistonFacingEast:
			return 2012
		case PistonFacingSouth:
			return 2013
		case PistonFacingWest:
			return 2014
		case PistonFacingUp:
			return 2015
		case PistonFacingDown:
			return 2016
		}
	case false:
		switch x.Facing {
		case PistonFacingNorth:
			return 2017
		case PistonFacingEast:
			return 2018
		case PistonFacingSouth:
			return 2019
		case PistonFacingWest:
			return 2020
		case PistonFacingUp:
			return 2021
		case PistonFacingDown:
			return 2022
		}
	}
	return 2017 // default state
}

type PistonHeadType string

const (
	PistonHeadTypeNormal PistonHeadType = "normal"
	PistonHeadTypeSticky PistonHeadType = "sticky"
)

type PistonHeadFacing string

const (
	PistonHeadFacingNorth PistonHeadFacing = "north"
	PistonHeadFacingEast  PistonHeadFacing = "east"
	PistonHeadFacingSouth PistonHeadFacing = "south"
	PistonHeadFacingWest  PistonHeadFacing = "west"
	PistonHeadFacingUp    PistonHeadFacing = "up"
	PistonHeadFacingDown  PistonHeadFacing = "down"
)

type PistonHead struct {
	Type   PistonHeadType
	Facing PistonHeadFacing
	Short  bool
}

func (x PistonHead) Id() uint16 {
	switch x.Facing {
	case PistonHeadFacingNorth:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2023
			case PistonHeadTypeSticky:
				return 2024
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2025
			case PistonHeadTypeSticky:
				return 2026
			}
		}
	case PistonHeadFacingEast:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2027
			case PistonHeadTypeSticky:
				return 2028
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2029
			case PistonHeadTypeSticky:
				return 2030
			}
		}
	case PistonHeadFacingSouth:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2031
			case PistonHeadTypeSticky:
				return 2032
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2033
			case PistonHeadTypeSticky:
				return 2034
			}
		}
	case PistonHeadFacingWest:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2035
			case PistonHeadTypeSticky:
				return 2036
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2037
			case PistonHeadTypeSticky:
				return 2038
			}
		}
	case PistonHeadFacingUp:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2039
			case PistonHeadTypeSticky:
				return 2040
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2041
			case PistonHeadTypeSticky:
				return 2042
			}
		}
	case PistonHeadFacingDown:
		switch x.Short {
		case true:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2043
			case PistonHeadTypeSticky:
				return 2044
			}
		case false:
			switch x.Type {
			case PistonHeadTypeNormal:
				return 2045
			case PistonHeadTypeSticky:
				return 2046
			}
		}
	}
	return 2025 // default state
}

type WhiteWool struct{}

func (x WhiteWool) Id() uint16 {
	return 2047
}

type OrangeWool struct{}

func (x OrangeWool) Id() uint16 {
	return 2048
}

type MagentaWool struct{}

func (x MagentaWool) Id() uint16 {
	return 2049
}

type LightBlueWool struct{}

func (x LightBlueWool) Id() uint16 {
	return 2050
}

type YellowWool struct{}

func (x YellowWool) Id() uint16 {
	return 2051
}

type LimeWool struct{}

func (x LimeWool) Id() uint16 {
	return 2052
}

type PinkWool struct{}

func (x PinkWool) Id() uint16 {
	return 2053
}

type GrayWool struct{}

func (x GrayWool) Id() uint16 {
	return 2054
}

type LightGrayWool struct{}

func (x LightGrayWool) Id() uint16 {
	return 2055
}

type CyanWool struct{}

func (x CyanWool) Id() uint16 {
	return 2056
}

type PurpleWool struct{}

func (x PurpleWool) Id() uint16 {
	return 2057
}

type BlueWool struct{}

func (x BlueWool) Id() uint16 {
	return 2058
}

type BrownWool struct{}

func (x BrownWool) Id() uint16 {
	return 2059
}

type GreenWool struct{}

func (x GreenWool) Id() uint16 {
	return 2060
}

type RedWool struct{}

func (x RedWool) Id() uint16 {
	return 2061
}

type BlackWool struct{}

func (x BlackWool) Id() uint16 {
	return 2062
}

type MovingPistonType string

const (
	MovingPistonTypeNormal MovingPistonType = "normal"
	MovingPistonTypeSticky MovingPistonType = "sticky"
)

type MovingPistonFacing string

const (
	MovingPistonFacingNorth MovingPistonFacing = "north"
	MovingPistonFacingEast  MovingPistonFacing = "east"
	MovingPistonFacingSouth MovingPistonFacing = "south"
	MovingPistonFacingWest  MovingPistonFacing = "west"
	MovingPistonFacingUp    MovingPistonFacing = "up"
	MovingPistonFacingDown  MovingPistonFacing = "down"
)

type MovingPiston struct {
	Type   MovingPistonType
	Facing MovingPistonFacing
}

func (x MovingPiston) Id() uint16 {
	switch x.Facing {
	case MovingPistonFacingNorth:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2063
		case MovingPistonTypeSticky:
			return 2064
		}
	case MovingPistonFacingEast:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2065
		case MovingPistonTypeSticky:
			return 2066
		}
	case MovingPistonFacingSouth:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2067
		case MovingPistonTypeSticky:
			return 2068
		}
	case MovingPistonFacingWest:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2069
		case MovingPistonTypeSticky:
			return 2070
		}
	case MovingPistonFacingUp:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2071
		case MovingPistonTypeSticky:
			return 2072
		}
	case MovingPistonFacingDown:
		switch x.Type {
		case MovingPistonTypeNormal:
			return 2073
		case MovingPistonTypeSticky:
			return 2074
		}
	}
	return 2063 // default state
}

type Dandelion struct{}

func (x Dandelion) Id() uint16 {
	return 2075
}

type Torchflower struct{}

func (x Torchflower) Id() uint16 {
	return 2076
}

type Poppy struct{}

func (x Poppy) Id() uint16 {
	return 2077
}

type BlueOrchid struct{}

func (x BlueOrchid) Id() uint16 {
	return 2078
}

type Allium struct{}

func (x Allium) Id() uint16 {
	return 2079
}

type AzureBluet struct{}

func (x AzureBluet) Id() uint16 {
	return 2080
}

type RedTulip struct{}

func (x RedTulip) Id() uint16 {
	return 2081
}

type OrangeTulip struct{}

func (x OrangeTulip) Id() uint16 {
	return 2082
}

type WhiteTulip struct{}

func (x WhiteTulip) Id() uint16 {
	return 2083
}

type PinkTulip struct{}

func (x PinkTulip) Id() uint16 {
	return 2084
}

type OxeyeDaisy struct{}

func (x OxeyeDaisy) Id() uint16 {
	return 2085
}

type Cornflower struct{}

func (x Cornflower) Id() uint16 {
	return 2086
}

type WitherRose struct{}

func (x WitherRose) Id() uint16 {
	return 2087
}

type LilyOfTheValley struct{}

func (x LilyOfTheValley) Id() uint16 {
	return 2088
}

type BrownMushroom struct{}

func (x BrownMushroom) Id() uint16 {
	return 2089
}

type RedMushroom struct{}

func (x RedMushroom) Id() uint16 {
	return 2090
}

type GoldBlock struct{}

func (x GoldBlock) Id() uint16 {
	return 2091
}

type IronBlock struct{}

func (x IronBlock) Id() uint16 {
	return 2092
}

type Bricks struct{}

func (x Bricks) Id() uint16 {
	return 2093
}

type Tnt struct {
	Unstable bool
}

func (x Tnt) Id() uint16 {
	switch x.Unstable {
	case true:
		return 2094
	case false:
		return 2095
	}
	return 2095 // default state
}

type Bookshelf struct{}

func (x Bookshelf) Id() uint16 {
	return 2096
}

type ChiseledBookshelfFacing string

const (
	ChiseledBookshelfFacingNorth ChiseledBookshelfFacing = "north"
	ChiseledBookshelfFacingSouth ChiseledBookshelfFacing = "south"
	ChiseledBookshelfFacingWest  ChiseledBookshelfFacing = "west"
	ChiseledBookshelfFacingEast  ChiseledBookshelfFacing = "east"
)

type ChiseledBookshelf struct {
	Facing        ChiseledBookshelfFacing
	Slot0Occupied bool
	Slot1Occupied bool
	Slot2Occupied bool
	Slot3Occupied bool
	Slot4Occupied bool
	Slot5Occupied bool
}

func (x ChiseledBookshelf) Id() uint16 {
	switch x.Slot3Occupied {
	case true:
		switch x.Slot4Occupied {
		case true:
			switch x.Slot5Occupied {
			case true:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2097
							case false:
								return 2105
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2113
							case false:
								return 2121
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2129
							case false:
								return 2137
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2145
							case false:
								return 2153
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2161
							case false:
								return 2169
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2177
							case false:
								return 2185
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2193
							case false:
								return 2201
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2209
							case false:
								return 2217
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2225
							case false:
								return 2233
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2241
							case false:
								return 2249
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2257
							case false:
								return 2265
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2273
							case false:
								return 2281
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2289
							case false:
								return 2297
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2305
							case false:
								return 2313
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2321
							case false:
								return 2329
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2337
							case false:
								return 2345
							}
						}
					}
				}
			case false:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2098
							case false:
								return 2106
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2114
							case false:
								return 2122
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2130
							case false:
								return 2138
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2146
							case false:
								return 2154
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2162
							case false:
								return 2170
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2178
							case false:
								return 2186
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2194
							case false:
								return 2202
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2210
							case false:
								return 2218
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2226
							case false:
								return 2234
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2242
							case false:
								return 2250
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2258
							case false:
								return 2266
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2274
							case false:
								return 2282
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2290
							case false:
								return 2298
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2306
							case false:
								return 2314
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2322
							case false:
								return 2330
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2338
							case false:
								return 2346
							}
						}
					}
				}
			}
		case false:
			switch x.Slot5Occupied {
			case true:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2099
							case false:
								return 2107
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2115
							case false:
								return 2123
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2131
							case false:
								return 2139
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2147
							case false:
								return 2155
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2163
							case false:
								return 2171
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2179
							case false:
								return 2187
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2195
							case false:
								return 2203
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2211
							case false:
								return 2219
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2227
							case false:
								return 2235
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2243
							case false:
								return 2251
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2259
							case false:
								return 2267
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2275
							case false:
								return 2283
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2291
							case false:
								return 2299
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2307
							case false:
								return 2315
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2323
							case false:
								return 2331
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2339
							case false:
								return 2347
							}
						}
					}
				}
			case false:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2100
							case false:
								return 2108
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2116
							case false:
								return 2124
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2132
							case false:
								return 2140
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2148
							case false:
								return 2156
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2164
							case false:
								return 2172
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2180
							case false:
								return 2188
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2196
							case false:
								return 2204
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2212
							case false:
								return 2220
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2228
							case false:
								return 2236
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2244
							case false:
								return 2252
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2260
							case false:
								return 2268
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2276
							case false:
								return 2284
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2292
							case false:
								return 2300
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2308
							case false:
								return 2316
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2324
							case false:
								return 2332
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2340
							case false:
								return 2348
							}
						}
					}
				}
			}
		}
	case false:
		switch x.Slot4Occupied {
		case true:
			switch x.Slot5Occupied {
			case true:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2101
							case false:
								return 2109
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2117
							case false:
								return 2125
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2133
							case false:
								return 2141
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2149
							case false:
								return 2157
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2165
							case false:
								return 2173
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2181
							case false:
								return 2189
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2197
							case false:
								return 2205
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2213
							case false:
								return 2221
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2229
							case false:
								return 2237
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2245
							case false:
								return 2253
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2261
							case false:
								return 2269
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2277
							case false:
								return 2285
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2293
							case false:
								return 2301
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2309
							case false:
								return 2317
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2325
							case false:
								return 2333
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2341
							case false:
								return 2349
							}
						}
					}
				}
			case false:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2102
							case false:
								return 2110
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2118
							case false:
								return 2126
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2134
							case false:
								return 2142
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2150
							case false:
								return 2158
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2166
							case false:
								return 2174
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2182
							case false:
								return 2190
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2198
							case false:
								return 2206
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2214
							case false:
								return 2222
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2230
							case false:
								return 2238
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2246
							case false:
								return 2254
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2262
							case false:
								return 2270
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2278
							case false:
								return 2286
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2294
							case false:
								return 2302
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2310
							case false:
								return 2318
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2326
							case false:
								return 2334
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2342
							case false:
								return 2350
							}
						}
					}
				}
			}
		case false:
			switch x.Slot5Occupied {
			case true:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2103
							case false:
								return 2111
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2119
							case false:
								return 2127
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2135
							case false:
								return 2143
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2151
							case false:
								return 2159
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2167
							case false:
								return 2175
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2183
							case false:
								return 2191
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2199
							case false:
								return 2207
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2215
							case false:
								return 2223
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2231
							case false:
								return 2239
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2247
							case false:
								return 2255
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2263
							case false:
								return 2271
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2279
							case false:
								return 2287
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2295
							case false:
								return 2303
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2311
							case false:
								return 2319
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2327
							case false:
								return 2335
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2343
							case false:
								return 2351
							}
						}
					}
				}
			case false:
				switch x.Facing {
				case ChiseledBookshelfFacingNorth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2104
							case false:
								return 2112
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2120
							case false:
								return 2128
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2136
							case false:
								return 2144
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2152
							case false:
								return 2160
							}
						}
					}
				case ChiseledBookshelfFacingSouth:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2168
							case false:
								return 2176
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2184
							case false:
								return 2192
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2200
							case false:
								return 2208
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2216
							case false:
								return 2224
							}
						}
					}
				case ChiseledBookshelfFacingWest:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2232
							case false:
								return 2240
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2248
							case false:
								return 2256
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2264
							case false:
								return 2272
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2280
							case false:
								return 2288
							}
						}
					}
				case ChiseledBookshelfFacingEast:
					switch x.Slot0Occupied {
					case true:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2296
							case false:
								return 2304
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2312
							case false:
								return 2320
							}
						}
					case false:
						switch x.Slot1Occupied {
						case true:
							switch x.Slot2Occupied {
							case true:
								return 2328
							case false:
								return 2336
							}
						case false:
							switch x.Slot2Occupied {
							case true:
								return 2344
							case false:
								return 2352
							}
						}
					}
				}
			}
		}
	}
	return 2160 // default state
}

type MossyCobblestone struct{}

func (x MossyCobblestone) Id() uint16 {
	return 2353
}

type Obsidian struct{}

func (x Obsidian) Id() uint16 {
	return 2354
}

type Torch struct{}

func (x Torch) Id() uint16 {
	return 2355
}

type WallTorchFacing string

const (
	WallTorchFacingNorth WallTorchFacing = "north"
	WallTorchFacingSouth WallTorchFacing = "south"
	WallTorchFacingWest  WallTorchFacing = "west"
	WallTorchFacingEast  WallTorchFacing = "east"
)

type WallTorch struct {
	Facing WallTorchFacing
}

func (x WallTorch) Id() uint16 {
	switch x.Facing {
	case WallTorchFacingNorth:
		return 2356
	case WallTorchFacingSouth:
		return 2357
	case WallTorchFacingWest:
		return 2358
	case WallTorchFacingEast:
		return 2359
	}
	return 2356 // default state
}

type Fire struct {
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Age int
}

func (x Fire) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2360
						case 1:
							return 2392
						case 2:
							return 2424
						case 3:
							return 2456
						case 4:
							return 2488
						case 5:
							return 2520
						case 6:
							return 2552
						case 7:
							return 2584
						case 8:
							return 2616
						case 9:
							return 2648
						case 10:
							return 2680
						case 11:
							return 2712
						case 12:
							return 2744
						case 13:
							return 2776
						case 14:
							return 2808
						case 15:
							return 2840
						}
					case false:
						switch x.Age {
						case 0:
							return 2361
						case 1:
							return 2393
						case 2:
							return 2425
						case 3:
							return 2457
						case 4:
							return 2489
						case 5:
							return 2521
						case 6:
							return 2553
						case 7:
							return 2585
						case 8:
							return 2617
						case 9:
							return 2649
						case 10:
							return 2681
						case 11:
							return 2713
						case 12:
							return 2745
						case 13:
							return 2777
						case 14:
							return 2809
						case 15:
							return 2841
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2362
						case 1:
							return 2394
						case 2:
							return 2426
						case 3:
							return 2458
						case 4:
							return 2490
						case 5:
							return 2522
						case 6:
							return 2554
						case 7:
							return 2586
						case 8:
							return 2618
						case 9:
							return 2650
						case 10:
							return 2682
						case 11:
							return 2714
						case 12:
							return 2746
						case 13:
							return 2778
						case 14:
							return 2810
						case 15:
							return 2842
						}
					case false:
						switch x.Age {
						case 0:
							return 2363
						case 1:
							return 2395
						case 2:
							return 2427
						case 3:
							return 2459
						case 4:
							return 2491
						case 5:
							return 2523
						case 6:
							return 2555
						case 7:
							return 2587
						case 8:
							return 2619
						case 9:
							return 2651
						case 10:
							return 2683
						case 11:
							return 2715
						case 12:
							return 2747
						case 13:
							return 2779
						case 14:
							return 2811
						case 15:
							return 2843
						}
					}
				}
			case false:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2364
						case 1:
							return 2396
						case 2:
							return 2428
						case 3:
							return 2460
						case 4:
							return 2492
						case 5:
							return 2524
						case 6:
							return 2556
						case 7:
							return 2588
						case 8:
							return 2620
						case 9:
							return 2652
						case 10:
							return 2684
						case 11:
							return 2716
						case 12:
							return 2748
						case 13:
							return 2780
						case 14:
							return 2812
						case 15:
							return 2844
						}
					case false:
						switch x.Age {
						case 0:
							return 2365
						case 1:
							return 2397
						case 2:
							return 2429
						case 3:
							return 2461
						case 4:
							return 2493
						case 5:
							return 2525
						case 6:
							return 2557
						case 7:
							return 2589
						case 8:
							return 2621
						case 9:
							return 2653
						case 10:
							return 2685
						case 11:
							return 2717
						case 12:
							return 2749
						case 13:
							return 2781
						case 14:
							return 2813
						case 15:
							return 2845
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2366
						case 1:
							return 2398
						case 2:
							return 2430
						case 3:
							return 2462
						case 4:
							return 2494
						case 5:
							return 2526
						case 6:
							return 2558
						case 7:
							return 2590
						case 8:
							return 2622
						case 9:
							return 2654
						case 10:
							return 2686
						case 11:
							return 2718
						case 12:
							return 2750
						case 13:
							return 2782
						case 14:
							return 2814
						case 15:
							return 2846
						}
					case false:
						switch x.Age {
						case 0:
							return 2367
						case 1:
							return 2399
						case 2:
							return 2431
						case 3:
							return 2463
						case 4:
							return 2495
						case 5:
							return 2527
						case 6:
							return 2559
						case 7:
							return 2591
						case 8:
							return 2623
						case 9:
							return 2655
						case 10:
							return 2687
						case 11:
							return 2719
						case 12:
							return 2751
						case 13:
							return 2783
						case 14:
							return 2815
						case 15:
							return 2847
						}
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2368
						case 1:
							return 2400
						case 2:
							return 2432
						case 3:
							return 2464
						case 4:
							return 2496
						case 5:
							return 2528
						case 6:
							return 2560
						case 7:
							return 2592
						case 8:
							return 2624
						case 9:
							return 2656
						case 10:
							return 2688
						case 11:
							return 2720
						case 12:
							return 2752
						case 13:
							return 2784
						case 14:
							return 2816
						case 15:
							return 2848
						}
					case false:
						switch x.Age {
						case 0:
							return 2369
						case 1:
							return 2401
						case 2:
							return 2433
						case 3:
							return 2465
						case 4:
							return 2497
						case 5:
							return 2529
						case 6:
							return 2561
						case 7:
							return 2593
						case 8:
							return 2625
						case 9:
							return 2657
						case 10:
							return 2689
						case 11:
							return 2721
						case 12:
							return 2753
						case 13:
							return 2785
						case 14:
							return 2817
						case 15:
							return 2849
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2370
						case 1:
							return 2402
						case 2:
							return 2434
						case 3:
							return 2466
						case 4:
							return 2498
						case 5:
							return 2530
						case 6:
							return 2562
						case 7:
							return 2594
						case 8:
							return 2626
						case 9:
							return 2658
						case 10:
							return 2690
						case 11:
							return 2722
						case 12:
							return 2754
						case 13:
							return 2786
						case 14:
							return 2818
						case 15:
							return 2850
						}
					case false:
						switch x.Age {
						case 0:
							return 2371
						case 1:
							return 2403
						case 2:
							return 2435
						case 3:
							return 2467
						case 4:
							return 2499
						case 5:
							return 2531
						case 6:
							return 2563
						case 7:
							return 2595
						case 8:
							return 2627
						case 9:
							return 2659
						case 10:
							return 2691
						case 11:
							return 2723
						case 12:
							return 2755
						case 13:
							return 2787
						case 14:
							return 2819
						case 15:
							return 2851
						}
					}
				}
			case false:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2372
						case 1:
							return 2404
						case 2:
							return 2436
						case 3:
							return 2468
						case 4:
							return 2500
						case 5:
							return 2532
						case 6:
							return 2564
						case 7:
							return 2596
						case 8:
							return 2628
						case 9:
							return 2660
						case 10:
							return 2692
						case 11:
							return 2724
						case 12:
							return 2756
						case 13:
							return 2788
						case 14:
							return 2820
						case 15:
							return 2852
						}
					case false:
						switch x.Age {
						case 0:
							return 2373
						case 1:
							return 2405
						case 2:
							return 2437
						case 3:
							return 2469
						case 4:
							return 2501
						case 5:
							return 2533
						case 6:
							return 2565
						case 7:
							return 2597
						case 8:
							return 2629
						case 9:
							return 2661
						case 10:
							return 2693
						case 11:
							return 2725
						case 12:
							return 2757
						case 13:
							return 2789
						case 14:
							return 2821
						case 15:
							return 2853
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2374
						case 1:
							return 2406
						case 2:
							return 2438
						case 3:
							return 2470
						case 4:
							return 2502
						case 5:
							return 2534
						case 6:
							return 2566
						case 7:
							return 2598
						case 8:
							return 2630
						case 9:
							return 2662
						case 10:
							return 2694
						case 11:
							return 2726
						case 12:
							return 2758
						case 13:
							return 2790
						case 14:
							return 2822
						case 15:
							return 2854
						}
					case false:
						switch x.Age {
						case 0:
							return 2375
						case 1:
							return 2407
						case 2:
							return 2439
						case 3:
							return 2471
						case 4:
							return 2503
						case 5:
							return 2535
						case 6:
							return 2567
						case 7:
							return 2599
						case 8:
							return 2631
						case 9:
							return 2663
						case 10:
							return 2695
						case 11:
							return 2727
						case 12:
							return 2759
						case 13:
							return 2791
						case 14:
							return 2823
						case 15:
							return 2855
						}
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2376
						case 1:
							return 2408
						case 2:
							return 2440
						case 3:
							return 2472
						case 4:
							return 2504
						case 5:
							return 2536
						case 6:
							return 2568
						case 7:
							return 2600
						case 8:
							return 2632
						case 9:
							return 2664
						case 10:
							return 2696
						case 11:
							return 2728
						case 12:
							return 2760
						case 13:
							return 2792
						case 14:
							return 2824
						case 15:
							return 2856
						}
					case false:
						switch x.Age {
						case 0:
							return 2377
						case 1:
							return 2409
						case 2:
							return 2441
						case 3:
							return 2473
						case 4:
							return 2505
						case 5:
							return 2537
						case 6:
							return 2569
						case 7:
							return 2601
						case 8:
							return 2633
						case 9:
							return 2665
						case 10:
							return 2697
						case 11:
							return 2729
						case 12:
							return 2761
						case 13:
							return 2793
						case 14:
							return 2825
						case 15:
							return 2857
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2378
						case 1:
							return 2410
						case 2:
							return 2442
						case 3:
							return 2474
						case 4:
							return 2506
						case 5:
							return 2538
						case 6:
							return 2570
						case 7:
							return 2602
						case 8:
							return 2634
						case 9:
							return 2666
						case 10:
							return 2698
						case 11:
							return 2730
						case 12:
							return 2762
						case 13:
							return 2794
						case 14:
							return 2826
						case 15:
							return 2858
						}
					case false:
						switch x.Age {
						case 0:
							return 2379
						case 1:
							return 2411
						case 2:
							return 2443
						case 3:
							return 2475
						case 4:
							return 2507
						case 5:
							return 2539
						case 6:
							return 2571
						case 7:
							return 2603
						case 8:
							return 2635
						case 9:
							return 2667
						case 10:
							return 2699
						case 11:
							return 2731
						case 12:
							return 2763
						case 13:
							return 2795
						case 14:
							return 2827
						case 15:
							return 2859
						}
					}
				}
			case false:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2380
						case 1:
							return 2412
						case 2:
							return 2444
						case 3:
							return 2476
						case 4:
							return 2508
						case 5:
							return 2540
						case 6:
							return 2572
						case 7:
							return 2604
						case 8:
							return 2636
						case 9:
							return 2668
						case 10:
							return 2700
						case 11:
							return 2732
						case 12:
							return 2764
						case 13:
							return 2796
						case 14:
							return 2828
						case 15:
							return 2860
						}
					case false:
						switch x.Age {
						case 0:
							return 2381
						case 1:
							return 2413
						case 2:
							return 2445
						case 3:
							return 2477
						case 4:
							return 2509
						case 5:
							return 2541
						case 6:
							return 2573
						case 7:
							return 2605
						case 8:
							return 2637
						case 9:
							return 2669
						case 10:
							return 2701
						case 11:
							return 2733
						case 12:
							return 2765
						case 13:
							return 2797
						case 14:
							return 2829
						case 15:
							return 2861
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2382
						case 1:
							return 2414
						case 2:
							return 2446
						case 3:
							return 2478
						case 4:
							return 2510
						case 5:
							return 2542
						case 6:
							return 2574
						case 7:
							return 2606
						case 8:
							return 2638
						case 9:
							return 2670
						case 10:
							return 2702
						case 11:
							return 2734
						case 12:
							return 2766
						case 13:
							return 2798
						case 14:
							return 2830
						case 15:
							return 2862
						}
					case false:
						switch x.Age {
						case 0:
							return 2383
						case 1:
							return 2415
						case 2:
							return 2447
						case 3:
							return 2479
						case 4:
							return 2511
						case 5:
							return 2543
						case 6:
							return 2575
						case 7:
							return 2607
						case 8:
							return 2639
						case 9:
							return 2671
						case 10:
							return 2703
						case 11:
							return 2735
						case 12:
							return 2767
						case 13:
							return 2799
						case 14:
							return 2831
						case 15:
							return 2863
						}
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2384
						case 1:
							return 2416
						case 2:
							return 2448
						case 3:
							return 2480
						case 4:
							return 2512
						case 5:
							return 2544
						case 6:
							return 2576
						case 7:
							return 2608
						case 8:
							return 2640
						case 9:
							return 2672
						case 10:
							return 2704
						case 11:
							return 2736
						case 12:
							return 2768
						case 13:
							return 2800
						case 14:
							return 2832
						case 15:
							return 2864
						}
					case false:
						switch x.Age {
						case 0:
							return 2385
						case 1:
							return 2417
						case 2:
							return 2449
						case 3:
							return 2481
						case 4:
							return 2513
						case 5:
							return 2545
						case 6:
							return 2577
						case 7:
							return 2609
						case 8:
							return 2641
						case 9:
							return 2673
						case 10:
							return 2705
						case 11:
							return 2737
						case 12:
							return 2769
						case 13:
							return 2801
						case 14:
							return 2833
						case 15:
							return 2865
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2386
						case 1:
							return 2418
						case 2:
							return 2450
						case 3:
							return 2482
						case 4:
							return 2514
						case 5:
							return 2546
						case 6:
							return 2578
						case 7:
							return 2610
						case 8:
							return 2642
						case 9:
							return 2674
						case 10:
							return 2706
						case 11:
							return 2738
						case 12:
							return 2770
						case 13:
							return 2802
						case 14:
							return 2834
						case 15:
							return 2866
						}
					case false:
						switch x.Age {
						case 0:
							return 2387
						case 1:
							return 2419
						case 2:
							return 2451
						case 3:
							return 2483
						case 4:
							return 2515
						case 5:
							return 2547
						case 6:
							return 2579
						case 7:
							return 2611
						case 8:
							return 2643
						case 9:
							return 2675
						case 10:
							return 2707
						case 11:
							return 2739
						case 12:
							return 2771
						case 13:
							return 2803
						case 14:
							return 2835
						case 15:
							return 2867
						}
					}
				}
			case false:
				switch x.Up {
				case true:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2388
						case 1:
							return 2420
						case 2:
							return 2452
						case 3:
							return 2484
						case 4:
							return 2516
						case 5:
							return 2548
						case 6:
							return 2580
						case 7:
							return 2612
						case 8:
							return 2644
						case 9:
							return 2676
						case 10:
							return 2708
						case 11:
							return 2740
						case 12:
							return 2772
						case 13:
							return 2804
						case 14:
							return 2836
						case 15:
							return 2868
						}
					case false:
						switch x.Age {
						case 0:
							return 2389
						case 1:
							return 2421
						case 2:
							return 2453
						case 3:
							return 2485
						case 4:
							return 2517
						case 5:
							return 2549
						case 6:
							return 2581
						case 7:
							return 2613
						case 8:
							return 2645
						case 9:
							return 2677
						case 10:
							return 2709
						case 11:
							return 2741
						case 12:
							return 2773
						case 13:
							return 2805
						case 14:
							return 2837
						case 15:
							return 2869
						}
					}
				case false:
					switch x.West {
					case true:
						switch x.Age {
						case 0:
							return 2390
						case 1:
							return 2422
						case 2:
							return 2454
						case 3:
							return 2486
						case 4:
							return 2518
						case 5:
							return 2550
						case 6:
							return 2582
						case 7:
							return 2614
						case 8:
							return 2646
						case 9:
							return 2678
						case 10:
							return 2710
						case 11:
							return 2742
						case 12:
							return 2774
						case 13:
							return 2806
						case 14:
							return 2838
						case 15:
							return 2870
						}
					case false:
						switch x.Age {
						case 0:
							return 2391
						case 1:
							return 2423
						case 2:
							return 2455
						case 3:
							return 2487
						case 4:
							return 2519
						case 5:
							return 2551
						case 6:
							return 2583
						case 7:
							return 2615
						case 8:
							return 2647
						case 9:
							return 2679
						case 10:
							return 2711
						case 11:
							return 2743
						case 12:
							return 2775
						case 13:
							return 2807
						case 14:
							return 2839
						case 15:
							return 2871
						}
					}
				}
			}
		}
	}
	return 2391 // default state
}

type SoulFire struct{}

func (x SoulFire) Id() uint16 {
	return 2872
}

type Spawner struct{}

func (x Spawner) Id() uint16 {
	return 2873
}

type OakStairsFacing string

const (
	OakStairsFacingNorth OakStairsFacing = "north"
	OakStairsFacingSouth OakStairsFacing = "south"
	OakStairsFacingWest  OakStairsFacing = "west"
	OakStairsFacingEast  OakStairsFacing = "east"
)

type OakStairsHalf string

const (
	OakStairsHalfTop    OakStairsHalf = "top"
	OakStairsHalfBottom OakStairsHalf = "bottom"
)

type OakStairsShape string

const (
	OakStairsShapeStraight   OakStairsShape = "straight"
	OakStairsShapeInnerLeft  OakStairsShape = "inner_left"
	OakStairsShapeInnerRight OakStairsShape = "inner_right"
	OakStairsShapeOuterLeft  OakStairsShape = "outer_left"
	OakStairsShapeOuterRight OakStairsShape = "outer_right"
)

type OakStairs struct {
	Facing      OakStairsFacing
	Half        OakStairsHalf
	Shape       OakStairsShape
	Waterlogged bool
}

func (x OakStairs) Id() uint16 {
	switch x.Facing {
	case OakStairsFacingNorth:
		switch x.Half {
		case OakStairsHalfTop:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2874
				case false:
					return 2875
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2876
				case false:
					return 2877
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2878
				case false:
					return 2879
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2880
				case false:
					return 2881
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2882
				case false:
					return 2883
				}
			}
		case OakStairsHalfBottom:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2884
				case false:
					return 2885
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2886
				case false:
					return 2887
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2888
				case false:
					return 2889
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2890
				case false:
					return 2891
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2892
				case false:
					return 2893
				}
			}
		}
	case OakStairsFacingSouth:
		switch x.Half {
		case OakStairsHalfTop:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2894
				case false:
					return 2895
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2896
				case false:
					return 2897
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2898
				case false:
					return 2899
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2900
				case false:
					return 2901
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2902
				case false:
					return 2903
				}
			}
		case OakStairsHalfBottom:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2904
				case false:
					return 2905
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2906
				case false:
					return 2907
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2908
				case false:
					return 2909
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2910
				case false:
					return 2911
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2912
				case false:
					return 2913
				}
			}
		}
	case OakStairsFacingWest:
		switch x.Half {
		case OakStairsHalfTop:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2914
				case false:
					return 2915
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2916
				case false:
					return 2917
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2918
				case false:
					return 2919
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2920
				case false:
					return 2921
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2922
				case false:
					return 2923
				}
			}
		case OakStairsHalfBottom:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2924
				case false:
					return 2925
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2926
				case false:
					return 2927
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2928
				case false:
					return 2929
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2930
				case false:
					return 2931
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2932
				case false:
					return 2933
				}
			}
		}
	case OakStairsFacingEast:
		switch x.Half {
		case OakStairsHalfTop:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2934
				case false:
					return 2935
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2936
				case false:
					return 2937
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2938
				case false:
					return 2939
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2940
				case false:
					return 2941
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2942
				case false:
					return 2943
				}
			}
		case OakStairsHalfBottom:
			switch x.Shape {
			case OakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 2944
				case false:
					return 2945
				}
			case OakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 2946
				case false:
					return 2947
				}
			case OakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 2948
				case false:
					return 2949
				}
			case OakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 2950
				case false:
					return 2951
				}
			case OakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 2952
				case false:
					return 2953
				}
			}
		}
	}
	return 2885 // default state
}

type ChestType string

const (
	ChestTypeSingle ChestType = "single"
	ChestTypeLeft   ChestType = "left"
	ChestTypeRight  ChestType = "right"
)

type ChestFacing string

const (
	ChestFacingNorth ChestFacing = "north"
	ChestFacingSouth ChestFacing = "south"
	ChestFacingWest  ChestFacing = "west"
	ChestFacingEast  ChestFacing = "east"
)

type Chest struct {
	Type        ChestType
	Facing      ChestFacing
	Waterlogged bool
}

func (x Chest) Id() uint16 {
	switch x.Facing {
	case ChestFacingNorth:
		switch x.Waterlogged {
		case true:
			switch x.Type {
			case ChestTypeSingle:
				return 2954
			case ChestTypeLeft:
				return 2956
			case ChestTypeRight:
				return 2958
			}
		case false:
			switch x.Type {
			case ChestTypeSingle:
				return 2955
			case ChestTypeLeft:
				return 2957
			case ChestTypeRight:
				return 2959
			}
		}
	case ChestFacingSouth:
		switch x.Waterlogged {
		case true:
			switch x.Type {
			case ChestTypeSingle:
				return 2960
			case ChestTypeLeft:
				return 2962
			case ChestTypeRight:
				return 2964
			}
		case false:
			switch x.Type {
			case ChestTypeSingle:
				return 2961
			case ChestTypeLeft:
				return 2963
			case ChestTypeRight:
				return 2965
			}
		}
	case ChestFacingWest:
		switch x.Waterlogged {
		case true:
			switch x.Type {
			case ChestTypeSingle:
				return 2966
			case ChestTypeLeft:
				return 2968
			case ChestTypeRight:
				return 2970
			}
		case false:
			switch x.Type {
			case ChestTypeSingle:
				return 2967
			case ChestTypeLeft:
				return 2969
			case ChestTypeRight:
				return 2971
			}
		}
	case ChestFacingEast:
		switch x.Waterlogged {
		case true:
			switch x.Type {
			case ChestTypeSingle:
				return 2972
			case ChestTypeLeft:
				return 2974
			case ChestTypeRight:
				return 2976
			}
		case false:
			switch x.Type {
			case ChestTypeSingle:
				return 2973
			case ChestTypeLeft:
				return 2975
			case ChestTypeRight:
				return 2977
			}
		}
	}
	return 2955 // default state
}

type RedstoneWireSouth string

const (
	RedstoneWireSouthUp   RedstoneWireSouth = "up"
	RedstoneWireSouthSide RedstoneWireSouth = "side"
	RedstoneWireSouthNone RedstoneWireSouth = "none"
)

type RedstoneWireWest string

const (
	RedstoneWireWestUp   RedstoneWireWest = "up"
	RedstoneWireWestSide RedstoneWireWest = "side"
	RedstoneWireWestNone RedstoneWireWest = "none"
)

type RedstoneWireEast string

const (
	RedstoneWireEastUp   RedstoneWireEast = "up"
	RedstoneWireEastSide RedstoneWireEast = "side"
	RedstoneWireEastNone RedstoneWireEast = "none"
)

type RedstoneWireNorth string

const (
	RedstoneWireNorthUp   RedstoneWireNorth = "up"
	RedstoneWireNorthSide RedstoneWireNorth = "side"
	RedstoneWireNorthNone RedstoneWireNorth = "none"
)

type RedstoneWire struct {
	South RedstoneWireSouth
	West  RedstoneWireWest
	East  RedstoneWireEast
	North RedstoneWireNorth
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power int
}

func (x RedstoneWire) Id() uint16 {
	switch x.North {
	case RedstoneWireNorthUp:
		switch x.Power {
		case 0:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2978
					case RedstoneWireEastSide:
						return 3410
					case RedstoneWireEastNone:
						return 3842
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2979
					case RedstoneWireEastSide:
						return 3411
					case RedstoneWireEastNone:
						return 3843
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2980
					case RedstoneWireEastSide:
						return 3412
					case RedstoneWireEastNone:
						return 3844
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2981
					case RedstoneWireEastSide:
						return 3413
					case RedstoneWireEastNone:
						return 3845
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2982
					case RedstoneWireEastSide:
						return 3414
					case RedstoneWireEastNone:
						return 3846
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2983
					case RedstoneWireEastSide:
						return 3415
					case RedstoneWireEastNone:
						return 3847
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2984
					case RedstoneWireEastSide:
						return 3416
					case RedstoneWireEastNone:
						return 3848
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2985
					case RedstoneWireEastSide:
						return 3417
					case RedstoneWireEastNone:
						return 3849
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2986
					case RedstoneWireEastSide:
						return 3418
					case RedstoneWireEastNone:
						return 3850
					}
				}
			}
		case 1:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2987
					case RedstoneWireEastSide:
						return 3419
					case RedstoneWireEastNone:
						return 3851
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2988
					case RedstoneWireEastSide:
						return 3420
					case RedstoneWireEastNone:
						return 3852
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2989
					case RedstoneWireEastSide:
						return 3421
					case RedstoneWireEastNone:
						return 3853
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2990
					case RedstoneWireEastSide:
						return 3422
					case RedstoneWireEastNone:
						return 3854
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2991
					case RedstoneWireEastSide:
						return 3423
					case RedstoneWireEastNone:
						return 3855
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2992
					case RedstoneWireEastSide:
						return 3424
					case RedstoneWireEastNone:
						return 3856
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2993
					case RedstoneWireEastSide:
						return 3425
					case RedstoneWireEastNone:
						return 3857
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2994
					case RedstoneWireEastSide:
						return 3426
					case RedstoneWireEastNone:
						return 3858
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2995
					case RedstoneWireEastSide:
						return 3427
					case RedstoneWireEastNone:
						return 3859
					}
				}
			}
		case 2:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2996
					case RedstoneWireEastSide:
						return 3428
					case RedstoneWireEastNone:
						return 3860
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 2997
					case RedstoneWireEastSide:
						return 3429
					case RedstoneWireEastNone:
						return 3861
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 2998
					case RedstoneWireEastSide:
						return 3430
					case RedstoneWireEastNone:
						return 3862
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 2999
					case RedstoneWireEastSide:
						return 3431
					case RedstoneWireEastNone:
						return 3863
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3000
					case RedstoneWireEastSide:
						return 3432
					case RedstoneWireEastNone:
						return 3864
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3001
					case RedstoneWireEastSide:
						return 3433
					case RedstoneWireEastNone:
						return 3865
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3002
					case RedstoneWireEastSide:
						return 3434
					case RedstoneWireEastNone:
						return 3866
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3003
					case RedstoneWireEastSide:
						return 3435
					case RedstoneWireEastNone:
						return 3867
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3004
					case RedstoneWireEastSide:
						return 3436
					case RedstoneWireEastNone:
						return 3868
					}
				}
			}
		case 3:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3005
					case RedstoneWireEastSide:
						return 3437
					case RedstoneWireEastNone:
						return 3869
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3006
					case RedstoneWireEastSide:
						return 3438
					case RedstoneWireEastNone:
						return 3870
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3007
					case RedstoneWireEastSide:
						return 3439
					case RedstoneWireEastNone:
						return 3871
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3008
					case RedstoneWireEastSide:
						return 3440
					case RedstoneWireEastNone:
						return 3872
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3009
					case RedstoneWireEastSide:
						return 3441
					case RedstoneWireEastNone:
						return 3873
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3010
					case RedstoneWireEastSide:
						return 3442
					case RedstoneWireEastNone:
						return 3874
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3011
					case RedstoneWireEastSide:
						return 3443
					case RedstoneWireEastNone:
						return 3875
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3012
					case RedstoneWireEastSide:
						return 3444
					case RedstoneWireEastNone:
						return 3876
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3013
					case RedstoneWireEastSide:
						return 3445
					case RedstoneWireEastNone:
						return 3877
					}
				}
			}
		case 4:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3014
					case RedstoneWireEastSide:
						return 3446
					case RedstoneWireEastNone:
						return 3878
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3015
					case RedstoneWireEastSide:
						return 3447
					case RedstoneWireEastNone:
						return 3879
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3016
					case RedstoneWireEastSide:
						return 3448
					case RedstoneWireEastNone:
						return 3880
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3017
					case RedstoneWireEastSide:
						return 3449
					case RedstoneWireEastNone:
						return 3881
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3018
					case RedstoneWireEastSide:
						return 3450
					case RedstoneWireEastNone:
						return 3882
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3019
					case RedstoneWireEastSide:
						return 3451
					case RedstoneWireEastNone:
						return 3883
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3020
					case RedstoneWireEastSide:
						return 3452
					case RedstoneWireEastNone:
						return 3884
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3021
					case RedstoneWireEastSide:
						return 3453
					case RedstoneWireEastNone:
						return 3885
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3022
					case RedstoneWireEastSide:
						return 3454
					case RedstoneWireEastNone:
						return 3886
					}
				}
			}
		case 5:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3023
					case RedstoneWireEastSide:
						return 3455
					case RedstoneWireEastNone:
						return 3887
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3024
					case RedstoneWireEastSide:
						return 3456
					case RedstoneWireEastNone:
						return 3888
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3025
					case RedstoneWireEastSide:
						return 3457
					case RedstoneWireEastNone:
						return 3889
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3026
					case RedstoneWireEastSide:
						return 3458
					case RedstoneWireEastNone:
						return 3890
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3027
					case RedstoneWireEastSide:
						return 3459
					case RedstoneWireEastNone:
						return 3891
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3028
					case RedstoneWireEastSide:
						return 3460
					case RedstoneWireEastNone:
						return 3892
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3029
					case RedstoneWireEastSide:
						return 3461
					case RedstoneWireEastNone:
						return 3893
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3030
					case RedstoneWireEastSide:
						return 3462
					case RedstoneWireEastNone:
						return 3894
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3031
					case RedstoneWireEastSide:
						return 3463
					case RedstoneWireEastNone:
						return 3895
					}
				}
			}
		case 6:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3032
					case RedstoneWireEastSide:
						return 3464
					case RedstoneWireEastNone:
						return 3896
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3033
					case RedstoneWireEastSide:
						return 3465
					case RedstoneWireEastNone:
						return 3897
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3034
					case RedstoneWireEastSide:
						return 3466
					case RedstoneWireEastNone:
						return 3898
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3035
					case RedstoneWireEastSide:
						return 3467
					case RedstoneWireEastNone:
						return 3899
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3036
					case RedstoneWireEastSide:
						return 3468
					case RedstoneWireEastNone:
						return 3900
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3037
					case RedstoneWireEastSide:
						return 3469
					case RedstoneWireEastNone:
						return 3901
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3038
					case RedstoneWireEastSide:
						return 3470
					case RedstoneWireEastNone:
						return 3902
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3039
					case RedstoneWireEastSide:
						return 3471
					case RedstoneWireEastNone:
						return 3903
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3040
					case RedstoneWireEastSide:
						return 3472
					case RedstoneWireEastNone:
						return 3904
					}
				}
			}
		case 7:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3041
					case RedstoneWireEastSide:
						return 3473
					case RedstoneWireEastNone:
						return 3905
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3042
					case RedstoneWireEastSide:
						return 3474
					case RedstoneWireEastNone:
						return 3906
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3043
					case RedstoneWireEastSide:
						return 3475
					case RedstoneWireEastNone:
						return 3907
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3044
					case RedstoneWireEastSide:
						return 3476
					case RedstoneWireEastNone:
						return 3908
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3045
					case RedstoneWireEastSide:
						return 3477
					case RedstoneWireEastNone:
						return 3909
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3046
					case RedstoneWireEastSide:
						return 3478
					case RedstoneWireEastNone:
						return 3910
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3047
					case RedstoneWireEastSide:
						return 3479
					case RedstoneWireEastNone:
						return 3911
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3048
					case RedstoneWireEastSide:
						return 3480
					case RedstoneWireEastNone:
						return 3912
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3049
					case RedstoneWireEastSide:
						return 3481
					case RedstoneWireEastNone:
						return 3913
					}
				}
			}
		case 8:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3050
					case RedstoneWireEastSide:
						return 3482
					case RedstoneWireEastNone:
						return 3914
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3051
					case RedstoneWireEastSide:
						return 3483
					case RedstoneWireEastNone:
						return 3915
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3052
					case RedstoneWireEastSide:
						return 3484
					case RedstoneWireEastNone:
						return 3916
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3053
					case RedstoneWireEastSide:
						return 3485
					case RedstoneWireEastNone:
						return 3917
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3054
					case RedstoneWireEastSide:
						return 3486
					case RedstoneWireEastNone:
						return 3918
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3055
					case RedstoneWireEastSide:
						return 3487
					case RedstoneWireEastNone:
						return 3919
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3056
					case RedstoneWireEastSide:
						return 3488
					case RedstoneWireEastNone:
						return 3920
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3057
					case RedstoneWireEastSide:
						return 3489
					case RedstoneWireEastNone:
						return 3921
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3058
					case RedstoneWireEastSide:
						return 3490
					case RedstoneWireEastNone:
						return 3922
					}
				}
			}
		case 9:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3059
					case RedstoneWireEastSide:
						return 3491
					case RedstoneWireEastNone:
						return 3923
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3060
					case RedstoneWireEastSide:
						return 3492
					case RedstoneWireEastNone:
						return 3924
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3061
					case RedstoneWireEastSide:
						return 3493
					case RedstoneWireEastNone:
						return 3925
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3062
					case RedstoneWireEastSide:
						return 3494
					case RedstoneWireEastNone:
						return 3926
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3063
					case RedstoneWireEastSide:
						return 3495
					case RedstoneWireEastNone:
						return 3927
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3064
					case RedstoneWireEastSide:
						return 3496
					case RedstoneWireEastNone:
						return 3928
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3065
					case RedstoneWireEastSide:
						return 3497
					case RedstoneWireEastNone:
						return 3929
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3066
					case RedstoneWireEastSide:
						return 3498
					case RedstoneWireEastNone:
						return 3930
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3067
					case RedstoneWireEastSide:
						return 3499
					case RedstoneWireEastNone:
						return 3931
					}
				}
			}
		case 10:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3068
					case RedstoneWireEastSide:
						return 3500
					case RedstoneWireEastNone:
						return 3932
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3069
					case RedstoneWireEastSide:
						return 3501
					case RedstoneWireEastNone:
						return 3933
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3070
					case RedstoneWireEastSide:
						return 3502
					case RedstoneWireEastNone:
						return 3934
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3071
					case RedstoneWireEastSide:
						return 3503
					case RedstoneWireEastNone:
						return 3935
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3072
					case RedstoneWireEastSide:
						return 3504
					case RedstoneWireEastNone:
						return 3936
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3073
					case RedstoneWireEastSide:
						return 3505
					case RedstoneWireEastNone:
						return 3937
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3074
					case RedstoneWireEastSide:
						return 3506
					case RedstoneWireEastNone:
						return 3938
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3075
					case RedstoneWireEastSide:
						return 3507
					case RedstoneWireEastNone:
						return 3939
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3076
					case RedstoneWireEastSide:
						return 3508
					case RedstoneWireEastNone:
						return 3940
					}
				}
			}
		case 11:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3077
					case RedstoneWireEastSide:
						return 3509
					case RedstoneWireEastNone:
						return 3941
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3078
					case RedstoneWireEastSide:
						return 3510
					case RedstoneWireEastNone:
						return 3942
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3079
					case RedstoneWireEastSide:
						return 3511
					case RedstoneWireEastNone:
						return 3943
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3080
					case RedstoneWireEastSide:
						return 3512
					case RedstoneWireEastNone:
						return 3944
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3081
					case RedstoneWireEastSide:
						return 3513
					case RedstoneWireEastNone:
						return 3945
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3082
					case RedstoneWireEastSide:
						return 3514
					case RedstoneWireEastNone:
						return 3946
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3083
					case RedstoneWireEastSide:
						return 3515
					case RedstoneWireEastNone:
						return 3947
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3084
					case RedstoneWireEastSide:
						return 3516
					case RedstoneWireEastNone:
						return 3948
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3085
					case RedstoneWireEastSide:
						return 3517
					case RedstoneWireEastNone:
						return 3949
					}
				}
			}
		case 12:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3086
					case RedstoneWireEastSide:
						return 3518
					case RedstoneWireEastNone:
						return 3950
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3087
					case RedstoneWireEastSide:
						return 3519
					case RedstoneWireEastNone:
						return 3951
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3088
					case RedstoneWireEastSide:
						return 3520
					case RedstoneWireEastNone:
						return 3952
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3089
					case RedstoneWireEastSide:
						return 3521
					case RedstoneWireEastNone:
						return 3953
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3090
					case RedstoneWireEastSide:
						return 3522
					case RedstoneWireEastNone:
						return 3954
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3091
					case RedstoneWireEastSide:
						return 3523
					case RedstoneWireEastNone:
						return 3955
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3092
					case RedstoneWireEastSide:
						return 3524
					case RedstoneWireEastNone:
						return 3956
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3093
					case RedstoneWireEastSide:
						return 3525
					case RedstoneWireEastNone:
						return 3957
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3094
					case RedstoneWireEastSide:
						return 3526
					case RedstoneWireEastNone:
						return 3958
					}
				}
			}
		case 13:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3095
					case RedstoneWireEastSide:
						return 3527
					case RedstoneWireEastNone:
						return 3959
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3096
					case RedstoneWireEastSide:
						return 3528
					case RedstoneWireEastNone:
						return 3960
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3097
					case RedstoneWireEastSide:
						return 3529
					case RedstoneWireEastNone:
						return 3961
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3098
					case RedstoneWireEastSide:
						return 3530
					case RedstoneWireEastNone:
						return 3962
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3099
					case RedstoneWireEastSide:
						return 3531
					case RedstoneWireEastNone:
						return 3963
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3100
					case RedstoneWireEastSide:
						return 3532
					case RedstoneWireEastNone:
						return 3964
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3101
					case RedstoneWireEastSide:
						return 3533
					case RedstoneWireEastNone:
						return 3965
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3102
					case RedstoneWireEastSide:
						return 3534
					case RedstoneWireEastNone:
						return 3966
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3103
					case RedstoneWireEastSide:
						return 3535
					case RedstoneWireEastNone:
						return 3967
					}
				}
			}
		case 14:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3104
					case RedstoneWireEastSide:
						return 3536
					case RedstoneWireEastNone:
						return 3968
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3105
					case RedstoneWireEastSide:
						return 3537
					case RedstoneWireEastNone:
						return 3969
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3106
					case RedstoneWireEastSide:
						return 3538
					case RedstoneWireEastNone:
						return 3970
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3107
					case RedstoneWireEastSide:
						return 3539
					case RedstoneWireEastNone:
						return 3971
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3108
					case RedstoneWireEastSide:
						return 3540
					case RedstoneWireEastNone:
						return 3972
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3109
					case RedstoneWireEastSide:
						return 3541
					case RedstoneWireEastNone:
						return 3973
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3110
					case RedstoneWireEastSide:
						return 3542
					case RedstoneWireEastNone:
						return 3974
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3111
					case RedstoneWireEastSide:
						return 3543
					case RedstoneWireEastNone:
						return 3975
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3112
					case RedstoneWireEastSide:
						return 3544
					case RedstoneWireEastNone:
						return 3976
					}
				}
			}
		case 15:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3113
					case RedstoneWireEastSide:
						return 3545
					case RedstoneWireEastNone:
						return 3977
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3114
					case RedstoneWireEastSide:
						return 3546
					case RedstoneWireEastNone:
						return 3978
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3115
					case RedstoneWireEastSide:
						return 3547
					case RedstoneWireEastNone:
						return 3979
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3116
					case RedstoneWireEastSide:
						return 3548
					case RedstoneWireEastNone:
						return 3980
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3117
					case RedstoneWireEastSide:
						return 3549
					case RedstoneWireEastNone:
						return 3981
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3118
					case RedstoneWireEastSide:
						return 3550
					case RedstoneWireEastNone:
						return 3982
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3119
					case RedstoneWireEastSide:
						return 3551
					case RedstoneWireEastNone:
						return 3983
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3120
					case RedstoneWireEastSide:
						return 3552
					case RedstoneWireEastNone:
						return 3984
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3121
					case RedstoneWireEastSide:
						return 3553
					case RedstoneWireEastNone:
						return 3985
					}
				}
			}
		}
	case RedstoneWireNorthSide:
		switch x.Power {
		case 0:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3122
					case RedstoneWireEastSide:
						return 3554
					case RedstoneWireEastNone:
						return 3986
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3123
					case RedstoneWireEastSide:
						return 3555
					case RedstoneWireEastNone:
						return 3987
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3124
					case RedstoneWireEastSide:
						return 3556
					case RedstoneWireEastNone:
						return 3988
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3125
					case RedstoneWireEastSide:
						return 3557
					case RedstoneWireEastNone:
						return 3989
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3126
					case RedstoneWireEastSide:
						return 3558
					case RedstoneWireEastNone:
						return 3990
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3127
					case RedstoneWireEastSide:
						return 3559
					case RedstoneWireEastNone:
						return 3991
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3128
					case RedstoneWireEastSide:
						return 3560
					case RedstoneWireEastNone:
						return 3992
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3129
					case RedstoneWireEastSide:
						return 3561
					case RedstoneWireEastNone:
						return 3993
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3130
					case RedstoneWireEastSide:
						return 3562
					case RedstoneWireEastNone:
						return 3994
					}
				}
			}
		case 1:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3131
					case RedstoneWireEastSide:
						return 3563
					case RedstoneWireEastNone:
						return 3995
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3132
					case RedstoneWireEastSide:
						return 3564
					case RedstoneWireEastNone:
						return 3996
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3133
					case RedstoneWireEastSide:
						return 3565
					case RedstoneWireEastNone:
						return 3997
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3134
					case RedstoneWireEastSide:
						return 3566
					case RedstoneWireEastNone:
						return 3998
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3135
					case RedstoneWireEastSide:
						return 3567
					case RedstoneWireEastNone:
						return 3999
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3136
					case RedstoneWireEastSide:
						return 3568
					case RedstoneWireEastNone:
						return 4000
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3137
					case RedstoneWireEastSide:
						return 3569
					case RedstoneWireEastNone:
						return 4001
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3138
					case RedstoneWireEastSide:
						return 3570
					case RedstoneWireEastNone:
						return 4002
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3139
					case RedstoneWireEastSide:
						return 3571
					case RedstoneWireEastNone:
						return 4003
					}
				}
			}
		case 2:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3140
					case RedstoneWireEastSide:
						return 3572
					case RedstoneWireEastNone:
						return 4004
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3141
					case RedstoneWireEastSide:
						return 3573
					case RedstoneWireEastNone:
						return 4005
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3142
					case RedstoneWireEastSide:
						return 3574
					case RedstoneWireEastNone:
						return 4006
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3143
					case RedstoneWireEastSide:
						return 3575
					case RedstoneWireEastNone:
						return 4007
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3144
					case RedstoneWireEastSide:
						return 3576
					case RedstoneWireEastNone:
						return 4008
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3145
					case RedstoneWireEastSide:
						return 3577
					case RedstoneWireEastNone:
						return 4009
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3146
					case RedstoneWireEastSide:
						return 3578
					case RedstoneWireEastNone:
						return 4010
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3147
					case RedstoneWireEastSide:
						return 3579
					case RedstoneWireEastNone:
						return 4011
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3148
					case RedstoneWireEastSide:
						return 3580
					case RedstoneWireEastNone:
						return 4012
					}
				}
			}
		case 3:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3149
					case RedstoneWireEastSide:
						return 3581
					case RedstoneWireEastNone:
						return 4013
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3150
					case RedstoneWireEastSide:
						return 3582
					case RedstoneWireEastNone:
						return 4014
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3151
					case RedstoneWireEastSide:
						return 3583
					case RedstoneWireEastNone:
						return 4015
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3152
					case RedstoneWireEastSide:
						return 3584
					case RedstoneWireEastNone:
						return 4016
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3153
					case RedstoneWireEastSide:
						return 3585
					case RedstoneWireEastNone:
						return 4017
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3154
					case RedstoneWireEastSide:
						return 3586
					case RedstoneWireEastNone:
						return 4018
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3155
					case RedstoneWireEastSide:
						return 3587
					case RedstoneWireEastNone:
						return 4019
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3156
					case RedstoneWireEastSide:
						return 3588
					case RedstoneWireEastNone:
						return 4020
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3157
					case RedstoneWireEastSide:
						return 3589
					case RedstoneWireEastNone:
						return 4021
					}
				}
			}
		case 4:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3158
					case RedstoneWireEastSide:
						return 3590
					case RedstoneWireEastNone:
						return 4022
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3159
					case RedstoneWireEastSide:
						return 3591
					case RedstoneWireEastNone:
						return 4023
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3160
					case RedstoneWireEastSide:
						return 3592
					case RedstoneWireEastNone:
						return 4024
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3161
					case RedstoneWireEastSide:
						return 3593
					case RedstoneWireEastNone:
						return 4025
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3162
					case RedstoneWireEastSide:
						return 3594
					case RedstoneWireEastNone:
						return 4026
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3163
					case RedstoneWireEastSide:
						return 3595
					case RedstoneWireEastNone:
						return 4027
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3164
					case RedstoneWireEastSide:
						return 3596
					case RedstoneWireEastNone:
						return 4028
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3165
					case RedstoneWireEastSide:
						return 3597
					case RedstoneWireEastNone:
						return 4029
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3166
					case RedstoneWireEastSide:
						return 3598
					case RedstoneWireEastNone:
						return 4030
					}
				}
			}
		case 5:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3167
					case RedstoneWireEastSide:
						return 3599
					case RedstoneWireEastNone:
						return 4031
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3168
					case RedstoneWireEastSide:
						return 3600
					case RedstoneWireEastNone:
						return 4032
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3169
					case RedstoneWireEastSide:
						return 3601
					case RedstoneWireEastNone:
						return 4033
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3170
					case RedstoneWireEastSide:
						return 3602
					case RedstoneWireEastNone:
						return 4034
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3171
					case RedstoneWireEastSide:
						return 3603
					case RedstoneWireEastNone:
						return 4035
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3172
					case RedstoneWireEastSide:
						return 3604
					case RedstoneWireEastNone:
						return 4036
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3173
					case RedstoneWireEastSide:
						return 3605
					case RedstoneWireEastNone:
						return 4037
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3174
					case RedstoneWireEastSide:
						return 3606
					case RedstoneWireEastNone:
						return 4038
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3175
					case RedstoneWireEastSide:
						return 3607
					case RedstoneWireEastNone:
						return 4039
					}
				}
			}
		case 6:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3176
					case RedstoneWireEastSide:
						return 3608
					case RedstoneWireEastNone:
						return 4040
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3177
					case RedstoneWireEastSide:
						return 3609
					case RedstoneWireEastNone:
						return 4041
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3178
					case RedstoneWireEastSide:
						return 3610
					case RedstoneWireEastNone:
						return 4042
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3179
					case RedstoneWireEastSide:
						return 3611
					case RedstoneWireEastNone:
						return 4043
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3180
					case RedstoneWireEastSide:
						return 3612
					case RedstoneWireEastNone:
						return 4044
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3181
					case RedstoneWireEastSide:
						return 3613
					case RedstoneWireEastNone:
						return 4045
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3182
					case RedstoneWireEastSide:
						return 3614
					case RedstoneWireEastNone:
						return 4046
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3183
					case RedstoneWireEastSide:
						return 3615
					case RedstoneWireEastNone:
						return 4047
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3184
					case RedstoneWireEastSide:
						return 3616
					case RedstoneWireEastNone:
						return 4048
					}
				}
			}
		case 7:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3185
					case RedstoneWireEastSide:
						return 3617
					case RedstoneWireEastNone:
						return 4049
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3186
					case RedstoneWireEastSide:
						return 3618
					case RedstoneWireEastNone:
						return 4050
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3187
					case RedstoneWireEastSide:
						return 3619
					case RedstoneWireEastNone:
						return 4051
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3188
					case RedstoneWireEastSide:
						return 3620
					case RedstoneWireEastNone:
						return 4052
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3189
					case RedstoneWireEastSide:
						return 3621
					case RedstoneWireEastNone:
						return 4053
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3190
					case RedstoneWireEastSide:
						return 3622
					case RedstoneWireEastNone:
						return 4054
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3191
					case RedstoneWireEastSide:
						return 3623
					case RedstoneWireEastNone:
						return 4055
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3192
					case RedstoneWireEastSide:
						return 3624
					case RedstoneWireEastNone:
						return 4056
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3193
					case RedstoneWireEastSide:
						return 3625
					case RedstoneWireEastNone:
						return 4057
					}
				}
			}
		case 8:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3194
					case RedstoneWireEastSide:
						return 3626
					case RedstoneWireEastNone:
						return 4058
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3195
					case RedstoneWireEastSide:
						return 3627
					case RedstoneWireEastNone:
						return 4059
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3196
					case RedstoneWireEastSide:
						return 3628
					case RedstoneWireEastNone:
						return 4060
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3197
					case RedstoneWireEastSide:
						return 3629
					case RedstoneWireEastNone:
						return 4061
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3198
					case RedstoneWireEastSide:
						return 3630
					case RedstoneWireEastNone:
						return 4062
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3199
					case RedstoneWireEastSide:
						return 3631
					case RedstoneWireEastNone:
						return 4063
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3200
					case RedstoneWireEastSide:
						return 3632
					case RedstoneWireEastNone:
						return 4064
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3201
					case RedstoneWireEastSide:
						return 3633
					case RedstoneWireEastNone:
						return 4065
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3202
					case RedstoneWireEastSide:
						return 3634
					case RedstoneWireEastNone:
						return 4066
					}
				}
			}
		case 9:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3203
					case RedstoneWireEastSide:
						return 3635
					case RedstoneWireEastNone:
						return 4067
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3204
					case RedstoneWireEastSide:
						return 3636
					case RedstoneWireEastNone:
						return 4068
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3205
					case RedstoneWireEastSide:
						return 3637
					case RedstoneWireEastNone:
						return 4069
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3206
					case RedstoneWireEastSide:
						return 3638
					case RedstoneWireEastNone:
						return 4070
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3207
					case RedstoneWireEastSide:
						return 3639
					case RedstoneWireEastNone:
						return 4071
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3208
					case RedstoneWireEastSide:
						return 3640
					case RedstoneWireEastNone:
						return 4072
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3209
					case RedstoneWireEastSide:
						return 3641
					case RedstoneWireEastNone:
						return 4073
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3210
					case RedstoneWireEastSide:
						return 3642
					case RedstoneWireEastNone:
						return 4074
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3211
					case RedstoneWireEastSide:
						return 3643
					case RedstoneWireEastNone:
						return 4075
					}
				}
			}
		case 10:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3212
					case RedstoneWireEastSide:
						return 3644
					case RedstoneWireEastNone:
						return 4076
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3213
					case RedstoneWireEastSide:
						return 3645
					case RedstoneWireEastNone:
						return 4077
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3214
					case RedstoneWireEastSide:
						return 3646
					case RedstoneWireEastNone:
						return 4078
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3215
					case RedstoneWireEastSide:
						return 3647
					case RedstoneWireEastNone:
						return 4079
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3216
					case RedstoneWireEastSide:
						return 3648
					case RedstoneWireEastNone:
						return 4080
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3217
					case RedstoneWireEastSide:
						return 3649
					case RedstoneWireEastNone:
						return 4081
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3218
					case RedstoneWireEastSide:
						return 3650
					case RedstoneWireEastNone:
						return 4082
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3219
					case RedstoneWireEastSide:
						return 3651
					case RedstoneWireEastNone:
						return 4083
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3220
					case RedstoneWireEastSide:
						return 3652
					case RedstoneWireEastNone:
						return 4084
					}
				}
			}
		case 11:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3221
					case RedstoneWireEastSide:
						return 3653
					case RedstoneWireEastNone:
						return 4085
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3222
					case RedstoneWireEastSide:
						return 3654
					case RedstoneWireEastNone:
						return 4086
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3223
					case RedstoneWireEastSide:
						return 3655
					case RedstoneWireEastNone:
						return 4087
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3224
					case RedstoneWireEastSide:
						return 3656
					case RedstoneWireEastNone:
						return 4088
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3225
					case RedstoneWireEastSide:
						return 3657
					case RedstoneWireEastNone:
						return 4089
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3226
					case RedstoneWireEastSide:
						return 3658
					case RedstoneWireEastNone:
						return 4090
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3227
					case RedstoneWireEastSide:
						return 3659
					case RedstoneWireEastNone:
						return 4091
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3228
					case RedstoneWireEastSide:
						return 3660
					case RedstoneWireEastNone:
						return 4092
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3229
					case RedstoneWireEastSide:
						return 3661
					case RedstoneWireEastNone:
						return 4093
					}
				}
			}
		case 12:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3230
					case RedstoneWireEastSide:
						return 3662
					case RedstoneWireEastNone:
						return 4094
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3231
					case RedstoneWireEastSide:
						return 3663
					case RedstoneWireEastNone:
						return 4095
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3232
					case RedstoneWireEastSide:
						return 3664
					case RedstoneWireEastNone:
						return 4096
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3233
					case RedstoneWireEastSide:
						return 3665
					case RedstoneWireEastNone:
						return 4097
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3234
					case RedstoneWireEastSide:
						return 3666
					case RedstoneWireEastNone:
						return 4098
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3235
					case RedstoneWireEastSide:
						return 3667
					case RedstoneWireEastNone:
						return 4099
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3236
					case RedstoneWireEastSide:
						return 3668
					case RedstoneWireEastNone:
						return 4100
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3237
					case RedstoneWireEastSide:
						return 3669
					case RedstoneWireEastNone:
						return 4101
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3238
					case RedstoneWireEastSide:
						return 3670
					case RedstoneWireEastNone:
						return 4102
					}
				}
			}
		case 13:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3239
					case RedstoneWireEastSide:
						return 3671
					case RedstoneWireEastNone:
						return 4103
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3240
					case RedstoneWireEastSide:
						return 3672
					case RedstoneWireEastNone:
						return 4104
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3241
					case RedstoneWireEastSide:
						return 3673
					case RedstoneWireEastNone:
						return 4105
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3242
					case RedstoneWireEastSide:
						return 3674
					case RedstoneWireEastNone:
						return 4106
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3243
					case RedstoneWireEastSide:
						return 3675
					case RedstoneWireEastNone:
						return 4107
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3244
					case RedstoneWireEastSide:
						return 3676
					case RedstoneWireEastNone:
						return 4108
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3245
					case RedstoneWireEastSide:
						return 3677
					case RedstoneWireEastNone:
						return 4109
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3246
					case RedstoneWireEastSide:
						return 3678
					case RedstoneWireEastNone:
						return 4110
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3247
					case RedstoneWireEastSide:
						return 3679
					case RedstoneWireEastNone:
						return 4111
					}
				}
			}
		case 14:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3248
					case RedstoneWireEastSide:
						return 3680
					case RedstoneWireEastNone:
						return 4112
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3249
					case RedstoneWireEastSide:
						return 3681
					case RedstoneWireEastNone:
						return 4113
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3250
					case RedstoneWireEastSide:
						return 3682
					case RedstoneWireEastNone:
						return 4114
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3251
					case RedstoneWireEastSide:
						return 3683
					case RedstoneWireEastNone:
						return 4115
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3252
					case RedstoneWireEastSide:
						return 3684
					case RedstoneWireEastNone:
						return 4116
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3253
					case RedstoneWireEastSide:
						return 3685
					case RedstoneWireEastNone:
						return 4117
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3254
					case RedstoneWireEastSide:
						return 3686
					case RedstoneWireEastNone:
						return 4118
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3255
					case RedstoneWireEastSide:
						return 3687
					case RedstoneWireEastNone:
						return 4119
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3256
					case RedstoneWireEastSide:
						return 3688
					case RedstoneWireEastNone:
						return 4120
					}
				}
			}
		case 15:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3257
					case RedstoneWireEastSide:
						return 3689
					case RedstoneWireEastNone:
						return 4121
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3258
					case RedstoneWireEastSide:
						return 3690
					case RedstoneWireEastNone:
						return 4122
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3259
					case RedstoneWireEastSide:
						return 3691
					case RedstoneWireEastNone:
						return 4123
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3260
					case RedstoneWireEastSide:
						return 3692
					case RedstoneWireEastNone:
						return 4124
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3261
					case RedstoneWireEastSide:
						return 3693
					case RedstoneWireEastNone:
						return 4125
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3262
					case RedstoneWireEastSide:
						return 3694
					case RedstoneWireEastNone:
						return 4126
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3263
					case RedstoneWireEastSide:
						return 3695
					case RedstoneWireEastNone:
						return 4127
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3264
					case RedstoneWireEastSide:
						return 3696
					case RedstoneWireEastNone:
						return 4128
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3265
					case RedstoneWireEastSide:
						return 3697
					case RedstoneWireEastNone:
						return 4129
					}
				}
			}
		}
	case RedstoneWireNorthNone:
		switch x.Power {
		case 0:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3266
					case RedstoneWireEastSide:
						return 3698
					case RedstoneWireEastNone:
						return 4130
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3267
					case RedstoneWireEastSide:
						return 3699
					case RedstoneWireEastNone:
						return 4131
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3268
					case RedstoneWireEastSide:
						return 3700
					case RedstoneWireEastNone:
						return 4132
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3269
					case RedstoneWireEastSide:
						return 3701
					case RedstoneWireEastNone:
						return 4133
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3270
					case RedstoneWireEastSide:
						return 3702
					case RedstoneWireEastNone:
						return 4134
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3271
					case RedstoneWireEastSide:
						return 3703
					case RedstoneWireEastNone:
						return 4135
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3272
					case RedstoneWireEastSide:
						return 3704
					case RedstoneWireEastNone:
						return 4136
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3273
					case RedstoneWireEastSide:
						return 3705
					case RedstoneWireEastNone:
						return 4137
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3274
					case RedstoneWireEastSide:
						return 3706
					case RedstoneWireEastNone:
						return 4138
					}
				}
			}
		case 1:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3275
					case RedstoneWireEastSide:
						return 3707
					case RedstoneWireEastNone:
						return 4139
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3276
					case RedstoneWireEastSide:
						return 3708
					case RedstoneWireEastNone:
						return 4140
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3277
					case RedstoneWireEastSide:
						return 3709
					case RedstoneWireEastNone:
						return 4141
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3278
					case RedstoneWireEastSide:
						return 3710
					case RedstoneWireEastNone:
						return 4142
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3279
					case RedstoneWireEastSide:
						return 3711
					case RedstoneWireEastNone:
						return 4143
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3280
					case RedstoneWireEastSide:
						return 3712
					case RedstoneWireEastNone:
						return 4144
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3281
					case RedstoneWireEastSide:
						return 3713
					case RedstoneWireEastNone:
						return 4145
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3282
					case RedstoneWireEastSide:
						return 3714
					case RedstoneWireEastNone:
						return 4146
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3283
					case RedstoneWireEastSide:
						return 3715
					case RedstoneWireEastNone:
						return 4147
					}
				}
			}
		case 2:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3284
					case RedstoneWireEastSide:
						return 3716
					case RedstoneWireEastNone:
						return 4148
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3285
					case RedstoneWireEastSide:
						return 3717
					case RedstoneWireEastNone:
						return 4149
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3286
					case RedstoneWireEastSide:
						return 3718
					case RedstoneWireEastNone:
						return 4150
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3287
					case RedstoneWireEastSide:
						return 3719
					case RedstoneWireEastNone:
						return 4151
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3288
					case RedstoneWireEastSide:
						return 3720
					case RedstoneWireEastNone:
						return 4152
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3289
					case RedstoneWireEastSide:
						return 3721
					case RedstoneWireEastNone:
						return 4153
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3290
					case RedstoneWireEastSide:
						return 3722
					case RedstoneWireEastNone:
						return 4154
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3291
					case RedstoneWireEastSide:
						return 3723
					case RedstoneWireEastNone:
						return 4155
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3292
					case RedstoneWireEastSide:
						return 3724
					case RedstoneWireEastNone:
						return 4156
					}
				}
			}
		case 3:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3293
					case RedstoneWireEastSide:
						return 3725
					case RedstoneWireEastNone:
						return 4157
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3294
					case RedstoneWireEastSide:
						return 3726
					case RedstoneWireEastNone:
						return 4158
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3295
					case RedstoneWireEastSide:
						return 3727
					case RedstoneWireEastNone:
						return 4159
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3296
					case RedstoneWireEastSide:
						return 3728
					case RedstoneWireEastNone:
						return 4160
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3297
					case RedstoneWireEastSide:
						return 3729
					case RedstoneWireEastNone:
						return 4161
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3298
					case RedstoneWireEastSide:
						return 3730
					case RedstoneWireEastNone:
						return 4162
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3299
					case RedstoneWireEastSide:
						return 3731
					case RedstoneWireEastNone:
						return 4163
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3300
					case RedstoneWireEastSide:
						return 3732
					case RedstoneWireEastNone:
						return 4164
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3301
					case RedstoneWireEastSide:
						return 3733
					case RedstoneWireEastNone:
						return 4165
					}
				}
			}
		case 4:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3302
					case RedstoneWireEastSide:
						return 3734
					case RedstoneWireEastNone:
						return 4166
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3303
					case RedstoneWireEastSide:
						return 3735
					case RedstoneWireEastNone:
						return 4167
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3304
					case RedstoneWireEastSide:
						return 3736
					case RedstoneWireEastNone:
						return 4168
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3305
					case RedstoneWireEastSide:
						return 3737
					case RedstoneWireEastNone:
						return 4169
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3306
					case RedstoneWireEastSide:
						return 3738
					case RedstoneWireEastNone:
						return 4170
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3307
					case RedstoneWireEastSide:
						return 3739
					case RedstoneWireEastNone:
						return 4171
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3308
					case RedstoneWireEastSide:
						return 3740
					case RedstoneWireEastNone:
						return 4172
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3309
					case RedstoneWireEastSide:
						return 3741
					case RedstoneWireEastNone:
						return 4173
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3310
					case RedstoneWireEastSide:
						return 3742
					case RedstoneWireEastNone:
						return 4174
					}
				}
			}
		case 5:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3311
					case RedstoneWireEastSide:
						return 3743
					case RedstoneWireEastNone:
						return 4175
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3312
					case RedstoneWireEastSide:
						return 3744
					case RedstoneWireEastNone:
						return 4176
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3313
					case RedstoneWireEastSide:
						return 3745
					case RedstoneWireEastNone:
						return 4177
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3314
					case RedstoneWireEastSide:
						return 3746
					case RedstoneWireEastNone:
						return 4178
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3315
					case RedstoneWireEastSide:
						return 3747
					case RedstoneWireEastNone:
						return 4179
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3316
					case RedstoneWireEastSide:
						return 3748
					case RedstoneWireEastNone:
						return 4180
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3317
					case RedstoneWireEastSide:
						return 3749
					case RedstoneWireEastNone:
						return 4181
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3318
					case RedstoneWireEastSide:
						return 3750
					case RedstoneWireEastNone:
						return 4182
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3319
					case RedstoneWireEastSide:
						return 3751
					case RedstoneWireEastNone:
						return 4183
					}
				}
			}
		case 6:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3320
					case RedstoneWireEastSide:
						return 3752
					case RedstoneWireEastNone:
						return 4184
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3321
					case RedstoneWireEastSide:
						return 3753
					case RedstoneWireEastNone:
						return 4185
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3322
					case RedstoneWireEastSide:
						return 3754
					case RedstoneWireEastNone:
						return 4186
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3323
					case RedstoneWireEastSide:
						return 3755
					case RedstoneWireEastNone:
						return 4187
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3324
					case RedstoneWireEastSide:
						return 3756
					case RedstoneWireEastNone:
						return 4188
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3325
					case RedstoneWireEastSide:
						return 3757
					case RedstoneWireEastNone:
						return 4189
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3326
					case RedstoneWireEastSide:
						return 3758
					case RedstoneWireEastNone:
						return 4190
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3327
					case RedstoneWireEastSide:
						return 3759
					case RedstoneWireEastNone:
						return 4191
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3328
					case RedstoneWireEastSide:
						return 3760
					case RedstoneWireEastNone:
						return 4192
					}
				}
			}
		case 7:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3329
					case RedstoneWireEastSide:
						return 3761
					case RedstoneWireEastNone:
						return 4193
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3330
					case RedstoneWireEastSide:
						return 3762
					case RedstoneWireEastNone:
						return 4194
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3331
					case RedstoneWireEastSide:
						return 3763
					case RedstoneWireEastNone:
						return 4195
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3332
					case RedstoneWireEastSide:
						return 3764
					case RedstoneWireEastNone:
						return 4196
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3333
					case RedstoneWireEastSide:
						return 3765
					case RedstoneWireEastNone:
						return 4197
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3334
					case RedstoneWireEastSide:
						return 3766
					case RedstoneWireEastNone:
						return 4198
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3335
					case RedstoneWireEastSide:
						return 3767
					case RedstoneWireEastNone:
						return 4199
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3336
					case RedstoneWireEastSide:
						return 3768
					case RedstoneWireEastNone:
						return 4200
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3337
					case RedstoneWireEastSide:
						return 3769
					case RedstoneWireEastNone:
						return 4201
					}
				}
			}
		case 8:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3338
					case RedstoneWireEastSide:
						return 3770
					case RedstoneWireEastNone:
						return 4202
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3339
					case RedstoneWireEastSide:
						return 3771
					case RedstoneWireEastNone:
						return 4203
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3340
					case RedstoneWireEastSide:
						return 3772
					case RedstoneWireEastNone:
						return 4204
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3341
					case RedstoneWireEastSide:
						return 3773
					case RedstoneWireEastNone:
						return 4205
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3342
					case RedstoneWireEastSide:
						return 3774
					case RedstoneWireEastNone:
						return 4206
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3343
					case RedstoneWireEastSide:
						return 3775
					case RedstoneWireEastNone:
						return 4207
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3344
					case RedstoneWireEastSide:
						return 3776
					case RedstoneWireEastNone:
						return 4208
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3345
					case RedstoneWireEastSide:
						return 3777
					case RedstoneWireEastNone:
						return 4209
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3346
					case RedstoneWireEastSide:
						return 3778
					case RedstoneWireEastNone:
						return 4210
					}
				}
			}
		case 9:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3347
					case RedstoneWireEastSide:
						return 3779
					case RedstoneWireEastNone:
						return 4211
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3348
					case RedstoneWireEastSide:
						return 3780
					case RedstoneWireEastNone:
						return 4212
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3349
					case RedstoneWireEastSide:
						return 3781
					case RedstoneWireEastNone:
						return 4213
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3350
					case RedstoneWireEastSide:
						return 3782
					case RedstoneWireEastNone:
						return 4214
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3351
					case RedstoneWireEastSide:
						return 3783
					case RedstoneWireEastNone:
						return 4215
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3352
					case RedstoneWireEastSide:
						return 3784
					case RedstoneWireEastNone:
						return 4216
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3353
					case RedstoneWireEastSide:
						return 3785
					case RedstoneWireEastNone:
						return 4217
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3354
					case RedstoneWireEastSide:
						return 3786
					case RedstoneWireEastNone:
						return 4218
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3355
					case RedstoneWireEastSide:
						return 3787
					case RedstoneWireEastNone:
						return 4219
					}
				}
			}
		case 10:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3356
					case RedstoneWireEastSide:
						return 3788
					case RedstoneWireEastNone:
						return 4220
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3357
					case RedstoneWireEastSide:
						return 3789
					case RedstoneWireEastNone:
						return 4221
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3358
					case RedstoneWireEastSide:
						return 3790
					case RedstoneWireEastNone:
						return 4222
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3359
					case RedstoneWireEastSide:
						return 3791
					case RedstoneWireEastNone:
						return 4223
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3360
					case RedstoneWireEastSide:
						return 3792
					case RedstoneWireEastNone:
						return 4224
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3361
					case RedstoneWireEastSide:
						return 3793
					case RedstoneWireEastNone:
						return 4225
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3362
					case RedstoneWireEastSide:
						return 3794
					case RedstoneWireEastNone:
						return 4226
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3363
					case RedstoneWireEastSide:
						return 3795
					case RedstoneWireEastNone:
						return 4227
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3364
					case RedstoneWireEastSide:
						return 3796
					case RedstoneWireEastNone:
						return 4228
					}
				}
			}
		case 11:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3365
					case RedstoneWireEastSide:
						return 3797
					case RedstoneWireEastNone:
						return 4229
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3366
					case RedstoneWireEastSide:
						return 3798
					case RedstoneWireEastNone:
						return 4230
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3367
					case RedstoneWireEastSide:
						return 3799
					case RedstoneWireEastNone:
						return 4231
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3368
					case RedstoneWireEastSide:
						return 3800
					case RedstoneWireEastNone:
						return 4232
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3369
					case RedstoneWireEastSide:
						return 3801
					case RedstoneWireEastNone:
						return 4233
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3370
					case RedstoneWireEastSide:
						return 3802
					case RedstoneWireEastNone:
						return 4234
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3371
					case RedstoneWireEastSide:
						return 3803
					case RedstoneWireEastNone:
						return 4235
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3372
					case RedstoneWireEastSide:
						return 3804
					case RedstoneWireEastNone:
						return 4236
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3373
					case RedstoneWireEastSide:
						return 3805
					case RedstoneWireEastNone:
						return 4237
					}
				}
			}
		case 12:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3374
					case RedstoneWireEastSide:
						return 3806
					case RedstoneWireEastNone:
						return 4238
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3375
					case RedstoneWireEastSide:
						return 3807
					case RedstoneWireEastNone:
						return 4239
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3376
					case RedstoneWireEastSide:
						return 3808
					case RedstoneWireEastNone:
						return 4240
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3377
					case RedstoneWireEastSide:
						return 3809
					case RedstoneWireEastNone:
						return 4241
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3378
					case RedstoneWireEastSide:
						return 3810
					case RedstoneWireEastNone:
						return 4242
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3379
					case RedstoneWireEastSide:
						return 3811
					case RedstoneWireEastNone:
						return 4243
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3380
					case RedstoneWireEastSide:
						return 3812
					case RedstoneWireEastNone:
						return 4244
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3381
					case RedstoneWireEastSide:
						return 3813
					case RedstoneWireEastNone:
						return 4245
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3382
					case RedstoneWireEastSide:
						return 3814
					case RedstoneWireEastNone:
						return 4246
					}
				}
			}
		case 13:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3383
					case RedstoneWireEastSide:
						return 3815
					case RedstoneWireEastNone:
						return 4247
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3384
					case RedstoneWireEastSide:
						return 3816
					case RedstoneWireEastNone:
						return 4248
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3385
					case RedstoneWireEastSide:
						return 3817
					case RedstoneWireEastNone:
						return 4249
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3386
					case RedstoneWireEastSide:
						return 3818
					case RedstoneWireEastNone:
						return 4250
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3387
					case RedstoneWireEastSide:
						return 3819
					case RedstoneWireEastNone:
						return 4251
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3388
					case RedstoneWireEastSide:
						return 3820
					case RedstoneWireEastNone:
						return 4252
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3389
					case RedstoneWireEastSide:
						return 3821
					case RedstoneWireEastNone:
						return 4253
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3390
					case RedstoneWireEastSide:
						return 3822
					case RedstoneWireEastNone:
						return 4254
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3391
					case RedstoneWireEastSide:
						return 3823
					case RedstoneWireEastNone:
						return 4255
					}
				}
			}
		case 14:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3392
					case RedstoneWireEastSide:
						return 3824
					case RedstoneWireEastNone:
						return 4256
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3393
					case RedstoneWireEastSide:
						return 3825
					case RedstoneWireEastNone:
						return 4257
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3394
					case RedstoneWireEastSide:
						return 3826
					case RedstoneWireEastNone:
						return 4258
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3395
					case RedstoneWireEastSide:
						return 3827
					case RedstoneWireEastNone:
						return 4259
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3396
					case RedstoneWireEastSide:
						return 3828
					case RedstoneWireEastNone:
						return 4260
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3397
					case RedstoneWireEastSide:
						return 3829
					case RedstoneWireEastNone:
						return 4261
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3398
					case RedstoneWireEastSide:
						return 3830
					case RedstoneWireEastNone:
						return 4262
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3399
					case RedstoneWireEastSide:
						return 3831
					case RedstoneWireEastNone:
						return 4263
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3400
					case RedstoneWireEastSide:
						return 3832
					case RedstoneWireEastNone:
						return 4264
					}
				}
			}
		case 15:
			switch x.South {
			case RedstoneWireSouthUp:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3401
					case RedstoneWireEastSide:
						return 3833
					case RedstoneWireEastNone:
						return 4265
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3402
					case RedstoneWireEastSide:
						return 3834
					case RedstoneWireEastNone:
						return 4266
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3403
					case RedstoneWireEastSide:
						return 3835
					case RedstoneWireEastNone:
						return 4267
					}
				}
			case RedstoneWireSouthSide:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3404
					case RedstoneWireEastSide:
						return 3836
					case RedstoneWireEastNone:
						return 4268
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3405
					case RedstoneWireEastSide:
						return 3837
					case RedstoneWireEastNone:
						return 4269
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3406
					case RedstoneWireEastSide:
						return 3838
					case RedstoneWireEastNone:
						return 4270
					}
				}
			case RedstoneWireSouthNone:
				switch x.West {
				case RedstoneWireWestUp:
					switch x.East {
					case RedstoneWireEastUp:
						return 3407
					case RedstoneWireEastSide:
						return 3839
					case RedstoneWireEastNone:
						return 4271
					}
				case RedstoneWireWestSide:
					switch x.East {
					case RedstoneWireEastUp:
						return 3408
					case RedstoneWireEastSide:
						return 3840
					case RedstoneWireEastNone:
						return 4272
					}
				case RedstoneWireWestNone:
					switch x.East {
					case RedstoneWireEastUp:
						return 3409
					case RedstoneWireEastSide:
						return 3841
					case RedstoneWireEastNone:
						return 4273
					}
				}
			}
		}
	}
	return 4138 // default state
}

type DiamondOre struct{}

func (x DiamondOre) Id() uint16 {
	return 4274
}

type DeepslateDiamondOre struct{}

func (x DeepslateDiamondOre) Id() uint16 {
	return 4275
}

type DiamondBlock struct{}

func (x DiamondBlock) Id() uint16 {
	return 4276
}

type CraftingTable struct{}

func (x CraftingTable) Id() uint16 {
	return 4277
}

type Wheat struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Age int
}

func (x Wheat) Id() uint16 {
	switch x.Age {
	case 0:
		return 4278
	case 1:
		return 4279
	case 2:
		return 4280
	case 3:
		return 4281
	case 4:
		return 4282
	case 5:
		return 4283
	case 6:
		return 4284
	case 7:
		return 4285
	}
	return 4278 // default state
}

type Farmland struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Moisture int
}

func (x Farmland) Id() uint16 {
	switch x.Moisture {
	case 0:
		return 4286
	case 1:
		return 4287
	case 2:
		return 4288
	case 3:
		return 4289
	case 4:
		return 4290
	case 5:
		return 4291
	case 6:
		return 4292
	case 7:
		return 4293
	}
	return 4286 // default state
}

type FurnaceFacing string

const (
	FurnaceFacingNorth FurnaceFacing = "north"
	FurnaceFacingSouth FurnaceFacing = "south"
	FurnaceFacingWest  FurnaceFacing = "west"
	FurnaceFacingEast  FurnaceFacing = "east"
)

type Furnace struct {
	Facing FurnaceFacing
	Lit    bool
}

func (x Furnace) Id() uint16 {
	switch x.Facing {
	case FurnaceFacingNorth:
		switch x.Lit {
		case true:
			return 4294
		case false:
			return 4295
		}
	case FurnaceFacingSouth:
		switch x.Lit {
		case true:
			return 4296
		case false:
			return 4297
		}
	case FurnaceFacingWest:
		switch x.Lit {
		case true:
			return 4298
		case false:
			return 4299
		}
	case FurnaceFacingEast:
		switch x.Lit {
		case true:
			return 4300
		case false:
			return 4301
		}
	}
	return 4295 // default state
}

type OakSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x OakSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4302
		case false:
			return 4303
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4304
		case false:
			return 4305
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4306
		case false:
			return 4307
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4308
		case false:
			return 4309
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4310
		case false:
			return 4311
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4312
		case false:
			return 4313
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4314
		case false:
			return 4315
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4316
		case false:
			return 4317
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4318
		case false:
			return 4319
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4320
		case false:
			return 4321
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4322
		case false:
			return 4323
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4324
		case false:
			return 4325
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4326
		case false:
			return 4327
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4328
		case false:
			return 4329
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4330
		case false:
			return 4331
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4332
		case false:
			return 4333
		}
	}
	return 4303 // default state
}

type SpruceSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x SpruceSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4334
		case false:
			return 4335
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4336
		case false:
			return 4337
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4338
		case false:
			return 4339
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4340
		case false:
			return 4341
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4342
		case false:
			return 4343
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4344
		case false:
			return 4345
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4346
		case false:
			return 4347
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4348
		case false:
			return 4349
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4350
		case false:
			return 4351
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4352
		case false:
			return 4353
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4354
		case false:
			return 4355
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4356
		case false:
			return 4357
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4358
		case false:
			return 4359
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4360
		case false:
			return 4361
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4362
		case false:
			return 4363
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4364
		case false:
			return 4365
		}
	}
	return 4335 // default state
}

type BirchSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x BirchSign) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Rotation {
		case 0:
			return 4366
		case 1:
			return 4368
		case 2:
			return 4370
		case 3:
			return 4372
		case 4:
			return 4374
		case 5:
			return 4376
		case 6:
			return 4378
		case 7:
			return 4380
		case 8:
			return 4382
		case 9:
			return 4384
		case 10:
			return 4386
		case 11:
			return 4388
		case 12:
			return 4390
		case 13:
			return 4392
		case 14:
			return 4394
		case 15:
			return 4396
		}
	case false:
		switch x.Rotation {
		case 0:
			return 4367
		case 1:
			return 4369
		case 2:
			return 4371
		case 3:
			return 4373
		case 4:
			return 4375
		case 5:
			return 4377
		case 6:
			return 4379
		case 7:
			return 4381
		case 8:
			return 4383
		case 9:
			return 4385
		case 10:
			return 4387
		case 11:
			return 4389
		case 12:
			return 4391
		case 13:
			return 4393
		case 14:
			return 4395
		case 15:
			return 4397
		}
	}
	return 4367 // default state
}

type AcaciaSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x AcaciaSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4398
		case false:
			return 4399
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4400
		case false:
			return 4401
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4402
		case false:
			return 4403
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4404
		case false:
			return 4405
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4406
		case false:
			return 4407
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4408
		case false:
			return 4409
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4410
		case false:
			return 4411
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4412
		case false:
			return 4413
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4414
		case false:
			return 4415
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4416
		case false:
			return 4417
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4418
		case false:
			return 4419
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4420
		case false:
			return 4421
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4422
		case false:
			return 4423
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4424
		case false:
			return 4425
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4426
		case false:
			return 4427
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4428
		case false:
			return 4429
		}
	}
	return 4399 // default state
}

type CherrySign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x CherrySign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4430
		case false:
			return 4431
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4432
		case false:
			return 4433
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4434
		case false:
			return 4435
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4436
		case false:
			return 4437
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4438
		case false:
			return 4439
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4440
		case false:
			return 4441
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4442
		case false:
			return 4443
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4444
		case false:
			return 4445
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4446
		case false:
			return 4447
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4448
		case false:
			return 4449
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4450
		case false:
			return 4451
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4452
		case false:
			return 4453
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4454
		case false:
			return 4455
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4456
		case false:
			return 4457
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4458
		case false:
			return 4459
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4460
		case false:
			return 4461
		}
	}
	return 4431 // default state
}

type JungleSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x JungleSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4462
		case false:
			return 4463
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4464
		case false:
			return 4465
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4466
		case false:
			return 4467
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4468
		case false:
			return 4469
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4470
		case false:
			return 4471
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4472
		case false:
			return 4473
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4474
		case false:
			return 4475
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4476
		case false:
			return 4477
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4478
		case false:
			return 4479
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4480
		case false:
			return 4481
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4482
		case false:
			return 4483
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4484
		case false:
			return 4485
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4486
		case false:
			return 4487
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4488
		case false:
			return 4489
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4490
		case false:
			return 4491
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4492
		case false:
			return 4493
		}
	}
	return 4463 // default state
}

type DarkOakSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x DarkOakSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4494
		case false:
			return 4495
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4496
		case false:
			return 4497
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4498
		case false:
			return 4499
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4500
		case false:
			return 4501
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4502
		case false:
			return 4503
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4504
		case false:
			return 4505
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4506
		case false:
			return 4507
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4508
		case false:
			return 4509
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4510
		case false:
			return 4511
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4512
		case false:
			return 4513
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4514
		case false:
			return 4515
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4516
		case false:
			return 4517
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4518
		case false:
			return 4519
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4520
		case false:
			return 4521
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4522
		case false:
			return 4523
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4524
		case false:
			return 4525
		}
	}
	return 4495 // default state
}

type MangroveSign struct {
	Waterlogged bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x MangroveSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4526
		case false:
			return 4527
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4528
		case false:
			return 4529
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4530
		case false:
			return 4531
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4532
		case false:
			return 4533
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4534
		case false:
			return 4535
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4536
		case false:
			return 4537
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4538
		case false:
			return 4539
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4540
		case false:
			return 4541
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4542
		case false:
			return 4543
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4544
		case false:
			return 4545
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4546
		case false:
			return 4547
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4548
		case false:
			return 4549
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4550
		case false:
			return 4551
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4552
		case false:
			return 4553
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4554
		case false:
			return 4555
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4556
		case false:
			return 4557
		}
	}
	return 4527 // default state
}

type BambooSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x BambooSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 4558
		case false:
			return 4559
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 4560
		case false:
			return 4561
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 4562
		case false:
			return 4563
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 4564
		case false:
			return 4565
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 4566
		case false:
			return 4567
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 4568
		case false:
			return 4569
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 4570
		case false:
			return 4571
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 4572
		case false:
			return 4573
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 4574
		case false:
			return 4575
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 4576
		case false:
			return 4577
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 4578
		case false:
			return 4579
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 4580
		case false:
			return 4581
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 4582
		case false:
			return 4583
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 4584
		case false:
			return 4585
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 4586
		case false:
			return 4587
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 4588
		case false:
			return 4589
		}
	}
	return 4559 // default state
}

type OakDoorFacing string

const (
	OakDoorFacingNorth OakDoorFacing = "north"
	OakDoorFacingSouth OakDoorFacing = "south"
	OakDoorFacingWest  OakDoorFacing = "west"
	OakDoorFacingEast  OakDoorFacing = "east"
)

type OakDoorHalf string

const (
	OakDoorHalfUpper OakDoorHalf = "upper"
	OakDoorHalfLower OakDoorHalf = "lower"
)

type OakDoorHinge string

const (
	OakDoorHingeLeft  OakDoorHinge = "left"
	OakDoorHingeRight OakDoorHinge = "right"
)

type OakDoor struct {
	Facing  OakDoorFacing
	Half    OakDoorHalf
	Hinge   OakDoorHinge
	Open    bool
	Powered bool
}

func (x OakDoor) Id() uint16 {
	switch x.Facing {
	case OakDoorFacingNorth:
		switch x.Half {
		case OakDoorHalfUpper:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4590
					case false:
						return 4591
					}
				case false:
					switch x.Powered {
					case true:
						return 4592
					case false:
						return 4593
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4594
					case false:
						return 4595
					}
				case false:
					switch x.Powered {
					case true:
						return 4596
					case false:
						return 4597
					}
				}
			}
		case OakDoorHalfLower:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4598
					case false:
						return 4599
					}
				case false:
					switch x.Powered {
					case true:
						return 4600
					case false:
						return 4601
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4602
					case false:
						return 4603
					}
				case false:
					switch x.Powered {
					case true:
						return 4604
					case false:
						return 4605
					}
				}
			}
		}
	case OakDoorFacingSouth:
		switch x.Half {
		case OakDoorHalfUpper:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4606
					case false:
						return 4607
					}
				case false:
					switch x.Powered {
					case true:
						return 4608
					case false:
						return 4609
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4610
					case false:
						return 4611
					}
				case false:
					switch x.Powered {
					case true:
						return 4612
					case false:
						return 4613
					}
				}
			}
		case OakDoorHalfLower:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4614
					case false:
						return 4615
					}
				case false:
					switch x.Powered {
					case true:
						return 4616
					case false:
						return 4617
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4618
					case false:
						return 4619
					}
				case false:
					switch x.Powered {
					case true:
						return 4620
					case false:
						return 4621
					}
				}
			}
		}
	case OakDoorFacingWest:
		switch x.Half {
		case OakDoorHalfUpper:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4622
					case false:
						return 4623
					}
				case false:
					switch x.Powered {
					case true:
						return 4624
					case false:
						return 4625
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4626
					case false:
						return 4627
					}
				case false:
					switch x.Powered {
					case true:
						return 4628
					case false:
						return 4629
					}
				}
			}
		case OakDoorHalfLower:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4630
					case false:
						return 4631
					}
				case false:
					switch x.Powered {
					case true:
						return 4632
					case false:
						return 4633
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4634
					case false:
						return 4635
					}
				case false:
					switch x.Powered {
					case true:
						return 4636
					case false:
						return 4637
					}
				}
			}
		}
	case OakDoorFacingEast:
		switch x.Half {
		case OakDoorHalfUpper:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4638
					case false:
						return 4639
					}
				case false:
					switch x.Powered {
					case true:
						return 4640
					case false:
						return 4641
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4642
					case false:
						return 4643
					}
				case false:
					switch x.Powered {
					case true:
						return 4644
					case false:
						return 4645
					}
				}
			}
		case OakDoorHalfLower:
			switch x.Hinge {
			case OakDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4646
					case false:
						return 4647
					}
				case false:
					switch x.Powered {
					case true:
						return 4648
					case false:
						return 4649
					}
				}
			case OakDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 4650
					case false:
						return 4651
					}
				case false:
					switch x.Powered {
					case true:
						return 4652
					case false:
						return 4653
					}
				}
			}
		}
	}
	return 4601 // default state
}

type LadderFacing string

const (
	LadderFacingNorth LadderFacing = "north"
	LadderFacingSouth LadderFacing = "south"
	LadderFacingWest  LadderFacing = "west"
	LadderFacingEast  LadderFacing = "east"
)

type Ladder struct {
	Facing      LadderFacing
	Waterlogged bool
}

func (x Ladder) Id() uint16 {
	switch x.Facing {
	case LadderFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4654
		case false:
			return 4655
		}
	case LadderFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4656
		case false:
			return 4657
		}
	case LadderFacingWest:
		switch x.Waterlogged {
		case true:
			return 4658
		case false:
			return 4659
		}
	case LadderFacingEast:
		switch x.Waterlogged {
		case true:
			return 4660
		case false:
			return 4661
		}
	}
	return 4655 // default state
}

type RailShape string

const (
	RailShapeNorthSouth     RailShape = "north_south"
	RailShapeEastWest       RailShape = "east_west"
	RailShapeAscendingEast  RailShape = "ascending_east"
	RailShapeAscendingWest  RailShape = "ascending_west"
	RailShapeAscendingNorth RailShape = "ascending_north"
	RailShapeAscendingSouth RailShape = "ascending_south"
	RailShapeSouthEast      RailShape = "south_east"
	RailShapeSouthWest      RailShape = "south_west"
	RailShapeNorthWest      RailShape = "north_west"
	RailShapeNorthEast      RailShape = "north_east"
)

type Rail struct {
	Shape       RailShape
	Waterlogged bool
}

func (x Rail) Id() uint16 {
	switch x.Shape {
	case RailShapeNorthSouth:
		switch x.Waterlogged {
		case true:
			return 4662
		case false:
			return 4663
		}
	case RailShapeEastWest:
		switch x.Waterlogged {
		case true:
			return 4664
		case false:
			return 4665
		}
	case RailShapeAscendingEast:
		switch x.Waterlogged {
		case true:
			return 4666
		case false:
			return 4667
		}
	case RailShapeAscendingWest:
		switch x.Waterlogged {
		case true:
			return 4668
		case false:
			return 4669
		}
	case RailShapeAscendingNorth:
		switch x.Waterlogged {
		case true:
			return 4670
		case false:
			return 4671
		}
	case RailShapeAscendingSouth:
		switch x.Waterlogged {
		case true:
			return 4672
		case false:
			return 4673
		}
	case RailShapeSouthEast:
		switch x.Waterlogged {
		case true:
			return 4674
		case false:
			return 4675
		}
	case RailShapeSouthWest:
		switch x.Waterlogged {
		case true:
			return 4676
		case false:
			return 4677
		}
	case RailShapeNorthWest:
		switch x.Waterlogged {
		case true:
			return 4678
		case false:
			return 4679
		}
	case RailShapeNorthEast:
		switch x.Waterlogged {
		case true:
			return 4680
		case false:
			return 4681
		}
	}
	return 4663 // default state
}

type CobblestoneStairsFacing string

const (
	CobblestoneStairsFacingNorth CobblestoneStairsFacing = "north"
	CobblestoneStairsFacingSouth CobblestoneStairsFacing = "south"
	CobblestoneStairsFacingWest  CobblestoneStairsFacing = "west"
	CobblestoneStairsFacingEast  CobblestoneStairsFacing = "east"
)

type CobblestoneStairsHalf string

const (
	CobblestoneStairsHalfTop    CobblestoneStairsHalf = "top"
	CobblestoneStairsHalfBottom CobblestoneStairsHalf = "bottom"
)

type CobblestoneStairsShape string

const (
	CobblestoneStairsShapeStraight   CobblestoneStairsShape = "straight"
	CobblestoneStairsShapeInnerLeft  CobblestoneStairsShape = "inner_left"
	CobblestoneStairsShapeInnerRight CobblestoneStairsShape = "inner_right"
	CobblestoneStairsShapeOuterLeft  CobblestoneStairsShape = "outer_left"
	CobblestoneStairsShapeOuterRight CobblestoneStairsShape = "outer_right"
)

type CobblestoneStairs struct {
	Waterlogged bool
	Facing      CobblestoneStairsFacing
	Half        CobblestoneStairsHalf
	Shape       CobblestoneStairsShape
}

func (x CobblestoneStairs) Id() uint16 {
	switch x.Facing {
	case CobblestoneStairsFacingNorth:
		switch x.Half {
		case CobblestoneStairsHalfTop:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4682
				case false:
					return 4683
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4684
				case false:
					return 4685
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4686
				case false:
					return 4687
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4688
				case false:
					return 4689
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4690
				case false:
					return 4691
				}
			}
		case CobblestoneStairsHalfBottom:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4692
				case false:
					return 4693
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4694
				case false:
					return 4695
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4696
				case false:
					return 4697
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4698
				case false:
					return 4699
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4700
				case false:
					return 4701
				}
			}
		}
	case CobblestoneStairsFacingSouth:
		switch x.Half {
		case CobblestoneStairsHalfTop:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4702
				case false:
					return 4703
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4704
				case false:
					return 4705
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4706
				case false:
					return 4707
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4708
				case false:
					return 4709
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4710
				case false:
					return 4711
				}
			}
		case CobblestoneStairsHalfBottom:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4712
				case false:
					return 4713
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4714
				case false:
					return 4715
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4716
				case false:
					return 4717
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4718
				case false:
					return 4719
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4720
				case false:
					return 4721
				}
			}
		}
	case CobblestoneStairsFacingWest:
		switch x.Half {
		case CobblestoneStairsHalfTop:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4722
				case false:
					return 4723
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4724
				case false:
					return 4725
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4726
				case false:
					return 4727
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4728
				case false:
					return 4729
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4730
				case false:
					return 4731
				}
			}
		case CobblestoneStairsHalfBottom:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4732
				case false:
					return 4733
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4734
				case false:
					return 4735
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4736
				case false:
					return 4737
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4738
				case false:
					return 4739
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4740
				case false:
					return 4741
				}
			}
		}
	case CobblestoneStairsFacingEast:
		switch x.Half {
		case CobblestoneStairsHalfTop:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4742
				case false:
					return 4743
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4744
				case false:
					return 4745
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4746
				case false:
					return 4747
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4748
				case false:
					return 4749
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4750
				case false:
					return 4751
				}
			}
		case CobblestoneStairsHalfBottom:
			switch x.Shape {
			case CobblestoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 4752
				case false:
					return 4753
				}
			case CobblestoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 4754
				case false:
					return 4755
				}
			case CobblestoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 4756
				case false:
					return 4757
				}
			case CobblestoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 4758
				case false:
					return 4759
				}
			case CobblestoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 4760
				case false:
					return 4761
				}
			}
		}
	}
	return 4693 // default state
}

type OakWallSignFacing string

const (
	OakWallSignFacingNorth OakWallSignFacing = "north"
	OakWallSignFacingSouth OakWallSignFacing = "south"
	OakWallSignFacingWest  OakWallSignFacing = "west"
	OakWallSignFacingEast  OakWallSignFacing = "east"
)

type OakWallSign struct {
	Facing      OakWallSignFacing
	Waterlogged bool
}

func (x OakWallSign) Id() uint16 {
	switch x.Facing {
	case OakWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4762
		case false:
			return 4763
		}
	case OakWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4764
		case false:
			return 4765
		}
	case OakWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4766
		case false:
			return 4767
		}
	case OakWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4768
		case false:
			return 4769
		}
	}
	return 4763 // default state
}

type SpruceWallSignFacing string

const (
	SpruceWallSignFacingNorth SpruceWallSignFacing = "north"
	SpruceWallSignFacingSouth SpruceWallSignFacing = "south"
	SpruceWallSignFacingWest  SpruceWallSignFacing = "west"
	SpruceWallSignFacingEast  SpruceWallSignFacing = "east"
)

type SpruceWallSign struct {
	Facing      SpruceWallSignFacing
	Waterlogged bool
}

func (x SpruceWallSign) Id() uint16 {
	switch x.Facing {
	case SpruceWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4770
		case false:
			return 4771
		}
	case SpruceWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4772
		case false:
			return 4773
		}
	case SpruceWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4774
		case false:
			return 4775
		}
	case SpruceWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4776
		case false:
			return 4777
		}
	}
	return 4771 // default state
}

type BirchWallSignFacing string

const (
	BirchWallSignFacingNorth BirchWallSignFacing = "north"
	BirchWallSignFacingSouth BirchWallSignFacing = "south"
	BirchWallSignFacingWest  BirchWallSignFacing = "west"
	BirchWallSignFacingEast  BirchWallSignFacing = "east"
)

type BirchWallSign struct {
	Waterlogged bool
	Facing      BirchWallSignFacing
}

func (x BirchWallSign) Id() uint16 {
	switch x.Facing {
	case BirchWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4778
		case false:
			return 4779
		}
	case BirchWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4780
		case false:
			return 4781
		}
	case BirchWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4782
		case false:
			return 4783
		}
	case BirchWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4784
		case false:
			return 4785
		}
	}
	return 4779 // default state
}

type AcaciaWallSignFacing string

const (
	AcaciaWallSignFacingNorth AcaciaWallSignFacing = "north"
	AcaciaWallSignFacingSouth AcaciaWallSignFacing = "south"
	AcaciaWallSignFacingWest  AcaciaWallSignFacing = "west"
	AcaciaWallSignFacingEast  AcaciaWallSignFacing = "east"
)

type AcaciaWallSign struct {
	Waterlogged bool
	Facing      AcaciaWallSignFacing
}

func (x AcaciaWallSign) Id() uint16 {
	switch x.Facing {
	case AcaciaWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4786
		case false:
			return 4787
		}
	case AcaciaWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4788
		case false:
			return 4789
		}
	case AcaciaWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4790
		case false:
			return 4791
		}
	case AcaciaWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4792
		case false:
			return 4793
		}
	}
	return 4787 // default state
}

type CherryWallSignFacing string

const (
	CherryWallSignFacingNorth CherryWallSignFacing = "north"
	CherryWallSignFacingSouth CherryWallSignFacing = "south"
	CherryWallSignFacingWest  CherryWallSignFacing = "west"
	CherryWallSignFacingEast  CherryWallSignFacing = "east"
)

type CherryWallSign struct {
	Facing      CherryWallSignFacing
	Waterlogged bool
}

func (x CherryWallSign) Id() uint16 {
	switch x.Facing {
	case CherryWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4794
		case false:
			return 4795
		}
	case CherryWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4796
		case false:
			return 4797
		}
	case CherryWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4798
		case false:
			return 4799
		}
	case CherryWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4800
		case false:
			return 4801
		}
	}
	return 4795 // default state
}

type JungleWallSignFacing string

const (
	JungleWallSignFacingNorth JungleWallSignFacing = "north"
	JungleWallSignFacingSouth JungleWallSignFacing = "south"
	JungleWallSignFacingWest  JungleWallSignFacing = "west"
	JungleWallSignFacingEast  JungleWallSignFacing = "east"
)

type JungleWallSign struct {
	Facing      JungleWallSignFacing
	Waterlogged bool
}

func (x JungleWallSign) Id() uint16 {
	switch x.Facing {
	case JungleWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4802
		case false:
			return 4803
		}
	case JungleWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4804
		case false:
			return 4805
		}
	case JungleWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4806
		case false:
			return 4807
		}
	case JungleWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4808
		case false:
			return 4809
		}
	}
	return 4803 // default state
}

type DarkOakWallSignFacing string

const (
	DarkOakWallSignFacingNorth DarkOakWallSignFacing = "north"
	DarkOakWallSignFacingSouth DarkOakWallSignFacing = "south"
	DarkOakWallSignFacingWest  DarkOakWallSignFacing = "west"
	DarkOakWallSignFacingEast  DarkOakWallSignFacing = "east"
)

type DarkOakWallSign struct {
	Facing      DarkOakWallSignFacing
	Waterlogged bool
}

func (x DarkOakWallSign) Id() uint16 {
	switch x.Facing {
	case DarkOakWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4810
		case false:
			return 4811
		}
	case DarkOakWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4812
		case false:
			return 4813
		}
	case DarkOakWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4814
		case false:
			return 4815
		}
	case DarkOakWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4816
		case false:
			return 4817
		}
	}
	return 4811 // default state
}

type MangroveWallSignFacing string

const (
	MangroveWallSignFacingNorth MangroveWallSignFacing = "north"
	MangroveWallSignFacingSouth MangroveWallSignFacing = "south"
	MangroveWallSignFacingWest  MangroveWallSignFacing = "west"
	MangroveWallSignFacingEast  MangroveWallSignFacing = "east"
)

type MangroveWallSign struct {
	Facing      MangroveWallSignFacing
	Waterlogged bool
}

func (x MangroveWallSign) Id() uint16 {
	switch x.Facing {
	case MangroveWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4818
		case false:
			return 4819
		}
	case MangroveWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4820
		case false:
			return 4821
		}
	case MangroveWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4822
		case false:
			return 4823
		}
	case MangroveWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4824
		case false:
			return 4825
		}
	}
	return 4819 // default state
}

type BambooWallSignFacing string

const (
	BambooWallSignFacingNorth BambooWallSignFacing = "north"
	BambooWallSignFacingSouth BambooWallSignFacing = "south"
	BambooWallSignFacingWest  BambooWallSignFacing = "west"
	BambooWallSignFacingEast  BambooWallSignFacing = "east"
)

type BambooWallSign struct {
	Facing      BambooWallSignFacing
	Waterlogged bool
}

func (x BambooWallSign) Id() uint16 {
	switch x.Facing {
	case BambooWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 4826
		case false:
			return 4827
		}
	case BambooWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 4828
		case false:
			return 4829
		}
	case BambooWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 4830
		case false:
			return 4831
		}
	case BambooWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 4832
		case false:
			return 4833
		}
	}
	return 4827 // default state
}

type OakHangingSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
	Attached    bool
}

func (x OakHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4834
			case false:
				return 4835
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4836
			case false:
				return 4837
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4838
			case false:
				return 4839
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 4840
			case false:
				return 4841
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 4842
			case false:
				return 4843
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 4844
			case false:
				return 4845
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 4846
			case false:
				return 4847
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 4848
			case false:
				return 4849
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 4850
			case false:
				return 4851
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 4852
			case false:
				return 4853
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 4854
			case false:
				return 4855
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 4856
			case false:
				return 4857
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 4858
			case false:
				return 4859
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 4860
			case false:
				return 4861
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 4862
			case false:
				return 4863
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 4864
			case false:
				return 4865
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4866
			case false:
				return 4867
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4868
			case false:
				return 4869
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4870
			case false:
				return 4871
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 4872
			case false:
				return 4873
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 4874
			case false:
				return 4875
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 4876
			case false:
				return 4877
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 4878
			case false:
				return 4879
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 4880
			case false:
				return 4881
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 4882
			case false:
				return 4883
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 4884
			case false:
				return 4885
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 4886
			case false:
				return 4887
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 4888
			case false:
				return 4889
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 4890
			case false:
				return 4891
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 4892
			case false:
				return 4893
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 4894
			case false:
				return 4895
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 4896
			case false:
				return 4897
			}
		}
	}
	return 4867 // default state
}

type SpruceHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x SpruceHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4898
			case false:
				return 4899
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4900
			case false:
				return 4901
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4902
			case false:
				return 4903
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 4904
			case false:
				return 4905
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 4906
			case false:
				return 4907
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 4908
			case false:
				return 4909
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 4910
			case false:
				return 4911
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 4912
			case false:
				return 4913
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 4914
			case false:
				return 4915
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 4916
			case false:
				return 4917
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 4918
			case false:
				return 4919
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 4920
			case false:
				return 4921
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 4922
			case false:
				return 4923
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 4924
			case false:
				return 4925
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 4926
			case false:
				return 4927
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 4928
			case false:
				return 4929
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4930
			case false:
				return 4931
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4932
			case false:
				return 4933
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4934
			case false:
				return 4935
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 4936
			case false:
				return 4937
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 4938
			case false:
				return 4939
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 4940
			case false:
				return 4941
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 4942
			case false:
				return 4943
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 4944
			case false:
				return 4945
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 4946
			case false:
				return 4947
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 4948
			case false:
				return 4949
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 4950
			case false:
				return 4951
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 4952
			case false:
				return 4953
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 4954
			case false:
				return 4955
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 4956
			case false:
				return 4957
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 4958
			case false:
				return 4959
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 4960
			case false:
				return 4961
			}
		}
	}
	return 4931 // default state
}

type BirchHangingSign struct {
	Waterlogged bool
	Attached    bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x BirchHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4962
			case false:
				return 4963
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4964
			case false:
				return 4965
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4966
			case false:
				return 4967
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 4968
			case false:
				return 4969
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 4970
			case false:
				return 4971
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 4972
			case false:
				return 4973
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 4974
			case false:
				return 4975
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 4976
			case false:
				return 4977
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 4978
			case false:
				return 4979
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 4980
			case false:
				return 4981
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 4982
			case false:
				return 4983
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 4984
			case false:
				return 4985
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 4986
			case false:
				return 4987
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 4988
			case false:
				return 4989
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 4990
			case false:
				return 4991
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 4992
			case false:
				return 4993
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 4994
			case false:
				return 4995
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 4996
			case false:
				return 4997
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 4998
			case false:
				return 4999
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5000
			case false:
				return 5001
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5002
			case false:
				return 5003
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5004
			case false:
				return 5005
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5006
			case false:
				return 5007
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5008
			case false:
				return 5009
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5010
			case false:
				return 5011
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5012
			case false:
				return 5013
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5014
			case false:
				return 5015
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5016
			case false:
				return 5017
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5018
			case false:
				return 5019
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5020
			case false:
				return 5021
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5022
			case false:
				return 5023
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5024
			case false:
				return 5025
			}
		}
	}
	return 4995 // default state
}

type AcaciaHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x AcaciaHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5026
			case false:
				return 5027
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5028
			case false:
				return 5029
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5030
			case false:
				return 5031
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5032
			case false:
				return 5033
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5034
			case false:
				return 5035
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5036
			case false:
				return 5037
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5038
			case false:
				return 5039
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5040
			case false:
				return 5041
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5042
			case false:
				return 5043
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5044
			case false:
				return 5045
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5046
			case false:
				return 5047
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5048
			case false:
				return 5049
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5050
			case false:
				return 5051
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5052
			case false:
				return 5053
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5054
			case false:
				return 5055
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5056
			case false:
				return 5057
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5058
			case false:
				return 5059
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5060
			case false:
				return 5061
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5062
			case false:
				return 5063
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5064
			case false:
				return 5065
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5066
			case false:
				return 5067
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5068
			case false:
				return 5069
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5070
			case false:
				return 5071
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5072
			case false:
				return 5073
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5074
			case false:
				return 5075
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5076
			case false:
				return 5077
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5078
			case false:
				return 5079
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5080
			case false:
				return 5081
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5082
			case false:
				return 5083
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5084
			case false:
				return 5085
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5086
			case false:
				return 5087
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5088
			case false:
				return 5089
			}
		}
	}
	return 5059 // default state
}

type CherryHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x CherryHangingSign) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Attached {
		case true:
			switch x.Rotation {
			case 0:
				return 5090
			case 1:
				return 5092
			case 2:
				return 5094
			case 3:
				return 5096
			case 4:
				return 5098
			case 5:
				return 5100
			case 6:
				return 5102
			case 7:
				return 5104
			case 8:
				return 5106
			case 9:
				return 5108
			case 10:
				return 5110
			case 11:
				return 5112
			case 12:
				return 5114
			case 13:
				return 5116
			case 14:
				return 5118
			case 15:
				return 5120
			}
		case false:
			switch x.Rotation {
			case 0:
				return 5122
			case 1:
				return 5124
			case 2:
				return 5126
			case 3:
				return 5128
			case 4:
				return 5130
			case 5:
				return 5132
			case 6:
				return 5134
			case 7:
				return 5136
			case 8:
				return 5138
			case 9:
				return 5140
			case 10:
				return 5142
			case 11:
				return 5144
			case 12:
				return 5146
			case 13:
				return 5148
			case 14:
				return 5150
			case 15:
				return 5152
			}
		}
	case false:
		switch x.Attached {
		case true:
			switch x.Rotation {
			case 0:
				return 5091
			case 1:
				return 5093
			case 2:
				return 5095
			case 3:
				return 5097
			case 4:
				return 5099
			case 5:
				return 5101
			case 6:
				return 5103
			case 7:
				return 5105
			case 8:
				return 5107
			case 9:
				return 5109
			case 10:
				return 5111
			case 11:
				return 5113
			case 12:
				return 5115
			case 13:
				return 5117
			case 14:
				return 5119
			case 15:
				return 5121
			}
		case false:
			switch x.Rotation {
			case 0:
				return 5123
			case 1:
				return 5125
			case 2:
				return 5127
			case 3:
				return 5129
			case 4:
				return 5131
			case 5:
				return 5133
			case 6:
				return 5135
			case 7:
				return 5137
			case 8:
				return 5139
			case 9:
				return 5141
			case 10:
				return 5143
			case 11:
				return 5145
			case 12:
				return 5147
			case 13:
				return 5149
			case 14:
				return 5151
			case 15:
				return 5153
			}
		}
	}
	return 5123 // default state
}

type JungleHangingSign struct {
	Waterlogged bool
	Attached    bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x JungleHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5154
			case false:
				return 5155
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5156
			case false:
				return 5157
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5158
			case false:
				return 5159
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5160
			case false:
				return 5161
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5162
			case false:
				return 5163
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5164
			case false:
				return 5165
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5166
			case false:
				return 5167
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5168
			case false:
				return 5169
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5170
			case false:
				return 5171
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5172
			case false:
				return 5173
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5174
			case false:
				return 5175
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5176
			case false:
				return 5177
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5178
			case false:
				return 5179
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5180
			case false:
				return 5181
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5182
			case false:
				return 5183
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5184
			case false:
				return 5185
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5186
			case false:
				return 5187
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5188
			case false:
				return 5189
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5190
			case false:
				return 5191
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5192
			case false:
				return 5193
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5194
			case false:
				return 5195
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5196
			case false:
				return 5197
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5198
			case false:
				return 5199
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5200
			case false:
				return 5201
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5202
			case false:
				return 5203
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5204
			case false:
				return 5205
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5206
			case false:
				return 5207
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5208
			case false:
				return 5209
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5210
			case false:
				return 5211
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5212
			case false:
				return 5213
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5214
			case false:
				return 5215
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5216
			case false:
				return 5217
			}
		}
	}
	return 5187 // default state
}

type DarkOakHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x DarkOakHangingSign) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Attached {
		case true:
			switch x.Rotation {
			case 0:
				return 5218
			case 1:
				return 5220
			case 2:
				return 5222
			case 3:
				return 5224
			case 4:
				return 5226
			case 5:
				return 5228
			case 6:
				return 5230
			case 7:
				return 5232
			case 8:
				return 5234
			case 9:
				return 5236
			case 10:
				return 5238
			case 11:
				return 5240
			case 12:
				return 5242
			case 13:
				return 5244
			case 14:
				return 5246
			case 15:
				return 5248
			}
		case false:
			switch x.Rotation {
			case 0:
				return 5250
			case 1:
				return 5252
			case 2:
				return 5254
			case 3:
				return 5256
			case 4:
				return 5258
			case 5:
				return 5260
			case 6:
				return 5262
			case 7:
				return 5264
			case 8:
				return 5266
			case 9:
				return 5268
			case 10:
				return 5270
			case 11:
				return 5272
			case 12:
				return 5274
			case 13:
				return 5276
			case 14:
				return 5278
			case 15:
				return 5280
			}
		}
	case false:
		switch x.Attached {
		case true:
			switch x.Rotation {
			case 0:
				return 5219
			case 1:
				return 5221
			case 2:
				return 5223
			case 3:
				return 5225
			case 4:
				return 5227
			case 5:
				return 5229
			case 6:
				return 5231
			case 7:
				return 5233
			case 8:
				return 5235
			case 9:
				return 5237
			case 10:
				return 5239
			case 11:
				return 5241
			case 12:
				return 5243
			case 13:
				return 5245
			case 14:
				return 5247
			case 15:
				return 5249
			}
		case false:
			switch x.Rotation {
			case 0:
				return 5251
			case 1:
				return 5253
			case 2:
				return 5255
			case 3:
				return 5257
			case 4:
				return 5259
			case 5:
				return 5261
			case 6:
				return 5263
			case 7:
				return 5265
			case 8:
				return 5267
			case 9:
				return 5269
			case 10:
				return 5271
			case 11:
				return 5273
			case 12:
				return 5275
			case 13:
				return 5277
			case 14:
				return 5279
			case 15:
				return 5281
			}
		}
	}
	return 5251 // default state
}

type CrimsonHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x CrimsonHangingSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5282
			case false:
				return 5314
			}
		case false:
			switch x.Attached {
			case true:
				return 5283
			case false:
				return 5315
			}
		}
	case 1:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5284
			case false:
				return 5316
			}
		case false:
			switch x.Attached {
			case true:
				return 5285
			case false:
				return 5317
			}
		}
	case 2:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5286
			case false:
				return 5318
			}
		case false:
			switch x.Attached {
			case true:
				return 5287
			case false:
				return 5319
			}
		}
	case 3:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5288
			case false:
				return 5320
			}
		case false:
			switch x.Attached {
			case true:
				return 5289
			case false:
				return 5321
			}
		}
	case 4:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5290
			case false:
				return 5322
			}
		case false:
			switch x.Attached {
			case true:
				return 5291
			case false:
				return 5323
			}
		}
	case 5:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5292
			case false:
				return 5324
			}
		case false:
			switch x.Attached {
			case true:
				return 5293
			case false:
				return 5325
			}
		}
	case 6:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5294
			case false:
				return 5326
			}
		case false:
			switch x.Attached {
			case true:
				return 5295
			case false:
				return 5327
			}
		}
	case 7:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5296
			case false:
				return 5328
			}
		case false:
			switch x.Attached {
			case true:
				return 5297
			case false:
				return 5329
			}
		}
	case 8:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5298
			case false:
				return 5330
			}
		case false:
			switch x.Attached {
			case true:
				return 5299
			case false:
				return 5331
			}
		}
	case 9:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5300
			case false:
				return 5332
			}
		case false:
			switch x.Attached {
			case true:
				return 5301
			case false:
				return 5333
			}
		}
	case 10:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5302
			case false:
				return 5334
			}
		case false:
			switch x.Attached {
			case true:
				return 5303
			case false:
				return 5335
			}
		}
	case 11:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5304
			case false:
				return 5336
			}
		case false:
			switch x.Attached {
			case true:
				return 5305
			case false:
				return 5337
			}
		}
	case 12:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5306
			case false:
				return 5338
			}
		case false:
			switch x.Attached {
			case true:
				return 5307
			case false:
				return 5339
			}
		}
	case 13:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5308
			case false:
				return 5340
			}
		case false:
			switch x.Attached {
			case true:
				return 5309
			case false:
				return 5341
			}
		}
	case 14:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5310
			case false:
				return 5342
			}
		case false:
			switch x.Attached {
			case true:
				return 5311
			case false:
				return 5343
			}
		}
	case 15:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5312
			case false:
				return 5344
			}
		case false:
			switch x.Attached {
			case true:
				return 5313
			case false:
				return 5345
			}
		}
	}
	return 5315 // default state
}

type WarpedHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x WarpedHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5346
			case false:
				return 5347
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5348
			case false:
				return 5349
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5350
			case false:
				return 5351
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5352
			case false:
				return 5353
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5354
			case false:
				return 5355
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5356
			case false:
				return 5357
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5358
			case false:
				return 5359
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5360
			case false:
				return 5361
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5362
			case false:
				return 5363
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5364
			case false:
				return 5365
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5366
			case false:
				return 5367
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5368
			case false:
				return 5369
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5370
			case false:
				return 5371
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5372
			case false:
				return 5373
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5374
			case false:
				return 5375
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5376
			case false:
				return 5377
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5378
			case false:
				return 5379
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5380
			case false:
				return 5381
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5382
			case false:
				return 5383
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5384
			case false:
				return 5385
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5386
			case false:
				return 5387
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5388
			case false:
				return 5389
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5390
			case false:
				return 5391
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5392
			case false:
				return 5393
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5394
			case false:
				return 5395
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5396
			case false:
				return 5397
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5398
			case false:
				return 5399
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5400
			case false:
				return 5401
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5402
			case false:
				return 5403
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5404
			case false:
				return 5405
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5406
			case false:
				return 5407
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5408
			case false:
				return 5409
			}
		}
	}
	return 5379 // default state
}

type MangroveHangingSign struct {
	Attached bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x MangroveHangingSign) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5410
			case false:
				return 5411
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5412
			case false:
				return 5413
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5414
			case false:
				return 5415
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5416
			case false:
				return 5417
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5418
			case false:
				return 5419
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5420
			case false:
				return 5421
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5422
			case false:
				return 5423
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5424
			case false:
				return 5425
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5426
			case false:
				return 5427
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5428
			case false:
				return 5429
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5430
			case false:
				return 5431
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5432
			case false:
				return 5433
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5434
			case false:
				return 5435
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5436
			case false:
				return 5437
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5438
			case false:
				return 5439
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5440
			case false:
				return 5441
			}
		}
	case false:
		switch x.Rotation {
		case 0:
			switch x.Waterlogged {
			case true:
				return 5442
			case false:
				return 5443
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 5444
			case false:
				return 5445
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 5446
			case false:
				return 5447
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 5448
			case false:
				return 5449
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 5450
			case false:
				return 5451
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 5452
			case false:
				return 5453
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 5454
			case false:
				return 5455
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 5456
			case false:
				return 5457
			}
		case 8:
			switch x.Waterlogged {
			case true:
				return 5458
			case false:
				return 5459
			}
		case 9:
			switch x.Waterlogged {
			case true:
				return 5460
			case false:
				return 5461
			}
		case 10:
			switch x.Waterlogged {
			case true:
				return 5462
			case false:
				return 5463
			}
		case 11:
			switch x.Waterlogged {
			case true:
				return 5464
			case false:
				return 5465
			}
		case 12:
			switch x.Waterlogged {
			case true:
				return 5466
			case false:
				return 5467
			}
		case 13:
			switch x.Waterlogged {
			case true:
				return 5468
			case false:
				return 5469
			}
		case 14:
			switch x.Waterlogged {
			case true:
				return 5470
			case false:
				return 5471
			}
		case 15:
			switch x.Waterlogged {
			case true:
				return 5472
			case false:
				return 5473
			}
		}
	}
	return 5443 // default state
}

type BambooHangingSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
	Attached    bool
}

func (x BambooHangingSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5474
			case false:
				return 5506
			}
		case false:
			switch x.Attached {
			case true:
				return 5475
			case false:
				return 5507
			}
		}
	case 1:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5476
			case false:
				return 5508
			}
		case false:
			switch x.Attached {
			case true:
				return 5477
			case false:
				return 5509
			}
		}
	case 2:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5478
			case false:
				return 5510
			}
		case false:
			switch x.Attached {
			case true:
				return 5479
			case false:
				return 5511
			}
		}
	case 3:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5480
			case false:
				return 5512
			}
		case false:
			switch x.Attached {
			case true:
				return 5481
			case false:
				return 5513
			}
		}
	case 4:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5482
			case false:
				return 5514
			}
		case false:
			switch x.Attached {
			case true:
				return 5483
			case false:
				return 5515
			}
		}
	case 5:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5484
			case false:
				return 5516
			}
		case false:
			switch x.Attached {
			case true:
				return 5485
			case false:
				return 5517
			}
		}
	case 6:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5486
			case false:
				return 5518
			}
		case false:
			switch x.Attached {
			case true:
				return 5487
			case false:
				return 5519
			}
		}
	case 7:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5488
			case false:
				return 5520
			}
		case false:
			switch x.Attached {
			case true:
				return 5489
			case false:
				return 5521
			}
		}
	case 8:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5490
			case false:
				return 5522
			}
		case false:
			switch x.Attached {
			case true:
				return 5491
			case false:
				return 5523
			}
		}
	case 9:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5492
			case false:
				return 5524
			}
		case false:
			switch x.Attached {
			case true:
				return 5493
			case false:
				return 5525
			}
		}
	case 10:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5494
			case false:
				return 5526
			}
		case false:
			switch x.Attached {
			case true:
				return 5495
			case false:
				return 5527
			}
		}
	case 11:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5496
			case false:
				return 5528
			}
		case false:
			switch x.Attached {
			case true:
				return 5497
			case false:
				return 5529
			}
		}
	case 12:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5498
			case false:
				return 5530
			}
		case false:
			switch x.Attached {
			case true:
				return 5499
			case false:
				return 5531
			}
		}
	case 13:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5500
			case false:
				return 5532
			}
		case false:
			switch x.Attached {
			case true:
				return 5501
			case false:
				return 5533
			}
		}
	case 14:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5502
			case false:
				return 5534
			}
		case false:
			switch x.Attached {
			case true:
				return 5503
			case false:
				return 5535
			}
		}
	case 15:
		switch x.Waterlogged {
		case true:
			switch x.Attached {
			case true:
				return 5504
			case false:
				return 5536
			}
		case false:
			switch x.Attached {
			case true:
				return 5505
			case false:
				return 5537
			}
		}
	}
	return 5507 // default state
}

type OakWallHangingSignFacing string

const (
	OakWallHangingSignFacingNorth OakWallHangingSignFacing = "north"
	OakWallHangingSignFacingSouth OakWallHangingSignFacing = "south"
	OakWallHangingSignFacingWest  OakWallHangingSignFacing = "west"
	OakWallHangingSignFacingEast  OakWallHangingSignFacing = "east"
)

type OakWallHangingSign struct {
	Facing      OakWallHangingSignFacing
	Waterlogged bool
}

func (x OakWallHangingSign) Id() uint16 {
	switch x.Facing {
	case OakWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5538
		case false:
			return 5539
		}
	case OakWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5540
		case false:
			return 5541
		}
	case OakWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5542
		case false:
			return 5543
		}
	case OakWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5544
		case false:
			return 5545
		}
	}
	return 5539 // default state
}

type SpruceWallHangingSignFacing string

const (
	SpruceWallHangingSignFacingNorth SpruceWallHangingSignFacing = "north"
	SpruceWallHangingSignFacingSouth SpruceWallHangingSignFacing = "south"
	SpruceWallHangingSignFacingWest  SpruceWallHangingSignFacing = "west"
	SpruceWallHangingSignFacingEast  SpruceWallHangingSignFacing = "east"
)

type SpruceWallHangingSign struct {
	Facing      SpruceWallHangingSignFacing
	Waterlogged bool
}

func (x SpruceWallHangingSign) Id() uint16 {
	switch x.Facing {
	case SpruceWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5546
		case false:
			return 5547
		}
	case SpruceWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5548
		case false:
			return 5549
		}
	case SpruceWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5550
		case false:
			return 5551
		}
	case SpruceWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5552
		case false:
			return 5553
		}
	}
	return 5547 // default state
}

type BirchWallHangingSignFacing string

const (
	BirchWallHangingSignFacingNorth BirchWallHangingSignFacing = "north"
	BirchWallHangingSignFacingSouth BirchWallHangingSignFacing = "south"
	BirchWallHangingSignFacingWest  BirchWallHangingSignFacing = "west"
	BirchWallHangingSignFacingEast  BirchWallHangingSignFacing = "east"
)

type BirchWallHangingSign struct {
	Facing      BirchWallHangingSignFacing
	Waterlogged bool
}

func (x BirchWallHangingSign) Id() uint16 {
	switch x.Facing {
	case BirchWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5554
		case false:
			return 5555
		}
	case BirchWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5556
		case false:
			return 5557
		}
	case BirchWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5558
		case false:
			return 5559
		}
	case BirchWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5560
		case false:
			return 5561
		}
	}
	return 5555 // default state
}

type AcaciaWallHangingSignFacing string

const (
	AcaciaWallHangingSignFacingNorth AcaciaWallHangingSignFacing = "north"
	AcaciaWallHangingSignFacingSouth AcaciaWallHangingSignFacing = "south"
	AcaciaWallHangingSignFacingWest  AcaciaWallHangingSignFacing = "west"
	AcaciaWallHangingSignFacingEast  AcaciaWallHangingSignFacing = "east"
)

type AcaciaWallHangingSign struct {
	Facing      AcaciaWallHangingSignFacing
	Waterlogged bool
}

func (x AcaciaWallHangingSign) Id() uint16 {
	switch x.Facing {
	case AcaciaWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5562
		case false:
			return 5563
		}
	case AcaciaWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5564
		case false:
			return 5565
		}
	case AcaciaWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5566
		case false:
			return 5567
		}
	case AcaciaWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5568
		case false:
			return 5569
		}
	}
	return 5563 // default state
}

type CherryWallHangingSignFacing string

const (
	CherryWallHangingSignFacingNorth CherryWallHangingSignFacing = "north"
	CherryWallHangingSignFacingSouth CherryWallHangingSignFacing = "south"
	CherryWallHangingSignFacingWest  CherryWallHangingSignFacing = "west"
	CherryWallHangingSignFacingEast  CherryWallHangingSignFacing = "east"
)

type CherryWallHangingSign struct {
	Facing      CherryWallHangingSignFacing
	Waterlogged bool
}

func (x CherryWallHangingSign) Id() uint16 {
	switch x.Facing {
	case CherryWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5570
		case false:
			return 5571
		}
	case CherryWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5572
		case false:
			return 5573
		}
	case CherryWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5574
		case false:
			return 5575
		}
	case CherryWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5576
		case false:
			return 5577
		}
	}
	return 5571 // default state
}

type JungleWallHangingSignFacing string

const (
	JungleWallHangingSignFacingNorth JungleWallHangingSignFacing = "north"
	JungleWallHangingSignFacingSouth JungleWallHangingSignFacing = "south"
	JungleWallHangingSignFacingWest  JungleWallHangingSignFacing = "west"
	JungleWallHangingSignFacingEast  JungleWallHangingSignFacing = "east"
)

type JungleWallHangingSign struct {
	Waterlogged bool
	Facing      JungleWallHangingSignFacing
}

func (x JungleWallHangingSign) Id() uint16 {
	switch x.Facing {
	case JungleWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5578
		case false:
			return 5579
		}
	case JungleWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5580
		case false:
			return 5581
		}
	case JungleWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5582
		case false:
			return 5583
		}
	case JungleWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5584
		case false:
			return 5585
		}
	}
	return 5579 // default state
}

type DarkOakWallHangingSignFacing string

const (
	DarkOakWallHangingSignFacingNorth DarkOakWallHangingSignFacing = "north"
	DarkOakWallHangingSignFacingSouth DarkOakWallHangingSignFacing = "south"
	DarkOakWallHangingSignFacingWest  DarkOakWallHangingSignFacing = "west"
	DarkOakWallHangingSignFacingEast  DarkOakWallHangingSignFacing = "east"
)

type DarkOakWallHangingSign struct {
	Waterlogged bool
	Facing      DarkOakWallHangingSignFacing
}

func (x DarkOakWallHangingSign) Id() uint16 {
	switch x.Facing {
	case DarkOakWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5586
		case false:
			return 5587
		}
	case DarkOakWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5588
		case false:
			return 5589
		}
	case DarkOakWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5590
		case false:
			return 5591
		}
	case DarkOakWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5592
		case false:
			return 5593
		}
	}
	return 5587 // default state
}

type MangroveWallHangingSignFacing string

const (
	MangroveWallHangingSignFacingNorth MangroveWallHangingSignFacing = "north"
	MangroveWallHangingSignFacingSouth MangroveWallHangingSignFacing = "south"
	MangroveWallHangingSignFacingWest  MangroveWallHangingSignFacing = "west"
	MangroveWallHangingSignFacingEast  MangroveWallHangingSignFacing = "east"
)

type MangroveWallHangingSign struct {
	Facing      MangroveWallHangingSignFacing
	Waterlogged bool
}

func (x MangroveWallHangingSign) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case MangroveWallHangingSignFacingNorth:
			return 5594
		case MangroveWallHangingSignFacingSouth:
			return 5596
		case MangroveWallHangingSignFacingWest:
			return 5598
		case MangroveWallHangingSignFacingEast:
			return 5600
		}
	case false:
		switch x.Facing {
		case MangroveWallHangingSignFacingNorth:
			return 5595
		case MangroveWallHangingSignFacingSouth:
			return 5597
		case MangroveWallHangingSignFacingWest:
			return 5599
		case MangroveWallHangingSignFacingEast:
			return 5601
		}
	}
	return 5595 // default state
}

type CrimsonWallHangingSignFacing string

const (
	CrimsonWallHangingSignFacingNorth CrimsonWallHangingSignFacing = "north"
	CrimsonWallHangingSignFacingSouth CrimsonWallHangingSignFacing = "south"
	CrimsonWallHangingSignFacingWest  CrimsonWallHangingSignFacing = "west"
	CrimsonWallHangingSignFacingEast  CrimsonWallHangingSignFacing = "east"
)

type CrimsonWallHangingSign struct {
	Facing      CrimsonWallHangingSignFacing
	Waterlogged bool
}

func (x CrimsonWallHangingSign) Id() uint16 {
	switch x.Facing {
	case CrimsonWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5602
		case false:
			return 5603
		}
	case CrimsonWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5604
		case false:
			return 5605
		}
	case CrimsonWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5606
		case false:
			return 5607
		}
	case CrimsonWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5608
		case false:
			return 5609
		}
	}
	return 5603 // default state
}

type WarpedWallHangingSignFacing string

const (
	WarpedWallHangingSignFacingNorth WarpedWallHangingSignFacing = "north"
	WarpedWallHangingSignFacingSouth WarpedWallHangingSignFacing = "south"
	WarpedWallHangingSignFacingWest  WarpedWallHangingSignFacing = "west"
	WarpedWallHangingSignFacingEast  WarpedWallHangingSignFacing = "east"
)

type WarpedWallHangingSign struct {
	Waterlogged bool
	Facing      WarpedWallHangingSignFacing
}

func (x WarpedWallHangingSign) Id() uint16 {
	switch x.Facing {
	case WarpedWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5610
		case false:
			return 5611
		}
	case WarpedWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5612
		case false:
			return 5613
		}
	case WarpedWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5614
		case false:
			return 5615
		}
	case WarpedWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5616
		case false:
			return 5617
		}
	}
	return 5611 // default state
}

type BambooWallHangingSignFacing string

const (
	BambooWallHangingSignFacingNorth BambooWallHangingSignFacing = "north"
	BambooWallHangingSignFacingSouth BambooWallHangingSignFacing = "south"
	BambooWallHangingSignFacingWest  BambooWallHangingSignFacing = "west"
	BambooWallHangingSignFacingEast  BambooWallHangingSignFacing = "east"
)

type BambooWallHangingSign struct {
	Facing      BambooWallHangingSignFacing
	Waterlogged bool
}

func (x BambooWallHangingSign) Id() uint16 {
	switch x.Facing {
	case BambooWallHangingSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 5618
		case false:
			return 5619
		}
	case BambooWallHangingSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 5620
		case false:
			return 5621
		}
	case BambooWallHangingSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 5622
		case false:
			return 5623
		}
	case BambooWallHangingSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 5624
		case false:
			return 5625
		}
	}
	return 5619 // default state
}

type LeverFace string

const (
	LeverFaceFloor   LeverFace = "floor"
	LeverFaceWall    LeverFace = "wall"
	LeverFaceCeiling LeverFace = "ceiling"
)

type LeverFacing string

const (
	LeverFacingNorth LeverFacing = "north"
	LeverFacingSouth LeverFacing = "south"
	LeverFacingWest  LeverFacing = "west"
	LeverFacingEast  LeverFacing = "east"
)

type Lever struct {
	Powered bool
	Face    LeverFace
	Facing  LeverFacing
}

func (x Lever) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Face {
		case LeverFaceFloor:
			switch x.Facing {
			case LeverFacingNorth:
				return 5626
			case LeverFacingSouth:
				return 5628
			case LeverFacingWest:
				return 5630
			case LeverFacingEast:
				return 5632
			}
		case LeverFaceWall:
			switch x.Facing {
			case LeverFacingNorth:
				return 5634
			case LeverFacingSouth:
				return 5636
			case LeverFacingWest:
				return 5638
			case LeverFacingEast:
				return 5640
			}
		case LeverFaceCeiling:
			switch x.Facing {
			case LeverFacingNorth:
				return 5642
			case LeverFacingSouth:
				return 5644
			case LeverFacingWest:
				return 5646
			case LeverFacingEast:
				return 5648
			}
		}
	case false:
		switch x.Face {
		case LeverFaceFloor:
			switch x.Facing {
			case LeverFacingNorth:
				return 5627
			case LeverFacingSouth:
				return 5629
			case LeverFacingWest:
				return 5631
			case LeverFacingEast:
				return 5633
			}
		case LeverFaceWall:
			switch x.Facing {
			case LeverFacingNorth:
				return 5635
			case LeverFacingSouth:
				return 5637
			case LeverFacingWest:
				return 5639
			case LeverFacingEast:
				return 5641
			}
		case LeverFaceCeiling:
			switch x.Facing {
			case LeverFacingNorth:
				return 5643
			case LeverFacingSouth:
				return 5645
			case LeverFacingWest:
				return 5647
			case LeverFacingEast:
				return 5649
			}
		}
	}
	return 5635 // default state
}

type StonePressurePlate struct {
	Powered bool
}

func (x StonePressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5650
	case false:
		return 5651
	}
	return 5651 // default state
}

type IronDoorFacing string

const (
	IronDoorFacingNorth IronDoorFacing = "north"
	IronDoorFacingSouth IronDoorFacing = "south"
	IronDoorFacingWest  IronDoorFacing = "west"
	IronDoorFacingEast  IronDoorFacing = "east"
)

type IronDoorHalf string

const (
	IronDoorHalfUpper IronDoorHalf = "upper"
	IronDoorHalfLower IronDoorHalf = "lower"
)

type IronDoorHinge string

const (
	IronDoorHingeLeft  IronDoorHinge = "left"
	IronDoorHingeRight IronDoorHinge = "right"
)

type IronDoor struct {
	Facing  IronDoorFacing
	Half    IronDoorHalf
	Hinge   IronDoorHinge
	Open    bool
	Powered bool
}

func (x IronDoor) Id() uint16 {
	switch x.Facing {
	case IronDoorFacingNorth:
		switch x.Half {
		case IronDoorHalfUpper:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5652
					case false:
						return 5653
					}
				case false:
					switch x.Powered {
					case true:
						return 5654
					case false:
						return 5655
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5656
					case false:
						return 5657
					}
				case false:
					switch x.Powered {
					case true:
						return 5658
					case false:
						return 5659
					}
				}
			}
		case IronDoorHalfLower:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5660
					case false:
						return 5661
					}
				case false:
					switch x.Powered {
					case true:
						return 5662
					case false:
						return 5663
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5664
					case false:
						return 5665
					}
				case false:
					switch x.Powered {
					case true:
						return 5666
					case false:
						return 5667
					}
				}
			}
		}
	case IronDoorFacingSouth:
		switch x.Half {
		case IronDoorHalfUpper:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5668
					case false:
						return 5669
					}
				case false:
					switch x.Powered {
					case true:
						return 5670
					case false:
						return 5671
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5672
					case false:
						return 5673
					}
				case false:
					switch x.Powered {
					case true:
						return 5674
					case false:
						return 5675
					}
				}
			}
		case IronDoorHalfLower:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5676
					case false:
						return 5677
					}
				case false:
					switch x.Powered {
					case true:
						return 5678
					case false:
						return 5679
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5680
					case false:
						return 5681
					}
				case false:
					switch x.Powered {
					case true:
						return 5682
					case false:
						return 5683
					}
				}
			}
		}
	case IronDoorFacingWest:
		switch x.Half {
		case IronDoorHalfUpper:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5684
					case false:
						return 5685
					}
				case false:
					switch x.Powered {
					case true:
						return 5686
					case false:
						return 5687
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5688
					case false:
						return 5689
					}
				case false:
					switch x.Powered {
					case true:
						return 5690
					case false:
						return 5691
					}
				}
			}
		case IronDoorHalfLower:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5692
					case false:
						return 5693
					}
				case false:
					switch x.Powered {
					case true:
						return 5694
					case false:
						return 5695
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5696
					case false:
						return 5697
					}
				case false:
					switch x.Powered {
					case true:
						return 5698
					case false:
						return 5699
					}
				}
			}
		}
	case IronDoorFacingEast:
		switch x.Half {
		case IronDoorHalfUpper:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5700
					case false:
						return 5701
					}
				case false:
					switch x.Powered {
					case true:
						return 5702
					case false:
						return 5703
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5704
					case false:
						return 5705
					}
				case false:
					switch x.Powered {
					case true:
						return 5706
					case false:
						return 5707
					}
				}
			}
		case IronDoorHalfLower:
			switch x.Hinge {
			case IronDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5708
					case false:
						return 5709
					}
				case false:
					switch x.Powered {
					case true:
						return 5710
					case false:
						return 5711
					}
				}
			case IronDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 5712
					case false:
						return 5713
					}
				case false:
					switch x.Powered {
					case true:
						return 5714
					case false:
						return 5715
					}
				}
			}
		}
	}
	return 5663 // default state
}

type OakPressurePlate struct {
	Powered bool
}

func (x OakPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5716
	case false:
		return 5717
	}
	return 5717 // default state
}

type SprucePressurePlate struct {
	Powered bool
}

func (x SprucePressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5718
	case false:
		return 5719
	}
	return 5719 // default state
}

type BirchPressurePlate struct {
	Powered bool
}

func (x BirchPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5720
	case false:
		return 5721
	}
	return 5721 // default state
}

type JunglePressurePlate struct {
	Powered bool
}

func (x JunglePressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5722
	case false:
		return 5723
	}
	return 5723 // default state
}

type AcaciaPressurePlate struct {
	Powered bool
}

func (x AcaciaPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5724
	case false:
		return 5725
	}
	return 5725 // default state
}

type CherryPressurePlate struct {
	Powered bool
}

func (x CherryPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5726
	case false:
		return 5727
	}
	return 5727 // default state
}

type DarkOakPressurePlate struct {
	Powered bool
}

func (x DarkOakPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5728
	case false:
		return 5729
	}
	return 5729 // default state
}

type MangrovePressurePlate struct {
	Powered bool
}

func (x MangrovePressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5730
	case false:
		return 5731
	}
	return 5731 // default state
}

type BambooPressurePlate struct {
	Powered bool
}

func (x BambooPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 5732
	case false:
		return 5733
	}
	return 5733 // default state
}

type RedstoneOre struct {
	Lit bool
}

func (x RedstoneOre) Id() uint16 {
	switch x.Lit {
	case true:
		return 5734
	case false:
		return 5735
	}
	return 5735 // default state
}

type DeepslateRedstoneOre struct {
	Lit bool
}

func (x DeepslateRedstoneOre) Id() uint16 {
	switch x.Lit {
	case true:
		return 5736
	case false:
		return 5737
	}
	return 5737 // default state
}

type RedstoneTorch struct {
	Lit bool
}

func (x RedstoneTorch) Id() uint16 {
	switch x.Lit {
	case true:
		return 5738
	case false:
		return 5739
	}
	return 5738 // default state
}

type RedstoneWallTorchFacing string

const (
	RedstoneWallTorchFacingNorth RedstoneWallTorchFacing = "north"
	RedstoneWallTorchFacingSouth RedstoneWallTorchFacing = "south"
	RedstoneWallTorchFacingWest  RedstoneWallTorchFacing = "west"
	RedstoneWallTorchFacingEast  RedstoneWallTorchFacing = "east"
)

type RedstoneWallTorch struct {
	Facing RedstoneWallTorchFacing
	Lit    bool
}

func (x RedstoneWallTorch) Id() uint16 {
	switch x.Facing {
	case RedstoneWallTorchFacingNorth:
		switch x.Lit {
		case true:
			return 5740
		case false:
			return 5741
		}
	case RedstoneWallTorchFacingSouth:
		switch x.Lit {
		case true:
			return 5742
		case false:
			return 5743
		}
	case RedstoneWallTorchFacingWest:
		switch x.Lit {
		case true:
			return 5744
		case false:
			return 5745
		}
	case RedstoneWallTorchFacingEast:
		switch x.Lit {
		case true:
			return 5746
		case false:
			return 5747
		}
	}
	return 5740 // default state
}

type StoneButtonFacing string

const (
	StoneButtonFacingNorth StoneButtonFacing = "north"
	StoneButtonFacingSouth StoneButtonFacing = "south"
	StoneButtonFacingWest  StoneButtonFacing = "west"
	StoneButtonFacingEast  StoneButtonFacing = "east"
)

type StoneButtonFace string

const (
	StoneButtonFaceFloor   StoneButtonFace = "floor"
	StoneButtonFaceWall    StoneButtonFace = "wall"
	StoneButtonFaceCeiling StoneButtonFace = "ceiling"
)

type StoneButton struct {
	Facing  StoneButtonFacing
	Powered bool
	Face    StoneButtonFace
}

func (x StoneButton) Id() uint16 {
	switch x.Face {
	case StoneButtonFaceFloor:
		switch x.Facing {
		case StoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 5748
			case false:
				return 5749
			}
		case StoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 5750
			case false:
				return 5751
			}
		case StoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 5752
			case false:
				return 5753
			}
		case StoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 5754
			case false:
				return 5755
			}
		}
	case StoneButtonFaceWall:
		switch x.Facing {
		case StoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 5756
			case false:
				return 5757
			}
		case StoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 5758
			case false:
				return 5759
			}
		case StoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 5760
			case false:
				return 5761
			}
		case StoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 5762
			case false:
				return 5763
			}
		}
	case StoneButtonFaceCeiling:
		switch x.Facing {
		case StoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 5764
			case false:
				return 5765
			}
		case StoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 5766
			case false:
				return 5767
			}
		case StoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 5768
			case false:
				return 5769
			}
		case StoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 5770
			case false:
				return 5771
			}
		}
	}
	return 5757 // default state
}

type Snow struct {
	// Valid values: 1, 2, 3, 4, 5, 6, 7, 8
	Layers int
}

func (x Snow) Id() uint16 {
	switch x.Layers {
	case 1:
		return 5772
	case 2:
		return 5773
	case 3:
		return 5774
	case 4:
		return 5775
	case 5:
		return 5776
	case 6:
		return 5777
	case 7:
		return 5778
	case 8:
		return 5779
	}
	return 5772 // default state
}

type Ice struct{}

func (x Ice) Id() uint16 {
	return 5780
}

type SnowBlock struct{}

func (x SnowBlock) Id() uint16 {
	return 5781
}

type Cactus struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Age int
}

func (x Cactus) Id() uint16 {
	switch x.Age {
	case 0:
		return 5782
	case 1:
		return 5783
	case 2:
		return 5784
	case 3:
		return 5785
	case 4:
		return 5786
	case 5:
		return 5787
	case 6:
		return 5788
	case 7:
		return 5789
	case 8:
		return 5790
	case 9:
		return 5791
	case 10:
		return 5792
	case 11:
		return 5793
	case 12:
		return 5794
	case 13:
		return 5795
	case 14:
		return 5796
	case 15:
		return 5797
	}
	return 5782 // default state
}

type Clay struct{}

func (x Clay) Id() uint16 {
	return 5798
}

type SugarCane struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Age int
}

func (x SugarCane) Id() uint16 {
	switch x.Age {
	case 0:
		return 5799
	case 1:
		return 5800
	case 2:
		return 5801
	case 3:
		return 5802
	case 4:
		return 5803
	case 5:
		return 5804
	case 6:
		return 5805
	case 7:
		return 5806
	case 8:
		return 5807
	case 9:
		return 5808
	case 10:
		return 5809
	case 11:
		return 5810
	case 12:
		return 5811
	case 13:
		return 5812
	case 14:
		return 5813
	case 15:
		return 5814
	}
	return 5799 // default state
}

type Jukebox struct {
	HasRecord bool
}

func (x Jukebox) Id() uint16 {
	switch x.HasRecord {
	case true:
		return 5815
	case false:
		return 5816
	}
	return 5816 // default state
}

type OakFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x OakFence) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5817
					case false:
						return 5818
					}
				case false:
					switch x.West {
					case true:
						return 5819
					case false:
						return 5820
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5821
					case false:
						return 5822
					}
				case false:
					switch x.West {
					case true:
						return 5823
					case false:
						return 5824
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5825
					case false:
						return 5826
					}
				case false:
					switch x.West {
					case true:
						return 5827
					case false:
						return 5828
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5829
					case false:
						return 5830
					}
				case false:
					switch x.West {
					case true:
						return 5831
					case false:
						return 5832
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5833
					case false:
						return 5834
					}
				case false:
					switch x.West {
					case true:
						return 5835
					case false:
						return 5836
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5837
					case false:
						return 5838
					}
				case false:
					switch x.West {
					case true:
						return 5839
					case false:
						return 5840
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5841
					case false:
						return 5842
					}
				case false:
					switch x.West {
					case true:
						return 5843
					case false:
						return 5844
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 5845
					case false:
						return 5846
					}
				case false:
					switch x.West {
					case true:
						return 5847
					case false:
						return 5848
					}
				}
			}
		}
	}
	return 5848 // default state
}

type Netherrack struct{}

func (x Netherrack) Id() uint16 {
	return 5849
}

type SoulSand struct{}

func (x SoulSand) Id() uint16 {
	return 5850
}

type SoulSoil struct{}

func (x SoulSoil) Id() uint16 {
	return 5851
}

type BasaltAxis string

const (
	BasaltAxisX BasaltAxis = "x"
	BasaltAxisY BasaltAxis = "y"
	BasaltAxisZ BasaltAxis = "z"
)

type Basalt struct {
	Axis BasaltAxis
}

func (x Basalt) Id() uint16 {
	switch x.Axis {
	case BasaltAxisX:
		return 5852
	case BasaltAxisY:
		return 5853
	case BasaltAxisZ:
		return 5854
	}
	return 5853 // default state
}

type PolishedBasaltAxis string

const (
	PolishedBasaltAxisX PolishedBasaltAxis = "x"
	PolishedBasaltAxisY PolishedBasaltAxis = "y"
	PolishedBasaltAxisZ PolishedBasaltAxis = "z"
)

type PolishedBasalt struct {
	Axis PolishedBasaltAxis
}

func (x PolishedBasalt) Id() uint16 {
	switch x.Axis {
	case PolishedBasaltAxisX:
		return 5855
	case PolishedBasaltAxisY:
		return 5856
	case PolishedBasaltAxisZ:
		return 5857
	}
	return 5856 // default state
}

type SoulTorch struct{}

func (x SoulTorch) Id() uint16 {
	return 5858
}

type SoulWallTorchFacing string

const (
	SoulWallTorchFacingNorth SoulWallTorchFacing = "north"
	SoulWallTorchFacingSouth SoulWallTorchFacing = "south"
	SoulWallTorchFacingWest  SoulWallTorchFacing = "west"
	SoulWallTorchFacingEast  SoulWallTorchFacing = "east"
)

type SoulWallTorch struct {
	Facing SoulWallTorchFacing
}

func (x SoulWallTorch) Id() uint16 {
	switch x.Facing {
	case SoulWallTorchFacingNorth:
		return 5859
	case SoulWallTorchFacingSouth:
		return 5860
	case SoulWallTorchFacingWest:
		return 5861
	case SoulWallTorchFacingEast:
		return 5862
	}
	return 5859 // default state
}

type Glowstone struct{}

func (x Glowstone) Id() uint16 {
	return 5863
}

type NetherPortalAxis string

const (
	NetherPortalAxisX NetherPortalAxis = "x"
	NetherPortalAxisZ NetherPortalAxis = "z"
)

type NetherPortal struct {
	Axis NetherPortalAxis
}

func (x NetherPortal) Id() uint16 {
	switch x.Axis {
	case NetherPortalAxisX:
		return 5864
	case NetherPortalAxisZ:
		return 5865
	}
	return 5864 // default state
}

type CarvedPumpkinFacing string

const (
	CarvedPumpkinFacingNorth CarvedPumpkinFacing = "north"
	CarvedPumpkinFacingSouth CarvedPumpkinFacing = "south"
	CarvedPumpkinFacingWest  CarvedPumpkinFacing = "west"
	CarvedPumpkinFacingEast  CarvedPumpkinFacing = "east"
)

type CarvedPumpkin struct {
	Facing CarvedPumpkinFacing
}

func (x CarvedPumpkin) Id() uint16 {
	switch x.Facing {
	case CarvedPumpkinFacingNorth:
		return 5866
	case CarvedPumpkinFacingSouth:
		return 5867
	case CarvedPumpkinFacingWest:
		return 5868
	case CarvedPumpkinFacingEast:
		return 5869
	}
	return 5866 // default state
}

type JackOLanternFacing string

const (
	JackOLanternFacingNorth JackOLanternFacing = "north"
	JackOLanternFacingSouth JackOLanternFacing = "south"
	JackOLanternFacingWest  JackOLanternFacing = "west"
	JackOLanternFacingEast  JackOLanternFacing = "east"
)

type JackOLantern struct {
	Facing JackOLanternFacing
}

func (x JackOLantern) Id() uint16 {
	switch x.Facing {
	case JackOLanternFacingNorth:
		return 5870
	case JackOLanternFacingSouth:
		return 5871
	case JackOLanternFacingWest:
		return 5872
	case JackOLanternFacingEast:
		return 5873
	}
	return 5870 // default state
}

type Cake struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6
	Bites int
}

func (x Cake) Id() uint16 {
	switch x.Bites {
	case 0:
		return 5874
	case 1:
		return 5875
	case 2:
		return 5876
	case 3:
		return 5877
	case 4:
		return 5878
	case 5:
		return 5879
	case 6:
		return 5880
	}
	return 5874 // default state
}

type RepeaterFacing string

const (
	RepeaterFacingNorth RepeaterFacing = "north"
	RepeaterFacingSouth RepeaterFacing = "south"
	RepeaterFacingWest  RepeaterFacing = "west"
	RepeaterFacingEast  RepeaterFacing = "east"
)

type Repeater struct {
	// Valid values: 1, 2, 3, 4
	Delay   int
	Facing  RepeaterFacing
	Locked  bool
	Powered bool
}

func (x Repeater) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Delay {
		case 1:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5881
				case false:
					return 5883
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5885
				case false:
					return 5887
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5889
				case false:
					return 5891
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5893
				case false:
					return 5895
				}
			}
		case 2:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5897
				case false:
					return 5899
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5901
				case false:
					return 5903
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5905
				case false:
					return 5907
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5909
				case false:
					return 5911
				}
			}
		case 3:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5913
				case false:
					return 5915
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5917
				case false:
					return 5919
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5921
				case false:
					return 5923
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5925
				case false:
					return 5927
				}
			}
		case 4:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5929
				case false:
					return 5931
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5933
				case false:
					return 5935
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5937
				case false:
					return 5939
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5941
				case false:
					return 5943
				}
			}
		}
	case false:
		switch x.Delay {
		case 1:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5882
				case false:
					return 5884
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5886
				case false:
					return 5888
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5890
				case false:
					return 5892
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5894
				case false:
					return 5896
				}
			}
		case 2:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5898
				case false:
					return 5900
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5902
				case false:
					return 5904
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5906
				case false:
					return 5908
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5910
				case false:
					return 5912
				}
			}
		case 3:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5914
				case false:
					return 5916
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5918
				case false:
					return 5920
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5922
				case false:
					return 5924
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5926
				case false:
					return 5928
				}
			}
		case 4:
			switch x.Facing {
			case RepeaterFacingNorth:
				switch x.Locked {
				case true:
					return 5930
				case false:
					return 5932
				}
			case RepeaterFacingSouth:
				switch x.Locked {
				case true:
					return 5934
				case false:
					return 5936
				}
			case RepeaterFacingWest:
				switch x.Locked {
				case true:
					return 5938
				case false:
					return 5940
				}
			case RepeaterFacingEast:
				switch x.Locked {
				case true:
					return 5942
				case false:
					return 5944
				}
			}
		}
	}
	return 5884 // default state
}

type WhiteStainedGlass struct{}

func (x WhiteStainedGlass) Id() uint16 {
	return 5945
}

type OrangeStainedGlass struct{}

func (x OrangeStainedGlass) Id() uint16 {
	return 5946
}

type MagentaStainedGlass struct{}

func (x MagentaStainedGlass) Id() uint16 {
	return 5947
}

type LightBlueStainedGlass struct{}

func (x LightBlueStainedGlass) Id() uint16 {
	return 5948
}

type YellowStainedGlass struct{}

func (x YellowStainedGlass) Id() uint16 {
	return 5949
}

type LimeStainedGlass struct{}

func (x LimeStainedGlass) Id() uint16 {
	return 5950
}

type PinkStainedGlass struct{}

func (x PinkStainedGlass) Id() uint16 {
	return 5951
}

type GrayStainedGlass struct{}

func (x GrayStainedGlass) Id() uint16 {
	return 5952
}

type LightGrayStainedGlass struct{}

func (x LightGrayStainedGlass) Id() uint16 {
	return 5953
}

type CyanStainedGlass struct{}

func (x CyanStainedGlass) Id() uint16 {
	return 5954
}

type PurpleStainedGlass struct{}

func (x PurpleStainedGlass) Id() uint16 {
	return 5955
}

type BlueStainedGlass struct{}

func (x BlueStainedGlass) Id() uint16 {
	return 5956
}

type BrownStainedGlass struct{}

func (x BrownStainedGlass) Id() uint16 {
	return 5957
}

type GreenStainedGlass struct{}

func (x GreenStainedGlass) Id() uint16 {
	return 5958
}

type RedStainedGlass struct{}

func (x RedStainedGlass) Id() uint16 {
	return 5959
}

type BlackStainedGlass struct{}

func (x BlackStainedGlass) Id() uint16 {
	return 5960
}

type OakTrapdoorFacing string

const (
	OakTrapdoorFacingNorth OakTrapdoorFacing = "north"
	OakTrapdoorFacingSouth OakTrapdoorFacing = "south"
	OakTrapdoorFacingWest  OakTrapdoorFacing = "west"
	OakTrapdoorFacingEast  OakTrapdoorFacing = "east"
)

type OakTrapdoorHalf string

const (
	OakTrapdoorHalfTop    OakTrapdoorHalf = "top"
	OakTrapdoorHalfBottom OakTrapdoorHalf = "bottom"
)

type OakTrapdoor struct {
	Facing      OakTrapdoorFacing
	Half        OakTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x OakTrapdoor) Id() uint16 {
	switch x.Facing {
	case OakTrapdoorFacingNorth:
		switch x.Half {
		case OakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5961
					case false:
						return 5962
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5963
					case false:
						return 5964
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5965
					case false:
						return 5966
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5967
					case false:
						return 5968
					}
				}
			}
		case OakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5969
					case false:
						return 5970
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5971
					case false:
						return 5972
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5973
					case false:
						return 5974
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5975
					case false:
						return 5976
					}
				}
			}
		}
	case OakTrapdoorFacingSouth:
		switch x.Half {
		case OakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5977
					case false:
						return 5978
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5979
					case false:
						return 5980
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5981
					case false:
						return 5982
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5983
					case false:
						return 5984
					}
				}
			}
		case OakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5985
					case false:
						return 5986
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5987
					case false:
						return 5988
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5989
					case false:
						return 5990
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5991
					case false:
						return 5992
					}
				}
			}
		}
	case OakTrapdoorFacingWest:
		switch x.Half {
		case OakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5993
					case false:
						return 5994
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5995
					case false:
						return 5996
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 5997
					case false:
						return 5998
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 5999
					case false:
						return 6000
					}
				}
			}
		case OakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6001
					case false:
						return 6002
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6003
					case false:
						return 6004
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6005
					case false:
						return 6006
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6007
					case false:
						return 6008
					}
				}
			}
		}
	case OakTrapdoorFacingEast:
		switch x.Half {
		case OakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6009
					case false:
						return 6010
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6011
					case false:
						return 6012
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6013
					case false:
						return 6014
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6015
					case false:
						return 6016
					}
				}
			}
		case OakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6017
					case false:
						return 6018
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6019
					case false:
						return 6020
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6021
					case false:
						return 6022
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6023
					case false:
						return 6024
					}
				}
			}
		}
	}
	return 5976 // default state
}

type SpruceTrapdoorFacing string

const (
	SpruceTrapdoorFacingNorth SpruceTrapdoorFacing = "north"
	SpruceTrapdoorFacingSouth SpruceTrapdoorFacing = "south"
	SpruceTrapdoorFacingWest  SpruceTrapdoorFacing = "west"
	SpruceTrapdoorFacingEast  SpruceTrapdoorFacing = "east"
)

type SpruceTrapdoorHalf string

const (
	SpruceTrapdoorHalfTop    SpruceTrapdoorHalf = "top"
	SpruceTrapdoorHalfBottom SpruceTrapdoorHalf = "bottom"
)

type SpruceTrapdoor struct {
	Facing      SpruceTrapdoorFacing
	Half        SpruceTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x SpruceTrapdoor) Id() uint16 {
	switch x.Facing {
	case SpruceTrapdoorFacingNorth:
		switch x.Half {
		case SpruceTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6025
					case false:
						return 6026
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6027
					case false:
						return 6028
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6029
					case false:
						return 6030
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6031
					case false:
						return 6032
					}
				}
			}
		case SpruceTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6033
					case false:
						return 6034
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6035
					case false:
						return 6036
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6037
					case false:
						return 6038
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6039
					case false:
						return 6040
					}
				}
			}
		}
	case SpruceTrapdoorFacingSouth:
		switch x.Half {
		case SpruceTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6041
					case false:
						return 6042
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6043
					case false:
						return 6044
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6045
					case false:
						return 6046
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6047
					case false:
						return 6048
					}
				}
			}
		case SpruceTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6049
					case false:
						return 6050
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6051
					case false:
						return 6052
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6053
					case false:
						return 6054
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6055
					case false:
						return 6056
					}
				}
			}
		}
	case SpruceTrapdoorFacingWest:
		switch x.Half {
		case SpruceTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6057
					case false:
						return 6058
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6059
					case false:
						return 6060
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6061
					case false:
						return 6062
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6063
					case false:
						return 6064
					}
				}
			}
		case SpruceTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6065
					case false:
						return 6066
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6067
					case false:
						return 6068
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6069
					case false:
						return 6070
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6071
					case false:
						return 6072
					}
				}
			}
		}
	case SpruceTrapdoorFacingEast:
		switch x.Half {
		case SpruceTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6073
					case false:
						return 6074
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6075
					case false:
						return 6076
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6077
					case false:
						return 6078
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6079
					case false:
						return 6080
					}
				}
			}
		case SpruceTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6081
					case false:
						return 6082
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6083
					case false:
						return 6084
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6085
					case false:
						return 6086
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6087
					case false:
						return 6088
					}
				}
			}
		}
	}
	return 6040 // default state
}

type BirchTrapdoorHalf string

const (
	BirchTrapdoorHalfTop    BirchTrapdoorHalf = "top"
	BirchTrapdoorHalfBottom BirchTrapdoorHalf = "bottom"
)

type BirchTrapdoorFacing string

const (
	BirchTrapdoorFacingNorth BirchTrapdoorFacing = "north"
	BirchTrapdoorFacingSouth BirchTrapdoorFacing = "south"
	BirchTrapdoorFacingWest  BirchTrapdoorFacing = "west"
	BirchTrapdoorFacingEast  BirchTrapdoorFacing = "east"
)

type BirchTrapdoor struct {
	Half        BirchTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      BirchTrapdoorFacing
}

func (x BirchTrapdoor) Id() uint16 {
	switch x.Facing {
	case BirchTrapdoorFacingNorth:
		switch x.Half {
		case BirchTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6089
					case false:
						return 6090
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6091
					case false:
						return 6092
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6093
					case false:
						return 6094
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6095
					case false:
						return 6096
					}
				}
			}
		case BirchTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6097
					case false:
						return 6098
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6099
					case false:
						return 6100
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6101
					case false:
						return 6102
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6103
					case false:
						return 6104
					}
				}
			}
		}
	case BirchTrapdoorFacingSouth:
		switch x.Half {
		case BirchTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6105
					case false:
						return 6106
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6107
					case false:
						return 6108
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6109
					case false:
						return 6110
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6111
					case false:
						return 6112
					}
				}
			}
		case BirchTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6113
					case false:
						return 6114
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6115
					case false:
						return 6116
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6117
					case false:
						return 6118
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6119
					case false:
						return 6120
					}
				}
			}
		}
	case BirchTrapdoorFacingWest:
		switch x.Half {
		case BirchTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6121
					case false:
						return 6122
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6123
					case false:
						return 6124
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6125
					case false:
						return 6126
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6127
					case false:
						return 6128
					}
				}
			}
		case BirchTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6129
					case false:
						return 6130
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6131
					case false:
						return 6132
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6133
					case false:
						return 6134
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6135
					case false:
						return 6136
					}
				}
			}
		}
	case BirchTrapdoorFacingEast:
		switch x.Half {
		case BirchTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6137
					case false:
						return 6138
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6139
					case false:
						return 6140
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6141
					case false:
						return 6142
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6143
					case false:
						return 6144
					}
				}
			}
		case BirchTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6145
					case false:
						return 6146
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6147
					case false:
						return 6148
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6149
					case false:
						return 6150
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6151
					case false:
						return 6152
					}
				}
			}
		}
	}
	return 6104 // default state
}

type JungleTrapdoorFacing string

const (
	JungleTrapdoorFacingNorth JungleTrapdoorFacing = "north"
	JungleTrapdoorFacingSouth JungleTrapdoorFacing = "south"
	JungleTrapdoorFacingWest  JungleTrapdoorFacing = "west"
	JungleTrapdoorFacingEast  JungleTrapdoorFacing = "east"
)

type JungleTrapdoorHalf string

const (
	JungleTrapdoorHalfTop    JungleTrapdoorHalf = "top"
	JungleTrapdoorHalfBottom JungleTrapdoorHalf = "bottom"
)

type JungleTrapdoor struct {
	Facing      JungleTrapdoorFacing
	Half        JungleTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x JungleTrapdoor) Id() uint16 {
	switch x.Facing {
	case JungleTrapdoorFacingNorth:
		switch x.Half {
		case JungleTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6153
					case false:
						return 6154
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6155
					case false:
						return 6156
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6157
					case false:
						return 6158
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6159
					case false:
						return 6160
					}
				}
			}
		case JungleTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6161
					case false:
						return 6162
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6163
					case false:
						return 6164
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6165
					case false:
						return 6166
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6167
					case false:
						return 6168
					}
				}
			}
		}
	case JungleTrapdoorFacingSouth:
		switch x.Half {
		case JungleTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6169
					case false:
						return 6170
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6171
					case false:
						return 6172
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6173
					case false:
						return 6174
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6175
					case false:
						return 6176
					}
				}
			}
		case JungleTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6177
					case false:
						return 6178
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6179
					case false:
						return 6180
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6181
					case false:
						return 6182
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6183
					case false:
						return 6184
					}
				}
			}
		}
	case JungleTrapdoorFacingWest:
		switch x.Half {
		case JungleTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6185
					case false:
						return 6186
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6187
					case false:
						return 6188
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6189
					case false:
						return 6190
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6191
					case false:
						return 6192
					}
				}
			}
		case JungleTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6193
					case false:
						return 6194
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6195
					case false:
						return 6196
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6197
					case false:
						return 6198
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6199
					case false:
						return 6200
					}
				}
			}
		}
	case JungleTrapdoorFacingEast:
		switch x.Half {
		case JungleTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6201
					case false:
						return 6202
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6203
					case false:
						return 6204
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6205
					case false:
						return 6206
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6207
					case false:
						return 6208
					}
				}
			}
		case JungleTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6209
					case false:
						return 6210
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6211
					case false:
						return 6212
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6213
					case false:
						return 6214
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6215
					case false:
						return 6216
					}
				}
			}
		}
	}
	return 6168 // default state
}

type AcaciaTrapdoorFacing string

const (
	AcaciaTrapdoorFacingNorth AcaciaTrapdoorFacing = "north"
	AcaciaTrapdoorFacingSouth AcaciaTrapdoorFacing = "south"
	AcaciaTrapdoorFacingWest  AcaciaTrapdoorFacing = "west"
	AcaciaTrapdoorFacingEast  AcaciaTrapdoorFacing = "east"
)

type AcaciaTrapdoorHalf string

const (
	AcaciaTrapdoorHalfTop    AcaciaTrapdoorHalf = "top"
	AcaciaTrapdoorHalfBottom AcaciaTrapdoorHalf = "bottom"
)

type AcaciaTrapdoor struct {
	Waterlogged bool
	Facing      AcaciaTrapdoorFacing
	Half        AcaciaTrapdoorHalf
	Open        bool
	Powered     bool
}

func (x AcaciaTrapdoor) Id() uint16 {
	switch x.Facing {
	case AcaciaTrapdoorFacingNorth:
		switch x.Half {
		case AcaciaTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6217
					case false:
						return 6218
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6219
					case false:
						return 6220
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6221
					case false:
						return 6222
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6223
					case false:
						return 6224
					}
				}
			}
		case AcaciaTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6225
					case false:
						return 6226
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6227
					case false:
						return 6228
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6229
					case false:
						return 6230
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6231
					case false:
						return 6232
					}
				}
			}
		}
	case AcaciaTrapdoorFacingSouth:
		switch x.Half {
		case AcaciaTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6233
					case false:
						return 6234
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6235
					case false:
						return 6236
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6237
					case false:
						return 6238
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6239
					case false:
						return 6240
					}
				}
			}
		case AcaciaTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6241
					case false:
						return 6242
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6243
					case false:
						return 6244
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6245
					case false:
						return 6246
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6247
					case false:
						return 6248
					}
				}
			}
		}
	case AcaciaTrapdoorFacingWest:
		switch x.Half {
		case AcaciaTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6249
					case false:
						return 6250
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6251
					case false:
						return 6252
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6253
					case false:
						return 6254
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6255
					case false:
						return 6256
					}
				}
			}
		case AcaciaTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6257
					case false:
						return 6258
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6259
					case false:
						return 6260
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6261
					case false:
						return 6262
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6263
					case false:
						return 6264
					}
				}
			}
		}
	case AcaciaTrapdoorFacingEast:
		switch x.Half {
		case AcaciaTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6265
					case false:
						return 6266
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6267
					case false:
						return 6268
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6269
					case false:
						return 6270
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6271
					case false:
						return 6272
					}
				}
			}
		case AcaciaTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6273
					case false:
						return 6274
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6275
					case false:
						return 6276
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6277
					case false:
						return 6278
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6279
					case false:
						return 6280
					}
				}
			}
		}
	}
	return 6232 // default state
}

type CherryTrapdoorHalf string

const (
	CherryTrapdoorHalfTop    CherryTrapdoorHalf = "top"
	CherryTrapdoorHalfBottom CherryTrapdoorHalf = "bottom"
)

type CherryTrapdoorFacing string

const (
	CherryTrapdoorFacingNorth CherryTrapdoorFacing = "north"
	CherryTrapdoorFacingSouth CherryTrapdoorFacing = "south"
	CherryTrapdoorFacingWest  CherryTrapdoorFacing = "west"
	CherryTrapdoorFacingEast  CherryTrapdoorFacing = "east"
)

type CherryTrapdoor struct {
	Half        CherryTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      CherryTrapdoorFacing
}

func (x CherryTrapdoor) Id() uint16 {
	switch x.Facing {
	case CherryTrapdoorFacingNorth:
		switch x.Half {
		case CherryTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6281
					case false:
						return 6282
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6283
					case false:
						return 6284
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6285
					case false:
						return 6286
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6287
					case false:
						return 6288
					}
				}
			}
		case CherryTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6289
					case false:
						return 6290
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6291
					case false:
						return 6292
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6293
					case false:
						return 6294
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6295
					case false:
						return 6296
					}
				}
			}
		}
	case CherryTrapdoorFacingSouth:
		switch x.Half {
		case CherryTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6297
					case false:
						return 6298
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6299
					case false:
						return 6300
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6301
					case false:
						return 6302
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6303
					case false:
						return 6304
					}
				}
			}
		case CherryTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6305
					case false:
						return 6306
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6307
					case false:
						return 6308
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6309
					case false:
						return 6310
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6311
					case false:
						return 6312
					}
				}
			}
		}
	case CherryTrapdoorFacingWest:
		switch x.Half {
		case CherryTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6313
					case false:
						return 6314
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6315
					case false:
						return 6316
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6317
					case false:
						return 6318
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6319
					case false:
						return 6320
					}
				}
			}
		case CherryTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6321
					case false:
						return 6322
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6323
					case false:
						return 6324
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6325
					case false:
						return 6326
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6327
					case false:
						return 6328
					}
				}
			}
		}
	case CherryTrapdoorFacingEast:
		switch x.Half {
		case CherryTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6329
					case false:
						return 6330
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6331
					case false:
						return 6332
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6333
					case false:
						return 6334
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6335
					case false:
						return 6336
					}
				}
			}
		case CherryTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6337
					case false:
						return 6338
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6339
					case false:
						return 6340
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6341
					case false:
						return 6342
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6343
					case false:
						return 6344
					}
				}
			}
		}
	}
	return 6296 // default state
}

type DarkOakTrapdoorFacing string

const (
	DarkOakTrapdoorFacingNorth DarkOakTrapdoorFacing = "north"
	DarkOakTrapdoorFacingSouth DarkOakTrapdoorFacing = "south"
	DarkOakTrapdoorFacingWest  DarkOakTrapdoorFacing = "west"
	DarkOakTrapdoorFacingEast  DarkOakTrapdoorFacing = "east"
)

type DarkOakTrapdoorHalf string

const (
	DarkOakTrapdoorHalfTop    DarkOakTrapdoorHalf = "top"
	DarkOakTrapdoorHalfBottom DarkOakTrapdoorHalf = "bottom"
)

type DarkOakTrapdoor struct {
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      DarkOakTrapdoorFacing
	Half        DarkOakTrapdoorHalf
}

func (x DarkOakTrapdoor) Id() uint16 {
	switch x.Facing {
	case DarkOakTrapdoorFacingNorth:
		switch x.Half {
		case DarkOakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6345
					case false:
						return 6346
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6347
					case false:
						return 6348
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6349
					case false:
						return 6350
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6351
					case false:
						return 6352
					}
				}
			}
		case DarkOakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6353
					case false:
						return 6354
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6355
					case false:
						return 6356
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6357
					case false:
						return 6358
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6359
					case false:
						return 6360
					}
				}
			}
		}
	case DarkOakTrapdoorFacingSouth:
		switch x.Half {
		case DarkOakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6361
					case false:
						return 6362
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6363
					case false:
						return 6364
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6365
					case false:
						return 6366
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6367
					case false:
						return 6368
					}
				}
			}
		case DarkOakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6369
					case false:
						return 6370
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6371
					case false:
						return 6372
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6373
					case false:
						return 6374
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6375
					case false:
						return 6376
					}
				}
			}
		}
	case DarkOakTrapdoorFacingWest:
		switch x.Half {
		case DarkOakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6377
					case false:
						return 6378
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6379
					case false:
						return 6380
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6381
					case false:
						return 6382
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6383
					case false:
						return 6384
					}
				}
			}
		case DarkOakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6385
					case false:
						return 6386
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6387
					case false:
						return 6388
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6389
					case false:
						return 6390
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6391
					case false:
						return 6392
					}
				}
			}
		}
	case DarkOakTrapdoorFacingEast:
		switch x.Half {
		case DarkOakTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6393
					case false:
						return 6394
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6395
					case false:
						return 6396
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6397
					case false:
						return 6398
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6399
					case false:
						return 6400
					}
				}
			}
		case DarkOakTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6401
					case false:
						return 6402
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6403
					case false:
						return 6404
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6405
					case false:
						return 6406
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6407
					case false:
						return 6408
					}
				}
			}
		}
	}
	return 6360 // default state
}

type MangroveTrapdoorFacing string

const (
	MangroveTrapdoorFacingNorth MangroveTrapdoorFacing = "north"
	MangroveTrapdoorFacingSouth MangroveTrapdoorFacing = "south"
	MangroveTrapdoorFacingWest  MangroveTrapdoorFacing = "west"
	MangroveTrapdoorFacingEast  MangroveTrapdoorFacing = "east"
)

type MangroveTrapdoorHalf string

const (
	MangroveTrapdoorHalfTop    MangroveTrapdoorHalf = "top"
	MangroveTrapdoorHalfBottom MangroveTrapdoorHalf = "bottom"
)

type MangroveTrapdoor struct {
	Facing      MangroveTrapdoorFacing
	Half        MangroveTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x MangroveTrapdoor) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case MangroveTrapdoorFacingNorth:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6409
					case false:
						return 6411
					}
				case false:
					switch x.Powered {
					case true:
						return 6413
					case false:
						return 6415
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6417
					case false:
						return 6419
					}
				case false:
					switch x.Powered {
					case true:
						return 6421
					case false:
						return 6423
					}
				}
			}
		case MangroveTrapdoorFacingSouth:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6425
					case false:
						return 6427
					}
				case false:
					switch x.Powered {
					case true:
						return 6429
					case false:
						return 6431
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6433
					case false:
						return 6435
					}
				case false:
					switch x.Powered {
					case true:
						return 6437
					case false:
						return 6439
					}
				}
			}
		case MangroveTrapdoorFacingWest:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6441
					case false:
						return 6443
					}
				case false:
					switch x.Powered {
					case true:
						return 6445
					case false:
						return 6447
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6449
					case false:
						return 6451
					}
				case false:
					switch x.Powered {
					case true:
						return 6453
					case false:
						return 6455
					}
				}
			}
		case MangroveTrapdoorFacingEast:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6457
					case false:
						return 6459
					}
				case false:
					switch x.Powered {
					case true:
						return 6461
					case false:
						return 6463
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6465
					case false:
						return 6467
					}
				case false:
					switch x.Powered {
					case true:
						return 6469
					case false:
						return 6471
					}
				}
			}
		}
	case false:
		switch x.Facing {
		case MangroveTrapdoorFacingNorth:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6410
					case false:
						return 6412
					}
				case false:
					switch x.Powered {
					case true:
						return 6414
					case false:
						return 6416
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6418
					case false:
						return 6420
					}
				case false:
					switch x.Powered {
					case true:
						return 6422
					case false:
						return 6424
					}
				}
			}
		case MangroveTrapdoorFacingSouth:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6426
					case false:
						return 6428
					}
				case false:
					switch x.Powered {
					case true:
						return 6430
					case false:
						return 6432
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6434
					case false:
						return 6436
					}
				case false:
					switch x.Powered {
					case true:
						return 6438
					case false:
						return 6440
					}
				}
			}
		case MangroveTrapdoorFacingWest:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6442
					case false:
						return 6444
					}
				case false:
					switch x.Powered {
					case true:
						return 6446
					case false:
						return 6448
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6450
					case false:
						return 6452
					}
				case false:
					switch x.Powered {
					case true:
						return 6454
					case false:
						return 6456
					}
				}
			}
		case MangroveTrapdoorFacingEast:
			switch x.Half {
			case MangroveTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6458
					case false:
						return 6460
					}
				case false:
					switch x.Powered {
					case true:
						return 6462
					case false:
						return 6464
					}
				}
			case MangroveTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 6466
					case false:
						return 6468
					}
				case false:
					switch x.Powered {
					case true:
						return 6470
					case false:
						return 6472
					}
				}
			}
		}
	}
	return 6424 // default state
}

type BambooTrapdoorFacing string

const (
	BambooTrapdoorFacingNorth BambooTrapdoorFacing = "north"
	BambooTrapdoorFacingSouth BambooTrapdoorFacing = "south"
	BambooTrapdoorFacingWest  BambooTrapdoorFacing = "west"
	BambooTrapdoorFacingEast  BambooTrapdoorFacing = "east"
)

type BambooTrapdoorHalf string

const (
	BambooTrapdoorHalfTop    BambooTrapdoorHalf = "top"
	BambooTrapdoorHalfBottom BambooTrapdoorHalf = "bottom"
)

type BambooTrapdoor struct {
	Facing      BambooTrapdoorFacing
	Half        BambooTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x BambooTrapdoor) Id() uint16 {
	switch x.Facing {
	case BambooTrapdoorFacingNorth:
		switch x.Half {
		case BambooTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6473
					case false:
						return 6474
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6475
					case false:
						return 6476
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6477
					case false:
						return 6478
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6479
					case false:
						return 6480
					}
				}
			}
		case BambooTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6481
					case false:
						return 6482
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6483
					case false:
						return 6484
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6485
					case false:
						return 6486
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6487
					case false:
						return 6488
					}
				}
			}
		}
	case BambooTrapdoorFacingSouth:
		switch x.Half {
		case BambooTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6489
					case false:
						return 6490
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6491
					case false:
						return 6492
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6493
					case false:
						return 6494
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6495
					case false:
						return 6496
					}
				}
			}
		case BambooTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6497
					case false:
						return 6498
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6499
					case false:
						return 6500
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6501
					case false:
						return 6502
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6503
					case false:
						return 6504
					}
				}
			}
		}
	case BambooTrapdoorFacingWest:
		switch x.Half {
		case BambooTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6505
					case false:
						return 6506
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6507
					case false:
						return 6508
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6509
					case false:
						return 6510
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6511
					case false:
						return 6512
					}
				}
			}
		case BambooTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6513
					case false:
						return 6514
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6515
					case false:
						return 6516
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6517
					case false:
						return 6518
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6519
					case false:
						return 6520
					}
				}
			}
		}
	case BambooTrapdoorFacingEast:
		switch x.Half {
		case BambooTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6521
					case false:
						return 6522
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6523
					case false:
						return 6524
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6525
					case false:
						return 6526
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6527
					case false:
						return 6528
					}
				}
			}
		case BambooTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6529
					case false:
						return 6530
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6531
					case false:
						return 6532
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 6533
					case false:
						return 6534
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 6535
					case false:
						return 6536
					}
				}
			}
		}
	}
	return 6488 // default state
}

type StoneBricks struct{}

func (x StoneBricks) Id() uint16 {
	return 6537
}

type MossyStoneBricks struct{}

func (x MossyStoneBricks) Id() uint16 {
	return 6538
}

type CrackedStoneBricks struct{}

func (x CrackedStoneBricks) Id() uint16 {
	return 6539
}

type ChiseledStoneBricks struct{}

func (x ChiseledStoneBricks) Id() uint16 {
	return 6540
}

type PackedMud struct{}

func (x PackedMud) Id() uint16 {
	return 6541
}

type MudBricks struct{}

func (x MudBricks) Id() uint16 {
	return 6542
}

type InfestedStone struct{}

func (x InfestedStone) Id() uint16 {
	return 6543
}

type InfestedCobblestone struct{}

func (x InfestedCobblestone) Id() uint16 {
	return 6544
}

type InfestedStoneBricks struct{}

func (x InfestedStoneBricks) Id() uint16 {
	return 6545
}

type InfestedMossyStoneBricks struct{}

func (x InfestedMossyStoneBricks) Id() uint16 {
	return 6546
}

type InfestedCrackedStoneBricks struct{}

func (x InfestedCrackedStoneBricks) Id() uint16 {
	return 6547
}

type InfestedChiseledStoneBricks struct{}

func (x InfestedChiseledStoneBricks) Id() uint16 {
	return 6548
}

type BrownMushroomBlock struct {
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
	Down  bool
}

func (x BrownMushroomBlock) Id() uint16 {
	switch x.Down {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6549
						case false:
							return 6550
						}
					case false:
						switch x.West {
						case true:
							return 6551
						case false:
							return 6552
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6553
						case false:
							return 6554
						}
					case false:
						switch x.West {
						case true:
							return 6555
						case false:
							return 6556
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6557
						case false:
							return 6558
						}
					case false:
						switch x.West {
						case true:
							return 6559
						case false:
							return 6560
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6561
						case false:
							return 6562
						}
					case false:
						switch x.West {
						case true:
							return 6563
						case false:
							return 6564
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6565
						case false:
							return 6566
						}
					case false:
						switch x.West {
						case true:
							return 6567
						case false:
							return 6568
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6569
						case false:
							return 6570
						}
					case false:
						switch x.West {
						case true:
							return 6571
						case false:
							return 6572
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6573
						case false:
							return 6574
						}
					case false:
						switch x.West {
						case true:
							return 6575
						case false:
							return 6576
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6577
						case false:
							return 6578
						}
					case false:
						switch x.West {
						case true:
							return 6579
						case false:
							return 6580
						}
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6581
						case false:
							return 6582
						}
					case false:
						switch x.West {
						case true:
							return 6583
						case false:
							return 6584
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6585
						case false:
							return 6586
						}
					case false:
						switch x.West {
						case true:
							return 6587
						case false:
							return 6588
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6589
						case false:
							return 6590
						}
					case false:
						switch x.West {
						case true:
							return 6591
						case false:
							return 6592
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6593
						case false:
							return 6594
						}
					case false:
						switch x.West {
						case true:
							return 6595
						case false:
							return 6596
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6597
						case false:
							return 6598
						}
					case false:
						switch x.West {
						case true:
							return 6599
						case false:
							return 6600
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6601
						case false:
							return 6602
						}
					case false:
						switch x.West {
						case true:
							return 6603
						case false:
							return 6604
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6605
						case false:
							return 6606
						}
					case false:
						switch x.West {
						case true:
							return 6607
						case false:
							return 6608
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6609
						case false:
							return 6610
						}
					case false:
						switch x.West {
						case true:
							return 6611
						case false:
							return 6612
						}
					}
				}
			}
		}
	}
	return 6549 // default state
}

type RedMushroomBlock struct {
	Down  bool
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
}

func (x RedMushroomBlock) Id() uint16 {
	switch x.Down {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6613
						case false:
							return 6614
						}
					case false:
						switch x.West {
						case true:
							return 6615
						case false:
							return 6616
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6617
						case false:
							return 6618
						}
					case false:
						switch x.West {
						case true:
							return 6619
						case false:
							return 6620
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6621
						case false:
							return 6622
						}
					case false:
						switch x.West {
						case true:
							return 6623
						case false:
							return 6624
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6625
						case false:
							return 6626
						}
					case false:
						switch x.West {
						case true:
							return 6627
						case false:
							return 6628
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6629
						case false:
							return 6630
						}
					case false:
						switch x.West {
						case true:
							return 6631
						case false:
							return 6632
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6633
						case false:
							return 6634
						}
					case false:
						switch x.West {
						case true:
							return 6635
						case false:
							return 6636
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6637
						case false:
							return 6638
						}
					case false:
						switch x.West {
						case true:
							return 6639
						case false:
							return 6640
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6641
						case false:
							return 6642
						}
					case false:
						switch x.West {
						case true:
							return 6643
						case false:
							return 6644
						}
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6645
						case false:
							return 6646
						}
					case false:
						switch x.West {
						case true:
							return 6647
						case false:
							return 6648
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6649
						case false:
							return 6650
						}
					case false:
						switch x.West {
						case true:
							return 6651
						case false:
							return 6652
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6653
						case false:
							return 6654
						}
					case false:
						switch x.West {
						case true:
							return 6655
						case false:
							return 6656
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6657
						case false:
							return 6658
						}
					case false:
						switch x.West {
						case true:
							return 6659
						case false:
							return 6660
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6661
						case false:
							return 6662
						}
					case false:
						switch x.West {
						case true:
							return 6663
						case false:
							return 6664
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6665
						case false:
							return 6666
						}
					case false:
						switch x.West {
						case true:
							return 6667
						case false:
							return 6668
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6669
						case false:
							return 6670
						}
					case false:
						switch x.West {
						case true:
							return 6671
						case false:
							return 6672
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6673
						case false:
							return 6674
						}
					case false:
						switch x.West {
						case true:
							return 6675
						case false:
							return 6676
						}
					}
				}
			}
		}
	}
	return 6613 // default state
}

type MushroomStem struct {
	Down  bool
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
}

func (x MushroomStem) Id() uint16 {
	switch x.Down {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6677
						case false:
							return 6678
						}
					case false:
						switch x.West {
						case true:
							return 6679
						case false:
							return 6680
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6681
						case false:
							return 6682
						}
					case false:
						switch x.West {
						case true:
							return 6683
						case false:
							return 6684
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6685
						case false:
							return 6686
						}
					case false:
						switch x.West {
						case true:
							return 6687
						case false:
							return 6688
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6689
						case false:
							return 6690
						}
					case false:
						switch x.West {
						case true:
							return 6691
						case false:
							return 6692
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6693
						case false:
							return 6694
						}
					case false:
						switch x.West {
						case true:
							return 6695
						case false:
							return 6696
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6697
						case false:
							return 6698
						}
					case false:
						switch x.West {
						case true:
							return 6699
						case false:
							return 6700
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6701
						case false:
							return 6702
						}
					case false:
						switch x.West {
						case true:
							return 6703
						case false:
							return 6704
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6705
						case false:
							return 6706
						}
					case false:
						switch x.West {
						case true:
							return 6707
						case false:
							return 6708
						}
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6709
						case false:
							return 6710
						}
					case false:
						switch x.West {
						case true:
							return 6711
						case false:
							return 6712
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6713
						case false:
							return 6714
						}
					case false:
						switch x.West {
						case true:
							return 6715
						case false:
							return 6716
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6717
						case false:
							return 6718
						}
					case false:
						switch x.West {
						case true:
							return 6719
						case false:
							return 6720
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6721
						case false:
							return 6722
						}
					case false:
						switch x.West {
						case true:
							return 6723
						case false:
							return 6724
						}
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6725
						case false:
							return 6726
						}
					case false:
						switch x.West {
						case true:
							return 6727
						case false:
							return 6728
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6729
						case false:
							return 6730
						}
					case false:
						switch x.West {
						case true:
							return 6731
						case false:
							return 6732
						}
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6733
						case false:
							return 6734
						}
					case false:
						switch x.West {
						case true:
							return 6735
						case false:
							return 6736
						}
					}
				case false:
					switch x.Up {
					case true:
						switch x.West {
						case true:
							return 6737
						case false:
							return 6738
						}
					case false:
						switch x.West {
						case true:
							return 6739
						case false:
							return 6740
						}
					}
				}
			}
		}
	}
	return 6677 // default state
}

type IronBars struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x IronBars) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6741
					case false:
						return 6742
					}
				case false:
					switch x.West {
					case true:
						return 6743
					case false:
						return 6744
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6745
					case false:
						return 6746
					}
				case false:
					switch x.West {
					case true:
						return 6747
					case false:
						return 6748
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6749
					case false:
						return 6750
					}
				case false:
					switch x.West {
					case true:
						return 6751
					case false:
						return 6752
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6753
					case false:
						return 6754
					}
				case false:
					switch x.West {
					case true:
						return 6755
					case false:
						return 6756
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6757
					case false:
						return 6758
					}
				case false:
					switch x.West {
					case true:
						return 6759
					case false:
						return 6760
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6761
					case false:
						return 6762
					}
				case false:
					switch x.West {
					case true:
						return 6763
					case false:
						return 6764
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6765
					case false:
						return 6766
					}
				case false:
					switch x.West {
					case true:
						return 6767
					case false:
						return 6768
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 6769
					case false:
						return 6770
					}
				case false:
					switch x.West {
					case true:
						return 6771
					case false:
						return 6772
					}
				}
			}
		}
	}
	return 6772 // default state
}

type ChainAxis string

const (
	ChainAxisX ChainAxis = "x"
	ChainAxisY ChainAxis = "y"
	ChainAxisZ ChainAxis = "z"
)

type Chain struct {
	Axis        ChainAxis
	Waterlogged bool
}

func (x Chain) Id() uint16 {
	switch x.Axis {
	case ChainAxisX:
		switch x.Waterlogged {
		case true:
			return 6773
		case false:
			return 6774
		}
	case ChainAxisY:
		switch x.Waterlogged {
		case true:
			return 6775
		case false:
			return 6776
		}
	case ChainAxisZ:
		switch x.Waterlogged {
		case true:
			return 6777
		case false:
			return 6778
		}
	}
	return 6776 // default state
}

type GlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x GlassPane) Id() uint16 {
	switch x.South {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6779
					case false:
						return 6787
					}
				case false:
					switch x.North {
					case true:
						return 6795
					case false:
						return 6803
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6780
					case false:
						return 6788
					}
				case false:
					switch x.North {
					case true:
						return 6796
					case false:
						return 6804
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6781
					case false:
						return 6789
					}
				case false:
					switch x.North {
					case true:
						return 6797
					case false:
						return 6805
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6782
					case false:
						return 6790
					}
				case false:
					switch x.North {
					case true:
						return 6798
					case false:
						return 6806
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6783
					case false:
						return 6791
					}
				case false:
					switch x.North {
					case true:
						return 6799
					case false:
						return 6807
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6784
					case false:
						return 6792
					}
				case false:
					switch x.North {
					case true:
						return 6800
					case false:
						return 6808
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6785
					case false:
						return 6793
					}
				case false:
					switch x.North {
					case true:
						return 6801
					case false:
						return 6809
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 6786
					case false:
						return 6794
					}
				case false:
					switch x.North {
					case true:
						return 6802
					case false:
						return 6810
					}
				}
			}
		}
	}
	return 6810 // default state
}

type Pumpkin struct{}

func (x Pumpkin) Id() uint16 {
	return 6811
}

type Melon struct{}

func (x Melon) Id() uint16 {
	return 6812
}

type AttachedPumpkinStemFacing string

const (
	AttachedPumpkinStemFacingNorth AttachedPumpkinStemFacing = "north"
	AttachedPumpkinStemFacingSouth AttachedPumpkinStemFacing = "south"
	AttachedPumpkinStemFacingWest  AttachedPumpkinStemFacing = "west"
	AttachedPumpkinStemFacingEast  AttachedPumpkinStemFacing = "east"
)

type AttachedPumpkinStem struct {
	Facing AttachedPumpkinStemFacing
}

func (x AttachedPumpkinStem) Id() uint16 {
	switch x.Facing {
	case AttachedPumpkinStemFacingNorth:
		return 6813
	case AttachedPumpkinStemFacingSouth:
		return 6814
	case AttachedPumpkinStemFacingWest:
		return 6815
	case AttachedPumpkinStemFacingEast:
		return 6816
	}
	return 6813 // default state
}

type AttachedMelonStemFacing string

const (
	AttachedMelonStemFacingNorth AttachedMelonStemFacing = "north"
	AttachedMelonStemFacingSouth AttachedMelonStemFacing = "south"
	AttachedMelonStemFacingWest  AttachedMelonStemFacing = "west"
	AttachedMelonStemFacingEast  AttachedMelonStemFacing = "east"
)

type AttachedMelonStem struct {
	Facing AttachedMelonStemFacing
}

func (x AttachedMelonStem) Id() uint16 {
	switch x.Facing {
	case AttachedMelonStemFacingNorth:
		return 6817
	case AttachedMelonStemFacingSouth:
		return 6818
	case AttachedMelonStemFacingWest:
		return 6819
	case AttachedMelonStemFacingEast:
		return 6820
	}
	return 6817 // default state
}

type PumpkinStem struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Age int
}

func (x PumpkinStem) Id() uint16 {
	switch x.Age {
	case 0:
		return 6821
	case 1:
		return 6822
	case 2:
		return 6823
	case 3:
		return 6824
	case 4:
		return 6825
	case 5:
		return 6826
	case 6:
		return 6827
	case 7:
		return 6828
	}
	return 6821 // default state
}

type MelonStem struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Age int
}

func (x MelonStem) Id() uint16 {
	switch x.Age {
	case 0:
		return 6829
	case 1:
		return 6830
	case 2:
		return 6831
	case 3:
		return 6832
	case 4:
		return 6833
	case 5:
		return 6834
	case 6:
		return 6835
	case 7:
		return 6836
	}
	return 6829 // default state
}

type Vine struct {
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
}

func (x Vine) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6837
					case false:
						return 6853
					}
				case false:
					switch x.East {
					case true:
						return 6838
					case false:
						return 6854
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6839
					case false:
						return 6855
					}
				case false:
					switch x.East {
					case true:
						return 6840
					case false:
						return 6856
					}
				}
			}
		case false:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6841
					case false:
						return 6857
					}
				case false:
					switch x.East {
					case true:
						return 6842
					case false:
						return 6858
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6843
					case false:
						return 6859
					}
				case false:
					switch x.East {
					case true:
						return 6844
					case false:
						return 6860
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6845
					case false:
						return 6861
					}
				case false:
					switch x.East {
					case true:
						return 6846
					case false:
						return 6862
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6847
					case false:
						return 6863
					}
				case false:
					switch x.East {
					case true:
						return 6848
					case false:
						return 6864
					}
				}
			}
		case false:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6849
					case false:
						return 6865
					}
				case false:
					switch x.East {
					case true:
						return 6850
					case false:
						return 6866
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 6851
					case false:
						return 6867
					}
				case false:
					switch x.East {
					case true:
						return 6852
					case false:
						return 6868
					}
				}
			}
		}
	}
	return 6868 // default state
}

type GlowLichen struct {
	Down        bool
	East        bool
	North       bool
	South       bool
	Up          bool
	Waterlogged bool
	West        bool
}

func (x GlowLichen) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.Down {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6869
							case false:
								return 6873
							}
						case false:
							switch x.Up {
							case true:
								return 6877
							case false:
								return 6881
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6885
							case false:
								return 6889
							}
						case false:
							switch x.Up {
							case true:
								return 6893
							case false:
								return 6897
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6901
							case false:
								return 6905
							}
						case false:
							switch x.Up {
							case true:
								return 6909
							case false:
								return 6913
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6917
							case false:
								return 6921
							}
						case false:
							switch x.Up {
							case true:
								return 6925
							case false:
								return 6929
							}
						}
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6933
							case false:
								return 6937
							}
						case false:
							switch x.Up {
							case true:
								return 6941
							case false:
								return 6945
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6949
							case false:
								return 6953
							}
						case false:
							switch x.Up {
							case true:
								return 6957
							case false:
								return 6961
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6965
							case false:
								return 6969
							}
						case false:
							switch x.Up {
							case true:
								return 6973
							case false:
								return 6977
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6981
							case false:
								return 6985
							}
						case false:
							switch x.Up {
							case true:
								return 6989
							case false:
								return 6993
							}
						}
					}
				}
			}
		case false:
			switch x.Down {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6870
							case false:
								return 6874
							}
						case false:
							switch x.Up {
							case true:
								return 6878
							case false:
								return 6882
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6886
							case false:
								return 6890
							}
						case false:
							switch x.Up {
							case true:
								return 6894
							case false:
								return 6898
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6902
							case false:
								return 6906
							}
						case false:
							switch x.Up {
							case true:
								return 6910
							case false:
								return 6914
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6918
							case false:
								return 6922
							}
						case false:
							switch x.Up {
							case true:
								return 6926
							case false:
								return 6930
							}
						}
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6934
							case false:
								return 6938
							}
						case false:
							switch x.Up {
							case true:
								return 6942
							case false:
								return 6946
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6950
							case false:
								return 6954
							}
						case false:
							switch x.Up {
							case true:
								return 6958
							case false:
								return 6962
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6966
							case false:
								return 6970
							}
						case false:
							switch x.Up {
							case true:
								return 6974
							case false:
								return 6978
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6982
							case false:
								return 6986
							}
						case false:
							switch x.Up {
							case true:
								return 6990
							case false:
								return 6994
							}
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.Down {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6871
							case false:
								return 6875
							}
						case false:
							switch x.Up {
							case true:
								return 6879
							case false:
								return 6883
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6887
							case false:
								return 6891
							}
						case false:
							switch x.Up {
							case true:
								return 6895
							case false:
								return 6899
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6903
							case false:
								return 6907
							}
						case false:
							switch x.Up {
							case true:
								return 6911
							case false:
								return 6915
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6919
							case false:
								return 6923
							}
						case false:
							switch x.Up {
							case true:
								return 6927
							case false:
								return 6931
							}
						}
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6935
							case false:
								return 6939
							}
						case false:
							switch x.Up {
							case true:
								return 6943
							case false:
								return 6947
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6951
							case false:
								return 6955
							}
						case false:
							switch x.Up {
							case true:
								return 6959
							case false:
								return 6963
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6967
							case false:
								return 6971
							}
						case false:
							switch x.Up {
							case true:
								return 6975
							case false:
								return 6979
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6983
							case false:
								return 6987
							}
						case false:
							switch x.Up {
							case true:
								return 6991
							case false:
								return 6995
							}
						}
					}
				}
			}
		case false:
			switch x.Down {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6872
							case false:
								return 6876
							}
						case false:
							switch x.Up {
							case true:
								return 6880
							case false:
								return 6884
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6888
							case false:
								return 6892
							}
						case false:
							switch x.Up {
							case true:
								return 6896
							case false:
								return 6900
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6904
							case false:
								return 6908
							}
						case false:
							switch x.Up {
							case true:
								return 6912
							case false:
								return 6916
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6920
							case false:
								return 6924
							}
						case false:
							switch x.Up {
							case true:
								return 6928
							case false:
								return 6932
							}
						}
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6936
							case false:
								return 6940
							}
						case false:
							switch x.Up {
							case true:
								return 6944
							case false:
								return 6948
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6952
							case false:
								return 6956
							}
						case false:
							switch x.Up {
							case true:
								return 6960
							case false:
								return 6964
							}
						}
					}
				case false:
					switch x.North {
					case true:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6968
							case false:
								return 6972
							}
						case false:
							switch x.Up {
							case true:
								return 6976
							case false:
								return 6980
							}
						}
					case false:
						switch x.South {
						case true:
							switch x.Up {
							case true:
								return 6984
							case false:
								return 6988
							}
						case false:
							switch x.Up {
							case true:
								return 6992
							case false:
								return 6996
							}
						}
					}
				}
			}
		}
	}
	return 6996 // default state
}

type OakFenceGateFacing string

const (
	OakFenceGateFacingNorth OakFenceGateFacing = "north"
	OakFenceGateFacingSouth OakFenceGateFacing = "south"
	OakFenceGateFacingWest  OakFenceGateFacing = "west"
	OakFenceGateFacingEast  OakFenceGateFacing = "east"
)

type OakFenceGate struct {
	Facing  OakFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x OakFenceGate) Id() uint16 {
	switch x.InWall {
	case true:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 6997
				case OakFenceGateFacingSouth:
					return 7005
				case OakFenceGateFacingWest:
					return 7013
				case OakFenceGateFacingEast:
					return 7021
				}
			case false:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 6998
				case OakFenceGateFacingSouth:
					return 7006
				case OakFenceGateFacingWest:
					return 7014
				case OakFenceGateFacingEast:
					return 7022
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 6999
				case OakFenceGateFacingSouth:
					return 7007
				case OakFenceGateFacingWest:
					return 7015
				case OakFenceGateFacingEast:
					return 7023
				}
			case false:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 7000
				case OakFenceGateFacingSouth:
					return 7008
				case OakFenceGateFacingWest:
					return 7016
				case OakFenceGateFacingEast:
					return 7024
				}
			}
		}
	case false:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 7001
				case OakFenceGateFacingSouth:
					return 7009
				case OakFenceGateFacingWest:
					return 7017
				case OakFenceGateFacingEast:
					return 7025
				}
			case false:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 7002
				case OakFenceGateFacingSouth:
					return 7010
				case OakFenceGateFacingWest:
					return 7018
				case OakFenceGateFacingEast:
					return 7026
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 7003
				case OakFenceGateFacingSouth:
					return 7011
				case OakFenceGateFacingWest:
					return 7019
				case OakFenceGateFacingEast:
					return 7027
				}
			case false:
				switch x.Facing {
				case OakFenceGateFacingNorth:
					return 7004
				case OakFenceGateFacingSouth:
					return 7012
				case OakFenceGateFacingWest:
					return 7020
				case OakFenceGateFacingEast:
					return 7028
				}
			}
		}
	}
	return 7004 // default state
}

type BrickStairsHalf string

const (
	BrickStairsHalfTop    BrickStairsHalf = "top"
	BrickStairsHalfBottom BrickStairsHalf = "bottom"
)

type BrickStairsShape string

const (
	BrickStairsShapeStraight   BrickStairsShape = "straight"
	BrickStairsShapeInnerLeft  BrickStairsShape = "inner_left"
	BrickStairsShapeInnerRight BrickStairsShape = "inner_right"
	BrickStairsShapeOuterLeft  BrickStairsShape = "outer_left"
	BrickStairsShapeOuterRight BrickStairsShape = "outer_right"
)

type BrickStairsFacing string

const (
	BrickStairsFacingNorth BrickStairsFacing = "north"
	BrickStairsFacingSouth BrickStairsFacing = "south"
	BrickStairsFacingWest  BrickStairsFacing = "west"
	BrickStairsFacingEast  BrickStairsFacing = "east"
)

type BrickStairs struct {
	Half        BrickStairsHalf
	Shape       BrickStairsShape
	Waterlogged bool
	Facing      BrickStairsFacing
}

func (x BrickStairs) Id() uint16 {
	switch x.Facing {
	case BrickStairsFacingNorth:
		switch x.Half {
		case BrickStairsHalfTop:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7029
				case false:
					return 7030
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7031
				case false:
					return 7032
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7033
				case false:
					return 7034
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7035
				case false:
					return 7036
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7037
				case false:
					return 7038
				}
			}
		case BrickStairsHalfBottom:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7039
				case false:
					return 7040
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7041
				case false:
					return 7042
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7043
				case false:
					return 7044
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7045
				case false:
					return 7046
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7047
				case false:
					return 7048
				}
			}
		}
	case BrickStairsFacingSouth:
		switch x.Half {
		case BrickStairsHalfTop:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7049
				case false:
					return 7050
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7051
				case false:
					return 7052
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7053
				case false:
					return 7054
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7055
				case false:
					return 7056
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7057
				case false:
					return 7058
				}
			}
		case BrickStairsHalfBottom:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7059
				case false:
					return 7060
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7061
				case false:
					return 7062
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7063
				case false:
					return 7064
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7065
				case false:
					return 7066
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7067
				case false:
					return 7068
				}
			}
		}
	case BrickStairsFacingWest:
		switch x.Half {
		case BrickStairsHalfTop:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7069
				case false:
					return 7070
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7071
				case false:
					return 7072
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7073
				case false:
					return 7074
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7075
				case false:
					return 7076
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7077
				case false:
					return 7078
				}
			}
		case BrickStairsHalfBottom:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7079
				case false:
					return 7080
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7081
				case false:
					return 7082
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7083
				case false:
					return 7084
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7085
				case false:
					return 7086
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7087
				case false:
					return 7088
				}
			}
		}
	case BrickStairsFacingEast:
		switch x.Half {
		case BrickStairsHalfTop:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7089
				case false:
					return 7090
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7091
				case false:
					return 7092
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7093
				case false:
					return 7094
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7095
				case false:
					return 7096
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7097
				case false:
					return 7098
				}
			}
		case BrickStairsHalfBottom:
			switch x.Shape {
			case BrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7099
				case false:
					return 7100
				}
			case BrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7101
				case false:
					return 7102
				}
			case BrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7103
				case false:
					return 7104
				}
			case BrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7105
				case false:
					return 7106
				}
			case BrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7107
				case false:
					return 7108
				}
			}
		}
	}
	return 7040 // default state
}

type StoneBrickStairsFacing string

const (
	StoneBrickStairsFacingNorth StoneBrickStairsFacing = "north"
	StoneBrickStairsFacingSouth StoneBrickStairsFacing = "south"
	StoneBrickStairsFacingWest  StoneBrickStairsFacing = "west"
	StoneBrickStairsFacingEast  StoneBrickStairsFacing = "east"
)

type StoneBrickStairsHalf string

const (
	StoneBrickStairsHalfTop    StoneBrickStairsHalf = "top"
	StoneBrickStairsHalfBottom StoneBrickStairsHalf = "bottom"
)

type StoneBrickStairsShape string

const (
	StoneBrickStairsShapeStraight   StoneBrickStairsShape = "straight"
	StoneBrickStairsShapeInnerLeft  StoneBrickStairsShape = "inner_left"
	StoneBrickStairsShapeInnerRight StoneBrickStairsShape = "inner_right"
	StoneBrickStairsShapeOuterLeft  StoneBrickStairsShape = "outer_left"
	StoneBrickStairsShapeOuterRight StoneBrickStairsShape = "outer_right"
)

type StoneBrickStairs struct {
	Facing      StoneBrickStairsFacing
	Half        StoneBrickStairsHalf
	Shape       StoneBrickStairsShape
	Waterlogged bool
}

func (x StoneBrickStairs) Id() uint16 {
	switch x.Facing {
	case StoneBrickStairsFacingNorth:
		switch x.Half {
		case StoneBrickStairsHalfTop:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7109
				case false:
					return 7110
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7111
				case false:
					return 7112
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7113
				case false:
					return 7114
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7115
				case false:
					return 7116
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7117
				case false:
					return 7118
				}
			}
		case StoneBrickStairsHalfBottom:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7119
				case false:
					return 7120
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7121
				case false:
					return 7122
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7123
				case false:
					return 7124
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7125
				case false:
					return 7126
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7127
				case false:
					return 7128
				}
			}
		}
	case StoneBrickStairsFacingSouth:
		switch x.Half {
		case StoneBrickStairsHalfTop:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7129
				case false:
					return 7130
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7131
				case false:
					return 7132
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7133
				case false:
					return 7134
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7135
				case false:
					return 7136
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7137
				case false:
					return 7138
				}
			}
		case StoneBrickStairsHalfBottom:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7139
				case false:
					return 7140
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7141
				case false:
					return 7142
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7143
				case false:
					return 7144
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7145
				case false:
					return 7146
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7147
				case false:
					return 7148
				}
			}
		}
	case StoneBrickStairsFacingWest:
		switch x.Half {
		case StoneBrickStairsHalfTop:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7149
				case false:
					return 7150
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7151
				case false:
					return 7152
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7153
				case false:
					return 7154
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7155
				case false:
					return 7156
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7157
				case false:
					return 7158
				}
			}
		case StoneBrickStairsHalfBottom:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7159
				case false:
					return 7160
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7161
				case false:
					return 7162
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7163
				case false:
					return 7164
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7165
				case false:
					return 7166
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7167
				case false:
					return 7168
				}
			}
		}
	case StoneBrickStairsFacingEast:
		switch x.Half {
		case StoneBrickStairsHalfTop:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7169
				case false:
					return 7170
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7171
				case false:
					return 7172
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7173
				case false:
					return 7174
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7175
				case false:
					return 7176
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7177
				case false:
					return 7178
				}
			}
		case StoneBrickStairsHalfBottom:
			switch x.Shape {
			case StoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7179
				case false:
					return 7180
				}
			case StoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7181
				case false:
					return 7182
				}
			case StoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7183
				case false:
					return 7184
				}
			case StoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7185
				case false:
					return 7186
				}
			case StoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7187
				case false:
					return 7188
				}
			}
		}
	}
	return 7120 // default state
}

type MudBrickStairsFacing string

const (
	MudBrickStairsFacingNorth MudBrickStairsFacing = "north"
	MudBrickStairsFacingSouth MudBrickStairsFacing = "south"
	MudBrickStairsFacingWest  MudBrickStairsFacing = "west"
	MudBrickStairsFacingEast  MudBrickStairsFacing = "east"
)

type MudBrickStairsHalf string

const (
	MudBrickStairsHalfTop    MudBrickStairsHalf = "top"
	MudBrickStairsHalfBottom MudBrickStairsHalf = "bottom"
)

type MudBrickStairsShape string

const (
	MudBrickStairsShapeStraight   MudBrickStairsShape = "straight"
	MudBrickStairsShapeInnerLeft  MudBrickStairsShape = "inner_left"
	MudBrickStairsShapeInnerRight MudBrickStairsShape = "inner_right"
	MudBrickStairsShapeOuterLeft  MudBrickStairsShape = "outer_left"
	MudBrickStairsShapeOuterRight MudBrickStairsShape = "outer_right"
)

type MudBrickStairs struct {
	Facing      MudBrickStairsFacing
	Half        MudBrickStairsHalf
	Shape       MudBrickStairsShape
	Waterlogged bool
}

func (x MudBrickStairs) Id() uint16 {
	switch x.Facing {
	case MudBrickStairsFacingNorth:
		switch x.Half {
		case MudBrickStairsHalfTop:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7189
				case false:
					return 7190
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7191
				case false:
					return 7192
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7193
				case false:
					return 7194
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7195
				case false:
					return 7196
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7197
				case false:
					return 7198
				}
			}
		case MudBrickStairsHalfBottom:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7199
				case false:
					return 7200
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7201
				case false:
					return 7202
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7203
				case false:
					return 7204
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7205
				case false:
					return 7206
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7207
				case false:
					return 7208
				}
			}
		}
	case MudBrickStairsFacingSouth:
		switch x.Half {
		case MudBrickStairsHalfTop:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7209
				case false:
					return 7210
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7211
				case false:
					return 7212
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7213
				case false:
					return 7214
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7215
				case false:
					return 7216
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7217
				case false:
					return 7218
				}
			}
		case MudBrickStairsHalfBottom:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7219
				case false:
					return 7220
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7221
				case false:
					return 7222
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7223
				case false:
					return 7224
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7225
				case false:
					return 7226
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7227
				case false:
					return 7228
				}
			}
		}
	case MudBrickStairsFacingWest:
		switch x.Half {
		case MudBrickStairsHalfTop:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7229
				case false:
					return 7230
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7231
				case false:
					return 7232
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7233
				case false:
					return 7234
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7235
				case false:
					return 7236
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7237
				case false:
					return 7238
				}
			}
		case MudBrickStairsHalfBottom:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7239
				case false:
					return 7240
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7241
				case false:
					return 7242
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7243
				case false:
					return 7244
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7245
				case false:
					return 7246
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7247
				case false:
					return 7248
				}
			}
		}
	case MudBrickStairsFacingEast:
		switch x.Half {
		case MudBrickStairsHalfTop:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7249
				case false:
					return 7250
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7251
				case false:
					return 7252
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7253
				case false:
					return 7254
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7255
				case false:
					return 7256
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7257
				case false:
					return 7258
				}
			}
		case MudBrickStairsHalfBottom:
			switch x.Shape {
			case MudBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7259
				case false:
					return 7260
				}
			case MudBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7261
				case false:
					return 7262
				}
			case MudBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7263
				case false:
					return 7264
				}
			case MudBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7265
				case false:
					return 7266
				}
			case MudBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7267
				case false:
					return 7268
				}
			}
		}
	}
	return 7200 // default state
}

type Mycelium struct {
	Snowy bool
}

func (x Mycelium) Id() uint16 {
	switch x.Snowy {
	case true:
		return 7269
	case false:
		return 7270
	}
	return 7270 // default state
}

type LilyPad struct{}

func (x LilyPad) Id() uint16 {
	return 7271
}

type NetherBricks struct{}

func (x NetherBricks) Id() uint16 {
	return 7272
}

type NetherBrickFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x NetherBrickFence) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7273
					case false:
						return 7289
					}
				case false:
					switch x.East {
					case true:
						return 7274
					case false:
						return 7290
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7275
					case false:
						return 7291
					}
				case false:
					switch x.East {
					case true:
						return 7276
					case false:
						return 7292
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7277
					case false:
						return 7293
					}
				case false:
					switch x.East {
					case true:
						return 7278
					case false:
						return 7294
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7279
					case false:
						return 7295
					}
				case false:
					switch x.East {
					case true:
						return 7280
					case false:
						return 7296
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7281
					case false:
						return 7297
					}
				case false:
					switch x.East {
					case true:
						return 7282
					case false:
						return 7298
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7283
					case false:
						return 7299
					}
				case false:
					switch x.East {
					case true:
						return 7284
					case false:
						return 7300
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7285
					case false:
						return 7301
					}
				case false:
					switch x.East {
					case true:
						return 7286
					case false:
						return 7302
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 7287
					case false:
						return 7303
					}
				case false:
					switch x.East {
					case true:
						return 7288
					case false:
						return 7304
					}
				}
			}
		}
	}
	return 7304 // default state
}

type NetherBrickStairsFacing string

const (
	NetherBrickStairsFacingNorth NetherBrickStairsFacing = "north"
	NetherBrickStairsFacingSouth NetherBrickStairsFacing = "south"
	NetherBrickStairsFacingWest  NetherBrickStairsFacing = "west"
	NetherBrickStairsFacingEast  NetherBrickStairsFacing = "east"
)

type NetherBrickStairsHalf string

const (
	NetherBrickStairsHalfTop    NetherBrickStairsHalf = "top"
	NetherBrickStairsHalfBottom NetherBrickStairsHalf = "bottom"
)

type NetherBrickStairsShape string

const (
	NetherBrickStairsShapeStraight   NetherBrickStairsShape = "straight"
	NetherBrickStairsShapeInnerLeft  NetherBrickStairsShape = "inner_left"
	NetherBrickStairsShapeInnerRight NetherBrickStairsShape = "inner_right"
	NetherBrickStairsShapeOuterLeft  NetherBrickStairsShape = "outer_left"
	NetherBrickStairsShapeOuterRight NetherBrickStairsShape = "outer_right"
)

type NetherBrickStairs struct {
	Facing      NetherBrickStairsFacing
	Half        NetherBrickStairsHalf
	Shape       NetherBrickStairsShape
	Waterlogged bool
}

func (x NetherBrickStairs) Id() uint16 {
	switch x.Facing {
	case NetherBrickStairsFacingNorth:
		switch x.Half {
		case NetherBrickStairsHalfTop:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7305
				case false:
					return 7306
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7307
				case false:
					return 7308
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7309
				case false:
					return 7310
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7311
				case false:
					return 7312
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7313
				case false:
					return 7314
				}
			}
		case NetherBrickStairsHalfBottom:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7315
				case false:
					return 7316
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7317
				case false:
					return 7318
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7319
				case false:
					return 7320
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7321
				case false:
					return 7322
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7323
				case false:
					return 7324
				}
			}
		}
	case NetherBrickStairsFacingSouth:
		switch x.Half {
		case NetherBrickStairsHalfTop:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7325
				case false:
					return 7326
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7327
				case false:
					return 7328
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7329
				case false:
					return 7330
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7331
				case false:
					return 7332
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7333
				case false:
					return 7334
				}
			}
		case NetherBrickStairsHalfBottom:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7335
				case false:
					return 7336
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7337
				case false:
					return 7338
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7339
				case false:
					return 7340
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7341
				case false:
					return 7342
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7343
				case false:
					return 7344
				}
			}
		}
	case NetherBrickStairsFacingWest:
		switch x.Half {
		case NetherBrickStairsHalfTop:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7345
				case false:
					return 7346
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7347
				case false:
					return 7348
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7349
				case false:
					return 7350
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7351
				case false:
					return 7352
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7353
				case false:
					return 7354
				}
			}
		case NetherBrickStairsHalfBottom:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7355
				case false:
					return 7356
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7357
				case false:
					return 7358
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7359
				case false:
					return 7360
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7361
				case false:
					return 7362
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7363
				case false:
					return 7364
				}
			}
		}
	case NetherBrickStairsFacingEast:
		switch x.Half {
		case NetherBrickStairsHalfTop:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7365
				case false:
					return 7366
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7367
				case false:
					return 7368
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7369
				case false:
					return 7370
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7371
				case false:
					return 7372
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7373
				case false:
					return 7374
				}
			}
		case NetherBrickStairsHalfBottom:
			switch x.Shape {
			case NetherBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7375
				case false:
					return 7376
				}
			case NetherBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7377
				case false:
					return 7378
				}
			case NetherBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7379
				case false:
					return 7380
				}
			case NetherBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7381
				case false:
					return 7382
				}
			case NetherBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7383
				case false:
					return 7384
				}
			}
		}
	}
	return 7316 // default state
}

type NetherWart struct {
	// Valid values: 0, 1, 2, 3
	Age int
}

func (x NetherWart) Id() uint16 {
	switch x.Age {
	case 0:
		return 7385
	case 1:
		return 7386
	case 2:
		return 7387
	case 3:
		return 7388
	}
	return 7385 // default state
}

type EnchantingTable struct{}

func (x EnchantingTable) Id() uint16 {
	return 7389
}

type BrewingStand struct {
	HasBottle0 bool
	HasBottle1 bool
	HasBottle2 bool
}

func (x BrewingStand) Id() uint16 {
	switch x.HasBottle0 {
	case true:
		switch x.HasBottle1 {
		case true:
			switch x.HasBottle2 {
			case true:
				return 7390
			case false:
				return 7391
			}
		case false:
			switch x.HasBottle2 {
			case true:
				return 7392
			case false:
				return 7393
			}
		}
	case false:
		switch x.HasBottle1 {
		case true:
			switch x.HasBottle2 {
			case true:
				return 7394
			case false:
				return 7395
			}
		case false:
			switch x.HasBottle2 {
			case true:
				return 7396
			case false:
				return 7397
			}
		}
	}
	return 7397 // default state
}

type Cauldron struct{}

func (x Cauldron) Id() uint16 {
	return 7398
}

type WaterCauldron struct {
	// Valid values: 1, 2, 3
	Level int
}

func (x WaterCauldron) Id() uint16 {
	switch x.Level {
	case 1:
		return 7399
	case 2:
		return 7400
	case 3:
		return 7401
	}
	return 7399 // default state
}

type LavaCauldron struct{}

func (x LavaCauldron) Id() uint16 {
	return 7402
}

type PowderSnowCauldron struct {
	// Valid values: 1, 2, 3
	Level int
}

func (x PowderSnowCauldron) Id() uint16 {
	switch x.Level {
	case 1:
		return 7403
	case 2:
		return 7404
	case 3:
		return 7405
	}
	return 7403 // default state
}

type EndPortal struct{}

func (x EndPortal) Id() uint16 {
	return 7406
}

type EndPortalFrameFacing string

const (
	EndPortalFrameFacingNorth EndPortalFrameFacing = "north"
	EndPortalFrameFacingSouth EndPortalFrameFacing = "south"
	EndPortalFrameFacingWest  EndPortalFrameFacing = "west"
	EndPortalFrameFacingEast  EndPortalFrameFacing = "east"
)

type EndPortalFrame struct {
	Eye    bool
	Facing EndPortalFrameFacing
}

func (x EndPortalFrame) Id() uint16 {
	switch x.Eye {
	case true:
		switch x.Facing {
		case EndPortalFrameFacingNorth:
			return 7407
		case EndPortalFrameFacingSouth:
			return 7408
		case EndPortalFrameFacingWest:
			return 7409
		case EndPortalFrameFacingEast:
			return 7410
		}
	case false:
		switch x.Facing {
		case EndPortalFrameFacingNorth:
			return 7411
		case EndPortalFrameFacingSouth:
			return 7412
		case EndPortalFrameFacingWest:
			return 7413
		case EndPortalFrameFacingEast:
			return 7414
		}
	}
	return 7411 // default state
}

type EndStone struct{}

func (x EndStone) Id() uint16 {
	return 7415
}

type DragonEgg struct{}

func (x DragonEgg) Id() uint16 {
	return 7416
}

type RedstoneLamp struct {
	Lit bool
}

func (x RedstoneLamp) Id() uint16 {
	switch x.Lit {
	case true:
		return 7417
	case false:
		return 7418
	}
	return 7418 // default state
}

type CocoaFacing string

const (
	CocoaFacingNorth CocoaFacing = "north"
	CocoaFacingSouth CocoaFacing = "south"
	CocoaFacingWest  CocoaFacing = "west"
	CocoaFacingEast  CocoaFacing = "east"
)

type Cocoa struct {
	// Valid values: 0, 1, 2
	Age    int
	Facing CocoaFacing
}

func (x Cocoa) Id() uint16 {
	switch x.Age {
	case 0:
		switch x.Facing {
		case CocoaFacingNorth:
			return 7419
		case CocoaFacingSouth:
			return 7420
		case CocoaFacingWest:
			return 7421
		case CocoaFacingEast:
			return 7422
		}
	case 1:
		switch x.Facing {
		case CocoaFacingNorth:
			return 7423
		case CocoaFacingSouth:
			return 7424
		case CocoaFacingWest:
			return 7425
		case CocoaFacingEast:
			return 7426
		}
	case 2:
		switch x.Facing {
		case CocoaFacingNorth:
			return 7427
		case CocoaFacingSouth:
			return 7428
		case CocoaFacingWest:
			return 7429
		case CocoaFacingEast:
			return 7430
		}
	}
	return 7419 // default state
}

type SandstoneStairsFacing string

const (
	SandstoneStairsFacingNorth SandstoneStairsFacing = "north"
	SandstoneStairsFacingSouth SandstoneStairsFacing = "south"
	SandstoneStairsFacingWest  SandstoneStairsFacing = "west"
	SandstoneStairsFacingEast  SandstoneStairsFacing = "east"
)

type SandstoneStairsHalf string

const (
	SandstoneStairsHalfTop    SandstoneStairsHalf = "top"
	SandstoneStairsHalfBottom SandstoneStairsHalf = "bottom"
)

type SandstoneStairsShape string

const (
	SandstoneStairsShapeStraight   SandstoneStairsShape = "straight"
	SandstoneStairsShapeInnerLeft  SandstoneStairsShape = "inner_left"
	SandstoneStairsShapeInnerRight SandstoneStairsShape = "inner_right"
	SandstoneStairsShapeOuterLeft  SandstoneStairsShape = "outer_left"
	SandstoneStairsShapeOuterRight SandstoneStairsShape = "outer_right"
)

type SandstoneStairs struct {
	Facing      SandstoneStairsFacing
	Half        SandstoneStairsHalf
	Shape       SandstoneStairsShape
	Waterlogged bool
}

func (x SandstoneStairs) Id() uint16 {
	switch x.Facing {
	case SandstoneStairsFacingNorth:
		switch x.Half {
		case SandstoneStairsHalfTop:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7431
				case false:
					return 7432
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7433
				case false:
					return 7434
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7435
				case false:
					return 7436
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7437
				case false:
					return 7438
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7439
				case false:
					return 7440
				}
			}
		case SandstoneStairsHalfBottom:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7441
				case false:
					return 7442
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7443
				case false:
					return 7444
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7445
				case false:
					return 7446
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7447
				case false:
					return 7448
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7449
				case false:
					return 7450
				}
			}
		}
	case SandstoneStairsFacingSouth:
		switch x.Half {
		case SandstoneStairsHalfTop:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7451
				case false:
					return 7452
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7453
				case false:
					return 7454
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7455
				case false:
					return 7456
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7457
				case false:
					return 7458
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7459
				case false:
					return 7460
				}
			}
		case SandstoneStairsHalfBottom:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7461
				case false:
					return 7462
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7463
				case false:
					return 7464
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7465
				case false:
					return 7466
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7467
				case false:
					return 7468
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7469
				case false:
					return 7470
				}
			}
		}
	case SandstoneStairsFacingWest:
		switch x.Half {
		case SandstoneStairsHalfTop:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7471
				case false:
					return 7472
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7473
				case false:
					return 7474
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7475
				case false:
					return 7476
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7477
				case false:
					return 7478
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7479
				case false:
					return 7480
				}
			}
		case SandstoneStairsHalfBottom:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7481
				case false:
					return 7482
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7483
				case false:
					return 7484
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7485
				case false:
					return 7486
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7487
				case false:
					return 7488
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7489
				case false:
					return 7490
				}
			}
		}
	case SandstoneStairsFacingEast:
		switch x.Half {
		case SandstoneStairsHalfTop:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7491
				case false:
					return 7492
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7493
				case false:
					return 7494
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7495
				case false:
					return 7496
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7497
				case false:
					return 7498
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7499
				case false:
					return 7500
				}
			}
		case SandstoneStairsHalfBottom:
			switch x.Shape {
			case SandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7501
				case false:
					return 7502
				}
			case SandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7503
				case false:
					return 7504
				}
			case SandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7505
				case false:
					return 7506
				}
			case SandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7507
				case false:
					return 7508
				}
			case SandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7509
				case false:
					return 7510
				}
			}
		}
	}
	return 7442 // default state
}

type EmeraldOre struct{}

func (x EmeraldOre) Id() uint16 {
	return 7511
}

type DeepslateEmeraldOre struct{}

func (x DeepslateEmeraldOre) Id() uint16 {
	return 7512
}

type EnderChestFacing string

const (
	EnderChestFacingNorth EnderChestFacing = "north"
	EnderChestFacingSouth EnderChestFacing = "south"
	EnderChestFacingWest  EnderChestFacing = "west"
	EnderChestFacingEast  EnderChestFacing = "east"
)

type EnderChest struct {
	Facing      EnderChestFacing
	Waterlogged bool
}

func (x EnderChest) Id() uint16 {
	switch x.Facing {
	case EnderChestFacingNorth:
		switch x.Waterlogged {
		case true:
			return 7513
		case false:
			return 7514
		}
	case EnderChestFacingSouth:
		switch x.Waterlogged {
		case true:
			return 7515
		case false:
			return 7516
		}
	case EnderChestFacingWest:
		switch x.Waterlogged {
		case true:
			return 7517
		case false:
			return 7518
		}
	case EnderChestFacingEast:
		switch x.Waterlogged {
		case true:
			return 7519
		case false:
			return 7520
		}
	}
	return 7514 // default state
}

type TripwireHookFacing string

const (
	TripwireHookFacingNorth TripwireHookFacing = "north"
	TripwireHookFacingSouth TripwireHookFacing = "south"
	TripwireHookFacingWest  TripwireHookFacing = "west"
	TripwireHookFacingEast  TripwireHookFacing = "east"
)

type TripwireHook struct {
	Powered  bool
	Attached bool
	Facing   TripwireHookFacing
}

func (x TripwireHook) Id() uint16 {
	switch x.Attached {
	case true:
		switch x.Facing {
		case TripwireHookFacingNorth:
			switch x.Powered {
			case true:
				return 7521
			case false:
				return 7522
			}
		case TripwireHookFacingSouth:
			switch x.Powered {
			case true:
				return 7523
			case false:
				return 7524
			}
		case TripwireHookFacingWest:
			switch x.Powered {
			case true:
				return 7525
			case false:
				return 7526
			}
		case TripwireHookFacingEast:
			switch x.Powered {
			case true:
				return 7527
			case false:
				return 7528
			}
		}
	case false:
		switch x.Facing {
		case TripwireHookFacingNorth:
			switch x.Powered {
			case true:
				return 7529
			case false:
				return 7530
			}
		case TripwireHookFacingSouth:
			switch x.Powered {
			case true:
				return 7531
			case false:
				return 7532
			}
		case TripwireHookFacingWest:
			switch x.Powered {
			case true:
				return 7533
			case false:
				return 7534
			}
		case TripwireHookFacingEast:
			switch x.Powered {
			case true:
				return 7535
			case false:
				return 7536
			}
		}
	}
	return 7530 // default state
}

type Tripwire struct {
	South    bool
	West     bool
	Attached bool
	Disarmed bool
	East     bool
	North    bool
	Powered  bool
}

func (x Tripwire) Id() uint16 {
	switch x.South {
	case true:
		switch x.West {
		case true:
			switch x.Attached {
			case true:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7537
							case false:
								return 7541
							}
						case false:
							switch x.Powered {
							case true:
								return 7545
							case false:
								return 7549
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7553
							case false:
								return 7557
							}
						case false:
							switch x.Powered {
							case true:
								return 7561
							case false:
								return 7565
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7569
							case false:
								return 7573
							}
						case false:
							switch x.Powered {
							case true:
								return 7577
							case false:
								return 7581
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7585
							case false:
								return 7589
							}
						case false:
							switch x.Powered {
							case true:
								return 7593
							case false:
								return 7597
							}
						}
					}
				}
			case false:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7601
							case false:
								return 7605
							}
						case false:
							switch x.Powered {
							case true:
								return 7609
							case false:
								return 7613
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7617
							case false:
								return 7621
							}
						case false:
							switch x.Powered {
							case true:
								return 7625
							case false:
								return 7629
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7633
							case false:
								return 7637
							}
						case false:
							switch x.Powered {
							case true:
								return 7641
							case false:
								return 7645
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7649
							case false:
								return 7653
							}
						case false:
							switch x.Powered {
							case true:
								return 7657
							case false:
								return 7661
							}
						}
					}
				}
			}
		case false:
			switch x.Attached {
			case true:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7538
							case false:
								return 7542
							}
						case false:
							switch x.Powered {
							case true:
								return 7546
							case false:
								return 7550
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7554
							case false:
								return 7558
							}
						case false:
							switch x.Powered {
							case true:
								return 7562
							case false:
								return 7566
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7570
							case false:
								return 7574
							}
						case false:
							switch x.Powered {
							case true:
								return 7578
							case false:
								return 7582
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7586
							case false:
								return 7590
							}
						case false:
							switch x.Powered {
							case true:
								return 7594
							case false:
								return 7598
							}
						}
					}
				}
			case false:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7602
							case false:
								return 7606
							}
						case false:
							switch x.Powered {
							case true:
								return 7610
							case false:
								return 7614
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7618
							case false:
								return 7622
							}
						case false:
							switch x.Powered {
							case true:
								return 7626
							case false:
								return 7630
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7634
							case false:
								return 7638
							}
						case false:
							switch x.Powered {
							case true:
								return 7642
							case false:
								return 7646
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7650
							case false:
								return 7654
							}
						case false:
							switch x.Powered {
							case true:
								return 7658
							case false:
								return 7662
							}
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.Attached {
			case true:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7539
							case false:
								return 7543
							}
						case false:
							switch x.Powered {
							case true:
								return 7547
							case false:
								return 7551
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7555
							case false:
								return 7559
							}
						case false:
							switch x.Powered {
							case true:
								return 7563
							case false:
								return 7567
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7571
							case false:
								return 7575
							}
						case false:
							switch x.Powered {
							case true:
								return 7579
							case false:
								return 7583
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7587
							case false:
								return 7591
							}
						case false:
							switch x.Powered {
							case true:
								return 7595
							case false:
								return 7599
							}
						}
					}
				}
			case false:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7603
							case false:
								return 7607
							}
						case false:
							switch x.Powered {
							case true:
								return 7611
							case false:
								return 7615
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7619
							case false:
								return 7623
							}
						case false:
							switch x.Powered {
							case true:
								return 7627
							case false:
								return 7631
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7635
							case false:
								return 7639
							}
						case false:
							switch x.Powered {
							case true:
								return 7643
							case false:
								return 7647
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7651
							case false:
								return 7655
							}
						case false:
							switch x.Powered {
							case true:
								return 7659
							case false:
								return 7663
							}
						}
					}
				}
			}
		case false:
			switch x.Attached {
			case true:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7540
							case false:
								return 7544
							}
						case false:
							switch x.Powered {
							case true:
								return 7548
							case false:
								return 7552
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7556
							case false:
								return 7560
							}
						case false:
							switch x.Powered {
							case true:
								return 7564
							case false:
								return 7568
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7572
							case false:
								return 7576
							}
						case false:
							switch x.Powered {
							case true:
								return 7580
							case false:
								return 7584
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7588
							case false:
								return 7592
							}
						case false:
							switch x.Powered {
							case true:
								return 7596
							case false:
								return 7600
							}
						}
					}
				}
			case false:
				switch x.Disarmed {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7604
							case false:
								return 7608
							}
						case false:
							switch x.Powered {
							case true:
								return 7612
							case false:
								return 7616
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7620
							case false:
								return 7624
							}
						case false:
							switch x.Powered {
							case true:
								return 7628
							case false:
								return 7632
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7636
							case false:
								return 7640
							}
						case false:
							switch x.Powered {
							case true:
								return 7644
							case false:
								return 7648
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.Powered {
							case true:
								return 7652
							case false:
								return 7656
							}
						case false:
							switch x.Powered {
							case true:
								return 7660
							case false:
								return 7664
							}
						}
					}
				}
			}
		}
	}
	return 7664 // default state
}

type EmeraldBlock struct{}

func (x EmeraldBlock) Id() uint16 {
	return 7665
}

type SpruceStairsHalf string

const (
	SpruceStairsHalfTop    SpruceStairsHalf = "top"
	SpruceStairsHalfBottom SpruceStairsHalf = "bottom"
)

type SpruceStairsShape string

const (
	SpruceStairsShapeStraight   SpruceStairsShape = "straight"
	SpruceStairsShapeInnerLeft  SpruceStairsShape = "inner_left"
	SpruceStairsShapeInnerRight SpruceStairsShape = "inner_right"
	SpruceStairsShapeOuterLeft  SpruceStairsShape = "outer_left"
	SpruceStairsShapeOuterRight SpruceStairsShape = "outer_right"
)

type SpruceStairsFacing string

const (
	SpruceStairsFacingNorth SpruceStairsFacing = "north"
	SpruceStairsFacingSouth SpruceStairsFacing = "south"
	SpruceStairsFacingWest  SpruceStairsFacing = "west"
	SpruceStairsFacingEast  SpruceStairsFacing = "east"
)

type SpruceStairs struct {
	Half        SpruceStairsHalf
	Shape       SpruceStairsShape
	Waterlogged bool
	Facing      SpruceStairsFacing
}

func (x SpruceStairs) Id() uint16 {
	switch x.Half {
	case SpruceStairsHalfTop:
		switch x.Shape {
		case SpruceStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7666
				case SpruceStairsFacingSouth:
					return 7686
				case SpruceStairsFacingWest:
					return 7706
				case SpruceStairsFacingEast:
					return 7726
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7667
				case SpruceStairsFacingSouth:
					return 7687
				case SpruceStairsFacingWest:
					return 7707
				case SpruceStairsFacingEast:
					return 7727
				}
			}
		case SpruceStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7668
				case SpruceStairsFacingSouth:
					return 7688
				case SpruceStairsFacingWest:
					return 7708
				case SpruceStairsFacingEast:
					return 7728
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7669
				case SpruceStairsFacingSouth:
					return 7689
				case SpruceStairsFacingWest:
					return 7709
				case SpruceStairsFacingEast:
					return 7729
				}
			}
		case SpruceStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7670
				case SpruceStairsFacingSouth:
					return 7690
				case SpruceStairsFacingWest:
					return 7710
				case SpruceStairsFacingEast:
					return 7730
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7671
				case SpruceStairsFacingSouth:
					return 7691
				case SpruceStairsFacingWest:
					return 7711
				case SpruceStairsFacingEast:
					return 7731
				}
			}
		case SpruceStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7672
				case SpruceStairsFacingSouth:
					return 7692
				case SpruceStairsFacingWest:
					return 7712
				case SpruceStairsFacingEast:
					return 7732
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7673
				case SpruceStairsFacingSouth:
					return 7693
				case SpruceStairsFacingWest:
					return 7713
				case SpruceStairsFacingEast:
					return 7733
				}
			}
		case SpruceStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7674
				case SpruceStairsFacingSouth:
					return 7694
				case SpruceStairsFacingWest:
					return 7714
				case SpruceStairsFacingEast:
					return 7734
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7675
				case SpruceStairsFacingSouth:
					return 7695
				case SpruceStairsFacingWest:
					return 7715
				case SpruceStairsFacingEast:
					return 7735
				}
			}
		}
	case SpruceStairsHalfBottom:
		switch x.Shape {
		case SpruceStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7676
				case SpruceStairsFacingSouth:
					return 7696
				case SpruceStairsFacingWest:
					return 7716
				case SpruceStairsFacingEast:
					return 7736
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7677
				case SpruceStairsFacingSouth:
					return 7697
				case SpruceStairsFacingWest:
					return 7717
				case SpruceStairsFacingEast:
					return 7737
				}
			}
		case SpruceStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7678
				case SpruceStairsFacingSouth:
					return 7698
				case SpruceStairsFacingWest:
					return 7718
				case SpruceStairsFacingEast:
					return 7738
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7679
				case SpruceStairsFacingSouth:
					return 7699
				case SpruceStairsFacingWest:
					return 7719
				case SpruceStairsFacingEast:
					return 7739
				}
			}
		case SpruceStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7680
				case SpruceStairsFacingSouth:
					return 7700
				case SpruceStairsFacingWest:
					return 7720
				case SpruceStairsFacingEast:
					return 7740
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7681
				case SpruceStairsFacingSouth:
					return 7701
				case SpruceStairsFacingWest:
					return 7721
				case SpruceStairsFacingEast:
					return 7741
				}
			}
		case SpruceStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7682
				case SpruceStairsFacingSouth:
					return 7702
				case SpruceStairsFacingWest:
					return 7722
				case SpruceStairsFacingEast:
					return 7742
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7683
				case SpruceStairsFacingSouth:
					return 7703
				case SpruceStairsFacingWest:
					return 7723
				case SpruceStairsFacingEast:
					return 7743
				}
			}
		case SpruceStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7684
				case SpruceStairsFacingSouth:
					return 7704
				case SpruceStairsFacingWest:
					return 7724
				case SpruceStairsFacingEast:
					return 7744
				}
			case false:
				switch x.Facing {
				case SpruceStairsFacingNorth:
					return 7685
				case SpruceStairsFacingSouth:
					return 7705
				case SpruceStairsFacingWest:
					return 7725
				case SpruceStairsFacingEast:
					return 7745
				}
			}
		}
	}
	return 7677 // default state
}

type BirchStairsFacing string

const (
	BirchStairsFacingNorth BirchStairsFacing = "north"
	BirchStairsFacingSouth BirchStairsFacing = "south"
	BirchStairsFacingWest  BirchStairsFacing = "west"
	BirchStairsFacingEast  BirchStairsFacing = "east"
)

type BirchStairsHalf string

const (
	BirchStairsHalfTop    BirchStairsHalf = "top"
	BirchStairsHalfBottom BirchStairsHalf = "bottom"
)

type BirchStairsShape string

const (
	BirchStairsShapeStraight   BirchStairsShape = "straight"
	BirchStairsShapeInnerLeft  BirchStairsShape = "inner_left"
	BirchStairsShapeInnerRight BirchStairsShape = "inner_right"
	BirchStairsShapeOuterLeft  BirchStairsShape = "outer_left"
	BirchStairsShapeOuterRight BirchStairsShape = "outer_right"
)

type BirchStairs struct {
	Waterlogged bool
	Facing      BirchStairsFacing
	Half        BirchStairsHalf
	Shape       BirchStairsShape
}

func (x BirchStairs) Id() uint16 {
	switch x.Shape {
	case BirchStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7746
				case BirchStairsHalfBottom:
					return 7756
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7766
				case BirchStairsHalfBottom:
					return 7776
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7786
				case BirchStairsHalfBottom:
					return 7796
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7806
				case BirchStairsHalfBottom:
					return 7816
				}
			}
		case false:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7747
				case BirchStairsHalfBottom:
					return 7757
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7767
				case BirchStairsHalfBottom:
					return 7777
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7787
				case BirchStairsHalfBottom:
					return 7797
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7807
				case BirchStairsHalfBottom:
					return 7817
				}
			}
		}
	case BirchStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7748
				case BirchStairsHalfBottom:
					return 7758
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7768
				case BirchStairsHalfBottom:
					return 7778
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7788
				case BirchStairsHalfBottom:
					return 7798
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7808
				case BirchStairsHalfBottom:
					return 7818
				}
			}
		case false:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7749
				case BirchStairsHalfBottom:
					return 7759
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7769
				case BirchStairsHalfBottom:
					return 7779
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7789
				case BirchStairsHalfBottom:
					return 7799
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7809
				case BirchStairsHalfBottom:
					return 7819
				}
			}
		}
	case BirchStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7750
				case BirchStairsHalfBottom:
					return 7760
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7770
				case BirchStairsHalfBottom:
					return 7780
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7790
				case BirchStairsHalfBottom:
					return 7800
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7810
				case BirchStairsHalfBottom:
					return 7820
				}
			}
		case false:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7751
				case BirchStairsHalfBottom:
					return 7761
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7771
				case BirchStairsHalfBottom:
					return 7781
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7791
				case BirchStairsHalfBottom:
					return 7801
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7811
				case BirchStairsHalfBottom:
					return 7821
				}
			}
		}
	case BirchStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7752
				case BirchStairsHalfBottom:
					return 7762
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7772
				case BirchStairsHalfBottom:
					return 7782
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7792
				case BirchStairsHalfBottom:
					return 7802
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7812
				case BirchStairsHalfBottom:
					return 7822
				}
			}
		case false:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7753
				case BirchStairsHalfBottom:
					return 7763
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7773
				case BirchStairsHalfBottom:
					return 7783
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7793
				case BirchStairsHalfBottom:
					return 7803
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7813
				case BirchStairsHalfBottom:
					return 7823
				}
			}
		}
	case BirchStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7754
				case BirchStairsHalfBottom:
					return 7764
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7774
				case BirchStairsHalfBottom:
					return 7784
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7794
				case BirchStairsHalfBottom:
					return 7804
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7814
				case BirchStairsHalfBottom:
					return 7824
				}
			}
		case false:
			switch x.Facing {
			case BirchStairsFacingNorth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7755
				case BirchStairsHalfBottom:
					return 7765
				}
			case BirchStairsFacingSouth:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7775
				case BirchStairsHalfBottom:
					return 7785
				}
			case BirchStairsFacingWest:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7795
				case BirchStairsHalfBottom:
					return 7805
				}
			case BirchStairsFacingEast:
				switch x.Half {
				case BirchStairsHalfTop:
					return 7815
				case BirchStairsHalfBottom:
					return 7825
				}
			}
		}
	}
	return 7757 // default state
}

type JungleStairsFacing string

const (
	JungleStairsFacingNorth JungleStairsFacing = "north"
	JungleStairsFacingSouth JungleStairsFacing = "south"
	JungleStairsFacingWest  JungleStairsFacing = "west"
	JungleStairsFacingEast  JungleStairsFacing = "east"
)

type JungleStairsHalf string

const (
	JungleStairsHalfTop    JungleStairsHalf = "top"
	JungleStairsHalfBottom JungleStairsHalf = "bottom"
)

type JungleStairsShape string

const (
	JungleStairsShapeStraight   JungleStairsShape = "straight"
	JungleStairsShapeInnerLeft  JungleStairsShape = "inner_left"
	JungleStairsShapeInnerRight JungleStairsShape = "inner_right"
	JungleStairsShapeOuterLeft  JungleStairsShape = "outer_left"
	JungleStairsShapeOuterRight JungleStairsShape = "outer_right"
)

type JungleStairs struct {
	Facing      JungleStairsFacing
	Half        JungleStairsHalf
	Shape       JungleStairsShape
	Waterlogged bool
}

func (x JungleStairs) Id() uint16 {
	switch x.Facing {
	case JungleStairsFacingNorth:
		switch x.Half {
		case JungleStairsHalfTop:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7826
				case false:
					return 7827
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7828
				case false:
					return 7829
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7830
				case false:
					return 7831
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7832
				case false:
					return 7833
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7834
				case false:
					return 7835
				}
			}
		case JungleStairsHalfBottom:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7836
				case false:
					return 7837
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7838
				case false:
					return 7839
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7840
				case false:
					return 7841
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7842
				case false:
					return 7843
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7844
				case false:
					return 7845
				}
			}
		}
	case JungleStairsFacingSouth:
		switch x.Half {
		case JungleStairsHalfTop:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7846
				case false:
					return 7847
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7848
				case false:
					return 7849
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7850
				case false:
					return 7851
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7852
				case false:
					return 7853
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7854
				case false:
					return 7855
				}
			}
		case JungleStairsHalfBottom:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7856
				case false:
					return 7857
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7858
				case false:
					return 7859
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7860
				case false:
					return 7861
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7862
				case false:
					return 7863
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7864
				case false:
					return 7865
				}
			}
		}
	case JungleStairsFacingWest:
		switch x.Half {
		case JungleStairsHalfTop:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7866
				case false:
					return 7867
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7868
				case false:
					return 7869
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7870
				case false:
					return 7871
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7872
				case false:
					return 7873
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7874
				case false:
					return 7875
				}
			}
		case JungleStairsHalfBottom:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7876
				case false:
					return 7877
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7878
				case false:
					return 7879
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7880
				case false:
					return 7881
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7882
				case false:
					return 7883
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7884
				case false:
					return 7885
				}
			}
		}
	case JungleStairsFacingEast:
		switch x.Half {
		case JungleStairsHalfTop:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7886
				case false:
					return 7887
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7888
				case false:
					return 7889
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7890
				case false:
					return 7891
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7892
				case false:
					return 7893
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7894
				case false:
					return 7895
				}
			}
		case JungleStairsHalfBottom:
			switch x.Shape {
			case JungleStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 7896
				case false:
					return 7897
				}
			case JungleStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 7898
				case false:
					return 7899
				}
			case JungleStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 7900
				case false:
					return 7901
				}
			case JungleStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 7902
				case false:
					return 7903
				}
			case JungleStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 7904
				case false:
					return 7905
				}
			}
		}
	}
	return 7837 // default state
}

type CommandBlockFacing string

const (
	CommandBlockFacingNorth CommandBlockFacing = "north"
	CommandBlockFacingEast  CommandBlockFacing = "east"
	CommandBlockFacingSouth CommandBlockFacing = "south"
	CommandBlockFacingWest  CommandBlockFacing = "west"
	CommandBlockFacingUp    CommandBlockFacing = "up"
	CommandBlockFacingDown  CommandBlockFacing = "down"
)

type CommandBlock struct {
	Conditional bool
	Facing      CommandBlockFacing
}

func (x CommandBlock) Id() uint16 {
	switch x.Conditional {
	case true:
		switch x.Facing {
		case CommandBlockFacingNorth:
			return 7906
		case CommandBlockFacingEast:
			return 7907
		case CommandBlockFacingSouth:
			return 7908
		case CommandBlockFacingWest:
			return 7909
		case CommandBlockFacingUp:
			return 7910
		case CommandBlockFacingDown:
			return 7911
		}
	case false:
		switch x.Facing {
		case CommandBlockFacingNorth:
			return 7912
		case CommandBlockFacingEast:
			return 7913
		case CommandBlockFacingSouth:
			return 7914
		case CommandBlockFacingWest:
			return 7915
		case CommandBlockFacingUp:
			return 7916
		case CommandBlockFacingDown:
			return 7917
		}
	}
	return 7912 // default state
}

type Beacon struct{}

func (x Beacon) Id() uint16 {
	return 7918
}

type CobblestoneWallEast string

const (
	CobblestoneWallEastNone CobblestoneWallEast = "none"
	CobblestoneWallEastLow  CobblestoneWallEast = "low"
	CobblestoneWallEastTall CobblestoneWallEast = "tall"
)

type CobblestoneWallNorth string

const (
	CobblestoneWallNorthNone CobblestoneWallNorth = "none"
	CobblestoneWallNorthLow  CobblestoneWallNorth = "low"
	CobblestoneWallNorthTall CobblestoneWallNorth = "tall"
)

type CobblestoneWallSouth string

const (
	CobblestoneWallSouthNone CobblestoneWallSouth = "none"
	CobblestoneWallSouthLow  CobblestoneWallSouth = "low"
	CobblestoneWallSouthTall CobblestoneWallSouth = "tall"
)

type CobblestoneWallWest string

const (
	CobblestoneWallWestNone CobblestoneWallWest = "none"
	CobblestoneWallWestLow  CobblestoneWallWest = "low"
	CobblestoneWallWestTall CobblestoneWallWest = "tall"
)

type CobblestoneWall struct {
	East        CobblestoneWallEast
	North       CobblestoneWallNorth
	South       CobblestoneWallSouth
	Up          bool
	Waterlogged bool
	West        CobblestoneWallWest
}

func (x CobblestoneWall) Id() uint16 {
	switch x.West {
	case CobblestoneWallWestNone:
		switch x.East {
		case CobblestoneWallEastNone:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7919
						case false:
							return 7922
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7925
						case false:
							return 7928
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7931
						case false:
							return 7934
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7937
						case false:
							return 7940
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7943
						case false:
							return 7946
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7949
						case false:
							return 7952
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7955
						case false:
							return 7958
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7961
						case false:
							return 7964
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7967
						case false:
							return 7970
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7973
						case false:
							return 7976
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7979
						case false:
							return 7982
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7985
						case false:
							return 7988
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7991
						case false:
							return 7994
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7997
						case false:
							return 8000
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8003
						case false:
							return 8006
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8009
						case false:
							return 8012
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8015
						case false:
							return 8018
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8021
						case false:
							return 8024
						}
					}
				}
			}
		case CobblestoneWallEastLow:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8027
						case false:
							return 8030
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8033
						case false:
							return 8036
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8039
						case false:
							return 8042
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8045
						case false:
							return 8048
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8051
						case false:
							return 8054
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8057
						case false:
							return 8060
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8063
						case false:
							return 8066
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8069
						case false:
							return 8072
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8075
						case false:
							return 8078
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8081
						case false:
							return 8084
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8087
						case false:
							return 8090
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8093
						case false:
							return 8096
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8099
						case false:
							return 8102
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8105
						case false:
							return 8108
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8111
						case false:
							return 8114
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8117
						case false:
							return 8120
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8123
						case false:
							return 8126
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8129
						case false:
							return 8132
						}
					}
				}
			}
		case CobblestoneWallEastTall:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8135
						case false:
							return 8138
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8141
						case false:
							return 8144
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8147
						case false:
							return 8150
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8153
						case false:
							return 8156
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8159
						case false:
							return 8162
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8165
						case false:
							return 8168
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8171
						case false:
							return 8174
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8177
						case false:
							return 8180
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8183
						case false:
							return 8186
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8189
						case false:
							return 8192
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8195
						case false:
							return 8198
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8201
						case false:
							return 8204
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8207
						case false:
							return 8210
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8213
						case false:
							return 8216
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8219
						case false:
							return 8222
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8225
						case false:
							return 8228
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8231
						case false:
							return 8234
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8237
						case false:
							return 8240
						}
					}
				}
			}
		}
	case CobblestoneWallWestLow:
		switch x.East {
		case CobblestoneWallEastNone:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7920
						case false:
							return 7923
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7926
						case false:
							return 7929
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7932
						case false:
							return 7935
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7938
						case false:
							return 7941
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7944
						case false:
							return 7947
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7950
						case false:
							return 7953
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7956
						case false:
							return 7959
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7962
						case false:
							return 7965
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7968
						case false:
							return 7971
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7974
						case false:
							return 7977
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7980
						case false:
							return 7983
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7986
						case false:
							return 7989
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7992
						case false:
							return 7995
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7998
						case false:
							return 8001
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8004
						case false:
							return 8007
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8010
						case false:
							return 8013
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8016
						case false:
							return 8019
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8022
						case false:
							return 8025
						}
					}
				}
			}
		case CobblestoneWallEastLow:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8028
						case false:
							return 8031
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8034
						case false:
							return 8037
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8040
						case false:
							return 8043
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8046
						case false:
							return 8049
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8052
						case false:
							return 8055
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8058
						case false:
							return 8061
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8064
						case false:
							return 8067
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8070
						case false:
							return 8073
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8076
						case false:
							return 8079
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8082
						case false:
							return 8085
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8088
						case false:
							return 8091
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8094
						case false:
							return 8097
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8100
						case false:
							return 8103
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8106
						case false:
							return 8109
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8112
						case false:
							return 8115
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8118
						case false:
							return 8121
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8124
						case false:
							return 8127
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8130
						case false:
							return 8133
						}
					}
				}
			}
		case CobblestoneWallEastTall:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8136
						case false:
							return 8139
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8142
						case false:
							return 8145
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8148
						case false:
							return 8151
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8154
						case false:
							return 8157
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8160
						case false:
							return 8163
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8166
						case false:
							return 8169
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8172
						case false:
							return 8175
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8178
						case false:
							return 8181
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8184
						case false:
							return 8187
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8190
						case false:
							return 8193
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8196
						case false:
							return 8199
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8202
						case false:
							return 8205
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8208
						case false:
							return 8211
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8214
						case false:
							return 8217
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8220
						case false:
							return 8223
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8226
						case false:
							return 8229
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8232
						case false:
							return 8235
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8238
						case false:
							return 8241
						}
					}
				}
			}
		}
	case CobblestoneWallWestTall:
		switch x.East {
		case CobblestoneWallEastNone:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7921
						case false:
							return 7924
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7927
						case false:
							return 7930
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7933
						case false:
							return 7936
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7939
						case false:
							return 7942
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7945
						case false:
							return 7948
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7951
						case false:
							return 7954
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7957
						case false:
							return 7960
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7963
						case false:
							return 7966
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7969
						case false:
							return 7972
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7975
						case false:
							return 7978
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7981
						case false:
							return 7984
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7987
						case false:
							return 7990
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 7993
						case false:
							return 7996
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 7999
						case false:
							return 8002
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8005
						case false:
							return 8008
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8011
						case false:
							return 8014
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8017
						case false:
							return 8020
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8023
						case false:
							return 8026
						}
					}
				}
			}
		case CobblestoneWallEastLow:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8029
						case false:
							return 8032
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8035
						case false:
							return 8038
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8041
						case false:
							return 8044
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8047
						case false:
							return 8050
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8053
						case false:
							return 8056
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8059
						case false:
							return 8062
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8065
						case false:
							return 8068
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8071
						case false:
							return 8074
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8077
						case false:
							return 8080
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8083
						case false:
							return 8086
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8089
						case false:
							return 8092
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8095
						case false:
							return 8098
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8101
						case false:
							return 8104
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8107
						case false:
							return 8110
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8113
						case false:
							return 8116
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8119
						case false:
							return 8122
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8125
						case false:
							return 8128
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8131
						case false:
							return 8134
						}
					}
				}
			}
		case CobblestoneWallEastTall:
			switch x.North {
			case CobblestoneWallNorthNone:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8137
						case false:
							return 8140
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8143
						case false:
							return 8146
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8149
						case false:
							return 8152
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8155
						case false:
							return 8158
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8161
						case false:
							return 8164
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8167
						case false:
							return 8170
						}
					}
				}
			case CobblestoneWallNorthLow:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8173
						case false:
							return 8176
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8179
						case false:
							return 8182
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8185
						case false:
							return 8188
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8191
						case false:
							return 8194
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8197
						case false:
							return 8200
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8203
						case false:
							return 8206
						}
					}
				}
			case CobblestoneWallNorthTall:
				switch x.South {
				case CobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8209
						case false:
							return 8212
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8215
						case false:
							return 8218
						}
					}
				case CobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8221
						case false:
							return 8224
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8227
						case false:
							return 8230
						}
					}
				case CobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8233
						case false:
							return 8236
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8239
						case false:
							return 8242
						}
					}
				}
			}
		}
	}
	return 7922 // default state
}

type MossyCobblestoneWallWest string

const (
	MossyCobblestoneWallWestNone MossyCobblestoneWallWest = "none"
	MossyCobblestoneWallWestLow  MossyCobblestoneWallWest = "low"
	MossyCobblestoneWallWestTall MossyCobblestoneWallWest = "tall"
)

type MossyCobblestoneWallEast string

const (
	MossyCobblestoneWallEastNone MossyCobblestoneWallEast = "none"
	MossyCobblestoneWallEastLow  MossyCobblestoneWallEast = "low"
	MossyCobblestoneWallEastTall MossyCobblestoneWallEast = "tall"
)

type MossyCobblestoneWallNorth string

const (
	MossyCobblestoneWallNorthNone MossyCobblestoneWallNorth = "none"
	MossyCobblestoneWallNorthLow  MossyCobblestoneWallNorth = "low"
	MossyCobblestoneWallNorthTall MossyCobblestoneWallNorth = "tall"
)

type MossyCobblestoneWallSouth string

const (
	MossyCobblestoneWallSouthNone MossyCobblestoneWallSouth = "none"
	MossyCobblestoneWallSouthLow  MossyCobblestoneWallSouth = "low"
	MossyCobblestoneWallSouthTall MossyCobblestoneWallSouth = "tall"
)

type MossyCobblestoneWall struct {
	Waterlogged bool
	West        MossyCobblestoneWallWest
	East        MossyCobblestoneWallEast
	North       MossyCobblestoneWallNorth
	South       MossyCobblestoneWallSouth
	Up          bool
}

func (x MossyCobblestoneWall) Id() uint16 {
	switch x.West {
	case MossyCobblestoneWallWestNone:
		switch x.East {
		case MossyCobblestoneWallEastNone:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8243
						case false:
							return 8246
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8249
						case false:
							return 8252
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8255
						case false:
							return 8258
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8261
						case false:
							return 8264
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8267
						case false:
							return 8270
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8273
						case false:
							return 8276
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8279
						case false:
							return 8282
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8285
						case false:
							return 8288
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8291
						case false:
							return 8294
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8297
						case false:
							return 8300
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8303
						case false:
							return 8306
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8309
						case false:
							return 8312
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8315
						case false:
							return 8318
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8321
						case false:
							return 8324
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8327
						case false:
							return 8330
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8333
						case false:
							return 8336
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8339
						case false:
							return 8342
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8345
						case false:
							return 8348
						}
					}
				}
			}
		case MossyCobblestoneWallEastLow:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8351
						case false:
							return 8354
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8357
						case false:
							return 8360
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8363
						case false:
							return 8366
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8369
						case false:
							return 8372
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8375
						case false:
							return 8378
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8381
						case false:
							return 8384
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8387
						case false:
							return 8390
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8393
						case false:
							return 8396
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8399
						case false:
							return 8402
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8405
						case false:
							return 8408
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8411
						case false:
							return 8414
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8417
						case false:
							return 8420
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8423
						case false:
							return 8426
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8429
						case false:
							return 8432
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8435
						case false:
							return 8438
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8441
						case false:
							return 8444
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8447
						case false:
							return 8450
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8453
						case false:
							return 8456
						}
					}
				}
			}
		case MossyCobblestoneWallEastTall:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8459
						case false:
							return 8462
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8465
						case false:
							return 8468
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8471
						case false:
							return 8474
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8477
						case false:
							return 8480
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8483
						case false:
							return 8486
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8489
						case false:
							return 8492
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8495
						case false:
							return 8498
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8501
						case false:
							return 8504
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8507
						case false:
							return 8510
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8513
						case false:
							return 8516
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8519
						case false:
							return 8522
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8525
						case false:
							return 8528
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8531
						case false:
							return 8534
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8537
						case false:
							return 8540
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8543
						case false:
							return 8546
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8549
						case false:
							return 8552
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8555
						case false:
							return 8558
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8561
						case false:
							return 8564
						}
					}
				}
			}
		}
	case MossyCobblestoneWallWestLow:
		switch x.East {
		case MossyCobblestoneWallEastNone:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8244
						case false:
							return 8247
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8250
						case false:
							return 8253
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8256
						case false:
							return 8259
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8262
						case false:
							return 8265
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8268
						case false:
							return 8271
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8274
						case false:
							return 8277
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8280
						case false:
							return 8283
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8286
						case false:
							return 8289
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8292
						case false:
							return 8295
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8298
						case false:
							return 8301
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8304
						case false:
							return 8307
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8310
						case false:
							return 8313
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8316
						case false:
							return 8319
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8322
						case false:
							return 8325
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8328
						case false:
							return 8331
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8334
						case false:
							return 8337
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8340
						case false:
							return 8343
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8346
						case false:
							return 8349
						}
					}
				}
			}
		case MossyCobblestoneWallEastLow:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8352
						case false:
							return 8355
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8358
						case false:
							return 8361
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8364
						case false:
							return 8367
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8370
						case false:
							return 8373
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8376
						case false:
							return 8379
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8382
						case false:
							return 8385
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8388
						case false:
							return 8391
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8394
						case false:
							return 8397
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8400
						case false:
							return 8403
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8406
						case false:
							return 8409
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8412
						case false:
							return 8415
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8418
						case false:
							return 8421
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8424
						case false:
							return 8427
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8430
						case false:
							return 8433
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8436
						case false:
							return 8439
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8442
						case false:
							return 8445
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8448
						case false:
							return 8451
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8454
						case false:
							return 8457
						}
					}
				}
			}
		case MossyCobblestoneWallEastTall:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8460
						case false:
							return 8463
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8466
						case false:
							return 8469
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8472
						case false:
							return 8475
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8478
						case false:
							return 8481
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8484
						case false:
							return 8487
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8490
						case false:
							return 8493
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8496
						case false:
							return 8499
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8502
						case false:
							return 8505
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8508
						case false:
							return 8511
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8514
						case false:
							return 8517
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8520
						case false:
							return 8523
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8526
						case false:
							return 8529
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8532
						case false:
							return 8535
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8538
						case false:
							return 8541
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8544
						case false:
							return 8547
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8550
						case false:
							return 8553
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8556
						case false:
							return 8559
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8562
						case false:
							return 8565
						}
					}
				}
			}
		}
	case MossyCobblestoneWallWestTall:
		switch x.East {
		case MossyCobblestoneWallEastNone:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8245
						case false:
							return 8248
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8251
						case false:
							return 8254
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8257
						case false:
							return 8260
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8263
						case false:
							return 8266
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8269
						case false:
							return 8272
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8275
						case false:
							return 8278
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8281
						case false:
							return 8284
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8287
						case false:
							return 8290
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8293
						case false:
							return 8296
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8299
						case false:
							return 8302
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8305
						case false:
							return 8308
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8311
						case false:
							return 8314
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8317
						case false:
							return 8320
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8323
						case false:
							return 8326
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8329
						case false:
							return 8332
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8335
						case false:
							return 8338
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8341
						case false:
							return 8344
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8347
						case false:
							return 8350
						}
					}
				}
			}
		case MossyCobblestoneWallEastLow:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8353
						case false:
							return 8356
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8359
						case false:
							return 8362
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8365
						case false:
							return 8368
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8371
						case false:
							return 8374
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8377
						case false:
							return 8380
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8383
						case false:
							return 8386
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8389
						case false:
							return 8392
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8395
						case false:
							return 8398
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8401
						case false:
							return 8404
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8407
						case false:
							return 8410
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8413
						case false:
							return 8416
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8419
						case false:
							return 8422
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8425
						case false:
							return 8428
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8431
						case false:
							return 8434
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8437
						case false:
							return 8440
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8443
						case false:
							return 8446
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8449
						case false:
							return 8452
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8455
						case false:
							return 8458
						}
					}
				}
			}
		case MossyCobblestoneWallEastTall:
			switch x.North {
			case MossyCobblestoneWallNorthNone:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8461
						case false:
							return 8464
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8467
						case false:
							return 8470
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8473
						case false:
							return 8476
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8479
						case false:
							return 8482
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8485
						case false:
							return 8488
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8491
						case false:
							return 8494
						}
					}
				}
			case MossyCobblestoneWallNorthLow:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8497
						case false:
							return 8500
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8503
						case false:
							return 8506
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8509
						case false:
							return 8512
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8515
						case false:
							return 8518
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8521
						case false:
							return 8524
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8527
						case false:
							return 8530
						}
					}
				}
			case MossyCobblestoneWallNorthTall:
				switch x.South {
				case MossyCobblestoneWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8533
						case false:
							return 8536
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8539
						case false:
							return 8542
						}
					}
				case MossyCobblestoneWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8545
						case false:
							return 8548
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8551
						case false:
							return 8554
						}
					}
				case MossyCobblestoneWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 8557
						case false:
							return 8560
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 8563
						case false:
							return 8566
						}
					}
				}
			}
		}
	}
	return 8246 // default state
}

type FlowerPot struct{}

func (x FlowerPot) Id() uint16 {
	return 8567
}

type PottedTorchflower struct{}

func (x PottedTorchflower) Id() uint16 {
	return 8568
}

type PottedOakSapling struct{}

func (x PottedOakSapling) Id() uint16 {
	return 8569
}

type PottedSpruceSapling struct{}

func (x PottedSpruceSapling) Id() uint16 {
	return 8570
}

type PottedBirchSapling struct{}

func (x PottedBirchSapling) Id() uint16 {
	return 8571
}

type PottedJungleSapling struct{}

func (x PottedJungleSapling) Id() uint16 {
	return 8572
}

type PottedAcaciaSapling struct{}

func (x PottedAcaciaSapling) Id() uint16 {
	return 8573
}

type PottedCherrySapling struct{}

func (x PottedCherrySapling) Id() uint16 {
	return 8574
}

type PottedDarkOakSapling struct{}

func (x PottedDarkOakSapling) Id() uint16 {
	return 8575
}

type PottedMangrovePropagule struct{}

func (x PottedMangrovePropagule) Id() uint16 {
	return 8576
}

type PottedFern struct{}

func (x PottedFern) Id() uint16 {
	return 8577
}

type PottedDandelion struct{}

func (x PottedDandelion) Id() uint16 {
	return 8578
}

type PottedPoppy struct{}

func (x PottedPoppy) Id() uint16 {
	return 8579
}

type PottedBlueOrchid struct{}

func (x PottedBlueOrchid) Id() uint16 {
	return 8580
}

type PottedAllium struct{}

func (x PottedAllium) Id() uint16 {
	return 8581
}

type PottedAzureBluet struct{}

func (x PottedAzureBluet) Id() uint16 {
	return 8582
}

type PottedRedTulip struct{}

func (x PottedRedTulip) Id() uint16 {
	return 8583
}

type PottedOrangeTulip struct{}

func (x PottedOrangeTulip) Id() uint16 {
	return 8584
}

type PottedWhiteTulip struct{}

func (x PottedWhiteTulip) Id() uint16 {
	return 8585
}

type PottedPinkTulip struct{}

func (x PottedPinkTulip) Id() uint16 {
	return 8586
}

type PottedOxeyeDaisy struct{}

func (x PottedOxeyeDaisy) Id() uint16 {
	return 8587
}

type PottedCornflower struct{}

func (x PottedCornflower) Id() uint16 {
	return 8588
}

type PottedLilyOfTheValley struct{}

func (x PottedLilyOfTheValley) Id() uint16 {
	return 8589
}

type PottedWitherRose struct{}

func (x PottedWitherRose) Id() uint16 {
	return 8590
}

type PottedRedMushroom struct{}

func (x PottedRedMushroom) Id() uint16 {
	return 8591
}

type PottedBrownMushroom struct{}

func (x PottedBrownMushroom) Id() uint16 {
	return 8592
}

type PottedDeadBush struct{}

func (x PottedDeadBush) Id() uint16 {
	return 8593
}

type PottedCactus struct{}

func (x PottedCactus) Id() uint16 {
	return 8594
}

type Carrots struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Age int
}

func (x Carrots) Id() uint16 {
	switch x.Age {
	case 0:
		return 8595
	case 1:
		return 8596
	case 2:
		return 8597
	case 3:
		return 8598
	case 4:
		return 8599
	case 5:
		return 8600
	case 6:
		return 8601
	case 7:
		return 8602
	}
	return 8595 // default state
}

type Potatoes struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Age int
}

func (x Potatoes) Id() uint16 {
	switch x.Age {
	case 0:
		return 8603
	case 1:
		return 8604
	case 2:
		return 8605
	case 3:
		return 8606
	case 4:
		return 8607
	case 5:
		return 8608
	case 6:
		return 8609
	case 7:
		return 8610
	}
	return 8603 // default state
}

type OakButtonFace string

const (
	OakButtonFaceFloor   OakButtonFace = "floor"
	OakButtonFaceWall    OakButtonFace = "wall"
	OakButtonFaceCeiling OakButtonFace = "ceiling"
)

type OakButtonFacing string

const (
	OakButtonFacingNorth OakButtonFacing = "north"
	OakButtonFacingSouth OakButtonFacing = "south"
	OakButtonFacingWest  OakButtonFacing = "west"
	OakButtonFacingEast  OakButtonFacing = "east"
)

type OakButton struct {
	Face    OakButtonFace
	Facing  OakButtonFacing
	Powered bool
}

func (x OakButton) Id() uint16 {
	switch x.Face {
	case OakButtonFaceFloor:
		switch x.Facing {
		case OakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8611
			case false:
				return 8612
			}
		case OakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8613
			case false:
				return 8614
			}
		case OakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8615
			case false:
				return 8616
			}
		case OakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8617
			case false:
				return 8618
			}
		}
	case OakButtonFaceWall:
		switch x.Facing {
		case OakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8619
			case false:
				return 8620
			}
		case OakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8621
			case false:
				return 8622
			}
		case OakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8623
			case false:
				return 8624
			}
		case OakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8625
			case false:
				return 8626
			}
		}
	case OakButtonFaceCeiling:
		switch x.Facing {
		case OakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8627
			case false:
				return 8628
			}
		case OakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8629
			case false:
				return 8630
			}
		case OakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8631
			case false:
				return 8632
			}
		case OakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8633
			case false:
				return 8634
			}
		}
	}
	return 8620 // default state
}

type SpruceButtonFace string

const (
	SpruceButtonFaceFloor   SpruceButtonFace = "floor"
	SpruceButtonFaceWall    SpruceButtonFace = "wall"
	SpruceButtonFaceCeiling SpruceButtonFace = "ceiling"
)

type SpruceButtonFacing string

const (
	SpruceButtonFacingNorth SpruceButtonFacing = "north"
	SpruceButtonFacingSouth SpruceButtonFacing = "south"
	SpruceButtonFacingWest  SpruceButtonFacing = "west"
	SpruceButtonFacingEast  SpruceButtonFacing = "east"
)

type SpruceButton struct {
	Face    SpruceButtonFace
	Facing  SpruceButtonFacing
	Powered bool
}

func (x SpruceButton) Id() uint16 {
	switch x.Face {
	case SpruceButtonFaceFloor:
		switch x.Facing {
		case SpruceButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8635
			case false:
				return 8636
			}
		case SpruceButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8637
			case false:
				return 8638
			}
		case SpruceButtonFacingWest:
			switch x.Powered {
			case true:
				return 8639
			case false:
				return 8640
			}
		case SpruceButtonFacingEast:
			switch x.Powered {
			case true:
				return 8641
			case false:
				return 8642
			}
		}
	case SpruceButtonFaceWall:
		switch x.Facing {
		case SpruceButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8643
			case false:
				return 8644
			}
		case SpruceButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8645
			case false:
				return 8646
			}
		case SpruceButtonFacingWest:
			switch x.Powered {
			case true:
				return 8647
			case false:
				return 8648
			}
		case SpruceButtonFacingEast:
			switch x.Powered {
			case true:
				return 8649
			case false:
				return 8650
			}
		}
	case SpruceButtonFaceCeiling:
		switch x.Facing {
		case SpruceButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8651
			case false:
				return 8652
			}
		case SpruceButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8653
			case false:
				return 8654
			}
		case SpruceButtonFacingWest:
			switch x.Powered {
			case true:
				return 8655
			case false:
				return 8656
			}
		case SpruceButtonFacingEast:
			switch x.Powered {
			case true:
				return 8657
			case false:
				return 8658
			}
		}
	}
	return 8644 // default state
}

type BirchButtonFace string

const (
	BirchButtonFaceFloor   BirchButtonFace = "floor"
	BirchButtonFaceWall    BirchButtonFace = "wall"
	BirchButtonFaceCeiling BirchButtonFace = "ceiling"
)

type BirchButtonFacing string

const (
	BirchButtonFacingNorth BirchButtonFacing = "north"
	BirchButtonFacingSouth BirchButtonFacing = "south"
	BirchButtonFacingWest  BirchButtonFacing = "west"
	BirchButtonFacingEast  BirchButtonFacing = "east"
)

type BirchButton struct {
	Face    BirchButtonFace
	Facing  BirchButtonFacing
	Powered bool
}

func (x BirchButton) Id() uint16 {
	switch x.Face {
	case BirchButtonFaceFloor:
		switch x.Facing {
		case BirchButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8659
			case false:
				return 8660
			}
		case BirchButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8661
			case false:
				return 8662
			}
		case BirchButtonFacingWest:
			switch x.Powered {
			case true:
				return 8663
			case false:
				return 8664
			}
		case BirchButtonFacingEast:
			switch x.Powered {
			case true:
				return 8665
			case false:
				return 8666
			}
		}
	case BirchButtonFaceWall:
		switch x.Facing {
		case BirchButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8667
			case false:
				return 8668
			}
		case BirchButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8669
			case false:
				return 8670
			}
		case BirchButtonFacingWest:
			switch x.Powered {
			case true:
				return 8671
			case false:
				return 8672
			}
		case BirchButtonFacingEast:
			switch x.Powered {
			case true:
				return 8673
			case false:
				return 8674
			}
		}
	case BirchButtonFaceCeiling:
		switch x.Facing {
		case BirchButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8675
			case false:
				return 8676
			}
		case BirchButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8677
			case false:
				return 8678
			}
		case BirchButtonFacingWest:
			switch x.Powered {
			case true:
				return 8679
			case false:
				return 8680
			}
		case BirchButtonFacingEast:
			switch x.Powered {
			case true:
				return 8681
			case false:
				return 8682
			}
		}
	}
	return 8668 // default state
}

type JungleButtonFace string

const (
	JungleButtonFaceFloor   JungleButtonFace = "floor"
	JungleButtonFaceWall    JungleButtonFace = "wall"
	JungleButtonFaceCeiling JungleButtonFace = "ceiling"
)

type JungleButtonFacing string

const (
	JungleButtonFacingNorth JungleButtonFacing = "north"
	JungleButtonFacingSouth JungleButtonFacing = "south"
	JungleButtonFacingWest  JungleButtonFacing = "west"
	JungleButtonFacingEast  JungleButtonFacing = "east"
)

type JungleButton struct {
	Face    JungleButtonFace
	Facing  JungleButtonFacing
	Powered bool
}

func (x JungleButton) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Face {
		case JungleButtonFaceFloor:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8683
			case JungleButtonFacingSouth:
				return 8685
			case JungleButtonFacingWest:
				return 8687
			case JungleButtonFacingEast:
				return 8689
			}
		case JungleButtonFaceWall:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8691
			case JungleButtonFacingSouth:
				return 8693
			case JungleButtonFacingWest:
				return 8695
			case JungleButtonFacingEast:
				return 8697
			}
		case JungleButtonFaceCeiling:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8699
			case JungleButtonFacingSouth:
				return 8701
			case JungleButtonFacingWest:
				return 8703
			case JungleButtonFacingEast:
				return 8705
			}
		}
	case false:
		switch x.Face {
		case JungleButtonFaceFloor:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8684
			case JungleButtonFacingSouth:
				return 8686
			case JungleButtonFacingWest:
				return 8688
			case JungleButtonFacingEast:
				return 8690
			}
		case JungleButtonFaceWall:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8692
			case JungleButtonFacingSouth:
				return 8694
			case JungleButtonFacingWest:
				return 8696
			case JungleButtonFacingEast:
				return 8698
			}
		case JungleButtonFaceCeiling:
			switch x.Facing {
			case JungleButtonFacingNorth:
				return 8700
			case JungleButtonFacingSouth:
				return 8702
			case JungleButtonFacingWest:
				return 8704
			case JungleButtonFacingEast:
				return 8706
			}
		}
	}
	return 8692 // default state
}

type AcaciaButtonFace string

const (
	AcaciaButtonFaceFloor   AcaciaButtonFace = "floor"
	AcaciaButtonFaceWall    AcaciaButtonFace = "wall"
	AcaciaButtonFaceCeiling AcaciaButtonFace = "ceiling"
)

type AcaciaButtonFacing string

const (
	AcaciaButtonFacingNorth AcaciaButtonFacing = "north"
	AcaciaButtonFacingSouth AcaciaButtonFacing = "south"
	AcaciaButtonFacingWest  AcaciaButtonFacing = "west"
	AcaciaButtonFacingEast  AcaciaButtonFacing = "east"
)

type AcaciaButton struct {
	Face    AcaciaButtonFace
	Facing  AcaciaButtonFacing
	Powered bool
}

func (x AcaciaButton) Id() uint16 {
	switch x.Face {
	case AcaciaButtonFaceFloor:
		switch x.Facing {
		case AcaciaButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8707
			case false:
				return 8708
			}
		case AcaciaButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8709
			case false:
				return 8710
			}
		case AcaciaButtonFacingWest:
			switch x.Powered {
			case true:
				return 8711
			case false:
				return 8712
			}
		case AcaciaButtonFacingEast:
			switch x.Powered {
			case true:
				return 8713
			case false:
				return 8714
			}
		}
	case AcaciaButtonFaceWall:
		switch x.Facing {
		case AcaciaButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8715
			case false:
				return 8716
			}
		case AcaciaButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8717
			case false:
				return 8718
			}
		case AcaciaButtonFacingWest:
			switch x.Powered {
			case true:
				return 8719
			case false:
				return 8720
			}
		case AcaciaButtonFacingEast:
			switch x.Powered {
			case true:
				return 8721
			case false:
				return 8722
			}
		}
	case AcaciaButtonFaceCeiling:
		switch x.Facing {
		case AcaciaButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8723
			case false:
				return 8724
			}
		case AcaciaButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8725
			case false:
				return 8726
			}
		case AcaciaButtonFacingWest:
			switch x.Powered {
			case true:
				return 8727
			case false:
				return 8728
			}
		case AcaciaButtonFacingEast:
			switch x.Powered {
			case true:
				return 8729
			case false:
				return 8730
			}
		}
	}
	return 8716 // default state
}

type CherryButtonFace string

const (
	CherryButtonFaceFloor   CherryButtonFace = "floor"
	CherryButtonFaceWall    CherryButtonFace = "wall"
	CherryButtonFaceCeiling CherryButtonFace = "ceiling"
)

type CherryButtonFacing string

const (
	CherryButtonFacingNorth CherryButtonFacing = "north"
	CherryButtonFacingSouth CherryButtonFacing = "south"
	CherryButtonFacingWest  CherryButtonFacing = "west"
	CherryButtonFacingEast  CherryButtonFacing = "east"
)

type CherryButton struct {
	Face    CherryButtonFace
	Facing  CherryButtonFacing
	Powered bool
}

func (x CherryButton) Id() uint16 {
	switch x.Facing {
	case CherryButtonFacingNorth:
		switch x.Powered {
		case true:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8731
			case CherryButtonFaceWall:
				return 8739
			case CherryButtonFaceCeiling:
				return 8747
			}
		case false:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8732
			case CherryButtonFaceWall:
				return 8740
			case CherryButtonFaceCeiling:
				return 8748
			}
		}
	case CherryButtonFacingSouth:
		switch x.Powered {
		case true:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8733
			case CherryButtonFaceWall:
				return 8741
			case CherryButtonFaceCeiling:
				return 8749
			}
		case false:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8734
			case CherryButtonFaceWall:
				return 8742
			case CherryButtonFaceCeiling:
				return 8750
			}
		}
	case CherryButtonFacingWest:
		switch x.Powered {
		case true:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8735
			case CherryButtonFaceWall:
				return 8743
			case CherryButtonFaceCeiling:
				return 8751
			}
		case false:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8736
			case CherryButtonFaceWall:
				return 8744
			case CherryButtonFaceCeiling:
				return 8752
			}
		}
	case CherryButtonFacingEast:
		switch x.Powered {
		case true:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8737
			case CherryButtonFaceWall:
				return 8745
			case CherryButtonFaceCeiling:
				return 8753
			}
		case false:
			switch x.Face {
			case CherryButtonFaceFloor:
				return 8738
			case CherryButtonFaceWall:
				return 8746
			case CherryButtonFaceCeiling:
				return 8754
			}
		}
	}
	return 8740 // default state
}

type DarkOakButtonFace string

const (
	DarkOakButtonFaceFloor   DarkOakButtonFace = "floor"
	DarkOakButtonFaceWall    DarkOakButtonFace = "wall"
	DarkOakButtonFaceCeiling DarkOakButtonFace = "ceiling"
)

type DarkOakButtonFacing string

const (
	DarkOakButtonFacingNorth DarkOakButtonFacing = "north"
	DarkOakButtonFacingSouth DarkOakButtonFacing = "south"
	DarkOakButtonFacingWest  DarkOakButtonFacing = "west"
	DarkOakButtonFacingEast  DarkOakButtonFacing = "east"
)

type DarkOakButton struct {
	Face    DarkOakButtonFace
	Facing  DarkOakButtonFacing
	Powered bool
}

func (x DarkOakButton) Id() uint16 {
	switch x.Face {
	case DarkOakButtonFaceFloor:
		switch x.Facing {
		case DarkOakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8755
			case false:
				return 8756
			}
		case DarkOakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8757
			case false:
				return 8758
			}
		case DarkOakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8759
			case false:
				return 8760
			}
		case DarkOakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8761
			case false:
				return 8762
			}
		}
	case DarkOakButtonFaceWall:
		switch x.Facing {
		case DarkOakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8763
			case false:
				return 8764
			}
		case DarkOakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8765
			case false:
				return 8766
			}
		case DarkOakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8767
			case false:
				return 8768
			}
		case DarkOakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8769
			case false:
				return 8770
			}
		}
	case DarkOakButtonFaceCeiling:
		switch x.Facing {
		case DarkOakButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8771
			case false:
				return 8772
			}
		case DarkOakButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8773
			case false:
				return 8774
			}
		case DarkOakButtonFacingWest:
			switch x.Powered {
			case true:
				return 8775
			case false:
				return 8776
			}
		case DarkOakButtonFacingEast:
			switch x.Powered {
			case true:
				return 8777
			case false:
				return 8778
			}
		}
	}
	return 8764 // default state
}

type MangroveButtonFacing string

const (
	MangroveButtonFacingNorth MangroveButtonFacing = "north"
	MangroveButtonFacingSouth MangroveButtonFacing = "south"
	MangroveButtonFacingWest  MangroveButtonFacing = "west"
	MangroveButtonFacingEast  MangroveButtonFacing = "east"
)

type MangroveButtonFace string

const (
	MangroveButtonFaceFloor   MangroveButtonFace = "floor"
	MangroveButtonFaceWall    MangroveButtonFace = "wall"
	MangroveButtonFaceCeiling MangroveButtonFace = "ceiling"
)

type MangroveButton struct {
	Facing  MangroveButtonFacing
	Powered bool
	Face    MangroveButtonFace
}

func (x MangroveButton) Id() uint16 {
	switch x.Face {
	case MangroveButtonFaceFloor:
		switch x.Facing {
		case MangroveButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8779
			case false:
				return 8780
			}
		case MangroveButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8781
			case false:
				return 8782
			}
		case MangroveButtonFacingWest:
			switch x.Powered {
			case true:
				return 8783
			case false:
				return 8784
			}
		case MangroveButtonFacingEast:
			switch x.Powered {
			case true:
				return 8785
			case false:
				return 8786
			}
		}
	case MangroveButtonFaceWall:
		switch x.Facing {
		case MangroveButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8787
			case false:
				return 8788
			}
		case MangroveButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8789
			case false:
				return 8790
			}
		case MangroveButtonFacingWest:
			switch x.Powered {
			case true:
				return 8791
			case false:
				return 8792
			}
		case MangroveButtonFacingEast:
			switch x.Powered {
			case true:
				return 8793
			case false:
				return 8794
			}
		}
	case MangroveButtonFaceCeiling:
		switch x.Facing {
		case MangroveButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8795
			case false:
				return 8796
			}
		case MangroveButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8797
			case false:
				return 8798
			}
		case MangroveButtonFacingWest:
			switch x.Powered {
			case true:
				return 8799
			case false:
				return 8800
			}
		case MangroveButtonFacingEast:
			switch x.Powered {
			case true:
				return 8801
			case false:
				return 8802
			}
		}
	}
	return 8788 // default state
}

type BambooButtonFace string

const (
	BambooButtonFaceFloor   BambooButtonFace = "floor"
	BambooButtonFaceWall    BambooButtonFace = "wall"
	BambooButtonFaceCeiling BambooButtonFace = "ceiling"
)

type BambooButtonFacing string

const (
	BambooButtonFacingNorth BambooButtonFacing = "north"
	BambooButtonFacingSouth BambooButtonFacing = "south"
	BambooButtonFacingWest  BambooButtonFacing = "west"
	BambooButtonFacingEast  BambooButtonFacing = "east"
)

type BambooButton struct {
	Face    BambooButtonFace
	Facing  BambooButtonFacing
	Powered bool
}

func (x BambooButton) Id() uint16 {
	switch x.Face {
	case BambooButtonFaceFloor:
		switch x.Facing {
		case BambooButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8803
			case false:
				return 8804
			}
		case BambooButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8805
			case false:
				return 8806
			}
		case BambooButtonFacingWest:
			switch x.Powered {
			case true:
				return 8807
			case false:
				return 8808
			}
		case BambooButtonFacingEast:
			switch x.Powered {
			case true:
				return 8809
			case false:
				return 8810
			}
		}
	case BambooButtonFaceWall:
		switch x.Facing {
		case BambooButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8811
			case false:
				return 8812
			}
		case BambooButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8813
			case false:
				return 8814
			}
		case BambooButtonFacingWest:
			switch x.Powered {
			case true:
				return 8815
			case false:
				return 8816
			}
		case BambooButtonFacingEast:
			switch x.Powered {
			case true:
				return 8817
			case false:
				return 8818
			}
		}
	case BambooButtonFaceCeiling:
		switch x.Facing {
		case BambooButtonFacingNorth:
			switch x.Powered {
			case true:
				return 8819
			case false:
				return 8820
			}
		case BambooButtonFacingSouth:
			switch x.Powered {
			case true:
				return 8821
			case false:
				return 8822
			}
		case BambooButtonFacingWest:
			switch x.Powered {
			case true:
				return 8823
			case false:
				return 8824
			}
		case BambooButtonFacingEast:
			switch x.Powered {
			case true:
				return 8825
			case false:
				return 8826
			}
		}
	}
	return 8812 // default state
}

type SkeletonSkull struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x SkeletonSkull) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 8827
		case 1:
			return 8828
		case 2:
			return 8829
		case 3:
			return 8830
		case 4:
			return 8831
		case 5:
			return 8832
		case 6:
			return 8833
		case 7:
			return 8834
		case 8:
			return 8835
		case 9:
			return 8836
		case 10:
			return 8837
		case 11:
			return 8838
		case 12:
			return 8839
		case 13:
			return 8840
		case 14:
			return 8841
		case 15:
			return 8842
		}
	case false:
		switch x.Rotation {
		case 0:
			return 8843
		case 1:
			return 8844
		case 2:
			return 8845
		case 3:
			return 8846
		case 4:
			return 8847
		case 5:
			return 8848
		case 6:
			return 8849
		case 7:
			return 8850
		case 8:
			return 8851
		case 9:
			return 8852
		case 10:
			return 8853
		case 11:
			return 8854
		case 12:
			return 8855
		case 13:
			return 8856
		case 14:
			return 8857
		case 15:
			return 8858
		}
	}
	return 8843 // default state
}

type SkeletonWallSkullFacing string

const (
	SkeletonWallSkullFacingNorth SkeletonWallSkullFacing = "north"
	SkeletonWallSkullFacingSouth SkeletonWallSkullFacing = "south"
	SkeletonWallSkullFacingWest  SkeletonWallSkullFacing = "west"
	SkeletonWallSkullFacingEast  SkeletonWallSkullFacing = "east"
)

type SkeletonWallSkull struct {
	Powered bool
	Facing  SkeletonWallSkullFacing
}

func (x SkeletonWallSkull) Id() uint16 {
	switch x.Facing {
	case SkeletonWallSkullFacingNorth:
		switch x.Powered {
		case true:
			return 8859
		case false:
			return 8860
		}
	case SkeletonWallSkullFacingSouth:
		switch x.Powered {
		case true:
			return 8861
		case false:
			return 8862
		}
	case SkeletonWallSkullFacingWest:
		switch x.Powered {
		case true:
			return 8863
		case false:
			return 8864
		}
	case SkeletonWallSkullFacingEast:
		switch x.Powered {
		case true:
			return 8865
		case false:
			return 8866
		}
	}
	return 8860 // default state
}

type WitherSkeletonSkull struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x WitherSkeletonSkull) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 8867
		case 1:
			return 8868
		case 2:
			return 8869
		case 3:
			return 8870
		case 4:
			return 8871
		case 5:
			return 8872
		case 6:
			return 8873
		case 7:
			return 8874
		case 8:
			return 8875
		case 9:
			return 8876
		case 10:
			return 8877
		case 11:
			return 8878
		case 12:
			return 8879
		case 13:
			return 8880
		case 14:
			return 8881
		case 15:
			return 8882
		}
	case false:
		switch x.Rotation {
		case 0:
			return 8883
		case 1:
			return 8884
		case 2:
			return 8885
		case 3:
			return 8886
		case 4:
			return 8887
		case 5:
			return 8888
		case 6:
			return 8889
		case 7:
			return 8890
		case 8:
			return 8891
		case 9:
			return 8892
		case 10:
			return 8893
		case 11:
			return 8894
		case 12:
			return 8895
		case 13:
			return 8896
		case 14:
			return 8897
		case 15:
			return 8898
		}
	}
	return 8883 // default state
}

type WitherSkeletonWallSkullFacing string

const (
	WitherSkeletonWallSkullFacingNorth WitherSkeletonWallSkullFacing = "north"
	WitherSkeletonWallSkullFacingSouth WitherSkeletonWallSkullFacing = "south"
	WitherSkeletonWallSkullFacingWest  WitherSkeletonWallSkullFacing = "west"
	WitherSkeletonWallSkullFacingEast  WitherSkeletonWallSkullFacing = "east"
)

type WitherSkeletonWallSkull struct {
	Facing  WitherSkeletonWallSkullFacing
	Powered bool
}

func (x WitherSkeletonWallSkull) Id() uint16 {
	switch x.Facing {
	case WitherSkeletonWallSkullFacingNorth:
		switch x.Powered {
		case true:
			return 8899
		case false:
			return 8900
		}
	case WitherSkeletonWallSkullFacingSouth:
		switch x.Powered {
		case true:
			return 8901
		case false:
			return 8902
		}
	case WitherSkeletonWallSkullFacingWest:
		switch x.Powered {
		case true:
			return 8903
		case false:
			return 8904
		}
	case WitherSkeletonWallSkullFacingEast:
		switch x.Powered {
		case true:
			return 8905
		case false:
			return 8906
		}
	}
	return 8900 // default state
}

type ZombieHead struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x ZombieHead) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 8907
		case 1:
			return 8908
		case 2:
			return 8909
		case 3:
			return 8910
		case 4:
			return 8911
		case 5:
			return 8912
		case 6:
			return 8913
		case 7:
			return 8914
		case 8:
			return 8915
		case 9:
			return 8916
		case 10:
			return 8917
		case 11:
			return 8918
		case 12:
			return 8919
		case 13:
			return 8920
		case 14:
			return 8921
		case 15:
			return 8922
		}
	case false:
		switch x.Rotation {
		case 0:
			return 8923
		case 1:
			return 8924
		case 2:
			return 8925
		case 3:
			return 8926
		case 4:
			return 8927
		case 5:
			return 8928
		case 6:
			return 8929
		case 7:
			return 8930
		case 8:
			return 8931
		case 9:
			return 8932
		case 10:
			return 8933
		case 11:
			return 8934
		case 12:
			return 8935
		case 13:
			return 8936
		case 14:
			return 8937
		case 15:
			return 8938
		}
	}
	return 8923 // default state
}

type ZombieWallHeadFacing string

const (
	ZombieWallHeadFacingNorth ZombieWallHeadFacing = "north"
	ZombieWallHeadFacingSouth ZombieWallHeadFacing = "south"
	ZombieWallHeadFacingWest  ZombieWallHeadFacing = "west"
	ZombieWallHeadFacingEast  ZombieWallHeadFacing = "east"
)

type ZombieWallHead struct {
	Facing  ZombieWallHeadFacing
	Powered bool
}

func (x ZombieWallHead) Id() uint16 {
	switch x.Facing {
	case ZombieWallHeadFacingNorth:
		switch x.Powered {
		case true:
			return 8939
		case false:
			return 8940
		}
	case ZombieWallHeadFacingSouth:
		switch x.Powered {
		case true:
			return 8941
		case false:
			return 8942
		}
	case ZombieWallHeadFacingWest:
		switch x.Powered {
		case true:
			return 8943
		case false:
			return 8944
		}
	case ZombieWallHeadFacingEast:
		switch x.Powered {
		case true:
			return 8945
		case false:
			return 8946
		}
	}
	return 8940 // default state
}

type PlayerHead struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x PlayerHead) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 8947
		case 1:
			return 8948
		case 2:
			return 8949
		case 3:
			return 8950
		case 4:
			return 8951
		case 5:
			return 8952
		case 6:
			return 8953
		case 7:
			return 8954
		case 8:
			return 8955
		case 9:
			return 8956
		case 10:
			return 8957
		case 11:
			return 8958
		case 12:
			return 8959
		case 13:
			return 8960
		case 14:
			return 8961
		case 15:
			return 8962
		}
	case false:
		switch x.Rotation {
		case 0:
			return 8963
		case 1:
			return 8964
		case 2:
			return 8965
		case 3:
			return 8966
		case 4:
			return 8967
		case 5:
			return 8968
		case 6:
			return 8969
		case 7:
			return 8970
		case 8:
			return 8971
		case 9:
			return 8972
		case 10:
			return 8973
		case 11:
			return 8974
		case 12:
			return 8975
		case 13:
			return 8976
		case 14:
			return 8977
		case 15:
			return 8978
		}
	}
	return 8963 // default state
}

type PlayerWallHeadFacing string

const (
	PlayerWallHeadFacingNorth PlayerWallHeadFacing = "north"
	PlayerWallHeadFacingSouth PlayerWallHeadFacing = "south"
	PlayerWallHeadFacingWest  PlayerWallHeadFacing = "west"
	PlayerWallHeadFacingEast  PlayerWallHeadFacing = "east"
)

type PlayerWallHead struct {
	Facing  PlayerWallHeadFacing
	Powered bool
}

func (x PlayerWallHead) Id() uint16 {
	switch x.Facing {
	case PlayerWallHeadFacingNorth:
		switch x.Powered {
		case true:
			return 8979
		case false:
			return 8980
		}
	case PlayerWallHeadFacingSouth:
		switch x.Powered {
		case true:
			return 8981
		case false:
			return 8982
		}
	case PlayerWallHeadFacingWest:
		switch x.Powered {
		case true:
			return 8983
		case false:
			return 8984
		}
	case PlayerWallHeadFacingEast:
		switch x.Powered {
		case true:
			return 8985
		case false:
			return 8986
		}
	}
	return 8980 // default state
}

type CreeperHead struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x CreeperHead) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 8987
		case 1:
			return 8988
		case 2:
			return 8989
		case 3:
			return 8990
		case 4:
			return 8991
		case 5:
			return 8992
		case 6:
			return 8993
		case 7:
			return 8994
		case 8:
			return 8995
		case 9:
			return 8996
		case 10:
			return 8997
		case 11:
			return 8998
		case 12:
			return 8999
		case 13:
			return 9000
		case 14:
			return 9001
		case 15:
			return 9002
		}
	case false:
		switch x.Rotation {
		case 0:
			return 9003
		case 1:
			return 9004
		case 2:
			return 9005
		case 3:
			return 9006
		case 4:
			return 9007
		case 5:
			return 9008
		case 6:
			return 9009
		case 7:
			return 9010
		case 8:
			return 9011
		case 9:
			return 9012
		case 10:
			return 9013
		case 11:
			return 9014
		case 12:
			return 9015
		case 13:
			return 9016
		case 14:
			return 9017
		case 15:
			return 9018
		}
	}
	return 9003 // default state
}

type CreeperWallHeadFacing string

const (
	CreeperWallHeadFacingNorth CreeperWallHeadFacing = "north"
	CreeperWallHeadFacingSouth CreeperWallHeadFacing = "south"
	CreeperWallHeadFacingWest  CreeperWallHeadFacing = "west"
	CreeperWallHeadFacingEast  CreeperWallHeadFacing = "east"
)

type CreeperWallHead struct {
	Facing  CreeperWallHeadFacing
	Powered bool
}

func (x CreeperWallHead) Id() uint16 {
	switch x.Facing {
	case CreeperWallHeadFacingNorth:
		switch x.Powered {
		case true:
			return 9019
		case false:
			return 9020
		}
	case CreeperWallHeadFacingSouth:
		switch x.Powered {
		case true:
			return 9021
		case false:
			return 9022
		}
	case CreeperWallHeadFacingWest:
		switch x.Powered {
		case true:
			return 9023
		case false:
			return 9024
		}
	case CreeperWallHeadFacingEast:
		switch x.Powered {
		case true:
			return 9025
		case false:
			return 9026
		}
	}
	return 9020 // default state
}

type DragonHead struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
	Powered  bool
}

func (x DragonHead) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 9027
		case 1:
			return 9028
		case 2:
			return 9029
		case 3:
			return 9030
		case 4:
			return 9031
		case 5:
			return 9032
		case 6:
			return 9033
		case 7:
			return 9034
		case 8:
			return 9035
		case 9:
			return 9036
		case 10:
			return 9037
		case 11:
			return 9038
		case 12:
			return 9039
		case 13:
			return 9040
		case 14:
			return 9041
		case 15:
			return 9042
		}
	case false:
		switch x.Rotation {
		case 0:
			return 9043
		case 1:
			return 9044
		case 2:
			return 9045
		case 3:
			return 9046
		case 4:
			return 9047
		case 5:
			return 9048
		case 6:
			return 9049
		case 7:
			return 9050
		case 8:
			return 9051
		case 9:
			return 9052
		case 10:
			return 9053
		case 11:
			return 9054
		case 12:
			return 9055
		case 13:
			return 9056
		case 14:
			return 9057
		case 15:
			return 9058
		}
	}
	return 9043 // default state
}

type DragonWallHeadFacing string

const (
	DragonWallHeadFacingNorth DragonWallHeadFacing = "north"
	DragonWallHeadFacingSouth DragonWallHeadFacing = "south"
	DragonWallHeadFacingWest  DragonWallHeadFacing = "west"
	DragonWallHeadFacingEast  DragonWallHeadFacing = "east"
)

type DragonWallHead struct {
	Facing  DragonWallHeadFacing
	Powered bool
}

func (x DragonWallHead) Id() uint16 {
	switch x.Facing {
	case DragonWallHeadFacingNorth:
		switch x.Powered {
		case true:
			return 9059
		case false:
			return 9060
		}
	case DragonWallHeadFacingSouth:
		switch x.Powered {
		case true:
			return 9061
		case false:
			return 9062
		}
	case DragonWallHeadFacingWest:
		switch x.Powered {
		case true:
			return 9063
		case false:
			return 9064
		}
	case DragonWallHeadFacingEast:
		switch x.Powered {
		case true:
			return 9065
		case false:
			return 9066
		}
	}
	return 9060 // default state
}

type PiglinHead struct {
	Powered bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x PiglinHead) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Rotation {
		case 0:
			return 9067
		case 1:
			return 9068
		case 2:
			return 9069
		case 3:
			return 9070
		case 4:
			return 9071
		case 5:
			return 9072
		case 6:
			return 9073
		case 7:
			return 9074
		case 8:
			return 9075
		case 9:
			return 9076
		case 10:
			return 9077
		case 11:
			return 9078
		case 12:
			return 9079
		case 13:
			return 9080
		case 14:
			return 9081
		case 15:
			return 9082
		}
	case false:
		switch x.Rotation {
		case 0:
			return 9083
		case 1:
			return 9084
		case 2:
			return 9085
		case 3:
			return 9086
		case 4:
			return 9087
		case 5:
			return 9088
		case 6:
			return 9089
		case 7:
			return 9090
		case 8:
			return 9091
		case 9:
			return 9092
		case 10:
			return 9093
		case 11:
			return 9094
		case 12:
			return 9095
		case 13:
			return 9096
		case 14:
			return 9097
		case 15:
			return 9098
		}
	}
	return 9083 // default state
}

type PiglinWallHeadFacing string

const (
	PiglinWallHeadFacingNorth PiglinWallHeadFacing = "north"
	PiglinWallHeadFacingSouth PiglinWallHeadFacing = "south"
	PiglinWallHeadFacingWest  PiglinWallHeadFacing = "west"
	PiglinWallHeadFacingEast  PiglinWallHeadFacing = "east"
)

type PiglinWallHead struct {
	Facing  PiglinWallHeadFacing
	Powered bool
}

func (x PiglinWallHead) Id() uint16 {
	switch x.Facing {
	case PiglinWallHeadFacingNorth:
		switch x.Powered {
		case true:
			return 9099
		case false:
			return 9100
		}
	case PiglinWallHeadFacingSouth:
		switch x.Powered {
		case true:
			return 9101
		case false:
			return 9102
		}
	case PiglinWallHeadFacingWest:
		switch x.Powered {
		case true:
			return 9103
		case false:
			return 9104
		}
	case PiglinWallHeadFacingEast:
		switch x.Powered {
		case true:
			return 9105
		case false:
			return 9106
		}
	}
	return 9100 // default state
}

type AnvilFacing string

const (
	AnvilFacingNorth AnvilFacing = "north"
	AnvilFacingSouth AnvilFacing = "south"
	AnvilFacingWest  AnvilFacing = "west"
	AnvilFacingEast  AnvilFacing = "east"
)

type Anvil struct {
	Facing AnvilFacing
}

func (x Anvil) Id() uint16 {
	switch x.Facing {
	case AnvilFacingNorth:
		return 9107
	case AnvilFacingSouth:
		return 9108
	case AnvilFacingWest:
		return 9109
	case AnvilFacingEast:
		return 9110
	}
	return 9107 // default state
}

type ChippedAnvilFacing string

const (
	ChippedAnvilFacingNorth ChippedAnvilFacing = "north"
	ChippedAnvilFacingSouth ChippedAnvilFacing = "south"
	ChippedAnvilFacingWest  ChippedAnvilFacing = "west"
	ChippedAnvilFacingEast  ChippedAnvilFacing = "east"
)

type ChippedAnvil struct {
	Facing ChippedAnvilFacing
}

func (x ChippedAnvil) Id() uint16 {
	switch x.Facing {
	case ChippedAnvilFacingNorth:
		return 9111
	case ChippedAnvilFacingSouth:
		return 9112
	case ChippedAnvilFacingWest:
		return 9113
	case ChippedAnvilFacingEast:
		return 9114
	}
	return 9111 // default state
}

type DamagedAnvilFacing string

const (
	DamagedAnvilFacingNorth DamagedAnvilFacing = "north"
	DamagedAnvilFacingSouth DamagedAnvilFacing = "south"
	DamagedAnvilFacingWest  DamagedAnvilFacing = "west"
	DamagedAnvilFacingEast  DamagedAnvilFacing = "east"
)

type DamagedAnvil struct {
	Facing DamagedAnvilFacing
}

func (x DamagedAnvil) Id() uint16 {
	switch x.Facing {
	case DamagedAnvilFacingNorth:
		return 9115
	case DamagedAnvilFacingSouth:
		return 9116
	case DamagedAnvilFacingWest:
		return 9117
	case DamagedAnvilFacingEast:
		return 9118
	}
	return 9115 // default state
}

type TrappedChestType string

const (
	TrappedChestTypeSingle TrappedChestType = "single"
	TrappedChestTypeLeft   TrappedChestType = "left"
	TrappedChestTypeRight  TrappedChestType = "right"
)

type TrappedChestFacing string

const (
	TrappedChestFacingNorth TrappedChestFacing = "north"
	TrappedChestFacingSouth TrappedChestFacing = "south"
	TrappedChestFacingWest  TrappedChestFacing = "west"
	TrappedChestFacingEast  TrappedChestFacing = "east"
)

type TrappedChest struct {
	Type        TrappedChestType
	Facing      TrappedChestFacing
	Waterlogged bool
}

func (x TrappedChest) Id() uint16 {
	switch x.Type {
	case TrappedChestTypeSingle:
		switch x.Facing {
		case TrappedChestFacingNorth:
			switch x.Waterlogged {
			case true:
				return 9119
			case false:
				return 9120
			}
		case TrappedChestFacingSouth:
			switch x.Waterlogged {
			case true:
				return 9125
			case false:
				return 9126
			}
		case TrappedChestFacingWest:
			switch x.Waterlogged {
			case true:
				return 9131
			case false:
				return 9132
			}
		case TrappedChestFacingEast:
			switch x.Waterlogged {
			case true:
				return 9137
			case false:
				return 9138
			}
		}
	case TrappedChestTypeLeft:
		switch x.Facing {
		case TrappedChestFacingNorth:
			switch x.Waterlogged {
			case true:
				return 9121
			case false:
				return 9122
			}
		case TrappedChestFacingSouth:
			switch x.Waterlogged {
			case true:
				return 9127
			case false:
				return 9128
			}
		case TrappedChestFacingWest:
			switch x.Waterlogged {
			case true:
				return 9133
			case false:
				return 9134
			}
		case TrappedChestFacingEast:
			switch x.Waterlogged {
			case true:
				return 9139
			case false:
				return 9140
			}
		}
	case TrappedChestTypeRight:
		switch x.Facing {
		case TrappedChestFacingNorth:
			switch x.Waterlogged {
			case true:
				return 9123
			case false:
				return 9124
			}
		case TrappedChestFacingSouth:
			switch x.Waterlogged {
			case true:
				return 9129
			case false:
				return 9130
			}
		case TrappedChestFacingWest:
			switch x.Waterlogged {
			case true:
				return 9135
			case false:
				return 9136
			}
		case TrappedChestFacingEast:
			switch x.Waterlogged {
			case true:
				return 9141
			case false:
				return 9142
			}
		}
	}
	return 9120 // default state
}

type LightWeightedPressurePlate struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power int
}

func (x LightWeightedPressurePlate) Id() uint16 {
	switch x.Power {
	case 0:
		return 9143
	case 1:
		return 9144
	case 2:
		return 9145
	case 3:
		return 9146
	case 4:
		return 9147
	case 5:
		return 9148
	case 6:
		return 9149
	case 7:
		return 9150
	case 8:
		return 9151
	case 9:
		return 9152
	case 10:
		return 9153
	case 11:
		return 9154
	case 12:
		return 9155
	case 13:
		return 9156
	case 14:
		return 9157
	case 15:
		return 9158
	}
	return 9143 // default state
}

type HeavyWeightedPressurePlate struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power int
}

func (x HeavyWeightedPressurePlate) Id() uint16 {
	switch x.Power {
	case 0:
		return 9159
	case 1:
		return 9160
	case 2:
		return 9161
	case 3:
		return 9162
	case 4:
		return 9163
	case 5:
		return 9164
	case 6:
		return 9165
	case 7:
		return 9166
	case 8:
		return 9167
	case 9:
		return 9168
	case 10:
		return 9169
	case 11:
		return 9170
	case 12:
		return 9171
	case 13:
		return 9172
	case 14:
		return 9173
	case 15:
		return 9174
	}
	return 9159 // default state
}

type ComparatorFacing string

const (
	ComparatorFacingNorth ComparatorFacing = "north"
	ComparatorFacingSouth ComparatorFacing = "south"
	ComparatorFacingWest  ComparatorFacing = "west"
	ComparatorFacingEast  ComparatorFacing = "east"
)

type ComparatorMode string

const (
	ComparatorModeCompare  ComparatorMode = "compare"
	ComparatorModeSubtract ComparatorMode = "subtract"
)

type Comparator struct {
	Powered bool
	Facing  ComparatorFacing
	Mode    ComparatorMode
}

func (x Comparator) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Facing {
		case ComparatorFacingNorth:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9175
			case ComparatorModeSubtract:
				return 9177
			}
		case ComparatorFacingSouth:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9179
			case ComparatorModeSubtract:
				return 9181
			}
		case ComparatorFacingWest:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9183
			case ComparatorModeSubtract:
				return 9185
			}
		case ComparatorFacingEast:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9187
			case ComparatorModeSubtract:
				return 9189
			}
		}
	case false:
		switch x.Facing {
		case ComparatorFacingNorth:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9176
			case ComparatorModeSubtract:
				return 9178
			}
		case ComparatorFacingSouth:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9180
			case ComparatorModeSubtract:
				return 9182
			}
		case ComparatorFacingWest:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9184
			case ComparatorModeSubtract:
				return 9186
			}
		case ComparatorFacingEast:
			switch x.Mode {
			case ComparatorModeCompare:
				return 9188
			case ComparatorModeSubtract:
				return 9190
			}
		}
	}
	return 9176 // default state
}

type DaylightDetector struct {
	Inverted bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power int
}

func (x DaylightDetector) Id() uint16 {
	switch x.Inverted {
	case true:
		switch x.Power {
		case 0:
			return 9191
		case 1:
			return 9192
		case 2:
			return 9193
		case 3:
			return 9194
		case 4:
			return 9195
		case 5:
			return 9196
		case 6:
			return 9197
		case 7:
			return 9198
		case 8:
			return 9199
		case 9:
			return 9200
		case 10:
			return 9201
		case 11:
			return 9202
		case 12:
			return 9203
		case 13:
			return 9204
		case 14:
			return 9205
		case 15:
			return 9206
		}
	case false:
		switch x.Power {
		case 0:
			return 9207
		case 1:
			return 9208
		case 2:
			return 9209
		case 3:
			return 9210
		case 4:
			return 9211
		case 5:
			return 9212
		case 6:
			return 9213
		case 7:
			return 9214
		case 8:
			return 9215
		case 9:
			return 9216
		case 10:
			return 9217
		case 11:
			return 9218
		case 12:
			return 9219
		case 13:
			return 9220
		case 14:
			return 9221
		case 15:
			return 9222
		}
	}
	return 9207 // default state
}

type RedstoneBlock struct{}

func (x RedstoneBlock) Id() uint16 {
	return 9223
}

type NetherQuartzOre struct{}

func (x NetherQuartzOre) Id() uint16 {
	return 9224
}

type HopperFacing string

const (
	HopperFacingDown  HopperFacing = "down"
	HopperFacingNorth HopperFacing = "north"
	HopperFacingSouth HopperFacing = "south"
	HopperFacingWest  HopperFacing = "west"
	HopperFacingEast  HopperFacing = "east"
)

type Hopper struct {
	Enabled bool
	Facing  HopperFacing
}

func (x Hopper) Id() uint16 {
	switch x.Facing {
	case HopperFacingDown:
		switch x.Enabled {
		case true:
			return 9225
		case false:
			return 9230
		}
	case HopperFacingNorth:
		switch x.Enabled {
		case true:
			return 9226
		case false:
			return 9231
		}
	case HopperFacingSouth:
		switch x.Enabled {
		case true:
			return 9227
		case false:
			return 9232
		}
	case HopperFacingWest:
		switch x.Enabled {
		case true:
			return 9228
		case false:
			return 9233
		}
	case HopperFacingEast:
		switch x.Enabled {
		case true:
			return 9229
		case false:
			return 9234
		}
	}
	return 9225 // default state
}

type QuartzBlock struct{}

func (x QuartzBlock) Id() uint16 {
	return 9235
}

type ChiseledQuartzBlock struct{}

func (x ChiseledQuartzBlock) Id() uint16 {
	return 9236
}

type QuartzPillarAxis string

const (
	QuartzPillarAxisX QuartzPillarAxis = "x"
	QuartzPillarAxisY QuartzPillarAxis = "y"
	QuartzPillarAxisZ QuartzPillarAxis = "z"
)

type QuartzPillar struct {
	Axis QuartzPillarAxis
}

func (x QuartzPillar) Id() uint16 {
	switch x.Axis {
	case QuartzPillarAxisX:
		return 9237
	case QuartzPillarAxisY:
		return 9238
	case QuartzPillarAxisZ:
		return 9239
	}
	return 9238 // default state
}

type QuartzStairsFacing string

const (
	QuartzStairsFacingNorth QuartzStairsFacing = "north"
	QuartzStairsFacingSouth QuartzStairsFacing = "south"
	QuartzStairsFacingWest  QuartzStairsFacing = "west"
	QuartzStairsFacingEast  QuartzStairsFacing = "east"
)

type QuartzStairsHalf string

const (
	QuartzStairsHalfTop    QuartzStairsHalf = "top"
	QuartzStairsHalfBottom QuartzStairsHalf = "bottom"
)

type QuartzStairsShape string

const (
	QuartzStairsShapeStraight   QuartzStairsShape = "straight"
	QuartzStairsShapeInnerLeft  QuartzStairsShape = "inner_left"
	QuartzStairsShapeInnerRight QuartzStairsShape = "inner_right"
	QuartzStairsShapeOuterLeft  QuartzStairsShape = "outer_left"
	QuartzStairsShapeOuterRight QuartzStairsShape = "outer_right"
)

type QuartzStairs struct {
	Facing      QuartzStairsFacing
	Half        QuartzStairsHalf
	Shape       QuartzStairsShape
	Waterlogged bool
}

func (x QuartzStairs) Id() uint16 {
	switch x.Facing {
	case QuartzStairsFacingNorth:
		switch x.Half {
		case QuartzStairsHalfTop:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9240
				case false:
					return 9241
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9242
				case false:
					return 9243
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9244
				case false:
					return 9245
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9246
				case false:
					return 9247
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9248
				case false:
					return 9249
				}
			}
		case QuartzStairsHalfBottom:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9250
				case false:
					return 9251
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9252
				case false:
					return 9253
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9254
				case false:
					return 9255
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9256
				case false:
					return 9257
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9258
				case false:
					return 9259
				}
			}
		}
	case QuartzStairsFacingSouth:
		switch x.Half {
		case QuartzStairsHalfTop:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9260
				case false:
					return 9261
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9262
				case false:
					return 9263
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9264
				case false:
					return 9265
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9266
				case false:
					return 9267
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9268
				case false:
					return 9269
				}
			}
		case QuartzStairsHalfBottom:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9270
				case false:
					return 9271
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9272
				case false:
					return 9273
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9274
				case false:
					return 9275
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9276
				case false:
					return 9277
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9278
				case false:
					return 9279
				}
			}
		}
	case QuartzStairsFacingWest:
		switch x.Half {
		case QuartzStairsHalfTop:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9280
				case false:
					return 9281
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9282
				case false:
					return 9283
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9284
				case false:
					return 9285
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9286
				case false:
					return 9287
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9288
				case false:
					return 9289
				}
			}
		case QuartzStairsHalfBottom:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9290
				case false:
					return 9291
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9292
				case false:
					return 9293
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9294
				case false:
					return 9295
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9296
				case false:
					return 9297
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9298
				case false:
					return 9299
				}
			}
		}
	case QuartzStairsFacingEast:
		switch x.Half {
		case QuartzStairsHalfTop:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9300
				case false:
					return 9301
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9302
				case false:
					return 9303
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9304
				case false:
					return 9305
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9306
				case false:
					return 9307
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9308
				case false:
					return 9309
				}
			}
		case QuartzStairsHalfBottom:
			switch x.Shape {
			case QuartzStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9310
				case false:
					return 9311
				}
			case QuartzStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9312
				case false:
					return 9313
				}
			case QuartzStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9314
				case false:
					return 9315
				}
			case QuartzStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9316
				case false:
					return 9317
				}
			case QuartzStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9318
				case false:
					return 9319
				}
			}
		}
	}
	return 9251 // default state
}

type ActivatorRailShape string

const (
	ActivatorRailShapeNorthSouth     ActivatorRailShape = "north_south"
	ActivatorRailShapeEastWest       ActivatorRailShape = "east_west"
	ActivatorRailShapeAscendingEast  ActivatorRailShape = "ascending_east"
	ActivatorRailShapeAscendingWest  ActivatorRailShape = "ascending_west"
	ActivatorRailShapeAscendingNorth ActivatorRailShape = "ascending_north"
	ActivatorRailShapeAscendingSouth ActivatorRailShape = "ascending_south"
)

type ActivatorRail struct {
	Powered     bool
	Shape       ActivatorRailShape
	Waterlogged bool
}

func (x ActivatorRail) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Shape {
		case ActivatorRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 9320
			case false:
				return 9321
			}
		case ActivatorRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 9322
			case false:
				return 9323
			}
		case ActivatorRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 9324
			case false:
				return 9325
			}
		case ActivatorRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 9326
			case false:
				return 9327
			}
		case ActivatorRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 9328
			case false:
				return 9329
			}
		case ActivatorRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 9330
			case false:
				return 9331
			}
		}
	case false:
		switch x.Shape {
		case ActivatorRailShapeNorthSouth:
			switch x.Waterlogged {
			case true:
				return 9332
			case false:
				return 9333
			}
		case ActivatorRailShapeEastWest:
			switch x.Waterlogged {
			case true:
				return 9334
			case false:
				return 9335
			}
		case ActivatorRailShapeAscendingEast:
			switch x.Waterlogged {
			case true:
				return 9336
			case false:
				return 9337
			}
		case ActivatorRailShapeAscendingWest:
			switch x.Waterlogged {
			case true:
				return 9338
			case false:
				return 9339
			}
		case ActivatorRailShapeAscendingNorth:
			switch x.Waterlogged {
			case true:
				return 9340
			case false:
				return 9341
			}
		case ActivatorRailShapeAscendingSouth:
			switch x.Waterlogged {
			case true:
				return 9342
			case false:
				return 9343
			}
		}
	}
	return 9333 // default state
}

type DropperFacing string

const (
	DropperFacingNorth DropperFacing = "north"
	DropperFacingEast  DropperFacing = "east"
	DropperFacingSouth DropperFacing = "south"
	DropperFacingWest  DropperFacing = "west"
	DropperFacingUp    DropperFacing = "up"
	DropperFacingDown  DropperFacing = "down"
)

type Dropper struct {
	Facing    DropperFacing
	Triggered bool
}

func (x Dropper) Id() uint16 {
	switch x.Facing {
	case DropperFacingNorth:
		switch x.Triggered {
		case true:
			return 9344
		case false:
			return 9345
		}
	case DropperFacingEast:
		switch x.Triggered {
		case true:
			return 9346
		case false:
			return 9347
		}
	case DropperFacingSouth:
		switch x.Triggered {
		case true:
			return 9348
		case false:
			return 9349
		}
	case DropperFacingWest:
		switch x.Triggered {
		case true:
			return 9350
		case false:
			return 9351
		}
	case DropperFacingUp:
		switch x.Triggered {
		case true:
			return 9352
		case false:
			return 9353
		}
	case DropperFacingDown:
		switch x.Triggered {
		case true:
			return 9354
		case false:
			return 9355
		}
	}
	return 9345 // default state
}

type WhiteTerracotta struct{}

func (x WhiteTerracotta) Id() uint16 {
	return 9356
}

type OrangeTerracotta struct{}

func (x OrangeTerracotta) Id() uint16 {
	return 9357
}

type MagentaTerracotta struct{}

func (x MagentaTerracotta) Id() uint16 {
	return 9358
}

type LightBlueTerracotta struct{}

func (x LightBlueTerracotta) Id() uint16 {
	return 9359
}

type YellowTerracotta struct{}

func (x YellowTerracotta) Id() uint16 {
	return 9360
}

type LimeTerracotta struct{}

func (x LimeTerracotta) Id() uint16 {
	return 9361
}

type PinkTerracotta struct{}

func (x PinkTerracotta) Id() uint16 {
	return 9362
}

type GrayTerracotta struct{}

func (x GrayTerracotta) Id() uint16 {
	return 9363
}

type LightGrayTerracotta struct{}

func (x LightGrayTerracotta) Id() uint16 {
	return 9364
}

type CyanTerracotta struct{}

func (x CyanTerracotta) Id() uint16 {
	return 9365
}

type PurpleTerracotta struct{}

func (x PurpleTerracotta) Id() uint16 {
	return 9366
}

type BlueTerracotta struct{}

func (x BlueTerracotta) Id() uint16 {
	return 9367
}

type BrownTerracotta struct{}

func (x BrownTerracotta) Id() uint16 {
	return 9368
}

type GreenTerracotta struct{}

func (x GreenTerracotta) Id() uint16 {
	return 9369
}

type RedTerracotta struct{}

func (x RedTerracotta) Id() uint16 {
	return 9370
}

type BlackTerracotta struct{}

func (x BlackTerracotta) Id() uint16 {
	return 9371
}

type WhiteStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x WhiteStainedGlassPane) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9372
					case false:
						return 9376
					}
				case false:
					switch x.South {
					case true:
						return 9380
					case false:
						return 9384
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9388
					case false:
						return 9392
					}
				case false:
					switch x.South {
					case true:
						return 9396
					case false:
						return 9400
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9373
					case false:
						return 9377
					}
				case false:
					switch x.South {
					case true:
						return 9381
					case false:
						return 9385
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9389
					case false:
						return 9393
					}
				case false:
					switch x.South {
					case true:
						return 9397
					case false:
						return 9401
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9374
					case false:
						return 9378
					}
				case false:
					switch x.South {
					case true:
						return 9382
					case false:
						return 9386
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9390
					case false:
						return 9394
					}
				case false:
					switch x.South {
					case true:
						return 9398
					case false:
						return 9402
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9375
					case false:
						return 9379
					}
				case false:
					switch x.South {
					case true:
						return 9383
					case false:
						return 9387
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9391
					case false:
						return 9395
					}
				case false:
					switch x.South {
					case true:
						return 9399
					case false:
						return 9403
					}
				}
			}
		}
	}
	return 9403 // default state
}

type OrangeStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x OrangeStainedGlassPane) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9404
					case false:
						return 9408
					}
				case false:
					switch x.South {
					case true:
						return 9412
					case false:
						return 9416
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9420
					case false:
						return 9424
					}
				case false:
					switch x.South {
					case true:
						return 9428
					case false:
						return 9432
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9405
					case false:
						return 9409
					}
				case false:
					switch x.South {
					case true:
						return 9413
					case false:
						return 9417
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9421
					case false:
						return 9425
					}
				case false:
					switch x.South {
					case true:
						return 9429
					case false:
						return 9433
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9406
					case false:
						return 9410
					}
				case false:
					switch x.South {
					case true:
						return 9414
					case false:
						return 9418
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9422
					case false:
						return 9426
					}
				case false:
					switch x.South {
					case true:
						return 9430
					case false:
						return 9434
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9407
					case false:
						return 9411
					}
				case false:
					switch x.South {
					case true:
						return 9415
					case false:
						return 9419
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 9423
					case false:
						return 9427
					}
				case false:
					switch x.South {
					case true:
						return 9431
					case false:
						return 9435
					}
				}
			}
		}
	}
	return 9435 // default state
}

type MagentaStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x MagentaStainedGlassPane) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9436
					case false:
						return 9437
					}
				case false:
					switch x.West {
					case true:
						return 9438
					case false:
						return 9439
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9440
					case false:
						return 9441
					}
				case false:
					switch x.West {
					case true:
						return 9442
					case false:
						return 9443
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9444
					case false:
						return 9445
					}
				case false:
					switch x.West {
					case true:
						return 9446
					case false:
						return 9447
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9448
					case false:
						return 9449
					}
				case false:
					switch x.West {
					case true:
						return 9450
					case false:
						return 9451
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9452
					case false:
						return 9453
					}
				case false:
					switch x.West {
					case true:
						return 9454
					case false:
						return 9455
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9456
					case false:
						return 9457
					}
				case false:
					switch x.West {
					case true:
						return 9458
					case false:
						return 9459
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9460
					case false:
						return 9461
					}
				case false:
					switch x.West {
					case true:
						return 9462
					case false:
						return 9463
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9464
					case false:
						return 9465
					}
				case false:
					switch x.West {
					case true:
						return 9466
					case false:
						return 9467
					}
				}
			}
		}
	}
	return 9467 // default state
}

type LightBlueStainedGlassPane struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x LightBlueStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9468
					case false:
						return 9470
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9472
					case false:
						return 9474
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9476
					case false:
						return 9478
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9480
					case false:
						return 9482
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9484
					case false:
						return 9486
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9488
					case false:
						return 9490
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9492
					case false:
						return 9494
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9496
					case false:
						return 9498
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9469
					case false:
						return 9471
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9473
					case false:
						return 9475
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9477
					case false:
						return 9479
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9481
					case false:
						return 9483
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9485
					case false:
						return 9487
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9489
					case false:
						return 9491
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9493
					case false:
						return 9495
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9497
					case false:
						return 9499
					}
				}
			}
		}
	}
	return 9499 // default state
}

type YellowStainedGlassPane struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x YellowStainedGlassPane) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9500
					case false:
						return 9501
					}
				case false:
					switch x.West {
					case true:
						return 9502
					case false:
						return 9503
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9504
					case false:
						return 9505
					}
				case false:
					switch x.West {
					case true:
						return 9506
					case false:
						return 9507
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9508
					case false:
						return 9509
					}
				case false:
					switch x.West {
					case true:
						return 9510
					case false:
						return 9511
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9512
					case false:
						return 9513
					}
				case false:
					switch x.West {
					case true:
						return 9514
					case false:
						return 9515
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9516
					case false:
						return 9517
					}
				case false:
					switch x.West {
					case true:
						return 9518
					case false:
						return 9519
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9520
					case false:
						return 9521
					}
				case false:
					switch x.West {
					case true:
						return 9522
					case false:
						return 9523
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9524
					case false:
						return 9525
					}
				case false:
					switch x.West {
					case true:
						return 9526
					case false:
						return 9527
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9528
					case false:
						return 9529
					}
				case false:
					switch x.West {
					case true:
						return 9530
					case false:
						return 9531
					}
				}
			}
		}
	}
	return 9531 // default state
}

type LimeStainedGlassPane struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x LimeStainedGlassPane) Id() uint16 {
	switch x.South {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9532
					case false:
						return 9540
					}
				case false:
					switch x.North {
					case true:
						return 9548
					case false:
						return 9556
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9533
					case false:
						return 9541
					}
				case false:
					switch x.North {
					case true:
						return 9549
					case false:
						return 9557
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9534
					case false:
						return 9542
					}
				case false:
					switch x.North {
					case true:
						return 9550
					case false:
						return 9558
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9535
					case false:
						return 9543
					}
				case false:
					switch x.North {
					case true:
						return 9551
					case false:
						return 9559
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9536
					case false:
						return 9544
					}
				case false:
					switch x.North {
					case true:
						return 9552
					case false:
						return 9560
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9537
					case false:
						return 9545
					}
				case false:
					switch x.North {
					case true:
						return 9553
					case false:
						return 9561
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9538
					case false:
						return 9546
					}
				case false:
					switch x.North {
					case true:
						return 9554
					case false:
						return 9562
					}
				}
			case false:
				switch x.East {
				case true:
					switch x.North {
					case true:
						return 9539
					case false:
						return 9547
					}
				case false:
					switch x.North {
					case true:
						return 9555
					case false:
						return 9563
					}
				}
			}
		}
	}
	return 9563 // default state
}

type PinkStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x PinkStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9564
					case false:
						return 9566
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9568
					case false:
						return 9570
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9572
					case false:
						return 9574
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9576
					case false:
						return 9578
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9580
					case false:
						return 9582
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9584
					case false:
						return 9586
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9588
					case false:
						return 9590
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9592
					case false:
						return 9594
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9565
					case false:
						return 9567
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9569
					case false:
						return 9571
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9573
					case false:
						return 9575
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9577
					case false:
						return 9579
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9581
					case false:
						return 9583
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9585
					case false:
						return 9587
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9589
					case false:
						return 9591
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9593
					case false:
						return 9595
					}
				}
			}
		}
	}
	return 9595 // default state
}

type GrayStainedGlassPane struct {
	West        bool
	East        bool
	North       bool
	South       bool
	Waterlogged bool
}

func (x GrayStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9596
					case false:
						return 9598
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9600
					case false:
						return 9602
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9604
					case false:
						return 9606
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9608
					case false:
						return 9610
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9612
					case false:
						return 9614
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9616
					case false:
						return 9618
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9620
					case false:
						return 9622
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9624
					case false:
						return 9626
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9597
					case false:
						return 9599
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9601
					case false:
						return 9603
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9605
					case false:
						return 9607
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9609
					case false:
						return 9611
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9613
					case false:
						return 9615
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9617
					case false:
						return 9619
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9621
					case false:
						return 9623
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9625
					case false:
						return 9627
					}
				}
			}
		}
	}
	return 9627 // default state
}

type LightGrayStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x LightGrayStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9628
					case false:
						return 9630
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9632
					case false:
						return 9634
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9636
					case false:
						return 9638
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9640
					case false:
						return 9642
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9644
					case false:
						return 9646
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9648
					case false:
						return 9650
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9652
					case false:
						return 9654
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9656
					case false:
						return 9658
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9629
					case false:
						return 9631
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9633
					case false:
						return 9635
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9637
					case false:
						return 9639
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9641
					case false:
						return 9643
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9645
					case false:
						return 9647
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9649
					case false:
						return 9651
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9653
					case false:
						return 9655
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9657
					case false:
						return 9659
					}
				}
			}
		}
	}
	return 9659 // default state
}

type CyanStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x CyanStainedGlassPane) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9660
					case false:
						return 9676
					}
				case false:
					switch x.East {
					case true:
						return 9661
					case false:
						return 9677
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9662
					case false:
						return 9678
					}
				case false:
					switch x.East {
					case true:
						return 9663
					case false:
						return 9679
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9664
					case false:
						return 9680
					}
				case false:
					switch x.East {
					case true:
						return 9665
					case false:
						return 9681
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9666
					case false:
						return 9682
					}
				case false:
					switch x.East {
					case true:
						return 9667
					case false:
						return 9683
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9668
					case false:
						return 9684
					}
				case false:
					switch x.East {
					case true:
						return 9669
					case false:
						return 9685
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9670
					case false:
						return 9686
					}
				case false:
					switch x.East {
					case true:
						return 9671
					case false:
						return 9687
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9672
					case false:
						return 9688
					}
				case false:
					switch x.East {
					case true:
						return 9673
					case false:
						return 9689
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9674
					case false:
						return 9690
					}
				case false:
					switch x.East {
					case true:
						return 9675
					case false:
						return 9691
					}
				}
			}
		}
	}
	return 9691 // default state
}

type PurpleStainedGlassPane struct {
	West        bool
	East        bool
	North       bool
	South       bool
	Waterlogged bool
}

func (x PurpleStainedGlassPane) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9692
					case false:
						return 9708
					}
				case false:
					switch x.East {
					case true:
						return 9693
					case false:
						return 9709
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9694
					case false:
						return 9710
					}
				case false:
					switch x.East {
					case true:
						return 9695
					case false:
						return 9711
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9696
					case false:
						return 9712
					}
				case false:
					switch x.East {
					case true:
						return 9697
					case false:
						return 9713
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9698
					case false:
						return 9714
					}
				case false:
					switch x.East {
					case true:
						return 9699
					case false:
						return 9715
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9700
					case false:
						return 9716
					}
				case false:
					switch x.East {
					case true:
						return 9701
					case false:
						return 9717
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9702
					case false:
						return 9718
					}
				case false:
					switch x.East {
					case true:
						return 9703
					case false:
						return 9719
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9704
					case false:
						return 9720
					}
				case false:
					switch x.East {
					case true:
						return 9705
					case false:
						return 9721
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 9706
					case false:
						return 9722
					}
				case false:
					switch x.East {
					case true:
						return 9707
					case false:
						return 9723
					}
				}
			}
		}
	}
	return 9723 // default state
}

type BlueStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x BlueStainedGlassPane) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9724
					case false:
						return 9725
					}
				case false:
					switch x.West {
					case true:
						return 9726
					case false:
						return 9727
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9728
					case false:
						return 9729
					}
				case false:
					switch x.West {
					case true:
						return 9730
					case false:
						return 9731
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9732
					case false:
						return 9733
					}
				case false:
					switch x.West {
					case true:
						return 9734
					case false:
						return 9735
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9736
					case false:
						return 9737
					}
				case false:
					switch x.West {
					case true:
						return 9738
					case false:
						return 9739
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9740
					case false:
						return 9741
					}
				case false:
					switch x.West {
					case true:
						return 9742
					case false:
						return 9743
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9744
					case false:
						return 9745
					}
				case false:
					switch x.West {
					case true:
						return 9746
					case false:
						return 9747
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9748
					case false:
						return 9749
					}
				case false:
					switch x.West {
					case true:
						return 9750
					case false:
						return 9751
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9752
					case false:
						return 9753
					}
				case false:
					switch x.West {
					case true:
						return 9754
					case false:
						return 9755
					}
				}
			}
		}
	}
	return 9755 // default state
}

type BrownStainedGlassPane struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x BrownStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9756
					case false:
						return 9758
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9760
					case false:
						return 9762
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9764
					case false:
						return 9766
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9768
					case false:
						return 9770
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9772
					case false:
						return 9774
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9776
					case false:
						return 9778
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9780
					case false:
						return 9782
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9784
					case false:
						return 9786
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9757
					case false:
						return 9759
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9761
					case false:
						return 9763
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9765
					case false:
						return 9767
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9769
					case false:
						return 9771
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9773
					case false:
						return 9775
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9777
					case false:
						return 9779
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9781
					case false:
						return 9783
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9785
					case false:
						return 9787
					}
				}
			}
		}
	}
	return 9787 // default state
}

type GreenStainedGlassPane struct {
	West        bool
	East        bool
	North       bool
	South       bool
	Waterlogged bool
}

func (x GreenStainedGlassPane) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9788
					case false:
						return 9790
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9792
					case false:
						return 9794
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9796
					case false:
						return 9798
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9800
					case false:
						return 9802
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9804
					case false:
						return 9806
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9808
					case false:
						return 9810
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9812
					case false:
						return 9814
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9816
					case false:
						return 9818
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9789
					case false:
						return 9791
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9793
					case false:
						return 9795
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9797
					case false:
						return 9799
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9801
					case false:
						return 9803
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9805
					case false:
						return 9807
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9809
					case false:
						return 9811
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 9813
					case false:
						return 9815
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 9817
					case false:
						return 9819
					}
				}
			}
		}
	}
	return 9819 // default state
}

type RedStainedGlassPane struct {
	West        bool
	East        bool
	North       bool
	South       bool
	Waterlogged bool
}

func (x RedStainedGlassPane) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9820
					case false:
						return 9821
					}
				case false:
					switch x.West {
					case true:
						return 9822
					case false:
						return 9823
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9824
					case false:
						return 9825
					}
				case false:
					switch x.West {
					case true:
						return 9826
					case false:
						return 9827
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9828
					case false:
						return 9829
					}
				case false:
					switch x.West {
					case true:
						return 9830
					case false:
						return 9831
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9832
					case false:
						return 9833
					}
				case false:
					switch x.West {
					case true:
						return 9834
					case false:
						return 9835
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9836
					case false:
						return 9837
					}
				case false:
					switch x.West {
					case true:
						return 9838
					case false:
						return 9839
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9840
					case false:
						return 9841
					}
				case false:
					switch x.West {
					case true:
						return 9842
					case false:
						return 9843
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9844
					case false:
						return 9845
					}
				case false:
					switch x.West {
					case true:
						return 9846
					case false:
						return 9847
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9848
					case false:
						return 9849
					}
				case false:
					switch x.West {
					case true:
						return 9850
					case false:
						return 9851
					}
				}
			}
		}
	}
	return 9851 // default state
}

type BlackStainedGlassPane struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x BlackStainedGlassPane) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9852
					case false:
						return 9853
					}
				case false:
					switch x.West {
					case true:
						return 9854
					case false:
						return 9855
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9856
					case false:
						return 9857
					}
				case false:
					switch x.West {
					case true:
						return 9858
					case false:
						return 9859
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9860
					case false:
						return 9861
					}
				case false:
					switch x.West {
					case true:
						return 9862
					case false:
						return 9863
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9864
					case false:
						return 9865
					}
				case false:
					switch x.West {
					case true:
						return 9866
					case false:
						return 9867
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9868
					case false:
						return 9869
					}
				case false:
					switch x.West {
					case true:
						return 9870
					case false:
						return 9871
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9872
					case false:
						return 9873
					}
				case false:
					switch x.West {
					case true:
						return 9874
					case false:
						return 9875
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9876
					case false:
						return 9877
					}
				case false:
					switch x.West {
					case true:
						return 9878
					case false:
						return 9879
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 9880
					case false:
						return 9881
					}
				case false:
					switch x.West {
					case true:
						return 9882
					case false:
						return 9883
					}
				}
			}
		}
	}
	return 9883 // default state
}

type AcaciaStairsFacing string

const (
	AcaciaStairsFacingNorth AcaciaStairsFacing = "north"
	AcaciaStairsFacingSouth AcaciaStairsFacing = "south"
	AcaciaStairsFacingWest  AcaciaStairsFacing = "west"
	AcaciaStairsFacingEast  AcaciaStairsFacing = "east"
)

type AcaciaStairsHalf string

const (
	AcaciaStairsHalfTop    AcaciaStairsHalf = "top"
	AcaciaStairsHalfBottom AcaciaStairsHalf = "bottom"
)

type AcaciaStairsShape string

const (
	AcaciaStairsShapeStraight   AcaciaStairsShape = "straight"
	AcaciaStairsShapeInnerLeft  AcaciaStairsShape = "inner_left"
	AcaciaStairsShapeInnerRight AcaciaStairsShape = "inner_right"
	AcaciaStairsShapeOuterLeft  AcaciaStairsShape = "outer_left"
	AcaciaStairsShapeOuterRight AcaciaStairsShape = "outer_right"
)

type AcaciaStairs struct {
	Facing      AcaciaStairsFacing
	Half        AcaciaStairsHalf
	Shape       AcaciaStairsShape
	Waterlogged bool
}

func (x AcaciaStairs) Id() uint16 {
	switch x.Facing {
	case AcaciaStairsFacingNorth:
		switch x.Half {
		case AcaciaStairsHalfTop:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9884
				case false:
					return 9885
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9886
				case false:
					return 9887
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9888
				case false:
					return 9889
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9890
				case false:
					return 9891
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9892
				case false:
					return 9893
				}
			}
		case AcaciaStairsHalfBottom:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9894
				case false:
					return 9895
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9896
				case false:
					return 9897
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9898
				case false:
					return 9899
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9900
				case false:
					return 9901
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9902
				case false:
					return 9903
				}
			}
		}
	case AcaciaStairsFacingSouth:
		switch x.Half {
		case AcaciaStairsHalfTop:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9904
				case false:
					return 9905
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9906
				case false:
					return 9907
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9908
				case false:
					return 9909
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9910
				case false:
					return 9911
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9912
				case false:
					return 9913
				}
			}
		case AcaciaStairsHalfBottom:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9914
				case false:
					return 9915
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9916
				case false:
					return 9917
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9918
				case false:
					return 9919
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9920
				case false:
					return 9921
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9922
				case false:
					return 9923
				}
			}
		}
	case AcaciaStairsFacingWest:
		switch x.Half {
		case AcaciaStairsHalfTop:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9924
				case false:
					return 9925
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9926
				case false:
					return 9927
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9928
				case false:
					return 9929
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9930
				case false:
					return 9931
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9932
				case false:
					return 9933
				}
			}
		case AcaciaStairsHalfBottom:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9934
				case false:
					return 9935
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9936
				case false:
					return 9937
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9938
				case false:
					return 9939
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9940
				case false:
					return 9941
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9942
				case false:
					return 9943
				}
			}
		}
	case AcaciaStairsFacingEast:
		switch x.Half {
		case AcaciaStairsHalfTop:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9944
				case false:
					return 9945
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9946
				case false:
					return 9947
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9948
				case false:
					return 9949
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9950
				case false:
					return 9951
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9952
				case false:
					return 9953
				}
			}
		case AcaciaStairsHalfBottom:
			switch x.Shape {
			case AcaciaStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 9954
				case false:
					return 9955
				}
			case AcaciaStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 9956
				case false:
					return 9957
				}
			case AcaciaStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 9958
				case false:
					return 9959
				}
			case AcaciaStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 9960
				case false:
					return 9961
				}
			case AcaciaStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 9962
				case false:
					return 9963
				}
			}
		}
	}
	return 9895 // default state
}

type CherryStairsShape string

const (
	CherryStairsShapeStraight   CherryStairsShape = "straight"
	CherryStairsShapeInnerLeft  CherryStairsShape = "inner_left"
	CherryStairsShapeInnerRight CherryStairsShape = "inner_right"
	CherryStairsShapeOuterLeft  CherryStairsShape = "outer_left"
	CherryStairsShapeOuterRight CherryStairsShape = "outer_right"
)

type CherryStairsFacing string

const (
	CherryStairsFacingNorth CherryStairsFacing = "north"
	CherryStairsFacingSouth CherryStairsFacing = "south"
	CherryStairsFacingWest  CherryStairsFacing = "west"
	CherryStairsFacingEast  CherryStairsFacing = "east"
)

type CherryStairsHalf string

const (
	CherryStairsHalfTop    CherryStairsHalf = "top"
	CherryStairsHalfBottom CherryStairsHalf = "bottom"
)

type CherryStairs struct {
	Shape       CherryStairsShape
	Waterlogged bool
	Facing      CherryStairsFacing
	Half        CherryStairsHalf
}

func (x CherryStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CherryStairsFacingNorth:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9964
				case CherryStairsShapeInnerLeft:
					return 9966
				case CherryStairsShapeInnerRight:
					return 9968
				case CherryStairsShapeOuterLeft:
					return 9970
				case CherryStairsShapeOuterRight:
					return 9972
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9974
				case CherryStairsShapeInnerLeft:
					return 9976
				case CherryStairsShapeInnerRight:
					return 9978
				case CherryStairsShapeOuterLeft:
					return 9980
				case CherryStairsShapeOuterRight:
					return 9982
				}
			}
		case CherryStairsFacingSouth:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9984
				case CherryStairsShapeInnerLeft:
					return 9986
				case CherryStairsShapeInnerRight:
					return 9988
				case CherryStairsShapeOuterLeft:
					return 9990
				case CherryStairsShapeOuterRight:
					return 9992
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9994
				case CherryStairsShapeInnerLeft:
					return 9996
				case CherryStairsShapeInnerRight:
					return 9998
				case CherryStairsShapeOuterLeft:
					return 10000
				case CherryStairsShapeOuterRight:
					return 10002
				}
			}
		case CherryStairsFacingWest:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10004
				case CherryStairsShapeInnerLeft:
					return 10006
				case CherryStairsShapeInnerRight:
					return 10008
				case CherryStairsShapeOuterLeft:
					return 10010
				case CherryStairsShapeOuterRight:
					return 10012
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10014
				case CherryStairsShapeInnerLeft:
					return 10016
				case CherryStairsShapeInnerRight:
					return 10018
				case CherryStairsShapeOuterLeft:
					return 10020
				case CherryStairsShapeOuterRight:
					return 10022
				}
			}
		case CherryStairsFacingEast:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10024
				case CherryStairsShapeInnerLeft:
					return 10026
				case CherryStairsShapeInnerRight:
					return 10028
				case CherryStairsShapeOuterLeft:
					return 10030
				case CherryStairsShapeOuterRight:
					return 10032
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10034
				case CherryStairsShapeInnerLeft:
					return 10036
				case CherryStairsShapeInnerRight:
					return 10038
				case CherryStairsShapeOuterLeft:
					return 10040
				case CherryStairsShapeOuterRight:
					return 10042
				}
			}
		}
	case false:
		switch x.Facing {
		case CherryStairsFacingNorth:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9965
				case CherryStairsShapeInnerLeft:
					return 9967
				case CherryStairsShapeInnerRight:
					return 9969
				case CherryStairsShapeOuterLeft:
					return 9971
				case CherryStairsShapeOuterRight:
					return 9973
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9975
				case CherryStairsShapeInnerLeft:
					return 9977
				case CherryStairsShapeInnerRight:
					return 9979
				case CherryStairsShapeOuterLeft:
					return 9981
				case CherryStairsShapeOuterRight:
					return 9983
				}
			}
		case CherryStairsFacingSouth:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9985
				case CherryStairsShapeInnerLeft:
					return 9987
				case CherryStairsShapeInnerRight:
					return 9989
				case CherryStairsShapeOuterLeft:
					return 9991
				case CherryStairsShapeOuterRight:
					return 9993
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 9995
				case CherryStairsShapeInnerLeft:
					return 9997
				case CherryStairsShapeInnerRight:
					return 9999
				case CherryStairsShapeOuterLeft:
					return 10001
				case CherryStairsShapeOuterRight:
					return 10003
				}
			}
		case CherryStairsFacingWest:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10005
				case CherryStairsShapeInnerLeft:
					return 10007
				case CherryStairsShapeInnerRight:
					return 10009
				case CherryStairsShapeOuterLeft:
					return 10011
				case CherryStairsShapeOuterRight:
					return 10013
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10015
				case CherryStairsShapeInnerLeft:
					return 10017
				case CherryStairsShapeInnerRight:
					return 10019
				case CherryStairsShapeOuterLeft:
					return 10021
				case CherryStairsShapeOuterRight:
					return 10023
				}
			}
		case CherryStairsFacingEast:
			switch x.Half {
			case CherryStairsHalfTop:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10025
				case CherryStairsShapeInnerLeft:
					return 10027
				case CherryStairsShapeInnerRight:
					return 10029
				case CherryStairsShapeOuterLeft:
					return 10031
				case CherryStairsShapeOuterRight:
					return 10033
				}
			case CherryStairsHalfBottom:
				switch x.Shape {
				case CherryStairsShapeStraight:
					return 10035
				case CherryStairsShapeInnerLeft:
					return 10037
				case CherryStairsShapeInnerRight:
					return 10039
				case CherryStairsShapeOuterLeft:
					return 10041
				case CherryStairsShapeOuterRight:
					return 10043
				}
			}
		}
	}
	return 9975 // default state
}

type DarkOakStairsHalf string

const (
	DarkOakStairsHalfTop    DarkOakStairsHalf = "top"
	DarkOakStairsHalfBottom DarkOakStairsHalf = "bottom"
)

type DarkOakStairsShape string

const (
	DarkOakStairsShapeStraight   DarkOakStairsShape = "straight"
	DarkOakStairsShapeInnerLeft  DarkOakStairsShape = "inner_left"
	DarkOakStairsShapeInnerRight DarkOakStairsShape = "inner_right"
	DarkOakStairsShapeOuterLeft  DarkOakStairsShape = "outer_left"
	DarkOakStairsShapeOuterRight DarkOakStairsShape = "outer_right"
)

type DarkOakStairsFacing string

const (
	DarkOakStairsFacingNorth DarkOakStairsFacing = "north"
	DarkOakStairsFacingSouth DarkOakStairsFacing = "south"
	DarkOakStairsFacingWest  DarkOakStairsFacing = "west"
	DarkOakStairsFacingEast  DarkOakStairsFacing = "east"
)

type DarkOakStairs struct {
	Half        DarkOakStairsHalf
	Shape       DarkOakStairsShape
	Waterlogged bool
	Facing      DarkOakStairsFacing
}

func (x DarkOakStairs) Id() uint16 {
	switch x.Facing {
	case DarkOakStairsFacingNorth:
		switch x.Half {
		case DarkOakStairsHalfTop:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10044
				case false:
					return 10045
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10046
				case false:
					return 10047
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10048
				case false:
					return 10049
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10050
				case false:
					return 10051
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10052
				case false:
					return 10053
				}
			}
		case DarkOakStairsHalfBottom:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10054
				case false:
					return 10055
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10056
				case false:
					return 10057
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10058
				case false:
					return 10059
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10060
				case false:
					return 10061
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10062
				case false:
					return 10063
				}
			}
		}
	case DarkOakStairsFacingSouth:
		switch x.Half {
		case DarkOakStairsHalfTop:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10064
				case false:
					return 10065
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10066
				case false:
					return 10067
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10068
				case false:
					return 10069
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10070
				case false:
					return 10071
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10072
				case false:
					return 10073
				}
			}
		case DarkOakStairsHalfBottom:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10074
				case false:
					return 10075
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10076
				case false:
					return 10077
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10078
				case false:
					return 10079
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10080
				case false:
					return 10081
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10082
				case false:
					return 10083
				}
			}
		}
	case DarkOakStairsFacingWest:
		switch x.Half {
		case DarkOakStairsHalfTop:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10084
				case false:
					return 10085
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10086
				case false:
					return 10087
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10088
				case false:
					return 10089
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10090
				case false:
					return 10091
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10092
				case false:
					return 10093
				}
			}
		case DarkOakStairsHalfBottom:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10094
				case false:
					return 10095
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10096
				case false:
					return 10097
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10098
				case false:
					return 10099
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10100
				case false:
					return 10101
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10102
				case false:
					return 10103
				}
			}
		}
	case DarkOakStairsFacingEast:
		switch x.Half {
		case DarkOakStairsHalfTop:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10104
				case false:
					return 10105
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10106
				case false:
					return 10107
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10108
				case false:
					return 10109
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10110
				case false:
					return 10111
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10112
				case false:
					return 10113
				}
			}
		case DarkOakStairsHalfBottom:
			switch x.Shape {
			case DarkOakStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10114
				case false:
					return 10115
				}
			case DarkOakStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10116
				case false:
					return 10117
				}
			case DarkOakStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10118
				case false:
					return 10119
				}
			case DarkOakStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10120
				case false:
					return 10121
				}
			case DarkOakStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10122
				case false:
					return 10123
				}
			}
		}
	}
	return 10055 // default state
}

type MangroveStairsHalf string

const (
	MangroveStairsHalfTop    MangroveStairsHalf = "top"
	MangroveStairsHalfBottom MangroveStairsHalf = "bottom"
)

type MangroveStairsShape string

const (
	MangroveStairsShapeStraight   MangroveStairsShape = "straight"
	MangroveStairsShapeInnerLeft  MangroveStairsShape = "inner_left"
	MangroveStairsShapeInnerRight MangroveStairsShape = "inner_right"
	MangroveStairsShapeOuterLeft  MangroveStairsShape = "outer_left"
	MangroveStairsShapeOuterRight MangroveStairsShape = "outer_right"
)

type MangroveStairsFacing string

const (
	MangroveStairsFacingNorth MangroveStairsFacing = "north"
	MangroveStairsFacingSouth MangroveStairsFacing = "south"
	MangroveStairsFacingWest  MangroveStairsFacing = "west"
	MangroveStairsFacingEast  MangroveStairsFacing = "east"
)

type MangroveStairs struct {
	Half        MangroveStairsHalf
	Shape       MangroveStairsShape
	Waterlogged bool
	Facing      MangroveStairsFacing
}

func (x MangroveStairs) Id() uint16 {
	switch x.Shape {
	case MangroveStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10124
				case MangroveStairsHalfBottom:
					return 10134
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10144
				case MangroveStairsHalfBottom:
					return 10154
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10164
				case MangroveStairsHalfBottom:
					return 10174
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10184
				case MangroveStairsHalfBottom:
					return 10194
				}
			}
		case false:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10125
				case MangroveStairsHalfBottom:
					return 10135
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10145
				case MangroveStairsHalfBottom:
					return 10155
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10165
				case MangroveStairsHalfBottom:
					return 10175
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10185
				case MangroveStairsHalfBottom:
					return 10195
				}
			}
		}
	case MangroveStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10126
				case MangroveStairsHalfBottom:
					return 10136
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10146
				case MangroveStairsHalfBottom:
					return 10156
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10166
				case MangroveStairsHalfBottom:
					return 10176
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10186
				case MangroveStairsHalfBottom:
					return 10196
				}
			}
		case false:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10127
				case MangroveStairsHalfBottom:
					return 10137
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10147
				case MangroveStairsHalfBottom:
					return 10157
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10167
				case MangroveStairsHalfBottom:
					return 10177
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10187
				case MangroveStairsHalfBottom:
					return 10197
				}
			}
		}
	case MangroveStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10128
				case MangroveStairsHalfBottom:
					return 10138
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10148
				case MangroveStairsHalfBottom:
					return 10158
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10168
				case MangroveStairsHalfBottom:
					return 10178
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10188
				case MangroveStairsHalfBottom:
					return 10198
				}
			}
		case false:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10129
				case MangroveStairsHalfBottom:
					return 10139
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10149
				case MangroveStairsHalfBottom:
					return 10159
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10169
				case MangroveStairsHalfBottom:
					return 10179
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10189
				case MangroveStairsHalfBottom:
					return 10199
				}
			}
		}
	case MangroveStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10130
				case MangroveStairsHalfBottom:
					return 10140
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10150
				case MangroveStairsHalfBottom:
					return 10160
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10170
				case MangroveStairsHalfBottom:
					return 10180
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10190
				case MangroveStairsHalfBottom:
					return 10200
				}
			}
		case false:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10131
				case MangroveStairsHalfBottom:
					return 10141
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10151
				case MangroveStairsHalfBottom:
					return 10161
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10171
				case MangroveStairsHalfBottom:
					return 10181
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10191
				case MangroveStairsHalfBottom:
					return 10201
				}
			}
		}
	case MangroveStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10132
				case MangroveStairsHalfBottom:
					return 10142
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10152
				case MangroveStairsHalfBottom:
					return 10162
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10172
				case MangroveStairsHalfBottom:
					return 10182
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10192
				case MangroveStairsHalfBottom:
					return 10202
				}
			}
		case false:
			switch x.Facing {
			case MangroveStairsFacingNorth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10133
				case MangroveStairsHalfBottom:
					return 10143
				}
			case MangroveStairsFacingSouth:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10153
				case MangroveStairsHalfBottom:
					return 10163
				}
			case MangroveStairsFacingWest:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10173
				case MangroveStairsHalfBottom:
					return 10183
				}
			case MangroveStairsFacingEast:
				switch x.Half {
				case MangroveStairsHalfTop:
					return 10193
				case MangroveStairsHalfBottom:
					return 10203
				}
			}
		}
	}
	return 10135 // default state
}

type BambooStairsShape string

const (
	BambooStairsShapeStraight   BambooStairsShape = "straight"
	BambooStairsShapeInnerLeft  BambooStairsShape = "inner_left"
	BambooStairsShapeInnerRight BambooStairsShape = "inner_right"
	BambooStairsShapeOuterLeft  BambooStairsShape = "outer_left"
	BambooStairsShapeOuterRight BambooStairsShape = "outer_right"
)

type BambooStairsFacing string

const (
	BambooStairsFacingNorth BambooStairsFacing = "north"
	BambooStairsFacingSouth BambooStairsFacing = "south"
	BambooStairsFacingWest  BambooStairsFacing = "west"
	BambooStairsFacingEast  BambooStairsFacing = "east"
)

type BambooStairsHalf string

const (
	BambooStairsHalfTop    BambooStairsHalf = "top"
	BambooStairsHalfBottom BambooStairsHalf = "bottom"
)

type BambooStairs struct {
	Shape       BambooStairsShape
	Waterlogged bool
	Facing      BambooStairsFacing
	Half        BambooStairsHalf
}

func (x BambooStairs) Id() uint16 {
	switch x.Facing {
	case BambooStairsFacingNorth:
		switch x.Half {
		case BambooStairsHalfTop:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10204
				case false:
					return 10205
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10206
				case false:
					return 10207
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10208
				case false:
					return 10209
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10210
				case false:
					return 10211
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10212
				case false:
					return 10213
				}
			}
		case BambooStairsHalfBottom:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10214
				case false:
					return 10215
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10216
				case false:
					return 10217
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10218
				case false:
					return 10219
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10220
				case false:
					return 10221
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10222
				case false:
					return 10223
				}
			}
		}
	case BambooStairsFacingSouth:
		switch x.Half {
		case BambooStairsHalfTop:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10224
				case false:
					return 10225
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10226
				case false:
					return 10227
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10228
				case false:
					return 10229
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10230
				case false:
					return 10231
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10232
				case false:
					return 10233
				}
			}
		case BambooStairsHalfBottom:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10234
				case false:
					return 10235
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10236
				case false:
					return 10237
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10238
				case false:
					return 10239
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10240
				case false:
					return 10241
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10242
				case false:
					return 10243
				}
			}
		}
	case BambooStairsFacingWest:
		switch x.Half {
		case BambooStairsHalfTop:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10244
				case false:
					return 10245
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10246
				case false:
					return 10247
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10248
				case false:
					return 10249
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10250
				case false:
					return 10251
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10252
				case false:
					return 10253
				}
			}
		case BambooStairsHalfBottom:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10254
				case false:
					return 10255
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10256
				case false:
					return 10257
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10258
				case false:
					return 10259
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10260
				case false:
					return 10261
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10262
				case false:
					return 10263
				}
			}
		}
	case BambooStairsFacingEast:
		switch x.Half {
		case BambooStairsHalfTop:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10264
				case false:
					return 10265
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10266
				case false:
					return 10267
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10268
				case false:
					return 10269
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10270
				case false:
					return 10271
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10272
				case false:
					return 10273
				}
			}
		case BambooStairsHalfBottom:
			switch x.Shape {
			case BambooStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10274
				case false:
					return 10275
				}
			case BambooStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10276
				case false:
					return 10277
				}
			case BambooStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10278
				case false:
					return 10279
				}
			case BambooStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10280
				case false:
					return 10281
				}
			case BambooStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10282
				case false:
					return 10283
				}
			}
		}
	}
	return 10215 // default state
}

type BambooMosaicStairsHalf string

const (
	BambooMosaicStairsHalfTop    BambooMosaicStairsHalf = "top"
	BambooMosaicStairsHalfBottom BambooMosaicStairsHalf = "bottom"
)

type BambooMosaicStairsShape string

const (
	BambooMosaicStairsShapeStraight   BambooMosaicStairsShape = "straight"
	BambooMosaicStairsShapeInnerLeft  BambooMosaicStairsShape = "inner_left"
	BambooMosaicStairsShapeInnerRight BambooMosaicStairsShape = "inner_right"
	BambooMosaicStairsShapeOuterLeft  BambooMosaicStairsShape = "outer_left"
	BambooMosaicStairsShapeOuterRight BambooMosaicStairsShape = "outer_right"
)

type BambooMosaicStairsFacing string

const (
	BambooMosaicStairsFacingNorth BambooMosaicStairsFacing = "north"
	BambooMosaicStairsFacingSouth BambooMosaicStairsFacing = "south"
	BambooMosaicStairsFacingWest  BambooMosaicStairsFacing = "west"
	BambooMosaicStairsFacingEast  BambooMosaicStairsFacing = "east"
)

type BambooMosaicStairs struct {
	Half        BambooMosaicStairsHalf
	Shape       BambooMosaicStairsShape
	Waterlogged bool
	Facing      BambooMosaicStairsFacing
}

func (x BambooMosaicStairs) Id() uint16 {
	switch x.Shape {
	case BambooMosaicStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10284
				case BambooMosaicStairsHalfBottom:
					return 10294
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10304
				case BambooMosaicStairsHalfBottom:
					return 10314
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10324
				case BambooMosaicStairsHalfBottom:
					return 10334
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10344
				case BambooMosaicStairsHalfBottom:
					return 10354
				}
			}
		case false:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10285
				case BambooMosaicStairsHalfBottom:
					return 10295
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10305
				case BambooMosaicStairsHalfBottom:
					return 10315
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10325
				case BambooMosaicStairsHalfBottom:
					return 10335
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10345
				case BambooMosaicStairsHalfBottom:
					return 10355
				}
			}
		}
	case BambooMosaicStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10286
				case BambooMosaicStairsHalfBottom:
					return 10296
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10306
				case BambooMosaicStairsHalfBottom:
					return 10316
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10326
				case BambooMosaicStairsHalfBottom:
					return 10336
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10346
				case BambooMosaicStairsHalfBottom:
					return 10356
				}
			}
		case false:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10287
				case BambooMosaicStairsHalfBottom:
					return 10297
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10307
				case BambooMosaicStairsHalfBottom:
					return 10317
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10327
				case BambooMosaicStairsHalfBottom:
					return 10337
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10347
				case BambooMosaicStairsHalfBottom:
					return 10357
				}
			}
		}
	case BambooMosaicStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10288
				case BambooMosaicStairsHalfBottom:
					return 10298
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10308
				case BambooMosaicStairsHalfBottom:
					return 10318
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10328
				case BambooMosaicStairsHalfBottom:
					return 10338
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10348
				case BambooMosaicStairsHalfBottom:
					return 10358
				}
			}
		case false:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10289
				case BambooMosaicStairsHalfBottom:
					return 10299
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10309
				case BambooMosaicStairsHalfBottom:
					return 10319
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10329
				case BambooMosaicStairsHalfBottom:
					return 10339
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10349
				case BambooMosaicStairsHalfBottom:
					return 10359
				}
			}
		}
	case BambooMosaicStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10290
				case BambooMosaicStairsHalfBottom:
					return 10300
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10310
				case BambooMosaicStairsHalfBottom:
					return 10320
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10330
				case BambooMosaicStairsHalfBottom:
					return 10340
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10350
				case BambooMosaicStairsHalfBottom:
					return 10360
				}
			}
		case false:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10291
				case BambooMosaicStairsHalfBottom:
					return 10301
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10311
				case BambooMosaicStairsHalfBottom:
					return 10321
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10331
				case BambooMosaicStairsHalfBottom:
					return 10341
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10351
				case BambooMosaicStairsHalfBottom:
					return 10361
				}
			}
		}
	case BambooMosaicStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10292
				case BambooMosaicStairsHalfBottom:
					return 10302
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10312
				case BambooMosaicStairsHalfBottom:
					return 10322
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10332
				case BambooMosaicStairsHalfBottom:
					return 10342
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10352
				case BambooMosaicStairsHalfBottom:
					return 10362
				}
			}
		case false:
			switch x.Facing {
			case BambooMosaicStairsFacingNorth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10293
				case BambooMosaicStairsHalfBottom:
					return 10303
				}
			case BambooMosaicStairsFacingSouth:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10313
				case BambooMosaicStairsHalfBottom:
					return 10323
				}
			case BambooMosaicStairsFacingWest:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10333
				case BambooMosaicStairsHalfBottom:
					return 10343
				}
			case BambooMosaicStairsFacingEast:
				switch x.Half {
				case BambooMosaicStairsHalfTop:
					return 10353
				case BambooMosaicStairsHalfBottom:
					return 10363
				}
			}
		}
	}
	return 10295 // default state
}

type SlimeBlock struct{}

func (x SlimeBlock) Id() uint16 {
	return 10364
}

type Barrier struct {
	Waterlogged bool
}

func (x Barrier) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 10365
	case false:
		return 10366
	}
	return 10366 // default state
}

type Light struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Level       int
	Waterlogged bool
}

func (x Light) Id() uint16 {
	switch x.Level {
	case 0:
		switch x.Waterlogged {
		case true:
			return 10367
		case false:
			return 10368
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 10369
		case false:
			return 10370
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 10371
		case false:
			return 10372
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 10373
		case false:
			return 10374
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 10375
		case false:
			return 10376
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 10377
		case false:
			return 10378
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 10379
		case false:
			return 10380
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 10381
		case false:
			return 10382
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 10383
		case false:
			return 10384
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 10385
		case false:
			return 10386
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 10387
		case false:
			return 10388
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 10389
		case false:
			return 10390
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 10391
		case false:
			return 10392
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 10393
		case false:
			return 10394
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 10395
		case false:
			return 10396
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 10397
		case false:
			return 10398
		}
	}
	return 10398 // default state
}

type IronTrapdoorFacing string

const (
	IronTrapdoorFacingNorth IronTrapdoorFacing = "north"
	IronTrapdoorFacingSouth IronTrapdoorFacing = "south"
	IronTrapdoorFacingWest  IronTrapdoorFacing = "west"
	IronTrapdoorFacingEast  IronTrapdoorFacing = "east"
)

type IronTrapdoorHalf string

const (
	IronTrapdoorHalfTop    IronTrapdoorHalf = "top"
	IronTrapdoorHalfBottom IronTrapdoorHalf = "bottom"
)

type IronTrapdoor struct {
	Facing      IronTrapdoorFacing
	Half        IronTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x IronTrapdoor) Id() uint16 {
	switch x.Half {
	case IronTrapdoorHalfTop:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10399
					case IronTrapdoorFacingSouth:
						return 10415
					case IronTrapdoorFacingWest:
						return 10431
					case IronTrapdoorFacingEast:
						return 10447
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10400
					case IronTrapdoorFacingSouth:
						return 10416
					case IronTrapdoorFacingWest:
						return 10432
					case IronTrapdoorFacingEast:
						return 10448
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10401
					case IronTrapdoorFacingSouth:
						return 10417
					case IronTrapdoorFacingWest:
						return 10433
					case IronTrapdoorFacingEast:
						return 10449
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10402
					case IronTrapdoorFacingSouth:
						return 10418
					case IronTrapdoorFacingWest:
						return 10434
					case IronTrapdoorFacingEast:
						return 10450
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10403
					case IronTrapdoorFacingSouth:
						return 10419
					case IronTrapdoorFacingWest:
						return 10435
					case IronTrapdoorFacingEast:
						return 10451
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10404
					case IronTrapdoorFacingSouth:
						return 10420
					case IronTrapdoorFacingWest:
						return 10436
					case IronTrapdoorFacingEast:
						return 10452
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10405
					case IronTrapdoorFacingSouth:
						return 10421
					case IronTrapdoorFacingWest:
						return 10437
					case IronTrapdoorFacingEast:
						return 10453
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10406
					case IronTrapdoorFacingSouth:
						return 10422
					case IronTrapdoorFacingWest:
						return 10438
					case IronTrapdoorFacingEast:
						return 10454
					}
				}
			}
		}
	case IronTrapdoorHalfBottom:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10407
					case IronTrapdoorFacingSouth:
						return 10423
					case IronTrapdoorFacingWest:
						return 10439
					case IronTrapdoorFacingEast:
						return 10455
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10408
					case IronTrapdoorFacingSouth:
						return 10424
					case IronTrapdoorFacingWest:
						return 10440
					case IronTrapdoorFacingEast:
						return 10456
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10409
					case IronTrapdoorFacingSouth:
						return 10425
					case IronTrapdoorFacingWest:
						return 10441
					case IronTrapdoorFacingEast:
						return 10457
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10410
					case IronTrapdoorFacingSouth:
						return 10426
					case IronTrapdoorFacingWest:
						return 10442
					case IronTrapdoorFacingEast:
						return 10458
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10411
					case IronTrapdoorFacingSouth:
						return 10427
					case IronTrapdoorFacingWest:
						return 10443
					case IronTrapdoorFacingEast:
						return 10459
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10412
					case IronTrapdoorFacingSouth:
						return 10428
					case IronTrapdoorFacingWest:
						return 10444
					case IronTrapdoorFacingEast:
						return 10460
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10413
					case IronTrapdoorFacingSouth:
						return 10429
					case IronTrapdoorFacingWest:
						return 10445
					case IronTrapdoorFacingEast:
						return 10461
					}
				case false:
					switch x.Facing {
					case IronTrapdoorFacingNorth:
						return 10414
					case IronTrapdoorFacingSouth:
						return 10430
					case IronTrapdoorFacingWest:
						return 10446
					case IronTrapdoorFacingEast:
						return 10462
					}
				}
			}
		}
	}
	return 10414 // default state
}

type Prismarine struct{}

func (x Prismarine) Id() uint16 {
	return 10463
}

type PrismarineBricks struct{}

func (x PrismarineBricks) Id() uint16 {
	return 10464
}

type DarkPrismarine struct{}

func (x DarkPrismarine) Id() uint16 {
	return 10465
}

type PrismarineStairsFacing string

const (
	PrismarineStairsFacingNorth PrismarineStairsFacing = "north"
	PrismarineStairsFacingSouth PrismarineStairsFacing = "south"
	PrismarineStairsFacingWest  PrismarineStairsFacing = "west"
	PrismarineStairsFacingEast  PrismarineStairsFacing = "east"
)

type PrismarineStairsHalf string

const (
	PrismarineStairsHalfTop    PrismarineStairsHalf = "top"
	PrismarineStairsHalfBottom PrismarineStairsHalf = "bottom"
)

type PrismarineStairsShape string

const (
	PrismarineStairsShapeStraight   PrismarineStairsShape = "straight"
	PrismarineStairsShapeInnerLeft  PrismarineStairsShape = "inner_left"
	PrismarineStairsShapeInnerRight PrismarineStairsShape = "inner_right"
	PrismarineStairsShapeOuterLeft  PrismarineStairsShape = "outer_left"
	PrismarineStairsShapeOuterRight PrismarineStairsShape = "outer_right"
)

type PrismarineStairs struct {
	Facing      PrismarineStairsFacing
	Half        PrismarineStairsHalf
	Shape       PrismarineStairsShape
	Waterlogged bool
}

func (x PrismarineStairs) Id() uint16 {
	switch x.Facing {
	case PrismarineStairsFacingNorth:
		switch x.Half {
		case PrismarineStairsHalfTop:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10466
				case false:
					return 10467
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10468
				case false:
					return 10469
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10470
				case false:
					return 10471
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10472
				case false:
					return 10473
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10474
				case false:
					return 10475
				}
			}
		case PrismarineStairsHalfBottom:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10476
				case false:
					return 10477
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10478
				case false:
					return 10479
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10480
				case false:
					return 10481
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10482
				case false:
					return 10483
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10484
				case false:
					return 10485
				}
			}
		}
	case PrismarineStairsFacingSouth:
		switch x.Half {
		case PrismarineStairsHalfTop:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10486
				case false:
					return 10487
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10488
				case false:
					return 10489
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10490
				case false:
					return 10491
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10492
				case false:
					return 10493
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10494
				case false:
					return 10495
				}
			}
		case PrismarineStairsHalfBottom:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10496
				case false:
					return 10497
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10498
				case false:
					return 10499
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10500
				case false:
					return 10501
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10502
				case false:
					return 10503
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10504
				case false:
					return 10505
				}
			}
		}
	case PrismarineStairsFacingWest:
		switch x.Half {
		case PrismarineStairsHalfTop:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10506
				case false:
					return 10507
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10508
				case false:
					return 10509
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10510
				case false:
					return 10511
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10512
				case false:
					return 10513
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10514
				case false:
					return 10515
				}
			}
		case PrismarineStairsHalfBottom:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10516
				case false:
					return 10517
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10518
				case false:
					return 10519
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10520
				case false:
					return 10521
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10522
				case false:
					return 10523
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10524
				case false:
					return 10525
				}
			}
		}
	case PrismarineStairsFacingEast:
		switch x.Half {
		case PrismarineStairsHalfTop:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10526
				case false:
					return 10527
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10528
				case false:
					return 10529
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10530
				case false:
					return 10531
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10532
				case false:
					return 10533
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10534
				case false:
					return 10535
				}
			}
		case PrismarineStairsHalfBottom:
			switch x.Shape {
			case PrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10536
				case false:
					return 10537
				}
			case PrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10538
				case false:
					return 10539
				}
			case PrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10540
				case false:
					return 10541
				}
			case PrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10542
				case false:
					return 10543
				}
			case PrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10544
				case false:
					return 10545
				}
			}
		}
	}
	return 10477 // default state
}

type PrismarineBrickStairsHalf string

const (
	PrismarineBrickStairsHalfTop    PrismarineBrickStairsHalf = "top"
	PrismarineBrickStairsHalfBottom PrismarineBrickStairsHalf = "bottom"
)

type PrismarineBrickStairsShape string

const (
	PrismarineBrickStairsShapeStraight   PrismarineBrickStairsShape = "straight"
	PrismarineBrickStairsShapeInnerLeft  PrismarineBrickStairsShape = "inner_left"
	PrismarineBrickStairsShapeInnerRight PrismarineBrickStairsShape = "inner_right"
	PrismarineBrickStairsShapeOuterLeft  PrismarineBrickStairsShape = "outer_left"
	PrismarineBrickStairsShapeOuterRight PrismarineBrickStairsShape = "outer_right"
)

type PrismarineBrickStairsFacing string

const (
	PrismarineBrickStairsFacingNorth PrismarineBrickStairsFacing = "north"
	PrismarineBrickStairsFacingSouth PrismarineBrickStairsFacing = "south"
	PrismarineBrickStairsFacingWest  PrismarineBrickStairsFacing = "west"
	PrismarineBrickStairsFacingEast  PrismarineBrickStairsFacing = "east"
)

type PrismarineBrickStairs struct {
	Half        PrismarineBrickStairsHalf
	Shape       PrismarineBrickStairsShape
	Waterlogged bool
	Facing      PrismarineBrickStairsFacing
}

func (x PrismarineBrickStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case PrismarineBrickStairsFacingNorth:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10546
				case PrismarineBrickStairsShapeInnerLeft:
					return 10548
				case PrismarineBrickStairsShapeInnerRight:
					return 10550
				case PrismarineBrickStairsShapeOuterLeft:
					return 10552
				case PrismarineBrickStairsShapeOuterRight:
					return 10554
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10556
				case PrismarineBrickStairsShapeInnerLeft:
					return 10558
				case PrismarineBrickStairsShapeInnerRight:
					return 10560
				case PrismarineBrickStairsShapeOuterLeft:
					return 10562
				case PrismarineBrickStairsShapeOuterRight:
					return 10564
				}
			}
		case PrismarineBrickStairsFacingSouth:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10566
				case PrismarineBrickStairsShapeInnerLeft:
					return 10568
				case PrismarineBrickStairsShapeInnerRight:
					return 10570
				case PrismarineBrickStairsShapeOuterLeft:
					return 10572
				case PrismarineBrickStairsShapeOuterRight:
					return 10574
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10576
				case PrismarineBrickStairsShapeInnerLeft:
					return 10578
				case PrismarineBrickStairsShapeInnerRight:
					return 10580
				case PrismarineBrickStairsShapeOuterLeft:
					return 10582
				case PrismarineBrickStairsShapeOuterRight:
					return 10584
				}
			}
		case PrismarineBrickStairsFacingWest:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10586
				case PrismarineBrickStairsShapeInnerLeft:
					return 10588
				case PrismarineBrickStairsShapeInnerRight:
					return 10590
				case PrismarineBrickStairsShapeOuterLeft:
					return 10592
				case PrismarineBrickStairsShapeOuterRight:
					return 10594
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10596
				case PrismarineBrickStairsShapeInnerLeft:
					return 10598
				case PrismarineBrickStairsShapeInnerRight:
					return 10600
				case PrismarineBrickStairsShapeOuterLeft:
					return 10602
				case PrismarineBrickStairsShapeOuterRight:
					return 10604
				}
			}
		case PrismarineBrickStairsFacingEast:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10606
				case PrismarineBrickStairsShapeInnerLeft:
					return 10608
				case PrismarineBrickStairsShapeInnerRight:
					return 10610
				case PrismarineBrickStairsShapeOuterLeft:
					return 10612
				case PrismarineBrickStairsShapeOuterRight:
					return 10614
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10616
				case PrismarineBrickStairsShapeInnerLeft:
					return 10618
				case PrismarineBrickStairsShapeInnerRight:
					return 10620
				case PrismarineBrickStairsShapeOuterLeft:
					return 10622
				case PrismarineBrickStairsShapeOuterRight:
					return 10624
				}
			}
		}
	case false:
		switch x.Facing {
		case PrismarineBrickStairsFacingNorth:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10547
				case PrismarineBrickStairsShapeInnerLeft:
					return 10549
				case PrismarineBrickStairsShapeInnerRight:
					return 10551
				case PrismarineBrickStairsShapeOuterLeft:
					return 10553
				case PrismarineBrickStairsShapeOuterRight:
					return 10555
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10557
				case PrismarineBrickStairsShapeInnerLeft:
					return 10559
				case PrismarineBrickStairsShapeInnerRight:
					return 10561
				case PrismarineBrickStairsShapeOuterLeft:
					return 10563
				case PrismarineBrickStairsShapeOuterRight:
					return 10565
				}
			}
		case PrismarineBrickStairsFacingSouth:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10567
				case PrismarineBrickStairsShapeInnerLeft:
					return 10569
				case PrismarineBrickStairsShapeInnerRight:
					return 10571
				case PrismarineBrickStairsShapeOuterLeft:
					return 10573
				case PrismarineBrickStairsShapeOuterRight:
					return 10575
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10577
				case PrismarineBrickStairsShapeInnerLeft:
					return 10579
				case PrismarineBrickStairsShapeInnerRight:
					return 10581
				case PrismarineBrickStairsShapeOuterLeft:
					return 10583
				case PrismarineBrickStairsShapeOuterRight:
					return 10585
				}
			}
		case PrismarineBrickStairsFacingWest:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10587
				case PrismarineBrickStairsShapeInnerLeft:
					return 10589
				case PrismarineBrickStairsShapeInnerRight:
					return 10591
				case PrismarineBrickStairsShapeOuterLeft:
					return 10593
				case PrismarineBrickStairsShapeOuterRight:
					return 10595
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10597
				case PrismarineBrickStairsShapeInnerLeft:
					return 10599
				case PrismarineBrickStairsShapeInnerRight:
					return 10601
				case PrismarineBrickStairsShapeOuterLeft:
					return 10603
				case PrismarineBrickStairsShapeOuterRight:
					return 10605
				}
			}
		case PrismarineBrickStairsFacingEast:
			switch x.Half {
			case PrismarineBrickStairsHalfTop:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10607
				case PrismarineBrickStairsShapeInnerLeft:
					return 10609
				case PrismarineBrickStairsShapeInnerRight:
					return 10611
				case PrismarineBrickStairsShapeOuterLeft:
					return 10613
				case PrismarineBrickStairsShapeOuterRight:
					return 10615
				}
			case PrismarineBrickStairsHalfBottom:
				switch x.Shape {
				case PrismarineBrickStairsShapeStraight:
					return 10617
				case PrismarineBrickStairsShapeInnerLeft:
					return 10619
				case PrismarineBrickStairsShapeInnerRight:
					return 10621
				case PrismarineBrickStairsShapeOuterLeft:
					return 10623
				case PrismarineBrickStairsShapeOuterRight:
					return 10625
				}
			}
		}
	}
	return 10557 // default state
}

type DarkPrismarineStairsFacing string

const (
	DarkPrismarineStairsFacingNorth DarkPrismarineStairsFacing = "north"
	DarkPrismarineStairsFacingSouth DarkPrismarineStairsFacing = "south"
	DarkPrismarineStairsFacingWest  DarkPrismarineStairsFacing = "west"
	DarkPrismarineStairsFacingEast  DarkPrismarineStairsFacing = "east"
)

type DarkPrismarineStairsHalf string

const (
	DarkPrismarineStairsHalfTop    DarkPrismarineStairsHalf = "top"
	DarkPrismarineStairsHalfBottom DarkPrismarineStairsHalf = "bottom"
)

type DarkPrismarineStairsShape string

const (
	DarkPrismarineStairsShapeStraight   DarkPrismarineStairsShape = "straight"
	DarkPrismarineStairsShapeInnerLeft  DarkPrismarineStairsShape = "inner_left"
	DarkPrismarineStairsShapeInnerRight DarkPrismarineStairsShape = "inner_right"
	DarkPrismarineStairsShapeOuterLeft  DarkPrismarineStairsShape = "outer_left"
	DarkPrismarineStairsShapeOuterRight DarkPrismarineStairsShape = "outer_right"
)

type DarkPrismarineStairs struct {
	Facing      DarkPrismarineStairsFacing
	Half        DarkPrismarineStairsHalf
	Shape       DarkPrismarineStairsShape
	Waterlogged bool
}

func (x DarkPrismarineStairs) Id() uint16 {
	switch x.Facing {
	case DarkPrismarineStairsFacingNorth:
		switch x.Half {
		case DarkPrismarineStairsHalfTop:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10626
				case false:
					return 10627
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10628
				case false:
					return 10629
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10630
				case false:
					return 10631
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10632
				case false:
					return 10633
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10634
				case false:
					return 10635
				}
			}
		case DarkPrismarineStairsHalfBottom:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10636
				case false:
					return 10637
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10638
				case false:
					return 10639
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10640
				case false:
					return 10641
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10642
				case false:
					return 10643
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10644
				case false:
					return 10645
				}
			}
		}
	case DarkPrismarineStairsFacingSouth:
		switch x.Half {
		case DarkPrismarineStairsHalfTop:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10646
				case false:
					return 10647
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10648
				case false:
					return 10649
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10650
				case false:
					return 10651
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10652
				case false:
					return 10653
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10654
				case false:
					return 10655
				}
			}
		case DarkPrismarineStairsHalfBottom:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10656
				case false:
					return 10657
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10658
				case false:
					return 10659
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10660
				case false:
					return 10661
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10662
				case false:
					return 10663
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10664
				case false:
					return 10665
				}
			}
		}
	case DarkPrismarineStairsFacingWest:
		switch x.Half {
		case DarkPrismarineStairsHalfTop:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10666
				case false:
					return 10667
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10668
				case false:
					return 10669
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10670
				case false:
					return 10671
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10672
				case false:
					return 10673
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10674
				case false:
					return 10675
				}
			}
		case DarkPrismarineStairsHalfBottom:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10676
				case false:
					return 10677
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10678
				case false:
					return 10679
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10680
				case false:
					return 10681
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10682
				case false:
					return 10683
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10684
				case false:
					return 10685
				}
			}
		}
	case DarkPrismarineStairsFacingEast:
		switch x.Half {
		case DarkPrismarineStairsHalfTop:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10686
				case false:
					return 10687
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10688
				case false:
					return 10689
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10690
				case false:
					return 10691
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10692
				case false:
					return 10693
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10694
				case false:
					return 10695
				}
			}
		case DarkPrismarineStairsHalfBottom:
			switch x.Shape {
			case DarkPrismarineStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 10696
				case false:
					return 10697
				}
			case DarkPrismarineStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 10698
				case false:
					return 10699
				}
			case DarkPrismarineStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 10700
				case false:
					return 10701
				}
			case DarkPrismarineStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 10702
				case false:
					return 10703
				}
			case DarkPrismarineStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 10704
				case false:
					return 10705
				}
			}
		}
	}
	return 10637 // default state
}

type PrismarineSlabType string

const (
	PrismarineSlabTypeTop    PrismarineSlabType = "top"
	PrismarineSlabTypeBottom PrismarineSlabType = "bottom"
	PrismarineSlabTypeDouble PrismarineSlabType = "double"
)

type PrismarineSlab struct {
	Waterlogged bool
	Type        PrismarineSlabType
}

func (x PrismarineSlab) Id() uint16 {
	switch x.Type {
	case PrismarineSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 10706
		case false:
			return 10707
		}
	case PrismarineSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 10708
		case false:
			return 10709
		}
	case PrismarineSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 10710
		case false:
			return 10711
		}
	}
	return 10709 // default state
}

type PrismarineBrickSlabType string

const (
	PrismarineBrickSlabTypeTop    PrismarineBrickSlabType = "top"
	PrismarineBrickSlabTypeBottom PrismarineBrickSlabType = "bottom"
	PrismarineBrickSlabTypeDouble PrismarineBrickSlabType = "double"
)

type PrismarineBrickSlab struct {
	Type        PrismarineBrickSlabType
	Waterlogged bool
}

func (x PrismarineBrickSlab) Id() uint16 {
	switch x.Type {
	case PrismarineBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 10712
		case false:
			return 10713
		}
	case PrismarineBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 10714
		case false:
			return 10715
		}
	case PrismarineBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 10716
		case false:
			return 10717
		}
	}
	return 10715 // default state
}

type DarkPrismarineSlabType string

const (
	DarkPrismarineSlabTypeTop    DarkPrismarineSlabType = "top"
	DarkPrismarineSlabTypeBottom DarkPrismarineSlabType = "bottom"
	DarkPrismarineSlabTypeDouble DarkPrismarineSlabType = "double"
)

type DarkPrismarineSlab struct {
	Type        DarkPrismarineSlabType
	Waterlogged bool
}

func (x DarkPrismarineSlab) Id() uint16 {
	switch x.Type {
	case DarkPrismarineSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 10718
		case false:
			return 10719
		}
	case DarkPrismarineSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 10720
		case false:
			return 10721
		}
	case DarkPrismarineSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 10722
		case false:
			return 10723
		}
	}
	return 10721 // default state
}

type SeaLantern struct{}

func (x SeaLantern) Id() uint16 {
	return 10724
}

type HayBlockAxis string

const (
	HayBlockAxisX HayBlockAxis = "x"
	HayBlockAxisY HayBlockAxis = "y"
	HayBlockAxisZ HayBlockAxis = "z"
)

type HayBlock struct {
	Axis HayBlockAxis
}

func (x HayBlock) Id() uint16 {
	switch x.Axis {
	case HayBlockAxisX:
		return 10725
	case HayBlockAxisY:
		return 10726
	case HayBlockAxisZ:
		return 10727
	}
	return 10726 // default state
}

type WhiteCarpet struct{}

func (x WhiteCarpet) Id() uint16 {
	return 10728
}

type OrangeCarpet struct{}

func (x OrangeCarpet) Id() uint16 {
	return 10729
}

type MagentaCarpet struct{}

func (x MagentaCarpet) Id() uint16 {
	return 10730
}

type LightBlueCarpet struct{}

func (x LightBlueCarpet) Id() uint16 {
	return 10731
}

type YellowCarpet struct{}

func (x YellowCarpet) Id() uint16 {
	return 10732
}

type LimeCarpet struct{}

func (x LimeCarpet) Id() uint16 {
	return 10733
}

type PinkCarpet struct{}

func (x PinkCarpet) Id() uint16 {
	return 10734
}

type GrayCarpet struct{}

func (x GrayCarpet) Id() uint16 {
	return 10735
}

type LightGrayCarpet struct{}

func (x LightGrayCarpet) Id() uint16 {
	return 10736
}

type CyanCarpet struct{}

func (x CyanCarpet) Id() uint16 {
	return 10737
}

type PurpleCarpet struct{}

func (x PurpleCarpet) Id() uint16 {
	return 10738
}

type BlueCarpet struct{}

func (x BlueCarpet) Id() uint16 {
	return 10739
}

type BrownCarpet struct{}

func (x BrownCarpet) Id() uint16 {
	return 10740
}

type GreenCarpet struct{}

func (x GreenCarpet) Id() uint16 {
	return 10741
}

type RedCarpet struct{}

func (x RedCarpet) Id() uint16 {
	return 10742
}

type BlackCarpet struct{}

func (x BlackCarpet) Id() uint16 {
	return 10743
}

type Terracotta struct{}

func (x Terracotta) Id() uint16 {
	return 10744
}

type CoalBlock struct{}

func (x CoalBlock) Id() uint16 {
	return 10745
}

type PackedIce struct{}

func (x PackedIce) Id() uint16 {
	return 10746
}

type SunflowerHalf string

const (
	SunflowerHalfUpper SunflowerHalf = "upper"
	SunflowerHalfLower SunflowerHalf = "lower"
)

type Sunflower struct {
	Half SunflowerHalf
}

func (x Sunflower) Id() uint16 {
	switch x.Half {
	case SunflowerHalfUpper:
		return 10747
	case SunflowerHalfLower:
		return 10748
	}
	return 10748 // default state
}

type LilacHalf string

const (
	LilacHalfUpper LilacHalf = "upper"
	LilacHalfLower LilacHalf = "lower"
)

type Lilac struct {
	Half LilacHalf
}

func (x Lilac) Id() uint16 {
	switch x.Half {
	case LilacHalfUpper:
		return 10749
	case LilacHalfLower:
		return 10750
	}
	return 10750 // default state
}

type RoseBushHalf string

const (
	RoseBushHalfUpper RoseBushHalf = "upper"
	RoseBushHalfLower RoseBushHalf = "lower"
)

type RoseBush struct {
	Half RoseBushHalf
}

func (x RoseBush) Id() uint16 {
	switch x.Half {
	case RoseBushHalfUpper:
		return 10751
	case RoseBushHalfLower:
		return 10752
	}
	return 10752 // default state
}

type PeonyHalf string

const (
	PeonyHalfUpper PeonyHalf = "upper"
	PeonyHalfLower PeonyHalf = "lower"
)

type Peony struct {
	Half PeonyHalf
}

func (x Peony) Id() uint16 {
	switch x.Half {
	case PeonyHalfUpper:
		return 10753
	case PeonyHalfLower:
		return 10754
	}
	return 10754 // default state
}

type TallGrassHalf string

const (
	TallGrassHalfUpper TallGrassHalf = "upper"
	TallGrassHalfLower TallGrassHalf = "lower"
)

type TallGrass struct {
	Half TallGrassHalf
}

func (x TallGrass) Id() uint16 {
	switch x.Half {
	case TallGrassHalfUpper:
		return 10755
	case TallGrassHalfLower:
		return 10756
	}
	return 10756 // default state
}

type LargeFernHalf string

const (
	LargeFernHalfUpper LargeFernHalf = "upper"
	LargeFernHalfLower LargeFernHalf = "lower"
)

type LargeFern struct {
	Half LargeFernHalf
}

func (x LargeFern) Id() uint16 {
	switch x.Half {
	case LargeFernHalfUpper:
		return 10757
	case LargeFernHalfLower:
		return 10758
	}
	return 10758 // default state
}

type WhiteBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x WhiteBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10759
	case 1:
		return 10760
	case 2:
		return 10761
	case 3:
		return 10762
	case 4:
		return 10763
	case 5:
		return 10764
	case 6:
		return 10765
	case 7:
		return 10766
	case 8:
		return 10767
	case 9:
		return 10768
	case 10:
		return 10769
	case 11:
		return 10770
	case 12:
		return 10771
	case 13:
		return 10772
	case 14:
		return 10773
	case 15:
		return 10774
	}
	return 10759 // default state
}

type OrangeBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x OrangeBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10775
	case 1:
		return 10776
	case 2:
		return 10777
	case 3:
		return 10778
	case 4:
		return 10779
	case 5:
		return 10780
	case 6:
		return 10781
	case 7:
		return 10782
	case 8:
		return 10783
	case 9:
		return 10784
	case 10:
		return 10785
	case 11:
		return 10786
	case 12:
		return 10787
	case 13:
		return 10788
	case 14:
		return 10789
	case 15:
		return 10790
	}
	return 10775 // default state
}

type MagentaBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x MagentaBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10791
	case 1:
		return 10792
	case 2:
		return 10793
	case 3:
		return 10794
	case 4:
		return 10795
	case 5:
		return 10796
	case 6:
		return 10797
	case 7:
		return 10798
	case 8:
		return 10799
	case 9:
		return 10800
	case 10:
		return 10801
	case 11:
		return 10802
	case 12:
		return 10803
	case 13:
		return 10804
	case 14:
		return 10805
	case 15:
		return 10806
	}
	return 10791 // default state
}

type LightBlueBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x LightBlueBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10807
	case 1:
		return 10808
	case 2:
		return 10809
	case 3:
		return 10810
	case 4:
		return 10811
	case 5:
		return 10812
	case 6:
		return 10813
	case 7:
		return 10814
	case 8:
		return 10815
	case 9:
		return 10816
	case 10:
		return 10817
	case 11:
		return 10818
	case 12:
		return 10819
	case 13:
		return 10820
	case 14:
		return 10821
	case 15:
		return 10822
	}
	return 10807 // default state
}

type YellowBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x YellowBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10823
	case 1:
		return 10824
	case 2:
		return 10825
	case 3:
		return 10826
	case 4:
		return 10827
	case 5:
		return 10828
	case 6:
		return 10829
	case 7:
		return 10830
	case 8:
		return 10831
	case 9:
		return 10832
	case 10:
		return 10833
	case 11:
		return 10834
	case 12:
		return 10835
	case 13:
		return 10836
	case 14:
		return 10837
	case 15:
		return 10838
	}
	return 10823 // default state
}

type LimeBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x LimeBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10839
	case 1:
		return 10840
	case 2:
		return 10841
	case 3:
		return 10842
	case 4:
		return 10843
	case 5:
		return 10844
	case 6:
		return 10845
	case 7:
		return 10846
	case 8:
		return 10847
	case 9:
		return 10848
	case 10:
		return 10849
	case 11:
		return 10850
	case 12:
		return 10851
	case 13:
		return 10852
	case 14:
		return 10853
	case 15:
		return 10854
	}
	return 10839 // default state
}

type PinkBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x PinkBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10855
	case 1:
		return 10856
	case 2:
		return 10857
	case 3:
		return 10858
	case 4:
		return 10859
	case 5:
		return 10860
	case 6:
		return 10861
	case 7:
		return 10862
	case 8:
		return 10863
	case 9:
		return 10864
	case 10:
		return 10865
	case 11:
		return 10866
	case 12:
		return 10867
	case 13:
		return 10868
	case 14:
		return 10869
	case 15:
		return 10870
	}
	return 10855 // default state
}

type GrayBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x GrayBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10871
	case 1:
		return 10872
	case 2:
		return 10873
	case 3:
		return 10874
	case 4:
		return 10875
	case 5:
		return 10876
	case 6:
		return 10877
	case 7:
		return 10878
	case 8:
		return 10879
	case 9:
		return 10880
	case 10:
		return 10881
	case 11:
		return 10882
	case 12:
		return 10883
	case 13:
		return 10884
	case 14:
		return 10885
	case 15:
		return 10886
	}
	return 10871 // default state
}

type LightGrayBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x LightGrayBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10887
	case 1:
		return 10888
	case 2:
		return 10889
	case 3:
		return 10890
	case 4:
		return 10891
	case 5:
		return 10892
	case 6:
		return 10893
	case 7:
		return 10894
	case 8:
		return 10895
	case 9:
		return 10896
	case 10:
		return 10897
	case 11:
		return 10898
	case 12:
		return 10899
	case 13:
		return 10900
	case 14:
		return 10901
	case 15:
		return 10902
	}
	return 10887 // default state
}

type CyanBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x CyanBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10903
	case 1:
		return 10904
	case 2:
		return 10905
	case 3:
		return 10906
	case 4:
		return 10907
	case 5:
		return 10908
	case 6:
		return 10909
	case 7:
		return 10910
	case 8:
		return 10911
	case 9:
		return 10912
	case 10:
		return 10913
	case 11:
		return 10914
	case 12:
		return 10915
	case 13:
		return 10916
	case 14:
		return 10917
	case 15:
		return 10918
	}
	return 10903 // default state
}

type PurpleBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x PurpleBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10919
	case 1:
		return 10920
	case 2:
		return 10921
	case 3:
		return 10922
	case 4:
		return 10923
	case 5:
		return 10924
	case 6:
		return 10925
	case 7:
		return 10926
	case 8:
		return 10927
	case 9:
		return 10928
	case 10:
		return 10929
	case 11:
		return 10930
	case 12:
		return 10931
	case 13:
		return 10932
	case 14:
		return 10933
	case 15:
		return 10934
	}
	return 10919 // default state
}

type BlueBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x BlueBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10935
	case 1:
		return 10936
	case 2:
		return 10937
	case 3:
		return 10938
	case 4:
		return 10939
	case 5:
		return 10940
	case 6:
		return 10941
	case 7:
		return 10942
	case 8:
		return 10943
	case 9:
		return 10944
	case 10:
		return 10945
	case 11:
		return 10946
	case 12:
		return 10947
	case 13:
		return 10948
	case 14:
		return 10949
	case 15:
		return 10950
	}
	return 10935 // default state
}

type BrownBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x BrownBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10951
	case 1:
		return 10952
	case 2:
		return 10953
	case 3:
		return 10954
	case 4:
		return 10955
	case 5:
		return 10956
	case 6:
		return 10957
	case 7:
		return 10958
	case 8:
		return 10959
	case 9:
		return 10960
	case 10:
		return 10961
	case 11:
		return 10962
	case 12:
		return 10963
	case 13:
		return 10964
	case 14:
		return 10965
	case 15:
		return 10966
	}
	return 10951 // default state
}

type GreenBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x GreenBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10967
	case 1:
		return 10968
	case 2:
		return 10969
	case 3:
		return 10970
	case 4:
		return 10971
	case 5:
		return 10972
	case 6:
		return 10973
	case 7:
		return 10974
	case 8:
		return 10975
	case 9:
		return 10976
	case 10:
		return 10977
	case 11:
		return 10978
	case 12:
		return 10979
	case 13:
		return 10980
	case 14:
		return 10981
	case 15:
		return 10982
	}
	return 10967 // default state
}

type RedBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x RedBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10983
	case 1:
		return 10984
	case 2:
		return 10985
	case 3:
		return 10986
	case 4:
		return 10987
	case 5:
		return 10988
	case 6:
		return 10989
	case 7:
		return 10990
	case 8:
		return 10991
	case 9:
		return 10992
	case 10:
		return 10993
	case 11:
		return 10994
	case 12:
		return 10995
	case 13:
		return 10996
	case 14:
		return 10997
	case 15:
		return 10998
	}
	return 10983 // default state
}

type BlackBanner struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation int
}

func (x BlackBanner) Id() uint16 {
	switch x.Rotation {
	case 0:
		return 10999
	case 1:
		return 11000
	case 2:
		return 11001
	case 3:
		return 11002
	case 4:
		return 11003
	case 5:
		return 11004
	case 6:
		return 11005
	case 7:
		return 11006
	case 8:
		return 11007
	case 9:
		return 11008
	case 10:
		return 11009
	case 11:
		return 11010
	case 12:
		return 11011
	case 13:
		return 11012
	case 14:
		return 11013
	case 15:
		return 11014
	}
	return 10999 // default state
}

type WhiteWallBannerFacing string

const (
	WhiteWallBannerFacingNorth WhiteWallBannerFacing = "north"
	WhiteWallBannerFacingSouth WhiteWallBannerFacing = "south"
	WhiteWallBannerFacingWest  WhiteWallBannerFacing = "west"
	WhiteWallBannerFacingEast  WhiteWallBannerFacing = "east"
)

type WhiteWallBanner struct {
	Facing WhiteWallBannerFacing
}

func (x WhiteWallBanner) Id() uint16 {
	switch x.Facing {
	case WhiteWallBannerFacingNorth:
		return 11015
	case WhiteWallBannerFacingSouth:
		return 11016
	case WhiteWallBannerFacingWest:
		return 11017
	case WhiteWallBannerFacingEast:
		return 11018
	}
	return 11015 // default state
}

type OrangeWallBannerFacing string

const (
	OrangeWallBannerFacingNorth OrangeWallBannerFacing = "north"
	OrangeWallBannerFacingSouth OrangeWallBannerFacing = "south"
	OrangeWallBannerFacingWest  OrangeWallBannerFacing = "west"
	OrangeWallBannerFacingEast  OrangeWallBannerFacing = "east"
)

type OrangeWallBanner struct {
	Facing OrangeWallBannerFacing
}

func (x OrangeWallBanner) Id() uint16 {
	switch x.Facing {
	case OrangeWallBannerFacingNorth:
		return 11019
	case OrangeWallBannerFacingSouth:
		return 11020
	case OrangeWallBannerFacingWest:
		return 11021
	case OrangeWallBannerFacingEast:
		return 11022
	}
	return 11019 // default state
}

type MagentaWallBannerFacing string

const (
	MagentaWallBannerFacingNorth MagentaWallBannerFacing = "north"
	MagentaWallBannerFacingSouth MagentaWallBannerFacing = "south"
	MagentaWallBannerFacingWest  MagentaWallBannerFacing = "west"
	MagentaWallBannerFacingEast  MagentaWallBannerFacing = "east"
)

type MagentaWallBanner struct {
	Facing MagentaWallBannerFacing
}

func (x MagentaWallBanner) Id() uint16 {
	switch x.Facing {
	case MagentaWallBannerFacingNorth:
		return 11023
	case MagentaWallBannerFacingSouth:
		return 11024
	case MagentaWallBannerFacingWest:
		return 11025
	case MagentaWallBannerFacingEast:
		return 11026
	}
	return 11023 // default state
}

type LightBlueWallBannerFacing string

const (
	LightBlueWallBannerFacingNorth LightBlueWallBannerFacing = "north"
	LightBlueWallBannerFacingSouth LightBlueWallBannerFacing = "south"
	LightBlueWallBannerFacingWest  LightBlueWallBannerFacing = "west"
	LightBlueWallBannerFacingEast  LightBlueWallBannerFacing = "east"
)

type LightBlueWallBanner struct {
	Facing LightBlueWallBannerFacing
}

func (x LightBlueWallBanner) Id() uint16 {
	switch x.Facing {
	case LightBlueWallBannerFacingNorth:
		return 11027
	case LightBlueWallBannerFacingSouth:
		return 11028
	case LightBlueWallBannerFacingWest:
		return 11029
	case LightBlueWallBannerFacingEast:
		return 11030
	}
	return 11027 // default state
}

type YellowWallBannerFacing string

const (
	YellowWallBannerFacingNorth YellowWallBannerFacing = "north"
	YellowWallBannerFacingSouth YellowWallBannerFacing = "south"
	YellowWallBannerFacingWest  YellowWallBannerFacing = "west"
	YellowWallBannerFacingEast  YellowWallBannerFacing = "east"
)

type YellowWallBanner struct {
	Facing YellowWallBannerFacing
}

func (x YellowWallBanner) Id() uint16 {
	switch x.Facing {
	case YellowWallBannerFacingNorth:
		return 11031
	case YellowWallBannerFacingSouth:
		return 11032
	case YellowWallBannerFacingWest:
		return 11033
	case YellowWallBannerFacingEast:
		return 11034
	}
	return 11031 // default state
}

type LimeWallBannerFacing string

const (
	LimeWallBannerFacingNorth LimeWallBannerFacing = "north"
	LimeWallBannerFacingSouth LimeWallBannerFacing = "south"
	LimeWallBannerFacingWest  LimeWallBannerFacing = "west"
	LimeWallBannerFacingEast  LimeWallBannerFacing = "east"
)

type LimeWallBanner struct {
	Facing LimeWallBannerFacing
}

func (x LimeWallBanner) Id() uint16 {
	switch x.Facing {
	case LimeWallBannerFacingNorth:
		return 11035
	case LimeWallBannerFacingSouth:
		return 11036
	case LimeWallBannerFacingWest:
		return 11037
	case LimeWallBannerFacingEast:
		return 11038
	}
	return 11035 // default state
}

type PinkWallBannerFacing string

const (
	PinkWallBannerFacingNorth PinkWallBannerFacing = "north"
	PinkWallBannerFacingSouth PinkWallBannerFacing = "south"
	PinkWallBannerFacingWest  PinkWallBannerFacing = "west"
	PinkWallBannerFacingEast  PinkWallBannerFacing = "east"
)

type PinkWallBanner struct {
	Facing PinkWallBannerFacing
}

func (x PinkWallBanner) Id() uint16 {
	switch x.Facing {
	case PinkWallBannerFacingNorth:
		return 11039
	case PinkWallBannerFacingSouth:
		return 11040
	case PinkWallBannerFacingWest:
		return 11041
	case PinkWallBannerFacingEast:
		return 11042
	}
	return 11039 // default state
}

type GrayWallBannerFacing string

const (
	GrayWallBannerFacingNorth GrayWallBannerFacing = "north"
	GrayWallBannerFacingSouth GrayWallBannerFacing = "south"
	GrayWallBannerFacingWest  GrayWallBannerFacing = "west"
	GrayWallBannerFacingEast  GrayWallBannerFacing = "east"
)

type GrayWallBanner struct {
	Facing GrayWallBannerFacing
}

func (x GrayWallBanner) Id() uint16 {
	switch x.Facing {
	case GrayWallBannerFacingNorth:
		return 11043
	case GrayWallBannerFacingSouth:
		return 11044
	case GrayWallBannerFacingWest:
		return 11045
	case GrayWallBannerFacingEast:
		return 11046
	}
	return 11043 // default state
}

type LightGrayWallBannerFacing string

const (
	LightGrayWallBannerFacingNorth LightGrayWallBannerFacing = "north"
	LightGrayWallBannerFacingSouth LightGrayWallBannerFacing = "south"
	LightGrayWallBannerFacingWest  LightGrayWallBannerFacing = "west"
	LightGrayWallBannerFacingEast  LightGrayWallBannerFacing = "east"
)

type LightGrayWallBanner struct {
	Facing LightGrayWallBannerFacing
}

func (x LightGrayWallBanner) Id() uint16 {
	switch x.Facing {
	case LightGrayWallBannerFacingNorth:
		return 11047
	case LightGrayWallBannerFacingSouth:
		return 11048
	case LightGrayWallBannerFacingWest:
		return 11049
	case LightGrayWallBannerFacingEast:
		return 11050
	}
	return 11047 // default state
}

type CyanWallBannerFacing string

const (
	CyanWallBannerFacingNorth CyanWallBannerFacing = "north"
	CyanWallBannerFacingSouth CyanWallBannerFacing = "south"
	CyanWallBannerFacingWest  CyanWallBannerFacing = "west"
	CyanWallBannerFacingEast  CyanWallBannerFacing = "east"
)

type CyanWallBanner struct {
	Facing CyanWallBannerFacing
}

func (x CyanWallBanner) Id() uint16 {
	switch x.Facing {
	case CyanWallBannerFacingNorth:
		return 11051
	case CyanWallBannerFacingSouth:
		return 11052
	case CyanWallBannerFacingWest:
		return 11053
	case CyanWallBannerFacingEast:
		return 11054
	}
	return 11051 // default state
}

type PurpleWallBannerFacing string

const (
	PurpleWallBannerFacingNorth PurpleWallBannerFacing = "north"
	PurpleWallBannerFacingSouth PurpleWallBannerFacing = "south"
	PurpleWallBannerFacingWest  PurpleWallBannerFacing = "west"
	PurpleWallBannerFacingEast  PurpleWallBannerFacing = "east"
)

type PurpleWallBanner struct {
	Facing PurpleWallBannerFacing
}

func (x PurpleWallBanner) Id() uint16 {
	switch x.Facing {
	case PurpleWallBannerFacingNorth:
		return 11055
	case PurpleWallBannerFacingSouth:
		return 11056
	case PurpleWallBannerFacingWest:
		return 11057
	case PurpleWallBannerFacingEast:
		return 11058
	}
	return 11055 // default state
}

type BlueWallBannerFacing string

const (
	BlueWallBannerFacingNorth BlueWallBannerFacing = "north"
	BlueWallBannerFacingSouth BlueWallBannerFacing = "south"
	BlueWallBannerFacingWest  BlueWallBannerFacing = "west"
	BlueWallBannerFacingEast  BlueWallBannerFacing = "east"
)

type BlueWallBanner struct {
	Facing BlueWallBannerFacing
}

func (x BlueWallBanner) Id() uint16 {
	switch x.Facing {
	case BlueWallBannerFacingNorth:
		return 11059
	case BlueWallBannerFacingSouth:
		return 11060
	case BlueWallBannerFacingWest:
		return 11061
	case BlueWallBannerFacingEast:
		return 11062
	}
	return 11059 // default state
}

type BrownWallBannerFacing string

const (
	BrownWallBannerFacingNorth BrownWallBannerFacing = "north"
	BrownWallBannerFacingSouth BrownWallBannerFacing = "south"
	BrownWallBannerFacingWest  BrownWallBannerFacing = "west"
	BrownWallBannerFacingEast  BrownWallBannerFacing = "east"
)

type BrownWallBanner struct {
	Facing BrownWallBannerFacing
}

func (x BrownWallBanner) Id() uint16 {
	switch x.Facing {
	case BrownWallBannerFacingNorth:
		return 11063
	case BrownWallBannerFacingSouth:
		return 11064
	case BrownWallBannerFacingWest:
		return 11065
	case BrownWallBannerFacingEast:
		return 11066
	}
	return 11063 // default state
}

type GreenWallBannerFacing string

const (
	GreenWallBannerFacingNorth GreenWallBannerFacing = "north"
	GreenWallBannerFacingSouth GreenWallBannerFacing = "south"
	GreenWallBannerFacingWest  GreenWallBannerFacing = "west"
	GreenWallBannerFacingEast  GreenWallBannerFacing = "east"
)

type GreenWallBanner struct {
	Facing GreenWallBannerFacing
}

func (x GreenWallBanner) Id() uint16 {
	switch x.Facing {
	case GreenWallBannerFacingNorth:
		return 11067
	case GreenWallBannerFacingSouth:
		return 11068
	case GreenWallBannerFacingWest:
		return 11069
	case GreenWallBannerFacingEast:
		return 11070
	}
	return 11067 // default state
}

type RedWallBannerFacing string

const (
	RedWallBannerFacingNorth RedWallBannerFacing = "north"
	RedWallBannerFacingSouth RedWallBannerFacing = "south"
	RedWallBannerFacingWest  RedWallBannerFacing = "west"
	RedWallBannerFacingEast  RedWallBannerFacing = "east"
)

type RedWallBanner struct {
	Facing RedWallBannerFacing
}

func (x RedWallBanner) Id() uint16 {
	switch x.Facing {
	case RedWallBannerFacingNorth:
		return 11071
	case RedWallBannerFacingSouth:
		return 11072
	case RedWallBannerFacingWest:
		return 11073
	case RedWallBannerFacingEast:
		return 11074
	}
	return 11071 // default state
}

type BlackWallBannerFacing string

const (
	BlackWallBannerFacingNorth BlackWallBannerFacing = "north"
	BlackWallBannerFacingSouth BlackWallBannerFacing = "south"
	BlackWallBannerFacingWest  BlackWallBannerFacing = "west"
	BlackWallBannerFacingEast  BlackWallBannerFacing = "east"
)

type BlackWallBanner struct {
	Facing BlackWallBannerFacing
}

func (x BlackWallBanner) Id() uint16 {
	switch x.Facing {
	case BlackWallBannerFacingNorth:
		return 11075
	case BlackWallBannerFacingSouth:
		return 11076
	case BlackWallBannerFacingWest:
		return 11077
	case BlackWallBannerFacingEast:
		return 11078
	}
	return 11075 // default state
}

type RedSandstone struct{}

func (x RedSandstone) Id() uint16 {
	return 11079
}

type ChiseledRedSandstone struct{}

func (x ChiseledRedSandstone) Id() uint16 {
	return 11080
}

type CutRedSandstone struct{}

func (x CutRedSandstone) Id() uint16 {
	return 11081
}

type RedSandstoneStairsFacing string

const (
	RedSandstoneStairsFacingNorth RedSandstoneStairsFacing = "north"
	RedSandstoneStairsFacingSouth RedSandstoneStairsFacing = "south"
	RedSandstoneStairsFacingWest  RedSandstoneStairsFacing = "west"
	RedSandstoneStairsFacingEast  RedSandstoneStairsFacing = "east"
)

type RedSandstoneStairsHalf string

const (
	RedSandstoneStairsHalfTop    RedSandstoneStairsHalf = "top"
	RedSandstoneStairsHalfBottom RedSandstoneStairsHalf = "bottom"
)

type RedSandstoneStairsShape string

const (
	RedSandstoneStairsShapeStraight   RedSandstoneStairsShape = "straight"
	RedSandstoneStairsShapeInnerLeft  RedSandstoneStairsShape = "inner_left"
	RedSandstoneStairsShapeInnerRight RedSandstoneStairsShape = "inner_right"
	RedSandstoneStairsShapeOuterLeft  RedSandstoneStairsShape = "outer_left"
	RedSandstoneStairsShapeOuterRight RedSandstoneStairsShape = "outer_right"
)

type RedSandstoneStairs struct {
	Facing      RedSandstoneStairsFacing
	Half        RedSandstoneStairsHalf
	Shape       RedSandstoneStairsShape
	Waterlogged bool
}

func (x RedSandstoneStairs) Id() uint16 {
	switch x.Facing {
	case RedSandstoneStairsFacingNorth:
		switch x.Half {
		case RedSandstoneStairsHalfTop:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11082
				case false:
					return 11083
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11084
				case false:
					return 11085
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11086
				case false:
					return 11087
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11088
				case false:
					return 11089
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11090
				case false:
					return 11091
				}
			}
		case RedSandstoneStairsHalfBottom:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11092
				case false:
					return 11093
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11094
				case false:
					return 11095
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11096
				case false:
					return 11097
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11098
				case false:
					return 11099
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11100
				case false:
					return 11101
				}
			}
		}
	case RedSandstoneStairsFacingSouth:
		switch x.Half {
		case RedSandstoneStairsHalfTop:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11102
				case false:
					return 11103
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11104
				case false:
					return 11105
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11106
				case false:
					return 11107
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11108
				case false:
					return 11109
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11110
				case false:
					return 11111
				}
			}
		case RedSandstoneStairsHalfBottom:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11112
				case false:
					return 11113
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11114
				case false:
					return 11115
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11116
				case false:
					return 11117
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11118
				case false:
					return 11119
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11120
				case false:
					return 11121
				}
			}
		}
	case RedSandstoneStairsFacingWest:
		switch x.Half {
		case RedSandstoneStairsHalfTop:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11122
				case false:
					return 11123
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11124
				case false:
					return 11125
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11126
				case false:
					return 11127
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11128
				case false:
					return 11129
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11130
				case false:
					return 11131
				}
			}
		case RedSandstoneStairsHalfBottom:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11132
				case false:
					return 11133
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11134
				case false:
					return 11135
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11136
				case false:
					return 11137
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11138
				case false:
					return 11139
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11140
				case false:
					return 11141
				}
			}
		}
	case RedSandstoneStairsFacingEast:
		switch x.Half {
		case RedSandstoneStairsHalfTop:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11142
				case false:
					return 11143
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11144
				case false:
					return 11145
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11146
				case false:
					return 11147
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11148
				case false:
					return 11149
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11150
				case false:
					return 11151
				}
			}
		case RedSandstoneStairsHalfBottom:
			switch x.Shape {
			case RedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 11152
				case false:
					return 11153
				}
			case RedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 11154
				case false:
					return 11155
				}
			case RedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 11156
				case false:
					return 11157
				}
			case RedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 11158
				case false:
					return 11159
				}
			case RedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 11160
				case false:
					return 11161
				}
			}
		}
	}
	return 11093 // default state
}

type OakSlabType string

const (
	OakSlabTypeTop    OakSlabType = "top"
	OakSlabTypeBottom OakSlabType = "bottom"
	OakSlabTypeDouble OakSlabType = "double"
)

type OakSlab struct {
	Type        OakSlabType
	Waterlogged bool
}

func (x OakSlab) Id() uint16 {
	switch x.Type {
	case OakSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11162
		case false:
			return 11163
		}
	case OakSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11164
		case false:
			return 11165
		}
	case OakSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11166
		case false:
			return 11167
		}
	}
	return 11165 // default state
}

type SpruceSlabType string

const (
	SpruceSlabTypeTop    SpruceSlabType = "top"
	SpruceSlabTypeBottom SpruceSlabType = "bottom"
	SpruceSlabTypeDouble SpruceSlabType = "double"
)

type SpruceSlab struct {
	Type        SpruceSlabType
	Waterlogged bool
}

func (x SpruceSlab) Id() uint16 {
	switch x.Type {
	case SpruceSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11168
		case false:
			return 11169
		}
	case SpruceSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11170
		case false:
			return 11171
		}
	case SpruceSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11172
		case false:
			return 11173
		}
	}
	return 11171 // default state
}

type BirchSlabType string

const (
	BirchSlabTypeTop    BirchSlabType = "top"
	BirchSlabTypeBottom BirchSlabType = "bottom"
	BirchSlabTypeDouble BirchSlabType = "double"
)

type BirchSlab struct {
	Type        BirchSlabType
	Waterlogged bool
}

func (x BirchSlab) Id() uint16 {
	switch x.Type {
	case BirchSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11174
		case false:
			return 11175
		}
	case BirchSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11176
		case false:
			return 11177
		}
	case BirchSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11178
		case false:
			return 11179
		}
	}
	return 11177 // default state
}

type JungleSlabType string

const (
	JungleSlabTypeTop    JungleSlabType = "top"
	JungleSlabTypeBottom JungleSlabType = "bottom"
	JungleSlabTypeDouble JungleSlabType = "double"
)

type JungleSlab struct {
	Waterlogged bool
	Type        JungleSlabType
}

func (x JungleSlab) Id() uint16 {
	switch x.Type {
	case JungleSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11180
		case false:
			return 11181
		}
	case JungleSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11182
		case false:
			return 11183
		}
	case JungleSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11184
		case false:
			return 11185
		}
	}
	return 11183 // default state
}

type AcaciaSlabType string

const (
	AcaciaSlabTypeTop    AcaciaSlabType = "top"
	AcaciaSlabTypeBottom AcaciaSlabType = "bottom"
	AcaciaSlabTypeDouble AcaciaSlabType = "double"
)

type AcaciaSlab struct {
	Type        AcaciaSlabType
	Waterlogged bool
}

func (x AcaciaSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case AcaciaSlabTypeTop:
			return 11186
		case AcaciaSlabTypeBottom:
			return 11188
		case AcaciaSlabTypeDouble:
			return 11190
		}
	case false:
		switch x.Type {
		case AcaciaSlabTypeTop:
			return 11187
		case AcaciaSlabTypeBottom:
			return 11189
		case AcaciaSlabTypeDouble:
			return 11191
		}
	}
	return 11189 // default state
}

type CherrySlabType string

const (
	CherrySlabTypeTop    CherrySlabType = "top"
	CherrySlabTypeBottom CherrySlabType = "bottom"
	CherrySlabTypeDouble CherrySlabType = "double"
)

type CherrySlab struct {
	Type        CherrySlabType
	Waterlogged bool
}

func (x CherrySlab) Id() uint16 {
	switch x.Type {
	case CherrySlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11192
		case false:
			return 11193
		}
	case CherrySlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11194
		case false:
			return 11195
		}
	case CherrySlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11196
		case false:
			return 11197
		}
	}
	return 11195 // default state
}

type DarkOakSlabType string

const (
	DarkOakSlabTypeTop    DarkOakSlabType = "top"
	DarkOakSlabTypeBottom DarkOakSlabType = "bottom"
	DarkOakSlabTypeDouble DarkOakSlabType = "double"
)

type DarkOakSlab struct {
	Type        DarkOakSlabType
	Waterlogged bool
}

func (x DarkOakSlab) Id() uint16 {
	switch x.Type {
	case DarkOakSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11198
		case false:
			return 11199
		}
	case DarkOakSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11200
		case false:
			return 11201
		}
	case DarkOakSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11202
		case false:
			return 11203
		}
	}
	return 11201 // default state
}

type MangroveSlabType string

const (
	MangroveSlabTypeTop    MangroveSlabType = "top"
	MangroveSlabTypeBottom MangroveSlabType = "bottom"
	MangroveSlabTypeDouble MangroveSlabType = "double"
)

type MangroveSlab struct {
	Type        MangroveSlabType
	Waterlogged bool
}

func (x MangroveSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case MangroveSlabTypeTop:
			return 11204
		case MangroveSlabTypeBottom:
			return 11206
		case MangroveSlabTypeDouble:
			return 11208
		}
	case false:
		switch x.Type {
		case MangroveSlabTypeTop:
			return 11205
		case MangroveSlabTypeBottom:
			return 11207
		case MangroveSlabTypeDouble:
			return 11209
		}
	}
	return 11207 // default state
}

type BambooSlabType string

const (
	BambooSlabTypeTop    BambooSlabType = "top"
	BambooSlabTypeBottom BambooSlabType = "bottom"
	BambooSlabTypeDouble BambooSlabType = "double"
)

type BambooSlab struct {
	Type        BambooSlabType
	Waterlogged bool
}

func (x BambooSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case BambooSlabTypeTop:
			return 11210
		case BambooSlabTypeBottom:
			return 11212
		case BambooSlabTypeDouble:
			return 11214
		}
	case false:
		switch x.Type {
		case BambooSlabTypeTop:
			return 11211
		case BambooSlabTypeBottom:
			return 11213
		case BambooSlabTypeDouble:
			return 11215
		}
	}
	return 11213 // default state
}

type BambooMosaicSlabType string

const (
	BambooMosaicSlabTypeTop    BambooMosaicSlabType = "top"
	BambooMosaicSlabTypeBottom BambooMosaicSlabType = "bottom"
	BambooMosaicSlabTypeDouble BambooMosaicSlabType = "double"
)

type BambooMosaicSlab struct {
	Type        BambooMosaicSlabType
	Waterlogged bool
}

func (x BambooMosaicSlab) Id() uint16 {
	switch x.Type {
	case BambooMosaicSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11216
		case false:
			return 11217
		}
	case BambooMosaicSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11218
		case false:
			return 11219
		}
	case BambooMosaicSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11220
		case false:
			return 11221
		}
	}
	return 11219 // default state
}

type StoneSlabType string

const (
	StoneSlabTypeTop    StoneSlabType = "top"
	StoneSlabTypeBottom StoneSlabType = "bottom"
	StoneSlabTypeDouble StoneSlabType = "double"
)

type StoneSlab struct {
	Type        StoneSlabType
	Waterlogged bool
}

func (x StoneSlab) Id() uint16 {
	switch x.Type {
	case StoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11222
		case false:
			return 11223
		}
	case StoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11224
		case false:
			return 11225
		}
	case StoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11226
		case false:
			return 11227
		}
	}
	return 11225 // default state
}

type SmoothStoneSlabType string

const (
	SmoothStoneSlabTypeTop    SmoothStoneSlabType = "top"
	SmoothStoneSlabTypeBottom SmoothStoneSlabType = "bottom"
	SmoothStoneSlabTypeDouble SmoothStoneSlabType = "double"
)

type SmoothStoneSlab struct {
	Type        SmoothStoneSlabType
	Waterlogged bool
}

func (x SmoothStoneSlab) Id() uint16 {
	switch x.Type {
	case SmoothStoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11228
		case false:
			return 11229
		}
	case SmoothStoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11230
		case false:
			return 11231
		}
	case SmoothStoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11232
		case false:
			return 11233
		}
	}
	return 11231 // default state
}

type SandstoneSlabType string

const (
	SandstoneSlabTypeTop    SandstoneSlabType = "top"
	SandstoneSlabTypeBottom SandstoneSlabType = "bottom"
	SandstoneSlabTypeDouble SandstoneSlabType = "double"
)

type SandstoneSlab struct {
	Type        SandstoneSlabType
	Waterlogged bool
}

func (x SandstoneSlab) Id() uint16 {
	switch x.Type {
	case SandstoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11234
		case false:
			return 11235
		}
	case SandstoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11236
		case false:
			return 11237
		}
	case SandstoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11238
		case false:
			return 11239
		}
	}
	return 11237 // default state
}

type CutSandstoneSlabType string

const (
	CutSandstoneSlabTypeTop    CutSandstoneSlabType = "top"
	CutSandstoneSlabTypeBottom CutSandstoneSlabType = "bottom"
	CutSandstoneSlabTypeDouble CutSandstoneSlabType = "double"
)

type CutSandstoneSlab struct {
	Waterlogged bool
	Type        CutSandstoneSlabType
}

func (x CutSandstoneSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case CutSandstoneSlabTypeTop:
			return 11240
		case CutSandstoneSlabTypeBottom:
			return 11242
		case CutSandstoneSlabTypeDouble:
			return 11244
		}
	case false:
		switch x.Type {
		case CutSandstoneSlabTypeTop:
			return 11241
		case CutSandstoneSlabTypeBottom:
			return 11243
		case CutSandstoneSlabTypeDouble:
			return 11245
		}
	}
	return 11243 // default state
}

type PetrifiedOakSlabType string

const (
	PetrifiedOakSlabTypeTop    PetrifiedOakSlabType = "top"
	PetrifiedOakSlabTypeBottom PetrifiedOakSlabType = "bottom"
	PetrifiedOakSlabTypeDouble PetrifiedOakSlabType = "double"
)

type PetrifiedOakSlab struct {
	Type        PetrifiedOakSlabType
	Waterlogged bool
}

func (x PetrifiedOakSlab) Id() uint16 {
	switch x.Type {
	case PetrifiedOakSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11246
		case false:
			return 11247
		}
	case PetrifiedOakSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11248
		case false:
			return 11249
		}
	case PetrifiedOakSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11250
		case false:
			return 11251
		}
	}
	return 11249 // default state
}

type CobblestoneSlabType string

const (
	CobblestoneSlabTypeTop    CobblestoneSlabType = "top"
	CobblestoneSlabTypeBottom CobblestoneSlabType = "bottom"
	CobblestoneSlabTypeDouble CobblestoneSlabType = "double"
)

type CobblestoneSlab struct {
	Type        CobblestoneSlabType
	Waterlogged bool
}

func (x CobblestoneSlab) Id() uint16 {
	switch x.Type {
	case CobblestoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11252
		case false:
			return 11253
		}
	case CobblestoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11254
		case false:
			return 11255
		}
	case CobblestoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11256
		case false:
			return 11257
		}
	}
	return 11255 // default state
}

type BrickSlabType string

const (
	BrickSlabTypeTop    BrickSlabType = "top"
	BrickSlabTypeBottom BrickSlabType = "bottom"
	BrickSlabTypeDouble BrickSlabType = "double"
)

type BrickSlab struct {
	Type        BrickSlabType
	Waterlogged bool
}

func (x BrickSlab) Id() uint16 {
	switch x.Type {
	case BrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11258
		case false:
			return 11259
		}
	case BrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11260
		case false:
			return 11261
		}
	case BrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11262
		case false:
			return 11263
		}
	}
	return 11261 // default state
}

type StoneBrickSlabType string

const (
	StoneBrickSlabTypeTop    StoneBrickSlabType = "top"
	StoneBrickSlabTypeBottom StoneBrickSlabType = "bottom"
	StoneBrickSlabTypeDouble StoneBrickSlabType = "double"
)

type StoneBrickSlab struct {
	Waterlogged bool
	Type        StoneBrickSlabType
}

func (x StoneBrickSlab) Id() uint16 {
	switch x.Type {
	case StoneBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11264
		case false:
			return 11265
		}
	case StoneBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11266
		case false:
			return 11267
		}
	case StoneBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11268
		case false:
			return 11269
		}
	}
	return 11267 // default state
}

type MudBrickSlabType string

const (
	MudBrickSlabTypeTop    MudBrickSlabType = "top"
	MudBrickSlabTypeBottom MudBrickSlabType = "bottom"
	MudBrickSlabTypeDouble MudBrickSlabType = "double"
)

type MudBrickSlab struct {
	Type        MudBrickSlabType
	Waterlogged bool
}

func (x MudBrickSlab) Id() uint16 {
	switch x.Type {
	case MudBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11270
		case false:
			return 11271
		}
	case MudBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11272
		case false:
			return 11273
		}
	case MudBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11274
		case false:
			return 11275
		}
	}
	return 11273 // default state
}

type NetherBrickSlabType string

const (
	NetherBrickSlabTypeTop    NetherBrickSlabType = "top"
	NetherBrickSlabTypeBottom NetherBrickSlabType = "bottom"
	NetherBrickSlabTypeDouble NetherBrickSlabType = "double"
)

type NetherBrickSlab struct {
	Type        NetherBrickSlabType
	Waterlogged bool
}

func (x NetherBrickSlab) Id() uint16 {
	switch x.Type {
	case NetherBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11276
		case false:
			return 11277
		}
	case NetherBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11278
		case false:
			return 11279
		}
	case NetherBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11280
		case false:
			return 11281
		}
	}
	return 11279 // default state
}

type QuartzSlabType string

const (
	QuartzSlabTypeTop    QuartzSlabType = "top"
	QuartzSlabTypeBottom QuartzSlabType = "bottom"
	QuartzSlabTypeDouble QuartzSlabType = "double"
)

type QuartzSlab struct {
	Type        QuartzSlabType
	Waterlogged bool
}

func (x QuartzSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case QuartzSlabTypeTop:
			return 11282
		case QuartzSlabTypeBottom:
			return 11284
		case QuartzSlabTypeDouble:
			return 11286
		}
	case false:
		switch x.Type {
		case QuartzSlabTypeTop:
			return 11283
		case QuartzSlabTypeBottom:
			return 11285
		case QuartzSlabTypeDouble:
			return 11287
		}
	}
	return 11285 // default state
}

type RedSandstoneSlabType string

const (
	RedSandstoneSlabTypeTop    RedSandstoneSlabType = "top"
	RedSandstoneSlabTypeBottom RedSandstoneSlabType = "bottom"
	RedSandstoneSlabTypeDouble RedSandstoneSlabType = "double"
)

type RedSandstoneSlab struct {
	Type        RedSandstoneSlabType
	Waterlogged bool
}

func (x RedSandstoneSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case RedSandstoneSlabTypeTop:
			return 11288
		case RedSandstoneSlabTypeBottom:
			return 11290
		case RedSandstoneSlabTypeDouble:
			return 11292
		}
	case false:
		switch x.Type {
		case RedSandstoneSlabTypeTop:
			return 11289
		case RedSandstoneSlabTypeBottom:
			return 11291
		case RedSandstoneSlabTypeDouble:
			return 11293
		}
	}
	return 11291 // default state
}

type CutRedSandstoneSlabType string

const (
	CutRedSandstoneSlabTypeTop    CutRedSandstoneSlabType = "top"
	CutRedSandstoneSlabTypeBottom CutRedSandstoneSlabType = "bottom"
	CutRedSandstoneSlabTypeDouble CutRedSandstoneSlabType = "double"
)

type CutRedSandstoneSlab struct {
	Type        CutRedSandstoneSlabType
	Waterlogged bool
}

func (x CutRedSandstoneSlab) Id() uint16 {
	switch x.Type {
	case CutRedSandstoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11294
		case false:
			return 11295
		}
	case CutRedSandstoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11296
		case false:
			return 11297
		}
	case CutRedSandstoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11298
		case false:
			return 11299
		}
	}
	return 11297 // default state
}

type PurpurSlabType string

const (
	PurpurSlabTypeTop    PurpurSlabType = "top"
	PurpurSlabTypeBottom PurpurSlabType = "bottom"
	PurpurSlabTypeDouble PurpurSlabType = "double"
)

type PurpurSlab struct {
	Type        PurpurSlabType
	Waterlogged bool
}

func (x PurpurSlab) Id() uint16 {
	switch x.Type {
	case PurpurSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 11300
		case false:
			return 11301
		}
	case PurpurSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 11302
		case false:
			return 11303
		}
	case PurpurSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 11304
		case false:
			return 11305
		}
	}
	return 11303 // default state
}

type SmoothStone struct{}

func (x SmoothStone) Id() uint16 {
	return 11306
}

type SmoothSandstone struct{}

func (x SmoothSandstone) Id() uint16 {
	return 11307
}

type SmoothQuartz struct{}

func (x SmoothQuartz) Id() uint16 {
	return 11308
}

type SmoothRedSandstone struct{}

func (x SmoothRedSandstone) Id() uint16 {
	return 11309
}

type SpruceFenceGateFacing string

const (
	SpruceFenceGateFacingNorth SpruceFenceGateFacing = "north"
	SpruceFenceGateFacingSouth SpruceFenceGateFacing = "south"
	SpruceFenceGateFacingWest  SpruceFenceGateFacing = "west"
	SpruceFenceGateFacingEast  SpruceFenceGateFacing = "east"
)

type SpruceFenceGate struct {
	Open    bool
	Powered bool
	Facing  SpruceFenceGateFacing
	InWall  bool
}

func (x SpruceFenceGate) Id() uint16 {
	switch x.Facing {
	case SpruceFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11310
				case false:
					return 11311
				}
			case false:
				switch x.Powered {
				case true:
					return 11312
				case false:
					return 11313
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11314
				case false:
					return 11315
				}
			case false:
				switch x.Powered {
				case true:
					return 11316
				case false:
					return 11317
				}
			}
		}
	case SpruceFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11318
				case false:
					return 11319
				}
			case false:
				switch x.Powered {
				case true:
					return 11320
				case false:
					return 11321
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11322
				case false:
					return 11323
				}
			case false:
				switch x.Powered {
				case true:
					return 11324
				case false:
					return 11325
				}
			}
		}
	case SpruceFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11326
				case false:
					return 11327
				}
			case false:
				switch x.Powered {
				case true:
					return 11328
				case false:
					return 11329
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11330
				case false:
					return 11331
				}
			case false:
				switch x.Powered {
				case true:
					return 11332
				case false:
					return 11333
				}
			}
		}
	case SpruceFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11334
				case false:
					return 11335
				}
			case false:
				switch x.Powered {
				case true:
					return 11336
				case false:
					return 11337
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11338
				case false:
					return 11339
				}
			case false:
				switch x.Powered {
				case true:
					return 11340
				case false:
					return 11341
				}
			}
		}
	}
	return 11317 // default state
}

type BirchFenceGateFacing string

const (
	BirchFenceGateFacingNorth BirchFenceGateFacing = "north"
	BirchFenceGateFacingSouth BirchFenceGateFacing = "south"
	BirchFenceGateFacingWest  BirchFenceGateFacing = "west"
	BirchFenceGateFacingEast  BirchFenceGateFacing = "east"
)

type BirchFenceGate struct {
	Facing  BirchFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x BirchFenceGate) Id() uint16 {
	switch x.Facing {
	case BirchFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11342
				case false:
					return 11343
				}
			case false:
				switch x.Powered {
				case true:
					return 11344
				case false:
					return 11345
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11346
				case false:
					return 11347
				}
			case false:
				switch x.Powered {
				case true:
					return 11348
				case false:
					return 11349
				}
			}
		}
	case BirchFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11350
				case false:
					return 11351
				}
			case false:
				switch x.Powered {
				case true:
					return 11352
				case false:
					return 11353
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11354
				case false:
					return 11355
				}
			case false:
				switch x.Powered {
				case true:
					return 11356
				case false:
					return 11357
				}
			}
		}
	case BirchFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11358
				case false:
					return 11359
				}
			case false:
				switch x.Powered {
				case true:
					return 11360
				case false:
					return 11361
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11362
				case false:
					return 11363
				}
			case false:
				switch x.Powered {
				case true:
					return 11364
				case false:
					return 11365
				}
			}
		}
	case BirchFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11366
				case false:
					return 11367
				}
			case false:
				switch x.Powered {
				case true:
					return 11368
				case false:
					return 11369
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11370
				case false:
					return 11371
				}
			case false:
				switch x.Powered {
				case true:
					return 11372
				case false:
					return 11373
				}
			}
		}
	}
	return 11349 // default state
}

type JungleFenceGateFacing string

const (
	JungleFenceGateFacingNorth JungleFenceGateFacing = "north"
	JungleFenceGateFacingSouth JungleFenceGateFacing = "south"
	JungleFenceGateFacingWest  JungleFenceGateFacing = "west"
	JungleFenceGateFacingEast  JungleFenceGateFacing = "east"
)

type JungleFenceGate struct {
	Facing  JungleFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x JungleFenceGate) Id() uint16 {
	switch x.Facing {
	case JungleFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11374
				case false:
					return 11375
				}
			case false:
				switch x.Powered {
				case true:
					return 11376
				case false:
					return 11377
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11378
				case false:
					return 11379
				}
			case false:
				switch x.Powered {
				case true:
					return 11380
				case false:
					return 11381
				}
			}
		}
	case JungleFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11382
				case false:
					return 11383
				}
			case false:
				switch x.Powered {
				case true:
					return 11384
				case false:
					return 11385
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11386
				case false:
					return 11387
				}
			case false:
				switch x.Powered {
				case true:
					return 11388
				case false:
					return 11389
				}
			}
		}
	case JungleFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11390
				case false:
					return 11391
				}
			case false:
				switch x.Powered {
				case true:
					return 11392
				case false:
					return 11393
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11394
				case false:
					return 11395
				}
			case false:
				switch x.Powered {
				case true:
					return 11396
				case false:
					return 11397
				}
			}
		}
	case JungleFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11398
				case false:
					return 11399
				}
			case false:
				switch x.Powered {
				case true:
					return 11400
				case false:
					return 11401
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11402
				case false:
					return 11403
				}
			case false:
				switch x.Powered {
				case true:
					return 11404
				case false:
					return 11405
				}
			}
		}
	}
	return 11381 // default state
}

type AcaciaFenceGateFacing string

const (
	AcaciaFenceGateFacingNorth AcaciaFenceGateFacing = "north"
	AcaciaFenceGateFacingSouth AcaciaFenceGateFacing = "south"
	AcaciaFenceGateFacingWest  AcaciaFenceGateFacing = "west"
	AcaciaFenceGateFacingEast  AcaciaFenceGateFacing = "east"
)

type AcaciaFenceGate struct {
	Facing  AcaciaFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x AcaciaFenceGate) Id() uint16 {
	switch x.Facing {
	case AcaciaFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11406
				case false:
					return 11407
				}
			case false:
				switch x.Powered {
				case true:
					return 11408
				case false:
					return 11409
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11410
				case false:
					return 11411
				}
			case false:
				switch x.Powered {
				case true:
					return 11412
				case false:
					return 11413
				}
			}
		}
	case AcaciaFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11414
				case false:
					return 11415
				}
			case false:
				switch x.Powered {
				case true:
					return 11416
				case false:
					return 11417
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11418
				case false:
					return 11419
				}
			case false:
				switch x.Powered {
				case true:
					return 11420
				case false:
					return 11421
				}
			}
		}
	case AcaciaFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11422
				case false:
					return 11423
				}
			case false:
				switch x.Powered {
				case true:
					return 11424
				case false:
					return 11425
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11426
				case false:
					return 11427
				}
			case false:
				switch x.Powered {
				case true:
					return 11428
				case false:
					return 11429
				}
			}
		}
	case AcaciaFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11430
				case false:
					return 11431
				}
			case false:
				switch x.Powered {
				case true:
					return 11432
				case false:
					return 11433
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11434
				case false:
					return 11435
				}
			case false:
				switch x.Powered {
				case true:
					return 11436
				case false:
					return 11437
				}
			}
		}
	}
	return 11413 // default state
}

type CherryFenceGateFacing string

const (
	CherryFenceGateFacingNorth CherryFenceGateFacing = "north"
	CherryFenceGateFacingSouth CherryFenceGateFacing = "south"
	CherryFenceGateFacingWest  CherryFenceGateFacing = "west"
	CherryFenceGateFacingEast  CherryFenceGateFacing = "east"
)

type CherryFenceGate struct {
	Facing  CherryFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x CherryFenceGate) Id() uint16 {
	switch x.InWall {
	case true:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11438
				case CherryFenceGateFacingSouth:
					return 11446
				case CherryFenceGateFacingWest:
					return 11454
				case CherryFenceGateFacingEast:
					return 11462
				}
			case false:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11439
				case CherryFenceGateFacingSouth:
					return 11447
				case CherryFenceGateFacingWest:
					return 11455
				case CherryFenceGateFacingEast:
					return 11463
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11440
				case CherryFenceGateFacingSouth:
					return 11448
				case CherryFenceGateFacingWest:
					return 11456
				case CherryFenceGateFacingEast:
					return 11464
				}
			case false:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11441
				case CherryFenceGateFacingSouth:
					return 11449
				case CherryFenceGateFacingWest:
					return 11457
				case CherryFenceGateFacingEast:
					return 11465
				}
			}
		}
	case false:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11442
				case CherryFenceGateFacingSouth:
					return 11450
				case CherryFenceGateFacingWest:
					return 11458
				case CherryFenceGateFacingEast:
					return 11466
				}
			case false:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11443
				case CherryFenceGateFacingSouth:
					return 11451
				case CherryFenceGateFacingWest:
					return 11459
				case CherryFenceGateFacingEast:
					return 11467
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11444
				case CherryFenceGateFacingSouth:
					return 11452
				case CherryFenceGateFacingWest:
					return 11460
				case CherryFenceGateFacingEast:
					return 11468
				}
			case false:
				switch x.Facing {
				case CherryFenceGateFacingNorth:
					return 11445
				case CherryFenceGateFacingSouth:
					return 11453
				case CherryFenceGateFacingWest:
					return 11461
				case CherryFenceGateFacingEast:
					return 11469
				}
			}
		}
	}
	return 11445 // default state
}

type DarkOakFenceGateFacing string

const (
	DarkOakFenceGateFacingNorth DarkOakFenceGateFacing = "north"
	DarkOakFenceGateFacingSouth DarkOakFenceGateFacing = "south"
	DarkOakFenceGateFacingWest  DarkOakFenceGateFacing = "west"
	DarkOakFenceGateFacingEast  DarkOakFenceGateFacing = "east"
)

type DarkOakFenceGate struct {
	Open    bool
	Powered bool
	Facing  DarkOakFenceGateFacing
	InWall  bool
}

func (x DarkOakFenceGate) Id() uint16 {
	switch x.Open {
	case true:
		switch x.Powered {
		case true:
			switch x.Facing {
			case DarkOakFenceGateFacingNorth:
				switch x.InWall {
				case true:
					return 11470
				case false:
					return 11474
				}
			case DarkOakFenceGateFacingSouth:
				switch x.InWall {
				case true:
					return 11478
				case false:
					return 11482
				}
			case DarkOakFenceGateFacingWest:
				switch x.InWall {
				case true:
					return 11486
				case false:
					return 11490
				}
			case DarkOakFenceGateFacingEast:
				switch x.InWall {
				case true:
					return 11494
				case false:
					return 11498
				}
			}
		case false:
			switch x.Facing {
			case DarkOakFenceGateFacingNorth:
				switch x.InWall {
				case true:
					return 11471
				case false:
					return 11475
				}
			case DarkOakFenceGateFacingSouth:
				switch x.InWall {
				case true:
					return 11479
				case false:
					return 11483
				}
			case DarkOakFenceGateFacingWest:
				switch x.InWall {
				case true:
					return 11487
				case false:
					return 11491
				}
			case DarkOakFenceGateFacingEast:
				switch x.InWall {
				case true:
					return 11495
				case false:
					return 11499
				}
			}
		}
	case false:
		switch x.Powered {
		case true:
			switch x.Facing {
			case DarkOakFenceGateFacingNorth:
				switch x.InWall {
				case true:
					return 11472
				case false:
					return 11476
				}
			case DarkOakFenceGateFacingSouth:
				switch x.InWall {
				case true:
					return 11480
				case false:
					return 11484
				}
			case DarkOakFenceGateFacingWest:
				switch x.InWall {
				case true:
					return 11488
				case false:
					return 11492
				}
			case DarkOakFenceGateFacingEast:
				switch x.InWall {
				case true:
					return 11496
				case false:
					return 11500
				}
			}
		case false:
			switch x.Facing {
			case DarkOakFenceGateFacingNorth:
				switch x.InWall {
				case true:
					return 11473
				case false:
					return 11477
				}
			case DarkOakFenceGateFacingSouth:
				switch x.InWall {
				case true:
					return 11481
				case false:
					return 11485
				}
			case DarkOakFenceGateFacingWest:
				switch x.InWall {
				case true:
					return 11489
				case false:
					return 11493
				}
			case DarkOakFenceGateFacingEast:
				switch x.InWall {
				case true:
					return 11497
				case false:
					return 11501
				}
			}
		}
	}
	return 11477 // default state
}

type MangroveFenceGateFacing string

const (
	MangroveFenceGateFacingNorth MangroveFenceGateFacing = "north"
	MangroveFenceGateFacingSouth MangroveFenceGateFacing = "south"
	MangroveFenceGateFacingWest  MangroveFenceGateFacing = "west"
	MangroveFenceGateFacingEast  MangroveFenceGateFacing = "east"
)

type MangroveFenceGate struct {
	Open    bool
	Powered bool
	Facing  MangroveFenceGateFacing
	InWall  bool
}

func (x MangroveFenceGate) Id() uint16 {
	switch x.Facing {
	case MangroveFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11502
				case false:
					return 11503
				}
			case false:
				switch x.Powered {
				case true:
					return 11504
				case false:
					return 11505
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11506
				case false:
					return 11507
				}
			case false:
				switch x.Powered {
				case true:
					return 11508
				case false:
					return 11509
				}
			}
		}
	case MangroveFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11510
				case false:
					return 11511
				}
			case false:
				switch x.Powered {
				case true:
					return 11512
				case false:
					return 11513
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11514
				case false:
					return 11515
				}
			case false:
				switch x.Powered {
				case true:
					return 11516
				case false:
					return 11517
				}
			}
		}
	case MangroveFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11518
				case false:
					return 11519
				}
			case false:
				switch x.Powered {
				case true:
					return 11520
				case false:
					return 11521
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11522
				case false:
					return 11523
				}
			case false:
				switch x.Powered {
				case true:
					return 11524
				case false:
					return 11525
				}
			}
		}
	case MangroveFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11526
				case false:
					return 11527
				}
			case false:
				switch x.Powered {
				case true:
					return 11528
				case false:
					return 11529
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 11530
				case false:
					return 11531
				}
			case false:
				switch x.Powered {
				case true:
					return 11532
				case false:
					return 11533
				}
			}
		}
	}
	return 11509 // default state
}

type BambooFenceGateFacing string

const (
	BambooFenceGateFacingNorth BambooFenceGateFacing = "north"
	BambooFenceGateFacingSouth BambooFenceGateFacing = "south"
	BambooFenceGateFacingWest  BambooFenceGateFacing = "west"
	BambooFenceGateFacingEast  BambooFenceGateFacing = "east"
)

type BambooFenceGate struct {
	Open    bool
	Powered bool
	Facing  BambooFenceGateFacing
	InWall  bool
}

func (x BambooFenceGate) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Facing {
		case BambooFenceGateFacingNorth:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11534
				case false:
					return 11536
				}
			case false:
				switch x.Open {
				case true:
					return 11538
				case false:
					return 11540
				}
			}
		case BambooFenceGateFacingSouth:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11542
				case false:
					return 11544
				}
			case false:
				switch x.Open {
				case true:
					return 11546
				case false:
					return 11548
				}
			}
		case BambooFenceGateFacingWest:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11550
				case false:
					return 11552
				}
			case false:
				switch x.Open {
				case true:
					return 11554
				case false:
					return 11556
				}
			}
		case BambooFenceGateFacingEast:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11558
				case false:
					return 11560
				}
			case false:
				switch x.Open {
				case true:
					return 11562
				case false:
					return 11564
				}
			}
		}
	case false:
		switch x.Facing {
		case BambooFenceGateFacingNorth:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11535
				case false:
					return 11537
				}
			case false:
				switch x.Open {
				case true:
					return 11539
				case false:
					return 11541
				}
			}
		case BambooFenceGateFacingSouth:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11543
				case false:
					return 11545
				}
			case false:
				switch x.Open {
				case true:
					return 11547
				case false:
					return 11549
				}
			}
		case BambooFenceGateFacingWest:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11551
				case false:
					return 11553
				}
			case false:
				switch x.Open {
				case true:
					return 11555
				case false:
					return 11557
				}
			}
		case BambooFenceGateFacingEast:
			switch x.InWall {
			case true:
				switch x.Open {
				case true:
					return 11559
				case false:
					return 11561
				}
			case false:
				switch x.Open {
				case true:
					return 11563
				case false:
					return 11565
				}
			}
		}
	}
	return 11541 // default state
}

type SpruceFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x SpruceFence) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11566
					case false:
						return 11567
					}
				case false:
					switch x.West {
					case true:
						return 11568
					case false:
						return 11569
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11570
					case false:
						return 11571
					}
				case false:
					switch x.West {
					case true:
						return 11572
					case false:
						return 11573
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11574
					case false:
						return 11575
					}
				case false:
					switch x.West {
					case true:
						return 11576
					case false:
						return 11577
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11578
					case false:
						return 11579
					}
				case false:
					switch x.West {
					case true:
						return 11580
					case false:
						return 11581
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11582
					case false:
						return 11583
					}
				case false:
					switch x.West {
					case true:
						return 11584
					case false:
						return 11585
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11586
					case false:
						return 11587
					}
				case false:
					switch x.West {
					case true:
						return 11588
					case false:
						return 11589
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11590
					case false:
						return 11591
					}
				case false:
					switch x.West {
					case true:
						return 11592
					case false:
						return 11593
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11594
					case false:
						return 11595
					}
				case false:
					switch x.West {
					case true:
						return 11596
					case false:
						return 11597
					}
				}
			}
		}
	}
	return 11597 // default state
}

type BirchFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x BirchFence) Id() uint16 {
	switch x.West {
	case true:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11598
					case false:
						return 11600
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11602
					case false:
						return 11604
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11606
					case false:
						return 11608
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11610
					case false:
						return 11612
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11614
					case false:
						return 11616
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11618
					case false:
						return 11620
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11622
					case false:
						return 11624
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11626
					case false:
						return 11628
					}
				}
			}
		}
	case false:
		switch x.East {
		case true:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11599
					case false:
						return 11601
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11603
					case false:
						return 11605
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11607
					case false:
						return 11609
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11611
					case false:
						return 11613
					}
				}
			}
		case false:
			switch x.North {
			case true:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11615
					case false:
						return 11617
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11619
					case false:
						return 11621
					}
				}
			case false:
				switch x.South {
				case true:
					switch x.Waterlogged {
					case true:
						return 11623
					case false:
						return 11625
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 11627
					case false:
						return 11629
					}
				}
			}
		}
	}
	return 11629 // default state
}

type JungleFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x JungleFence) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11630
					case false:
						return 11631
					}
				case false:
					switch x.West {
					case true:
						return 11632
					case false:
						return 11633
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11634
					case false:
						return 11635
					}
				case false:
					switch x.West {
					case true:
						return 11636
					case false:
						return 11637
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11638
					case false:
						return 11639
					}
				case false:
					switch x.West {
					case true:
						return 11640
					case false:
						return 11641
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11642
					case false:
						return 11643
					}
				case false:
					switch x.West {
					case true:
						return 11644
					case false:
						return 11645
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11646
					case false:
						return 11647
					}
				case false:
					switch x.West {
					case true:
						return 11648
					case false:
						return 11649
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11650
					case false:
						return 11651
					}
				case false:
					switch x.West {
					case true:
						return 11652
					case false:
						return 11653
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11654
					case false:
						return 11655
					}
				case false:
					switch x.West {
					case true:
						return 11656
					case false:
						return 11657
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11658
					case false:
						return 11659
					}
				case false:
					switch x.West {
					case true:
						return 11660
					case false:
						return 11661
					}
				}
			}
		}
	}
	return 11661 // default state
}

type AcaciaFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x AcaciaFence) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11662
					case false:
						return 11666
					}
				case false:
					switch x.South {
					case true:
						return 11670
					case false:
						return 11674
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11678
					case false:
						return 11682
					}
				case false:
					switch x.South {
					case true:
						return 11686
					case false:
						return 11690
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11663
					case false:
						return 11667
					}
				case false:
					switch x.South {
					case true:
						return 11671
					case false:
						return 11675
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11679
					case false:
						return 11683
					}
				case false:
					switch x.South {
					case true:
						return 11687
					case false:
						return 11691
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11664
					case false:
						return 11668
					}
				case false:
					switch x.South {
					case true:
						return 11672
					case false:
						return 11676
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11680
					case false:
						return 11684
					}
				case false:
					switch x.South {
					case true:
						return 11688
					case false:
						return 11692
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11665
					case false:
						return 11669
					}
				case false:
					switch x.South {
					case true:
						return 11673
					case false:
						return 11677
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11681
					case false:
						return 11685
					}
				case false:
					switch x.South {
					case true:
						return 11689
					case false:
						return 11693
					}
				}
			}
		}
	}
	return 11693 // default state
}

type CherryFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x CherryFence) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11694
					case false:
						return 11710
					}
				case false:
					switch x.East {
					case true:
						return 11695
					case false:
						return 11711
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11696
					case false:
						return 11712
					}
				case false:
					switch x.East {
					case true:
						return 11697
					case false:
						return 11713
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11698
					case false:
						return 11714
					}
				case false:
					switch x.East {
					case true:
						return 11699
					case false:
						return 11715
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11700
					case false:
						return 11716
					}
				case false:
					switch x.East {
					case true:
						return 11701
					case false:
						return 11717
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11702
					case false:
						return 11718
					}
				case false:
					switch x.East {
					case true:
						return 11703
					case false:
						return 11719
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11704
					case false:
						return 11720
					}
				case false:
					switch x.East {
					case true:
						return 11705
					case false:
						return 11721
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11706
					case false:
						return 11722
					}
				case false:
					switch x.East {
					case true:
						return 11707
					case false:
						return 11723
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.East {
					case true:
						return 11708
					case false:
						return 11724
					}
				case false:
					switch x.East {
					case true:
						return 11709
					case false:
						return 11725
					}
				}
			}
		}
	}
	return 11725 // default state
}

type DarkOakFence struct {
	Waterlogged bool
	West        bool
	East        bool
	North       bool
	South       bool
}

func (x DarkOakFence) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11726
					case false:
						return 11730
					}
				case false:
					switch x.South {
					case true:
						return 11734
					case false:
						return 11738
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11742
					case false:
						return 11746
					}
				case false:
					switch x.South {
					case true:
						return 11750
					case false:
						return 11754
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11727
					case false:
						return 11731
					}
				case false:
					switch x.South {
					case true:
						return 11735
					case false:
						return 11739
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11743
					case false:
						return 11747
					}
				case false:
					switch x.South {
					case true:
						return 11751
					case false:
						return 11755
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11728
					case false:
						return 11732
					}
				case false:
					switch x.South {
					case true:
						return 11736
					case false:
						return 11740
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11744
					case false:
						return 11748
					}
				case false:
					switch x.South {
					case true:
						return 11752
					case false:
						return 11756
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11729
					case false:
						return 11733
					}
				case false:
					switch x.South {
					case true:
						return 11737
					case false:
						return 11741
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11745
					case false:
						return 11749
					}
				case false:
					switch x.South {
					case true:
						return 11753
					case false:
						return 11757
					}
				}
			}
		}
	}
	return 11757 // default state
}

type MangroveFence struct {
	North       bool
	South       bool
	Waterlogged bool
	West        bool
	East        bool
}

func (x MangroveFence) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11758
					case false:
						return 11759
					}
				case false:
					switch x.West {
					case true:
						return 11760
					case false:
						return 11761
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11762
					case false:
						return 11763
					}
				case false:
					switch x.West {
					case true:
						return 11764
					case false:
						return 11765
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11766
					case false:
						return 11767
					}
				case false:
					switch x.West {
					case true:
						return 11768
					case false:
						return 11769
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11770
					case false:
						return 11771
					}
				case false:
					switch x.West {
					case true:
						return 11772
					case false:
						return 11773
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11774
					case false:
						return 11775
					}
				case false:
					switch x.West {
					case true:
						return 11776
					case false:
						return 11777
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11778
					case false:
						return 11779
					}
				case false:
					switch x.West {
					case true:
						return 11780
					case false:
						return 11781
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11782
					case false:
						return 11783
					}
				case false:
					switch x.West {
					case true:
						return 11784
					case false:
						return 11785
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 11786
					case false:
						return 11787
					}
				case false:
					switch x.West {
					case true:
						return 11788
					case false:
						return 11789
					}
				}
			}
		}
	}
	return 11789 // default state
}

type BambooFence struct {
	North       bool
	South       bool
	Waterlogged bool
	West        bool
	East        bool
}

func (x BambooFence) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11790
					case false:
						return 11794
					}
				case false:
					switch x.South {
					case true:
						return 11798
					case false:
						return 11802
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11806
					case false:
						return 11810
					}
				case false:
					switch x.South {
					case true:
						return 11814
					case false:
						return 11818
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11791
					case false:
						return 11795
					}
				case false:
					switch x.South {
					case true:
						return 11799
					case false:
						return 11803
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11807
					case false:
						return 11811
					}
				case false:
					switch x.South {
					case true:
						return 11815
					case false:
						return 11819
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11792
					case false:
						return 11796
					}
				case false:
					switch x.South {
					case true:
						return 11800
					case false:
						return 11804
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11808
					case false:
						return 11812
					}
				case false:
					switch x.South {
					case true:
						return 11816
					case false:
						return 11820
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11793
					case false:
						return 11797
					}
				case false:
					switch x.South {
					case true:
						return 11801
					case false:
						return 11805
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 11809
					case false:
						return 11813
					}
				case false:
					switch x.South {
					case true:
						return 11817
					case false:
						return 11821
					}
				}
			}
		}
	}
	return 11821 // default state
}

type SpruceDoorFacing string

const (
	SpruceDoorFacingNorth SpruceDoorFacing = "north"
	SpruceDoorFacingSouth SpruceDoorFacing = "south"
	SpruceDoorFacingWest  SpruceDoorFacing = "west"
	SpruceDoorFacingEast  SpruceDoorFacing = "east"
)

type SpruceDoorHalf string

const (
	SpruceDoorHalfUpper SpruceDoorHalf = "upper"
	SpruceDoorHalfLower SpruceDoorHalf = "lower"
)

type SpruceDoorHinge string

const (
	SpruceDoorHingeLeft  SpruceDoorHinge = "left"
	SpruceDoorHingeRight SpruceDoorHinge = "right"
)

type SpruceDoor struct {
	Facing  SpruceDoorFacing
	Half    SpruceDoorHalf
	Hinge   SpruceDoorHinge
	Open    bool
	Powered bool
}

func (x SpruceDoor) Id() uint16 {
	switch x.Hinge {
	case SpruceDoorHingeLeft:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11822
					case SpruceDoorHalfLower:
						return 11830
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11838
					case SpruceDoorHalfLower:
						return 11846
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11854
					case SpruceDoorHalfLower:
						return 11862
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11870
					case SpruceDoorHalfLower:
						return 11878
					}
				}
			case false:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11823
					case SpruceDoorHalfLower:
						return 11831
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11839
					case SpruceDoorHalfLower:
						return 11847
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11855
					case SpruceDoorHalfLower:
						return 11863
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11871
					case SpruceDoorHalfLower:
						return 11879
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11824
					case SpruceDoorHalfLower:
						return 11832
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11840
					case SpruceDoorHalfLower:
						return 11848
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11856
					case SpruceDoorHalfLower:
						return 11864
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11872
					case SpruceDoorHalfLower:
						return 11880
					}
				}
			case false:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11825
					case SpruceDoorHalfLower:
						return 11833
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11841
					case SpruceDoorHalfLower:
						return 11849
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11857
					case SpruceDoorHalfLower:
						return 11865
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11873
					case SpruceDoorHalfLower:
						return 11881
					}
				}
			}
		}
	case SpruceDoorHingeRight:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11826
					case SpruceDoorHalfLower:
						return 11834
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11842
					case SpruceDoorHalfLower:
						return 11850
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11858
					case SpruceDoorHalfLower:
						return 11866
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11874
					case SpruceDoorHalfLower:
						return 11882
					}
				}
			case false:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11827
					case SpruceDoorHalfLower:
						return 11835
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11843
					case SpruceDoorHalfLower:
						return 11851
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11859
					case SpruceDoorHalfLower:
						return 11867
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11875
					case SpruceDoorHalfLower:
						return 11883
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11828
					case SpruceDoorHalfLower:
						return 11836
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11844
					case SpruceDoorHalfLower:
						return 11852
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11860
					case SpruceDoorHalfLower:
						return 11868
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11876
					case SpruceDoorHalfLower:
						return 11884
					}
				}
			case false:
				switch x.Facing {
				case SpruceDoorFacingNorth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11829
					case SpruceDoorHalfLower:
						return 11837
					}
				case SpruceDoorFacingSouth:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11845
					case SpruceDoorHalfLower:
						return 11853
					}
				case SpruceDoorFacingWest:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11861
					case SpruceDoorHalfLower:
						return 11869
					}
				case SpruceDoorFacingEast:
					switch x.Half {
					case SpruceDoorHalfUpper:
						return 11877
					case SpruceDoorHalfLower:
						return 11885
					}
				}
			}
		}
	}
	return 11833 // default state
}

type BirchDoorFacing string

const (
	BirchDoorFacingNorth BirchDoorFacing = "north"
	BirchDoorFacingSouth BirchDoorFacing = "south"
	BirchDoorFacingWest  BirchDoorFacing = "west"
	BirchDoorFacingEast  BirchDoorFacing = "east"
)

type BirchDoorHalf string

const (
	BirchDoorHalfUpper BirchDoorHalf = "upper"
	BirchDoorHalfLower BirchDoorHalf = "lower"
)

type BirchDoorHinge string

const (
	BirchDoorHingeLeft  BirchDoorHinge = "left"
	BirchDoorHingeRight BirchDoorHinge = "right"
)

type BirchDoor struct {
	Facing  BirchDoorFacing
	Half    BirchDoorHalf
	Hinge   BirchDoorHinge
	Open    bool
	Powered bool
}

func (x BirchDoor) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Facing {
		case BirchDoorFacingNorth:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11886
					case false:
						return 11888
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11890
					case false:
						return 11892
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11894
					case false:
						return 11896
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11898
					case false:
						return 11900
					}
				}
			}
		case BirchDoorFacingSouth:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11902
					case false:
						return 11904
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11906
					case false:
						return 11908
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11910
					case false:
						return 11912
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11914
					case false:
						return 11916
					}
				}
			}
		case BirchDoorFacingWest:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11918
					case false:
						return 11920
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11922
					case false:
						return 11924
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11926
					case false:
						return 11928
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11930
					case false:
						return 11932
					}
				}
			}
		case BirchDoorFacingEast:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11934
					case false:
						return 11936
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11938
					case false:
						return 11940
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11942
					case false:
						return 11944
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11946
					case false:
						return 11948
					}
				}
			}
		}
	case false:
		switch x.Facing {
		case BirchDoorFacingNorth:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11887
					case false:
						return 11889
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11891
					case false:
						return 11893
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11895
					case false:
						return 11897
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11899
					case false:
						return 11901
					}
				}
			}
		case BirchDoorFacingSouth:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11903
					case false:
						return 11905
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11907
					case false:
						return 11909
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11911
					case false:
						return 11913
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11915
					case false:
						return 11917
					}
				}
			}
		case BirchDoorFacingWest:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11919
					case false:
						return 11921
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11923
					case false:
						return 11925
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11927
					case false:
						return 11929
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11931
					case false:
						return 11933
					}
				}
			}
		case BirchDoorFacingEast:
			switch x.Half {
			case BirchDoorHalfUpper:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11935
					case false:
						return 11937
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11939
					case false:
						return 11941
					}
				}
			case BirchDoorHalfLower:
				switch x.Hinge {
				case BirchDoorHingeLeft:
					switch x.Open {
					case true:
						return 11943
					case false:
						return 11945
					}
				case BirchDoorHingeRight:
					switch x.Open {
					case true:
						return 11947
					case false:
						return 11949
					}
				}
			}
		}
	}
	return 11897 // default state
}

type JungleDoorFacing string

const (
	JungleDoorFacingNorth JungleDoorFacing = "north"
	JungleDoorFacingSouth JungleDoorFacing = "south"
	JungleDoorFacingWest  JungleDoorFacing = "west"
	JungleDoorFacingEast  JungleDoorFacing = "east"
)

type JungleDoorHalf string

const (
	JungleDoorHalfUpper JungleDoorHalf = "upper"
	JungleDoorHalfLower JungleDoorHalf = "lower"
)

type JungleDoorHinge string

const (
	JungleDoorHingeLeft  JungleDoorHinge = "left"
	JungleDoorHingeRight JungleDoorHinge = "right"
)

type JungleDoor struct {
	Facing  JungleDoorFacing
	Half    JungleDoorHalf
	Hinge   JungleDoorHinge
	Open    bool
	Powered bool
}

func (x JungleDoor) Id() uint16 {
	switch x.Facing {
	case JungleDoorFacingNorth:
		switch x.Half {
		case JungleDoorHalfUpper:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11950
					case false:
						return 11951
					}
				case false:
					switch x.Powered {
					case true:
						return 11952
					case false:
						return 11953
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11954
					case false:
						return 11955
					}
				case false:
					switch x.Powered {
					case true:
						return 11956
					case false:
						return 11957
					}
				}
			}
		case JungleDoorHalfLower:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11958
					case false:
						return 11959
					}
				case false:
					switch x.Powered {
					case true:
						return 11960
					case false:
						return 11961
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11962
					case false:
						return 11963
					}
				case false:
					switch x.Powered {
					case true:
						return 11964
					case false:
						return 11965
					}
				}
			}
		}
	case JungleDoorFacingSouth:
		switch x.Half {
		case JungleDoorHalfUpper:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11966
					case false:
						return 11967
					}
				case false:
					switch x.Powered {
					case true:
						return 11968
					case false:
						return 11969
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11970
					case false:
						return 11971
					}
				case false:
					switch x.Powered {
					case true:
						return 11972
					case false:
						return 11973
					}
				}
			}
		case JungleDoorHalfLower:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11974
					case false:
						return 11975
					}
				case false:
					switch x.Powered {
					case true:
						return 11976
					case false:
						return 11977
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11978
					case false:
						return 11979
					}
				case false:
					switch x.Powered {
					case true:
						return 11980
					case false:
						return 11981
					}
				}
			}
		}
	case JungleDoorFacingWest:
		switch x.Half {
		case JungleDoorHalfUpper:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11982
					case false:
						return 11983
					}
				case false:
					switch x.Powered {
					case true:
						return 11984
					case false:
						return 11985
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11986
					case false:
						return 11987
					}
				case false:
					switch x.Powered {
					case true:
						return 11988
					case false:
						return 11989
					}
				}
			}
		case JungleDoorHalfLower:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11990
					case false:
						return 11991
					}
				case false:
					switch x.Powered {
					case true:
						return 11992
					case false:
						return 11993
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11994
					case false:
						return 11995
					}
				case false:
					switch x.Powered {
					case true:
						return 11996
					case false:
						return 11997
					}
				}
			}
		}
	case JungleDoorFacingEast:
		switch x.Half {
		case JungleDoorHalfUpper:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 11998
					case false:
						return 11999
					}
				case false:
					switch x.Powered {
					case true:
						return 12000
					case false:
						return 12001
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12002
					case false:
						return 12003
					}
				case false:
					switch x.Powered {
					case true:
						return 12004
					case false:
						return 12005
					}
				}
			}
		case JungleDoorHalfLower:
			switch x.Hinge {
			case JungleDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12006
					case false:
						return 12007
					}
				case false:
					switch x.Powered {
					case true:
						return 12008
					case false:
						return 12009
					}
				}
			case JungleDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12010
					case false:
						return 12011
					}
				case false:
					switch x.Powered {
					case true:
						return 12012
					case false:
						return 12013
					}
				}
			}
		}
	}
	return 11961 // default state
}

type AcaciaDoorHinge string

const (
	AcaciaDoorHingeLeft  AcaciaDoorHinge = "left"
	AcaciaDoorHingeRight AcaciaDoorHinge = "right"
)

type AcaciaDoorFacing string

const (
	AcaciaDoorFacingNorth AcaciaDoorFacing = "north"
	AcaciaDoorFacingSouth AcaciaDoorFacing = "south"
	AcaciaDoorFacingWest  AcaciaDoorFacing = "west"
	AcaciaDoorFacingEast  AcaciaDoorFacing = "east"
)

type AcaciaDoorHalf string

const (
	AcaciaDoorHalfUpper AcaciaDoorHalf = "upper"
	AcaciaDoorHalfLower AcaciaDoorHalf = "lower"
)

type AcaciaDoor struct {
	Hinge   AcaciaDoorHinge
	Open    bool
	Powered bool
	Facing  AcaciaDoorFacing
	Half    AcaciaDoorHalf
}

func (x AcaciaDoor) Id() uint16 {
	switch x.Hinge {
	case AcaciaDoorHingeLeft:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12014
					case AcaciaDoorHalfLower:
						return 12022
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12030
					case AcaciaDoorHalfLower:
						return 12038
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12046
					case AcaciaDoorHalfLower:
						return 12054
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12062
					case AcaciaDoorHalfLower:
						return 12070
					}
				}
			case false:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12015
					case AcaciaDoorHalfLower:
						return 12023
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12031
					case AcaciaDoorHalfLower:
						return 12039
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12047
					case AcaciaDoorHalfLower:
						return 12055
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12063
					case AcaciaDoorHalfLower:
						return 12071
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12016
					case AcaciaDoorHalfLower:
						return 12024
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12032
					case AcaciaDoorHalfLower:
						return 12040
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12048
					case AcaciaDoorHalfLower:
						return 12056
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12064
					case AcaciaDoorHalfLower:
						return 12072
					}
				}
			case false:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12017
					case AcaciaDoorHalfLower:
						return 12025
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12033
					case AcaciaDoorHalfLower:
						return 12041
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12049
					case AcaciaDoorHalfLower:
						return 12057
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12065
					case AcaciaDoorHalfLower:
						return 12073
					}
				}
			}
		}
	case AcaciaDoorHingeRight:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12018
					case AcaciaDoorHalfLower:
						return 12026
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12034
					case AcaciaDoorHalfLower:
						return 12042
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12050
					case AcaciaDoorHalfLower:
						return 12058
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12066
					case AcaciaDoorHalfLower:
						return 12074
					}
				}
			case false:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12019
					case AcaciaDoorHalfLower:
						return 12027
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12035
					case AcaciaDoorHalfLower:
						return 12043
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12051
					case AcaciaDoorHalfLower:
						return 12059
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12067
					case AcaciaDoorHalfLower:
						return 12075
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12020
					case AcaciaDoorHalfLower:
						return 12028
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12036
					case AcaciaDoorHalfLower:
						return 12044
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12052
					case AcaciaDoorHalfLower:
						return 12060
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12068
					case AcaciaDoorHalfLower:
						return 12076
					}
				}
			case false:
				switch x.Facing {
				case AcaciaDoorFacingNorth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12021
					case AcaciaDoorHalfLower:
						return 12029
					}
				case AcaciaDoorFacingSouth:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12037
					case AcaciaDoorHalfLower:
						return 12045
					}
				case AcaciaDoorFacingWest:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12053
					case AcaciaDoorHalfLower:
						return 12061
					}
				case AcaciaDoorFacingEast:
					switch x.Half {
					case AcaciaDoorHalfUpper:
						return 12069
					case AcaciaDoorHalfLower:
						return 12077
					}
				}
			}
		}
	}
	return 12025 // default state
}

type CherryDoorFacing string

const (
	CherryDoorFacingNorth CherryDoorFacing = "north"
	CherryDoorFacingSouth CherryDoorFacing = "south"
	CherryDoorFacingWest  CherryDoorFacing = "west"
	CherryDoorFacingEast  CherryDoorFacing = "east"
)

type CherryDoorHalf string

const (
	CherryDoorHalfUpper CherryDoorHalf = "upper"
	CherryDoorHalfLower CherryDoorHalf = "lower"
)

type CherryDoorHinge string

const (
	CherryDoorHingeLeft  CherryDoorHinge = "left"
	CherryDoorHingeRight CherryDoorHinge = "right"
)

type CherryDoor struct {
	Facing  CherryDoorFacing
	Half    CherryDoorHalf
	Hinge   CherryDoorHinge
	Open    bool
	Powered bool
}

func (x CherryDoor) Id() uint16 {
	switch x.Facing {
	case CherryDoorFacingNorth:
		switch x.Half {
		case CherryDoorHalfUpper:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12078
					case false:
						return 12079
					}
				case false:
					switch x.Powered {
					case true:
						return 12080
					case false:
						return 12081
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12082
					case false:
						return 12083
					}
				case false:
					switch x.Powered {
					case true:
						return 12084
					case false:
						return 12085
					}
				}
			}
		case CherryDoorHalfLower:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12086
					case false:
						return 12087
					}
				case false:
					switch x.Powered {
					case true:
						return 12088
					case false:
						return 12089
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12090
					case false:
						return 12091
					}
				case false:
					switch x.Powered {
					case true:
						return 12092
					case false:
						return 12093
					}
				}
			}
		}
	case CherryDoorFacingSouth:
		switch x.Half {
		case CherryDoorHalfUpper:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12094
					case false:
						return 12095
					}
				case false:
					switch x.Powered {
					case true:
						return 12096
					case false:
						return 12097
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12098
					case false:
						return 12099
					}
				case false:
					switch x.Powered {
					case true:
						return 12100
					case false:
						return 12101
					}
				}
			}
		case CherryDoorHalfLower:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12102
					case false:
						return 12103
					}
				case false:
					switch x.Powered {
					case true:
						return 12104
					case false:
						return 12105
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12106
					case false:
						return 12107
					}
				case false:
					switch x.Powered {
					case true:
						return 12108
					case false:
						return 12109
					}
				}
			}
		}
	case CherryDoorFacingWest:
		switch x.Half {
		case CherryDoorHalfUpper:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12110
					case false:
						return 12111
					}
				case false:
					switch x.Powered {
					case true:
						return 12112
					case false:
						return 12113
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12114
					case false:
						return 12115
					}
				case false:
					switch x.Powered {
					case true:
						return 12116
					case false:
						return 12117
					}
				}
			}
		case CherryDoorHalfLower:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12118
					case false:
						return 12119
					}
				case false:
					switch x.Powered {
					case true:
						return 12120
					case false:
						return 12121
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12122
					case false:
						return 12123
					}
				case false:
					switch x.Powered {
					case true:
						return 12124
					case false:
						return 12125
					}
				}
			}
		}
	case CherryDoorFacingEast:
		switch x.Half {
		case CherryDoorHalfUpper:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12126
					case false:
						return 12127
					}
				case false:
					switch x.Powered {
					case true:
						return 12128
					case false:
						return 12129
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12130
					case false:
						return 12131
					}
				case false:
					switch x.Powered {
					case true:
						return 12132
					case false:
						return 12133
					}
				}
			}
		case CherryDoorHalfLower:
			switch x.Hinge {
			case CherryDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12134
					case false:
						return 12135
					}
				case false:
					switch x.Powered {
					case true:
						return 12136
					case false:
						return 12137
					}
				}
			case CherryDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12138
					case false:
						return 12139
					}
				case false:
					switch x.Powered {
					case true:
						return 12140
					case false:
						return 12141
					}
				}
			}
		}
	}
	return 12089 // default state
}

type DarkOakDoorFacing string

const (
	DarkOakDoorFacingNorth DarkOakDoorFacing = "north"
	DarkOakDoorFacingSouth DarkOakDoorFacing = "south"
	DarkOakDoorFacingWest  DarkOakDoorFacing = "west"
	DarkOakDoorFacingEast  DarkOakDoorFacing = "east"
)

type DarkOakDoorHalf string

const (
	DarkOakDoorHalfUpper DarkOakDoorHalf = "upper"
	DarkOakDoorHalfLower DarkOakDoorHalf = "lower"
)

type DarkOakDoorHinge string

const (
	DarkOakDoorHingeLeft  DarkOakDoorHinge = "left"
	DarkOakDoorHingeRight DarkOakDoorHinge = "right"
)

type DarkOakDoor struct {
	Facing  DarkOakDoorFacing
	Half    DarkOakDoorHalf
	Hinge   DarkOakDoorHinge
	Open    bool
	Powered bool
}

func (x DarkOakDoor) Id() uint16 {
	switch x.Half {
	case DarkOakDoorHalfUpper:
		switch x.Hinge {
		case DarkOakDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12142
					case DarkOakDoorFacingSouth:
						return 12158
					case DarkOakDoorFacingWest:
						return 12174
					case DarkOakDoorFacingEast:
						return 12190
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12143
					case DarkOakDoorFacingSouth:
						return 12159
					case DarkOakDoorFacingWest:
						return 12175
					case DarkOakDoorFacingEast:
						return 12191
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12144
					case DarkOakDoorFacingSouth:
						return 12160
					case DarkOakDoorFacingWest:
						return 12176
					case DarkOakDoorFacingEast:
						return 12192
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12145
					case DarkOakDoorFacingSouth:
						return 12161
					case DarkOakDoorFacingWest:
						return 12177
					case DarkOakDoorFacingEast:
						return 12193
					}
				}
			}
		case DarkOakDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12146
					case DarkOakDoorFacingSouth:
						return 12162
					case DarkOakDoorFacingWest:
						return 12178
					case DarkOakDoorFacingEast:
						return 12194
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12147
					case DarkOakDoorFacingSouth:
						return 12163
					case DarkOakDoorFacingWest:
						return 12179
					case DarkOakDoorFacingEast:
						return 12195
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12148
					case DarkOakDoorFacingSouth:
						return 12164
					case DarkOakDoorFacingWest:
						return 12180
					case DarkOakDoorFacingEast:
						return 12196
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12149
					case DarkOakDoorFacingSouth:
						return 12165
					case DarkOakDoorFacingWest:
						return 12181
					case DarkOakDoorFacingEast:
						return 12197
					}
				}
			}
		}
	case DarkOakDoorHalfLower:
		switch x.Hinge {
		case DarkOakDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12150
					case DarkOakDoorFacingSouth:
						return 12166
					case DarkOakDoorFacingWest:
						return 12182
					case DarkOakDoorFacingEast:
						return 12198
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12151
					case DarkOakDoorFacingSouth:
						return 12167
					case DarkOakDoorFacingWest:
						return 12183
					case DarkOakDoorFacingEast:
						return 12199
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12152
					case DarkOakDoorFacingSouth:
						return 12168
					case DarkOakDoorFacingWest:
						return 12184
					case DarkOakDoorFacingEast:
						return 12200
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12153
					case DarkOakDoorFacingSouth:
						return 12169
					case DarkOakDoorFacingWest:
						return 12185
					case DarkOakDoorFacingEast:
						return 12201
					}
				}
			}
		case DarkOakDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12154
					case DarkOakDoorFacingSouth:
						return 12170
					case DarkOakDoorFacingWest:
						return 12186
					case DarkOakDoorFacingEast:
						return 12202
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12155
					case DarkOakDoorFacingSouth:
						return 12171
					case DarkOakDoorFacingWest:
						return 12187
					case DarkOakDoorFacingEast:
						return 12203
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12156
					case DarkOakDoorFacingSouth:
						return 12172
					case DarkOakDoorFacingWest:
						return 12188
					case DarkOakDoorFacingEast:
						return 12204
					}
				case false:
					switch x.Facing {
					case DarkOakDoorFacingNorth:
						return 12157
					case DarkOakDoorFacingSouth:
						return 12173
					case DarkOakDoorFacingWest:
						return 12189
					case DarkOakDoorFacingEast:
						return 12205
					}
				}
			}
		}
	}
	return 12153 // default state
}

type MangroveDoorFacing string

const (
	MangroveDoorFacingNorth MangroveDoorFacing = "north"
	MangroveDoorFacingSouth MangroveDoorFacing = "south"
	MangroveDoorFacingWest  MangroveDoorFacing = "west"
	MangroveDoorFacingEast  MangroveDoorFacing = "east"
)

type MangroveDoorHalf string

const (
	MangroveDoorHalfUpper MangroveDoorHalf = "upper"
	MangroveDoorHalfLower MangroveDoorHalf = "lower"
)

type MangroveDoorHinge string

const (
	MangroveDoorHingeLeft  MangroveDoorHinge = "left"
	MangroveDoorHingeRight MangroveDoorHinge = "right"
)

type MangroveDoor struct {
	Facing  MangroveDoorFacing
	Half    MangroveDoorHalf
	Hinge   MangroveDoorHinge
	Open    bool
	Powered bool
}

func (x MangroveDoor) Id() uint16 {
	switch x.Open {
	case true:
		switch x.Powered {
		case true:
			switch x.Facing {
			case MangroveDoorFacingNorth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12206
					case MangroveDoorHingeRight:
						return 12210
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12214
					case MangroveDoorHingeRight:
						return 12218
					}
				}
			case MangroveDoorFacingSouth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12222
					case MangroveDoorHingeRight:
						return 12226
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12230
					case MangroveDoorHingeRight:
						return 12234
					}
				}
			case MangroveDoorFacingWest:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12238
					case MangroveDoorHingeRight:
						return 12242
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12246
					case MangroveDoorHingeRight:
						return 12250
					}
				}
			case MangroveDoorFacingEast:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12254
					case MangroveDoorHingeRight:
						return 12258
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12262
					case MangroveDoorHingeRight:
						return 12266
					}
				}
			}
		case false:
			switch x.Facing {
			case MangroveDoorFacingNorth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12207
					case MangroveDoorHingeRight:
						return 12211
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12215
					case MangroveDoorHingeRight:
						return 12219
					}
				}
			case MangroveDoorFacingSouth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12223
					case MangroveDoorHingeRight:
						return 12227
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12231
					case MangroveDoorHingeRight:
						return 12235
					}
				}
			case MangroveDoorFacingWest:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12239
					case MangroveDoorHingeRight:
						return 12243
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12247
					case MangroveDoorHingeRight:
						return 12251
					}
				}
			case MangroveDoorFacingEast:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12255
					case MangroveDoorHingeRight:
						return 12259
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12263
					case MangroveDoorHingeRight:
						return 12267
					}
				}
			}
		}
	case false:
		switch x.Powered {
		case true:
			switch x.Facing {
			case MangroveDoorFacingNorth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12208
					case MangroveDoorHingeRight:
						return 12212
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12216
					case MangroveDoorHingeRight:
						return 12220
					}
				}
			case MangroveDoorFacingSouth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12224
					case MangroveDoorHingeRight:
						return 12228
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12232
					case MangroveDoorHingeRight:
						return 12236
					}
				}
			case MangroveDoorFacingWest:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12240
					case MangroveDoorHingeRight:
						return 12244
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12248
					case MangroveDoorHingeRight:
						return 12252
					}
				}
			case MangroveDoorFacingEast:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12256
					case MangroveDoorHingeRight:
						return 12260
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12264
					case MangroveDoorHingeRight:
						return 12268
					}
				}
			}
		case false:
			switch x.Facing {
			case MangroveDoorFacingNorth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12209
					case MangroveDoorHingeRight:
						return 12213
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12217
					case MangroveDoorHingeRight:
						return 12221
					}
				}
			case MangroveDoorFacingSouth:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12225
					case MangroveDoorHingeRight:
						return 12229
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12233
					case MangroveDoorHingeRight:
						return 12237
					}
				}
			case MangroveDoorFacingWest:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12241
					case MangroveDoorHingeRight:
						return 12245
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12249
					case MangroveDoorHingeRight:
						return 12253
					}
				}
			case MangroveDoorFacingEast:
				switch x.Half {
				case MangroveDoorHalfUpper:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12257
					case MangroveDoorHingeRight:
						return 12261
					}
				case MangroveDoorHalfLower:
					switch x.Hinge {
					case MangroveDoorHingeLeft:
						return 12265
					case MangroveDoorHingeRight:
						return 12269
					}
				}
			}
		}
	}
	return 12217 // default state
}

type BambooDoorFacing string

const (
	BambooDoorFacingNorth BambooDoorFacing = "north"
	BambooDoorFacingSouth BambooDoorFacing = "south"
	BambooDoorFacingWest  BambooDoorFacing = "west"
	BambooDoorFacingEast  BambooDoorFacing = "east"
)

type BambooDoorHalf string

const (
	BambooDoorHalfUpper BambooDoorHalf = "upper"
	BambooDoorHalfLower BambooDoorHalf = "lower"
)

type BambooDoorHinge string

const (
	BambooDoorHingeLeft  BambooDoorHinge = "left"
	BambooDoorHingeRight BambooDoorHinge = "right"
)

type BambooDoor struct {
	Open    bool
	Powered bool
	Facing  BambooDoorFacing
	Half    BambooDoorHalf
	Hinge   BambooDoorHinge
}

func (x BambooDoor) Id() uint16 {
	switch x.Facing {
	case BambooDoorFacingNorth:
		switch x.Half {
		case BambooDoorHalfUpper:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12270
					case false:
						return 12271
					}
				case false:
					switch x.Powered {
					case true:
						return 12272
					case false:
						return 12273
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12274
					case false:
						return 12275
					}
				case false:
					switch x.Powered {
					case true:
						return 12276
					case false:
						return 12277
					}
				}
			}
		case BambooDoorHalfLower:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12278
					case false:
						return 12279
					}
				case false:
					switch x.Powered {
					case true:
						return 12280
					case false:
						return 12281
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12282
					case false:
						return 12283
					}
				case false:
					switch x.Powered {
					case true:
						return 12284
					case false:
						return 12285
					}
				}
			}
		}
	case BambooDoorFacingSouth:
		switch x.Half {
		case BambooDoorHalfUpper:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12286
					case false:
						return 12287
					}
				case false:
					switch x.Powered {
					case true:
						return 12288
					case false:
						return 12289
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12290
					case false:
						return 12291
					}
				case false:
					switch x.Powered {
					case true:
						return 12292
					case false:
						return 12293
					}
				}
			}
		case BambooDoorHalfLower:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12294
					case false:
						return 12295
					}
				case false:
					switch x.Powered {
					case true:
						return 12296
					case false:
						return 12297
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12298
					case false:
						return 12299
					}
				case false:
					switch x.Powered {
					case true:
						return 12300
					case false:
						return 12301
					}
				}
			}
		}
	case BambooDoorFacingWest:
		switch x.Half {
		case BambooDoorHalfUpper:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12302
					case false:
						return 12303
					}
				case false:
					switch x.Powered {
					case true:
						return 12304
					case false:
						return 12305
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12306
					case false:
						return 12307
					}
				case false:
					switch x.Powered {
					case true:
						return 12308
					case false:
						return 12309
					}
				}
			}
		case BambooDoorHalfLower:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12310
					case false:
						return 12311
					}
				case false:
					switch x.Powered {
					case true:
						return 12312
					case false:
						return 12313
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12314
					case false:
						return 12315
					}
				case false:
					switch x.Powered {
					case true:
						return 12316
					case false:
						return 12317
					}
				}
			}
		}
	case BambooDoorFacingEast:
		switch x.Half {
		case BambooDoorHalfUpper:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12318
					case false:
						return 12319
					}
				case false:
					switch x.Powered {
					case true:
						return 12320
					case false:
						return 12321
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12322
					case false:
						return 12323
					}
				case false:
					switch x.Powered {
					case true:
						return 12324
					case false:
						return 12325
					}
				}
			}
		case BambooDoorHalfLower:
			switch x.Hinge {
			case BambooDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12326
					case false:
						return 12327
					}
				case false:
					switch x.Powered {
					case true:
						return 12328
					case false:
						return 12329
					}
				}
			case BambooDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 12330
					case false:
						return 12331
					}
				case false:
					switch x.Powered {
					case true:
						return 12332
					case false:
						return 12333
					}
				}
			}
		}
	}
	return 12281 // default state
}

type EndRodFacing string

const (
	EndRodFacingNorth EndRodFacing = "north"
	EndRodFacingEast  EndRodFacing = "east"
	EndRodFacingSouth EndRodFacing = "south"
	EndRodFacingWest  EndRodFacing = "west"
	EndRodFacingUp    EndRodFacing = "up"
	EndRodFacingDown  EndRodFacing = "down"
)

type EndRod struct {
	Facing EndRodFacing
}

func (x EndRod) Id() uint16 {
	switch x.Facing {
	case EndRodFacingNorth:
		return 12334
	case EndRodFacingEast:
		return 12335
	case EndRodFacingSouth:
		return 12336
	case EndRodFacingWest:
		return 12337
	case EndRodFacingUp:
		return 12338
	case EndRodFacingDown:
		return 12339
	}
	return 12338 // default state
}

type ChorusPlant struct {
	Down  bool
	East  bool
	North bool
	South bool
	Up    bool
	West  bool
}

func (x ChorusPlant) Id() uint16 {
	switch x.North {
	case true:
		switch x.South {
		case true:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12340
						case false:
							return 12356
						}
					case false:
						switch x.East {
						case true:
							return 12372
						case false:
							return 12388
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12341
						case false:
							return 12357
						}
					case false:
						switch x.East {
						case true:
							return 12373
						case false:
							return 12389
						}
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12342
						case false:
							return 12358
						}
					case false:
						switch x.East {
						case true:
							return 12374
						case false:
							return 12390
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12343
						case false:
							return 12359
						}
					case false:
						switch x.East {
						case true:
							return 12375
						case false:
							return 12391
						}
					}
				}
			}
		case false:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12344
						case false:
							return 12360
						}
					case false:
						switch x.East {
						case true:
							return 12376
						case false:
							return 12392
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12345
						case false:
							return 12361
						}
					case false:
						switch x.East {
						case true:
							return 12377
						case false:
							return 12393
						}
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12346
						case false:
							return 12362
						}
					case false:
						switch x.East {
						case true:
							return 12378
						case false:
							return 12394
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12347
						case false:
							return 12363
						}
					case false:
						switch x.East {
						case true:
							return 12379
						case false:
							return 12395
						}
					}
				}
			}
		}
	case false:
		switch x.South {
		case true:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12348
						case false:
							return 12364
						}
					case false:
						switch x.East {
						case true:
							return 12380
						case false:
							return 12396
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12349
						case false:
							return 12365
						}
					case false:
						switch x.East {
						case true:
							return 12381
						case false:
							return 12397
						}
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12350
						case false:
							return 12366
						}
					case false:
						switch x.East {
						case true:
							return 12382
						case false:
							return 12398
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12351
						case false:
							return 12367
						}
					case false:
						switch x.East {
						case true:
							return 12383
						case false:
							return 12399
						}
					}
				}
			}
		case false:
			switch x.Up {
			case true:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12352
						case false:
							return 12368
						}
					case false:
						switch x.East {
						case true:
							return 12384
						case false:
							return 12400
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12353
						case false:
							return 12369
						}
					case false:
						switch x.East {
						case true:
							return 12385
						case false:
							return 12401
						}
					}
				}
			case false:
				switch x.West {
				case true:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12354
						case false:
							return 12370
						}
					case false:
						switch x.East {
						case true:
							return 12386
						case false:
							return 12402
						}
					}
				case false:
					switch x.Down {
					case true:
						switch x.East {
						case true:
							return 12355
						case false:
							return 12371
						}
					case false:
						switch x.East {
						case true:
							return 12387
						case false:
							return 12403
						}
					}
				}
			}
		}
	}
	return 12403 // default state
}

type ChorusFlower struct {
	// Valid values: 0, 1, 2, 3, 4, 5
	Age int
}

func (x ChorusFlower) Id() uint16 {
	switch x.Age {
	case 0:
		return 12404
	case 1:
		return 12405
	case 2:
		return 12406
	case 3:
		return 12407
	case 4:
		return 12408
	case 5:
		return 12409
	}
	return 12404 // default state
}

type PurpurBlock struct{}

func (x PurpurBlock) Id() uint16 {
	return 12410
}

type PurpurPillarAxis string

const (
	PurpurPillarAxisX PurpurPillarAxis = "x"
	PurpurPillarAxisY PurpurPillarAxis = "y"
	PurpurPillarAxisZ PurpurPillarAxis = "z"
)

type PurpurPillar struct {
	Axis PurpurPillarAxis
}

func (x PurpurPillar) Id() uint16 {
	switch x.Axis {
	case PurpurPillarAxisX:
		return 12411
	case PurpurPillarAxisY:
		return 12412
	case PurpurPillarAxisZ:
		return 12413
	}
	return 12412 // default state
}

type PurpurStairsFacing string

const (
	PurpurStairsFacingNorth PurpurStairsFacing = "north"
	PurpurStairsFacingSouth PurpurStairsFacing = "south"
	PurpurStairsFacingWest  PurpurStairsFacing = "west"
	PurpurStairsFacingEast  PurpurStairsFacing = "east"
)

type PurpurStairsHalf string

const (
	PurpurStairsHalfTop    PurpurStairsHalf = "top"
	PurpurStairsHalfBottom PurpurStairsHalf = "bottom"
)

type PurpurStairsShape string

const (
	PurpurStairsShapeStraight   PurpurStairsShape = "straight"
	PurpurStairsShapeInnerLeft  PurpurStairsShape = "inner_left"
	PurpurStairsShapeInnerRight PurpurStairsShape = "inner_right"
	PurpurStairsShapeOuterLeft  PurpurStairsShape = "outer_left"
	PurpurStairsShapeOuterRight PurpurStairsShape = "outer_right"
)

type PurpurStairs struct {
	Facing      PurpurStairsFacing
	Half        PurpurStairsHalf
	Shape       PurpurStairsShape
	Waterlogged bool
}

func (x PurpurStairs) Id() uint16 {
	switch x.Shape {
	case PurpurStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12414
				case PurpurStairsHalfBottom:
					return 12424
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12434
				case PurpurStairsHalfBottom:
					return 12444
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12454
				case PurpurStairsHalfBottom:
					return 12464
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12474
				case PurpurStairsHalfBottom:
					return 12484
				}
			}
		case false:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12415
				case PurpurStairsHalfBottom:
					return 12425
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12435
				case PurpurStairsHalfBottom:
					return 12445
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12455
				case PurpurStairsHalfBottom:
					return 12465
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12475
				case PurpurStairsHalfBottom:
					return 12485
				}
			}
		}
	case PurpurStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12416
				case PurpurStairsHalfBottom:
					return 12426
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12436
				case PurpurStairsHalfBottom:
					return 12446
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12456
				case PurpurStairsHalfBottom:
					return 12466
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12476
				case PurpurStairsHalfBottom:
					return 12486
				}
			}
		case false:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12417
				case PurpurStairsHalfBottom:
					return 12427
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12437
				case PurpurStairsHalfBottom:
					return 12447
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12457
				case PurpurStairsHalfBottom:
					return 12467
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12477
				case PurpurStairsHalfBottom:
					return 12487
				}
			}
		}
	case PurpurStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12418
				case PurpurStairsHalfBottom:
					return 12428
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12438
				case PurpurStairsHalfBottom:
					return 12448
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12458
				case PurpurStairsHalfBottom:
					return 12468
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12478
				case PurpurStairsHalfBottom:
					return 12488
				}
			}
		case false:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12419
				case PurpurStairsHalfBottom:
					return 12429
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12439
				case PurpurStairsHalfBottom:
					return 12449
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12459
				case PurpurStairsHalfBottom:
					return 12469
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12479
				case PurpurStairsHalfBottom:
					return 12489
				}
			}
		}
	case PurpurStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12420
				case PurpurStairsHalfBottom:
					return 12430
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12440
				case PurpurStairsHalfBottom:
					return 12450
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12460
				case PurpurStairsHalfBottom:
					return 12470
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12480
				case PurpurStairsHalfBottom:
					return 12490
				}
			}
		case false:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12421
				case PurpurStairsHalfBottom:
					return 12431
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12441
				case PurpurStairsHalfBottom:
					return 12451
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12461
				case PurpurStairsHalfBottom:
					return 12471
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12481
				case PurpurStairsHalfBottom:
					return 12491
				}
			}
		}
	case PurpurStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12422
				case PurpurStairsHalfBottom:
					return 12432
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12442
				case PurpurStairsHalfBottom:
					return 12452
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12462
				case PurpurStairsHalfBottom:
					return 12472
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12482
				case PurpurStairsHalfBottom:
					return 12492
				}
			}
		case false:
			switch x.Facing {
			case PurpurStairsFacingNorth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12423
				case PurpurStairsHalfBottom:
					return 12433
				}
			case PurpurStairsFacingSouth:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12443
				case PurpurStairsHalfBottom:
					return 12453
				}
			case PurpurStairsFacingWest:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12463
				case PurpurStairsHalfBottom:
					return 12473
				}
			case PurpurStairsFacingEast:
				switch x.Half {
				case PurpurStairsHalfTop:
					return 12483
				case PurpurStairsHalfBottom:
					return 12493
				}
			}
		}
	}
	return 12425 // default state
}

type EndStoneBricks struct{}

func (x EndStoneBricks) Id() uint16 {
	return 12494
}

type TorchflowerCrop struct {
	// Valid values: 0, 1
	Age int
}

func (x TorchflowerCrop) Id() uint16 {
	switch x.Age {
	case 0:
		return 12495
	case 1:
		return 12496
	}
	return 12495 // default state
}

type PitcherCropHalf string

const (
	PitcherCropHalfUpper PitcherCropHalf = "upper"
	PitcherCropHalfLower PitcherCropHalf = "lower"
)

type PitcherCrop struct {
	Half PitcherCropHalf
	// Valid values: 0, 1, 2, 3, 4
	Age int
}

func (x PitcherCrop) Id() uint16 {
	switch x.Age {
	case 0:
		switch x.Half {
		case PitcherCropHalfUpper:
			return 12497
		case PitcherCropHalfLower:
			return 12498
		}
	case 1:
		switch x.Half {
		case PitcherCropHalfUpper:
			return 12499
		case PitcherCropHalfLower:
			return 12500
		}
	case 2:
		switch x.Half {
		case PitcherCropHalfUpper:
			return 12501
		case PitcherCropHalfLower:
			return 12502
		}
	case 3:
		switch x.Half {
		case PitcherCropHalfUpper:
			return 12503
		case PitcherCropHalfLower:
			return 12504
		}
	case 4:
		switch x.Half {
		case PitcherCropHalfUpper:
			return 12505
		case PitcherCropHalfLower:
			return 12506
		}
	}
	return 12498 // default state
}

type PitcherPlantHalf string

const (
	PitcherPlantHalfUpper PitcherPlantHalf = "upper"
	PitcherPlantHalfLower PitcherPlantHalf = "lower"
)

type PitcherPlant struct {
	Half PitcherPlantHalf
}

func (x PitcherPlant) Id() uint16 {
	switch x.Half {
	case PitcherPlantHalfUpper:
		return 12507
	case PitcherPlantHalfLower:
		return 12508
	}
	return 12508 // default state
}

type Beetroots struct {
	// Valid values: 0, 1, 2, 3
	Age int
}

func (x Beetroots) Id() uint16 {
	switch x.Age {
	case 0:
		return 12509
	case 1:
		return 12510
	case 2:
		return 12511
	case 3:
		return 12512
	}
	return 12509 // default state
}

type DirtPath struct{}

func (x DirtPath) Id() uint16 {
	return 12513
}

type EndGateway struct{}

func (x EndGateway) Id() uint16 {
	return 12514
}

type RepeatingCommandBlockFacing string

const (
	RepeatingCommandBlockFacingNorth RepeatingCommandBlockFacing = "north"
	RepeatingCommandBlockFacingEast  RepeatingCommandBlockFacing = "east"
	RepeatingCommandBlockFacingSouth RepeatingCommandBlockFacing = "south"
	RepeatingCommandBlockFacingWest  RepeatingCommandBlockFacing = "west"
	RepeatingCommandBlockFacingUp    RepeatingCommandBlockFacing = "up"
	RepeatingCommandBlockFacingDown  RepeatingCommandBlockFacing = "down"
)

type RepeatingCommandBlock struct {
	Conditional bool
	Facing      RepeatingCommandBlockFacing
}

func (x RepeatingCommandBlock) Id() uint16 {
	switch x.Conditional {
	case true:
		switch x.Facing {
		case RepeatingCommandBlockFacingNorth:
			return 12515
		case RepeatingCommandBlockFacingEast:
			return 12516
		case RepeatingCommandBlockFacingSouth:
			return 12517
		case RepeatingCommandBlockFacingWest:
			return 12518
		case RepeatingCommandBlockFacingUp:
			return 12519
		case RepeatingCommandBlockFacingDown:
			return 12520
		}
	case false:
		switch x.Facing {
		case RepeatingCommandBlockFacingNorth:
			return 12521
		case RepeatingCommandBlockFacingEast:
			return 12522
		case RepeatingCommandBlockFacingSouth:
			return 12523
		case RepeatingCommandBlockFacingWest:
			return 12524
		case RepeatingCommandBlockFacingUp:
			return 12525
		case RepeatingCommandBlockFacingDown:
			return 12526
		}
	}
	return 12521 // default state
}

type ChainCommandBlockFacing string

const (
	ChainCommandBlockFacingNorth ChainCommandBlockFacing = "north"
	ChainCommandBlockFacingEast  ChainCommandBlockFacing = "east"
	ChainCommandBlockFacingSouth ChainCommandBlockFacing = "south"
	ChainCommandBlockFacingWest  ChainCommandBlockFacing = "west"
	ChainCommandBlockFacingUp    ChainCommandBlockFacing = "up"
	ChainCommandBlockFacingDown  ChainCommandBlockFacing = "down"
)

type ChainCommandBlock struct {
	Conditional bool
	Facing      ChainCommandBlockFacing
}

func (x ChainCommandBlock) Id() uint16 {
	switch x.Conditional {
	case true:
		switch x.Facing {
		case ChainCommandBlockFacingNorth:
			return 12527
		case ChainCommandBlockFacingEast:
			return 12528
		case ChainCommandBlockFacingSouth:
			return 12529
		case ChainCommandBlockFacingWest:
			return 12530
		case ChainCommandBlockFacingUp:
			return 12531
		case ChainCommandBlockFacingDown:
			return 12532
		}
	case false:
		switch x.Facing {
		case ChainCommandBlockFacingNorth:
			return 12533
		case ChainCommandBlockFacingEast:
			return 12534
		case ChainCommandBlockFacingSouth:
			return 12535
		case ChainCommandBlockFacingWest:
			return 12536
		case ChainCommandBlockFacingUp:
			return 12537
		case ChainCommandBlockFacingDown:
			return 12538
		}
	}
	return 12533 // default state
}

type FrostedIce struct {
	// Valid values: 0, 1, 2, 3
	Age int
}

func (x FrostedIce) Id() uint16 {
	switch x.Age {
	case 0:
		return 12539
	case 1:
		return 12540
	case 2:
		return 12541
	case 3:
		return 12542
	}
	return 12539 // default state
}

type MagmaBlock struct{}

func (x MagmaBlock) Id() uint16 {
	return 12543
}

type NetherWartBlock struct{}

func (x NetherWartBlock) Id() uint16 {
	return 12544
}

type RedNetherBricks struct{}

func (x RedNetherBricks) Id() uint16 {
	return 12545
}

type BoneBlockAxis string

const (
	BoneBlockAxisX BoneBlockAxis = "x"
	BoneBlockAxisY BoneBlockAxis = "y"
	BoneBlockAxisZ BoneBlockAxis = "z"
)

type BoneBlock struct {
	Axis BoneBlockAxis
}

func (x BoneBlock) Id() uint16 {
	switch x.Axis {
	case BoneBlockAxisX:
		return 12546
	case BoneBlockAxisY:
		return 12547
	case BoneBlockAxisZ:
		return 12548
	}
	return 12547 // default state
}

type StructureVoid struct{}

func (x StructureVoid) Id() uint16 {
	return 12549
}

type ObserverFacing string

const (
	ObserverFacingNorth ObserverFacing = "north"
	ObserverFacingEast  ObserverFacing = "east"
	ObserverFacingSouth ObserverFacing = "south"
	ObserverFacingWest  ObserverFacing = "west"
	ObserverFacingUp    ObserverFacing = "up"
	ObserverFacingDown  ObserverFacing = "down"
)

type Observer struct {
	Facing  ObserverFacing
	Powered bool
}

func (x Observer) Id() uint16 {
	switch x.Facing {
	case ObserverFacingNorth:
		switch x.Powered {
		case true:
			return 12550
		case false:
			return 12551
		}
	case ObserverFacingEast:
		switch x.Powered {
		case true:
			return 12552
		case false:
			return 12553
		}
	case ObserverFacingSouth:
		switch x.Powered {
		case true:
			return 12554
		case false:
			return 12555
		}
	case ObserverFacingWest:
		switch x.Powered {
		case true:
			return 12556
		case false:
			return 12557
		}
	case ObserverFacingUp:
		switch x.Powered {
		case true:
			return 12558
		case false:
			return 12559
		}
	case ObserverFacingDown:
		switch x.Powered {
		case true:
			return 12560
		case false:
			return 12561
		}
	}
	return 12555 // default state
}

type ShulkerBoxFacing string

const (
	ShulkerBoxFacingNorth ShulkerBoxFacing = "north"
	ShulkerBoxFacingEast  ShulkerBoxFacing = "east"
	ShulkerBoxFacingSouth ShulkerBoxFacing = "south"
	ShulkerBoxFacingWest  ShulkerBoxFacing = "west"
	ShulkerBoxFacingUp    ShulkerBoxFacing = "up"
	ShulkerBoxFacingDown  ShulkerBoxFacing = "down"
)

type ShulkerBox struct {
	Facing ShulkerBoxFacing
}

func (x ShulkerBox) Id() uint16 {
	switch x.Facing {
	case ShulkerBoxFacingNorth:
		return 12562
	case ShulkerBoxFacingEast:
		return 12563
	case ShulkerBoxFacingSouth:
		return 12564
	case ShulkerBoxFacingWest:
		return 12565
	case ShulkerBoxFacingUp:
		return 12566
	case ShulkerBoxFacingDown:
		return 12567
	}
	return 12566 // default state
}

type WhiteShulkerBoxFacing string

const (
	WhiteShulkerBoxFacingNorth WhiteShulkerBoxFacing = "north"
	WhiteShulkerBoxFacingEast  WhiteShulkerBoxFacing = "east"
	WhiteShulkerBoxFacingSouth WhiteShulkerBoxFacing = "south"
	WhiteShulkerBoxFacingWest  WhiteShulkerBoxFacing = "west"
	WhiteShulkerBoxFacingUp    WhiteShulkerBoxFacing = "up"
	WhiteShulkerBoxFacingDown  WhiteShulkerBoxFacing = "down"
)

type WhiteShulkerBox struct {
	Facing WhiteShulkerBoxFacing
}

func (x WhiteShulkerBox) Id() uint16 {
	switch x.Facing {
	case WhiteShulkerBoxFacingNorth:
		return 12568
	case WhiteShulkerBoxFacingEast:
		return 12569
	case WhiteShulkerBoxFacingSouth:
		return 12570
	case WhiteShulkerBoxFacingWest:
		return 12571
	case WhiteShulkerBoxFacingUp:
		return 12572
	case WhiteShulkerBoxFacingDown:
		return 12573
	}
	return 12572 // default state
}

type OrangeShulkerBoxFacing string

const (
	OrangeShulkerBoxFacingNorth OrangeShulkerBoxFacing = "north"
	OrangeShulkerBoxFacingEast  OrangeShulkerBoxFacing = "east"
	OrangeShulkerBoxFacingSouth OrangeShulkerBoxFacing = "south"
	OrangeShulkerBoxFacingWest  OrangeShulkerBoxFacing = "west"
	OrangeShulkerBoxFacingUp    OrangeShulkerBoxFacing = "up"
	OrangeShulkerBoxFacingDown  OrangeShulkerBoxFacing = "down"
)

type OrangeShulkerBox struct {
	Facing OrangeShulkerBoxFacing
}

func (x OrangeShulkerBox) Id() uint16 {
	switch x.Facing {
	case OrangeShulkerBoxFacingNorth:
		return 12574
	case OrangeShulkerBoxFacingEast:
		return 12575
	case OrangeShulkerBoxFacingSouth:
		return 12576
	case OrangeShulkerBoxFacingWest:
		return 12577
	case OrangeShulkerBoxFacingUp:
		return 12578
	case OrangeShulkerBoxFacingDown:
		return 12579
	}
	return 12578 // default state
}

type MagentaShulkerBoxFacing string

const (
	MagentaShulkerBoxFacingNorth MagentaShulkerBoxFacing = "north"
	MagentaShulkerBoxFacingEast  MagentaShulkerBoxFacing = "east"
	MagentaShulkerBoxFacingSouth MagentaShulkerBoxFacing = "south"
	MagentaShulkerBoxFacingWest  MagentaShulkerBoxFacing = "west"
	MagentaShulkerBoxFacingUp    MagentaShulkerBoxFacing = "up"
	MagentaShulkerBoxFacingDown  MagentaShulkerBoxFacing = "down"
)

type MagentaShulkerBox struct {
	Facing MagentaShulkerBoxFacing
}

func (x MagentaShulkerBox) Id() uint16 {
	switch x.Facing {
	case MagentaShulkerBoxFacingNorth:
		return 12580
	case MagentaShulkerBoxFacingEast:
		return 12581
	case MagentaShulkerBoxFacingSouth:
		return 12582
	case MagentaShulkerBoxFacingWest:
		return 12583
	case MagentaShulkerBoxFacingUp:
		return 12584
	case MagentaShulkerBoxFacingDown:
		return 12585
	}
	return 12584 // default state
}

type LightBlueShulkerBoxFacing string

const (
	LightBlueShulkerBoxFacingNorth LightBlueShulkerBoxFacing = "north"
	LightBlueShulkerBoxFacingEast  LightBlueShulkerBoxFacing = "east"
	LightBlueShulkerBoxFacingSouth LightBlueShulkerBoxFacing = "south"
	LightBlueShulkerBoxFacingWest  LightBlueShulkerBoxFacing = "west"
	LightBlueShulkerBoxFacingUp    LightBlueShulkerBoxFacing = "up"
	LightBlueShulkerBoxFacingDown  LightBlueShulkerBoxFacing = "down"
)

type LightBlueShulkerBox struct {
	Facing LightBlueShulkerBoxFacing
}

func (x LightBlueShulkerBox) Id() uint16 {
	switch x.Facing {
	case LightBlueShulkerBoxFacingNorth:
		return 12586
	case LightBlueShulkerBoxFacingEast:
		return 12587
	case LightBlueShulkerBoxFacingSouth:
		return 12588
	case LightBlueShulkerBoxFacingWest:
		return 12589
	case LightBlueShulkerBoxFacingUp:
		return 12590
	case LightBlueShulkerBoxFacingDown:
		return 12591
	}
	return 12590 // default state
}

type YellowShulkerBoxFacing string

const (
	YellowShulkerBoxFacingNorth YellowShulkerBoxFacing = "north"
	YellowShulkerBoxFacingEast  YellowShulkerBoxFacing = "east"
	YellowShulkerBoxFacingSouth YellowShulkerBoxFacing = "south"
	YellowShulkerBoxFacingWest  YellowShulkerBoxFacing = "west"
	YellowShulkerBoxFacingUp    YellowShulkerBoxFacing = "up"
	YellowShulkerBoxFacingDown  YellowShulkerBoxFacing = "down"
)

type YellowShulkerBox struct {
	Facing YellowShulkerBoxFacing
}

func (x YellowShulkerBox) Id() uint16 {
	switch x.Facing {
	case YellowShulkerBoxFacingNorth:
		return 12592
	case YellowShulkerBoxFacingEast:
		return 12593
	case YellowShulkerBoxFacingSouth:
		return 12594
	case YellowShulkerBoxFacingWest:
		return 12595
	case YellowShulkerBoxFacingUp:
		return 12596
	case YellowShulkerBoxFacingDown:
		return 12597
	}
	return 12596 // default state
}

type LimeShulkerBoxFacing string

const (
	LimeShulkerBoxFacingNorth LimeShulkerBoxFacing = "north"
	LimeShulkerBoxFacingEast  LimeShulkerBoxFacing = "east"
	LimeShulkerBoxFacingSouth LimeShulkerBoxFacing = "south"
	LimeShulkerBoxFacingWest  LimeShulkerBoxFacing = "west"
	LimeShulkerBoxFacingUp    LimeShulkerBoxFacing = "up"
	LimeShulkerBoxFacingDown  LimeShulkerBoxFacing = "down"
)

type LimeShulkerBox struct {
	Facing LimeShulkerBoxFacing
}

func (x LimeShulkerBox) Id() uint16 {
	switch x.Facing {
	case LimeShulkerBoxFacingNorth:
		return 12598
	case LimeShulkerBoxFacingEast:
		return 12599
	case LimeShulkerBoxFacingSouth:
		return 12600
	case LimeShulkerBoxFacingWest:
		return 12601
	case LimeShulkerBoxFacingUp:
		return 12602
	case LimeShulkerBoxFacingDown:
		return 12603
	}
	return 12602 // default state
}

type PinkShulkerBoxFacing string

const (
	PinkShulkerBoxFacingNorth PinkShulkerBoxFacing = "north"
	PinkShulkerBoxFacingEast  PinkShulkerBoxFacing = "east"
	PinkShulkerBoxFacingSouth PinkShulkerBoxFacing = "south"
	PinkShulkerBoxFacingWest  PinkShulkerBoxFacing = "west"
	PinkShulkerBoxFacingUp    PinkShulkerBoxFacing = "up"
	PinkShulkerBoxFacingDown  PinkShulkerBoxFacing = "down"
)

type PinkShulkerBox struct {
	Facing PinkShulkerBoxFacing
}

func (x PinkShulkerBox) Id() uint16 {
	switch x.Facing {
	case PinkShulkerBoxFacingNorth:
		return 12604
	case PinkShulkerBoxFacingEast:
		return 12605
	case PinkShulkerBoxFacingSouth:
		return 12606
	case PinkShulkerBoxFacingWest:
		return 12607
	case PinkShulkerBoxFacingUp:
		return 12608
	case PinkShulkerBoxFacingDown:
		return 12609
	}
	return 12608 // default state
}

type GrayShulkerBoxFacing string

const (
	GrayShulkerBoxFacingNorth GrayShulkerBoxFacing = "north"
	GrayShulkerBoxFacingEast  GrayShulkerBoxFacing = "east"
	GrayShulkerBoxFacingSouth GrayShulkerBoxFacing = "south"
	GrayShulkerBoxFacingWest  GrayShulkerBoxFacing = "west"
	GrayShulkerBoxFacingUp    GrayShulkerBoxFacing = "up"
	GrayShulkerBoxFacingDown  GrayShulkerBoxFacing = "down"
)

type GrayShulkerBox struct {
	Facing GrayShulkerBoxFacing
}

func (x GrayShulkerBox) Id() uint16 {
	switch x.Facing {
	case GrayShulkerBoxFacingNorth:
		return 12610
	case GrayShulkerBoxFacingEast:
		return 12611
	case GrayShulkerBoxFacingSouth:
		return 12612
	case GrayShulkerBoxFacingWest:
		return 12613
	case GrayShulkerBoxFacingUp:
		return 12614
	case GrayShulkerBoxFacingDown:
		return 12615
	}
	return 12614 // default state
}

type LightGrayShulkerBoxFacing string

const (
	LightGrayShulkerBoxFacingNorth LightGrayShulkerBoxFacing = "north"
	LightGrayShulkerBoxFacingEast  LightGrayShulkerBoxFacing = "east"
	LightGrayShulkerBoxFacingSouth LightGrayShulkerBoxFacing = "south"
	LightGrayShulkerBoxFacingWest  LightGrayShulkerBoxFacing = "west"
	LightGrayShulkerBoxFacingUp    LightGrayShulkerBoxFacing = "up"
	LightGrayShulkerBoxFacingDown  LightGrayShulkerBoxFacing = "down"
)

type LightGrayShulkerBox struct {
	Facing LightGrayShulkerBoxFacing
}

func (x LightGrayShulkerBox) Id() uint16 {
	switch x.Facing {
	case LightGrayShulkerBoxFacingNorth:
		return 12616
	case LightGrayShulkerBoxFacingEast:
		return 12617
	case LightGrayShulkerBoxFacingSouth:
		return 12618
	case LightGrayShulkerBoxFacingWest:
		return 12619
	case LightGrayShulkerBoxFacingUp:
		return 12620
	case LightGrayShulkerBoxFacingDown:
		return 12621
	}
	return 12620 // default state
}

type CyanShulkerBoxFacing string

const (
	CyanShulkerBoxFacingNorth CyanShulkerBoxFacing = "north"
	CyanShulkerBoxFacingEast  CyanShulkerBoxFacing = "east"
	CyanShulkerBoxFacingSouth CyanShulkerBoxFacing = "south"
	CyanShulkerBoxFacingWest  CyanShulkerBoxFacing = "west"
	CyanShulkerBoxFacingUp    CyanShulkerBoxFacing = "up"
	CyanShulkerBoxFacingDown  CyanShulkerBoxFacing = "down"
)

type CyanShulkerBox struct {
	Facing CyanShulkerBoxFacing
}

func (x CyanShulkerBox) Id() uint16 {
	switch x.Facing {
	case CyanShulkerBoxFacingNorth:
		return 12622
	case CyanShulkerBoxFacingEast:
		return 12623
	case CyanShulkerBoxFacingSouth:
		return 12624
	case CyanShulkerBoxFacingWest:
		return 12625
	case CyanShulkerBoxFacingUp:
		return 12626
	case CyanShulkerBoxFacingDown:
		return 12627
	}
	return 12626 // default state
}

type PurpleShulkerBoxFacing string

const (
	PurpleShulkerBoxFacingNorth PurpleShulkerBoxFacing = "north"
	PurpleShulkerBoxFacingEast  PurpleShulkerBoxFacing = "east"
	PurpleShulkerBoxFacingSouth PurpleShulkerBoxFacing = "south"
	PurpleShulkerBoxFacingWest  PurpleShulkerBoxFacing = "west"
	PurpleShulkerBoxFacingUp    PurpleShulkerBoxFacing = "up"
	PurpleShulkerBoxFacingDown  PurpleShulkerBoxFacing = "down"
)

type PurpleShulkerBox struct {
	Facing PurpleShulkerBoxFacing
}

func (x PurpleShulkerBox) Id() uint16 {
	switch x.Facing {
	case PurpleShulkerBoxFacingNorth:
		return 12628
	case PurpleShulkerBoxFacingEast:
		return 12629
	case PurpleShulkerBoxFacingSouth:
		return 12630
	case PurpleShulkerBoxFacingWest:
		return 12631
	case PurpleShulkerBoxFacingUp:
		return 12632
	case PurpleShulkerBoxFacingDown:
		return 12633
	}
	return 12632 // default state
}

type BlueShulkerBoxFacing string

const (
	BlueShulkerBoxFacingNorth BlueShulkerBoxFacing = "north"
	BlueShulkerBoxFacingEast  BlueShulkerBoxFacing = "east"
	BlueShulkerBoxFacingSouth BlueShulkerBoxFacing = "south"
	BlueShulkerBoxFacingWest  BlueShulkerBoxFacing = "west"
	BlueShulkerBoxFacingUp    BlueShulkerBoxFacing = "up"
	BlueShulkerBoxFacingDown  BlueShulkerBoxFacing = "down"
)

type BlueShulkerBox struct {
	Facing BlueShulkerBoxFacing
}

func (x BlueShulkerBox) Id() uint16 {
	switch x.Facing {
	case BlueShulkerBoxFacingNorth:
		return 12634
	case BlueShulkerBoxFacingEast:
		return 12635
	case BlueShulkerBoxFacingSouth:
		return 12636
	case BlueShulkerBoxFacingWest:
		return 12637
	case BlueShulkerBoxFacingUp:
		return 12638
	case BlueShulkerBoxFacingDown:
		return 12639
	}
	return 12638 // default state
}

type BrownShulkerBoxFacing string

const (
	BrownShulkerBoxFacingNorth BrownShulkerBoxFacing = "north"
	BrownShulkerBoxFacingEast  BrownShulkerBoxFacing = "east"
	BrownShulkerBoxFacingSouth BrownShulkerBoxFacing = "south"
	BrownShulkerBoxFacingWest  BrownShulkerBoxFacing = "west"
	BrownShulkerBoxFacingUp    BrownShulkerBoxFacing = "up"
	BrownShulkerBoxFacingDown  BrownShulkerBoxFacing = "down"
)

type BrownShulkerBox struct {
	Facing BrownShulkerBoxFacing
}

func (x BrownShulkerBox) Id() uint16 {
	switch x.Facing {
	case BrownShulkerBoxFacingNorth:
		return 12640
	case BrownShulkerBoxFacingEast:
		return 12641
	case BrownShulkerBoxFacingSouth:
		return 12642
	case BrownShulkerBoxFacingWest:
		return 12643
	case BrownShulkerBoxFacingUp:
		return 12644
	case BrownShulkerBoxFacingDown:
		return 12645
	}
	return 12644 // default state
}

type GreenShulkerBoxFacing string

const (
	GreenShulkerBoxFacingNorth GreenShulkerBoxFacing = "north"
	GreenShulkerBoxFacingEast  GreenShulkerBoxFacing = "east"
	GreenShulkerBoxFacingSouth GreenShulkerBoxFacing = "south"
	GreenShulkerBoxFacingWest  GreenShulkerBoxFacing = "west"
	GreenShulkerBoxFacingUp    GreenShulkerBoxFacing = "up"
	GreenShulkerBoxFacingDown  GreenShulkerBoxFacing = "down"
)

type GreenShulkerBox struct {
	Facing GreenShulkerBoxFacing
}

func (x GreenShulkerBox) Id() uint16 {
	switch x.Facing {
	case GreenShulkerBoxFacingNorth:
		return 12646
	case GreenShulkerBoxFacingEast:
		return 12647
	case GreenShulkerBoxFacingSouth:
		return 12648
	case GreenShulkerBoxFacingWest:
		return 12649
	case GreenShulkerBoxFacingUp:
		return 12650
	case GreenShulkerBoxFacingDown:
		return 12651
	}
	return 12650 // default state
}

type RedShulkerBoxFacing string

const (
	RedShulkerBoxFacingNorth RedShulkerBoxFacing = "north"
	RedShulkerBoxFacingEast  RedShulkerBoxFacing = "east"
	RedShulkerBoxFacingSouth RedShulkerBoxFacing = "south"
	RedShulkerBoxFacingWest  RedShulkerBoxFacing = "west"
	RedShulkerBoxFacingUp    RedShulkerBoxFacing = "up"
	RedShulkerBoxFacingDown  RedShulkerBoxFacing = "down"
)

type RedShulkerBox struct {
	Facing RedShulkerBoxFacing
}

func (x RedShulkerBox) Id() uint16 {
	switch x.Facing {
	case RedShulkerBoxFacingNorth:
		return 12652
	case RedShulkerBoxFacingEast:
		return 12653
	case RedShulkerBoxFacingSouth:
		return 12654
	case RedShulkerBoxFacingWest:
		return 12655
	case RedShulkerBoxFacingUp:
		return 12656
	case RedShulkerBoxFacingDown:
		return 12657
	}
	return 12656 // default state
}

type BlackShulkerBoxFacing string

const (
	BlackShulkerBoxFacingNorth BlackShulkerBoxFacing = "north"
	BlackShulkerBoxFacingEast  BlackShulkerBoxFacing = "east"
	BlackShulkerBoxFacingSouth BlackShulkerBoxFacing = "south"
	BlackShulkerBoxFacingWest  BlackShulkerBoxFacing = "west"
	BlackShulkerBoxFacingUp    BlackShulkerBoxFacing = "up"
	BlackShulkerBoxFacingDown  BlackShulkerBoxFacing = "down"
)

type BlackShulkerBox struct {
	Facing BlackShulkerBoxFacing
}

func (x BlackShulkerBox) Id() uint16 {
	switch x.Facing {
	case BlackShulkerBoxFacingNorth:
		return 12658
	case BlackShulkerBoxFacingEast:
		return 12659
	case BlackShulkerBoxFacingSouth:
		return 12660
	case BlackShulkerBoxFacingWest:
		return 12661
	case BlackShulkerBoxFacingUp:
		return 12662
	case BlackShulkerBoxFacingDown:
		return 12663
	}
	return 12662 // default state
}

type WhiteGlazedTerracottaFacing string

const (
	WhiteGlazedTerracottaFacingNorth WhiteGlazedTerracottaFacing = "north"
	WhiteGlazedTerracottaFacingSouth WhiteGlazedTerracottaFacing = "south"
	WhiteGlazedTerracottaFacingWest  WhiteGlazedTerracottaFacing = "west"
	WhiteGlazedTerracottaFacingEast  WhiteGlazedTerracottaFacing = "east"
)

type WhiteGlazedTerracotta struct {
	Facing WhiteGlazedTerracottaFacing
}

func (x WhiteGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case WhiteGlazedTerracottaFacingNorth:
		return 12664
	case WhiteGlazedTerracottaFacingSouth:
		return 12665
	case WhiteGlazedTerracottaFacingWest:
		return 12666
	case WhiteGlazedTerracottaFacingEast:
		return 12667
	}
	return 12664 // default state
}

type OrangeGlazedTerracottaFacing string

const (
	OrangeGlazedTerracottaFacingNorth OrangeGlazedTerracottaFacing = "north"
	OrangeGlazedTerracottaFacingSouth OrangeGlazedTerracottaFacing = "south"
	OrangeGlazedTerracottaFacingWest  OrangeGlazedTerracottaFacing = "west"
	OrangeGlazedTerracottaFacingEast  OrangeGlazedTerracottaFacing = "east"
)

type OrangeGlazedTerracotta struct {
	Facing OrangeGlazedTerracottaFacing
}

func (x OrangeGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case OrangeGlazedTerracottaFacingNorth:
		return 12668
	case OrangeGlazedTerracottaFacingSouth:
		return 12669
	case OrangeGlazedTerracottaFacingWest:
		return 12670
	case OrangeGlazedTerracottaFacingEast:
		return 12671
	}
	return 12668 // default state
}

type MagentaGlazedTerracottaFacing string

const (
	MagentaGlazedTerracottaFacingNorth MagentaGlazedTerracottaFacing = "north"
	MagentaGlazedTerracottaFacingSouth MagentaGlazedTerracottaFacing = "south"
	MagentaGlazedTerracottaFacingWest  MagentaGlazedTerracottaFacing = "west"
	MagentaGlazedTerracottaFacingEast  MagentaGlazedTerracottaFacing = "east"
)

type MagentaGlazedTerracotta struct {
	Facing MagentaGlazedTerracottaFacing
}

func (x MagentaGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case MagentaGlazedTerracottaFacingNorth:
		return 12672
	case MagentaGlazedTerracottaFacingSouth:
		return 12673
	case MagentaGlazedTerracottaFacingWest:
		return 12674
	case MagentaGlazedTerracottaFacingEast:
		return 12675
	}
	return 12672 // default state
}

type LightBlueGlazedTerracottaFacing string

const (
	LightBlueGlazedTerracottaFacingNorth LightBlueGlazedTerracottaFacing = "north"
	LightBlueGlazedTerracottaFacingSouth LightBlueGlazedTerracottaFacing = "south"
	LightBlueGlazedTerracottaFacingWest  LightBlueGlazedTerracottaFacing = "west"
	LightBlueGlazedTerracottaFacingEast  LightBlueGlazedTerracottaFacing = "east"
)

type LightBlueGlazedTerracotta struct {
	Facing LightBlueGlazedTerracottaFacing
}

func (x LightBlueGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case LightBlueGlazedTerracottaFacingNorth:
		return 12676
	case LightBlueGlazedTerracottaFacingSouth:
		return 12677
	case LightBlueGlazedTerracottaFacingWest:
		return 12678
	case LightBlueGlazedTerracottaFacingEast:
		return 12679
	}
	return 12676 // default state
}

type YellowGlazedTerracottaFacing string

const (
	YellowGlazedTerracottaFacingNorth YellowGlazedTerracottaFacing = "north"
	YellowGlazedTerracottaFacingSouth YellowGlazedTerracottaFacing = "south"
	YellowGlazedTerracottaFacingWest  YellowGlazedTerracottaFacing = "west"
	YellowGlazedTerracottaFacingEast  YellowGlazedTerracottaFacing = "east"
)

type YellowGlazedTerracotta struct {
	Facing YellowGlazedTerracottaFacing
}

func (x YellowGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case YellowGlazedTerracottaFacingNorth:
		return 12680
	case YellowGlazedTerracottaFacingSouth:
		return 12681
	case YellowGlazedTerracottaFacingWest:
		return 12682
	case YellowGlazedTerracottaFacingEast:
		return 12683
	}
	return 12680 // default state
}

type LimeGlazedTerracottaFacing string

const (
	LimeGlazedTerracottaFacingNorth LimeGlazedTerracottaFacing = "north"
	LimeGlazedTerracottaFacingSouth LimeGlazedTerracottaFacing = "south"
	LimeGlazedTerracottaFacingWest  LimeGlazedTerracottaFacing = "west"
	LimeGlazedTerracottaFacingEast  LimeGlazedTerracottaFacing = "east"
)

type LimeGlazedTerracotta struct {
	Facing LimeGlazedTerracottaFacing
}

func (x LimeGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case LimeGlazedTerracottaFacingNorth:
		return 12684
	case LimeGlazedTerracottaFacingSouth:
		return 12685
	case LimeGlazedTerracottaFacingWest:
		return 12686
	case LimeGlazedTerracottaFacingEast:
		return 12687
	}
	return 12684 // default state
}

type PinkGlazedTerracottaFacing string

const (
	PinkGlazedTerracottaFacingNorth PinkGlazedTerracottaFacing = "north"
	PinkGlazedTerracottaFacingSouth PinkGlazedTerracottaFacing = "south"
	PinkGlazedTerracottaFacingWest  PinkGlazedTerracottaFacing = "west"
	PinkGlazedTerracottaFacingEast  PinkGlazedTerracottaFacing = "east"
)

type PinkGlazedTerracotta struct {
	Facing PinkGlazedTerracottaFacing
}

func (x PinkGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case PinkGlazedTerracottaFacingNorth:
		return 12688
	case PinkGlazedTerracottaFacingSouth:
		return 12689
	case PinkGlazedTerracottaFacingWest:
		return 12690
	case PinkGlazedTerracottaFacingEast:
		return 12691
	}
	return 12688 // default state
}

type GrayGlazedTerracottaFacing string

const (
	GrayGlazedTerracottaFacingNorth GrayGlazedTerracottaFacing = "north"
	GrayGlazedTerracottaFacingSouth GrayGlazedTerracottaFacing = "south"
	GrayGlazedTerracottaFacingWest  GrayGlazedTerracottaFacing = "west"
	GrayGlazedTerracottaFacingEast  GrayGlazedTerracottaFacing = "east"
)

type GrayGlazedTerracotta struct {
	Facing GrayGlazedTerracottaFacing
}

func (x GrayGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case GrayGlazedTerracottaFacingNorth:
		return 12692
	case GrayGlazedTerracottaFacingSouth:
		return 12693
	case GrayGlazedTerracottaFacingWest:
		return 12694
	case GrayGlazedTerracottaFacingEast:
		return 12695
	}
	return 12692 // default state
}

type LightGrayGlazedTerracottaFacing string

const (
	LightGrayGlazedTerracottaFacingNorth LightGrayGlazedTerracottaFacing = "north"
	LightGrayGlazedTerracottaFacingSouth LightGrayGlazedTerracottaFacing = "south"
	LightGrayGlazedTerracottaFacingWest  LightGrayGlazedTerracottaFacing = "west"
	LightGrayGlazedTerracottaFacingEast  LightGrayGlazedTerracottaFacing = "east"
)

type LightGrayGlazedTerracotta struct {
	Facing LightGrayGlazedTerracottaFacing
}

func (x LightGrayGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case LightGrayGlazedTerracottaFacingNorth:
		return 12696
	case LightGrayGlazedTerracottaFacingSouth:
		return 12697
	case LightGrayGlazedTerracottaFacingWest:
		return 12698
	case LightGrayGlazedTerracottaFacingEast:
		return 12699
	}
	return 12696 // default state
}

type CyanGlazedTerracottaFacing string

const (
	CyanGlazedTerracottaFacingNorth CyanGlazedTerracottaFacing = "north"
	CyanGlazedTerracottaFacingSouth CyanGlazedTerracottaFacing = "south"
	CyanGlazedTerracottaFacingWest  CyanGlazedTerracottaFacing = "west"
	CyanGlazedTerracottaFacingEast  CyanGlazedTerracottaFacing = "east"
)

type CyanGlazedTerracotta struct {
	Facing CyanGlazedTerracottaFacing
}

func (x CyanGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case CyanGlazedTerracottaFacingNorth:
		return 12700
	case CyanGlazedTerracottaFacingSouth:
		return 12701
	case CyanGlazedTerracottaFacingWest:
		return 12702
	case CyanGlazedTerracottaFacingEast:
		return 12703
	}
	return 12700 // default state
}

type PurpleGlazedTerracottaFacing string

const (
	PurpleGlazedTerracottaFacingNorth PurpleGlazedTerracottaFacing = "north"
	PurpleGlazedTerracottaFacingSouth PurpleGlazedTerracottaFacing = "south"
	PurpleGlazedTerracottaFacingWest  PurpleGlazedTerracottaFacing = "west"
	PurpleGlazedTerracottaFacingEast  PurpleGlazedTerracottaFacing = "east"
)

type PurpleGlazedTerracotta struct {
	Facing PurpleGlazedTerracottaFacing
}

func (x PurpleGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case PurpleGlazedTerracottaFacingNorth:
		return 12704
	case PurpleGlazedTerracottaFacingSouth:
		return 12705
	case PurpleGlazedTerracottaFacingWest:
		return 12706
	case PurpleGlazedTerracottaFacingEast:
		return 12707
	}
	return 12704 // default state
}

type BlueGlazedTerracottaFacing string

const (
	BlueGlazedTerracottaFacingNorth BlueGlazedTerracottaFacing = "north"
	BlueGlazedTerracottaFacingSouth BlueGlazedTerracottaFacing = "south"
	BlueGlazedTerracottaFacingWest  BlueGlazedTerracottaFacing = "west"
	BlueGlazedTerracottaFacingEast  BlueGlazedTerracottaFacing = "east"
)

type BlueGlazedTerracotta struct {
	Facing BlueGlazedTerracottaFacing
}

func (x BlueGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case BlueGlazedTerracottaFacingNorth:
		return 12708
	case BlueGlazedTerracottaFacingSouth:
		return 12709
	case BlueGlazedTerracottaFacingWest:
		return 12710
	case BlueGlazedTerracottaFacingEast:
		return 12711
	}
	return 12708 // default state
}

type BrownGlazedTerracottaFacing string

const (
	BrownGlazedTerracottaFacingNorth BrownGlazedTerracottaFacing = "north"
	BrownGlazedTerracottaFacingSouth BrownGlazedTerracottaFacing = "south"
	BrownGlazedTerracottaFacingWest  BrownGlazedTerracottaFacing = "west"
	BrownGlazedTerracottaFacingEast  BrownGlazedTerracottaFacing = "east"
)

type BrownGlazedTerracotta struct {
	Facing BrownGlazedTerracottaFacing
}

func (x BrownGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case BrownGlazedTerracottaFacingNorth:
		return 12712
	case BrownGlazedTerracottaFacingSouth:
		return 12713
	case BrownGlazedTerracottaFacingWest:
		return 12714
	case BrownGlazedTerracottaFacingEast:
		return 12715
	}
	return 12712 // default state
}

type GreenGlazedTerracottaFacing string

const (
	GreenGlazedTerracottaFacingNorth GreenGlazedTerracottaFacing = "north"
	GreenGlazedTerracottaFacingSouth GreenGlazedTerracottaFacing = "south"
	GreenGlazedTerracottaFacingWest  GreenGlazedTerracottaFacing = "west"
	GreenGlazedTerracottaFacingEast  GreenGlazedTerracottaFacing = "east"
)

type GreenGlazedTerracotta struct {
	Facing GreenGlazedTerracottaFacing
}

func (x GreenGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case GreenGlazedTerracottaFacingNorth:
		return 12716
	case GreenGlazedTerracottaFacingSouth:
		return 12717
	case GreenGlazedTerracottaFacingWest:
		return 12718
	case GreenGlazedTerracottaFacingEast:
		return 12719
	}
	return 12716 // default state
}

type RedGlazedTerracottaFacing string

const (
	RedGlazedTerracottaFacingNorth RedGlazedTerracottaFacing = "north"
	RedGlazedTerracottaFacingSouth RedGlazedTerracottaFacing = "south"
	RedGlazedTerracottaFacingWest  RedGlazedTerracottaFacing = "west"
	RedGlazedTerracottaFacingEast  RedGlazedTerracottaFacing = "east"
)

type RedGlazedTerracotta struct {
	Facing RedGlazedTerracottaFacing
}

func (x RedGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case RedGlazedTerracottaFacingNorth:
		return 12720
	case RedGlazedTerracottaFacingSouth:
		return 12721
	case RedGlazedTerracottaFacingWest:
		return 12722
	case RedGlazedTerracottaFacingEast:
		return 12723
	}
	return 12720 // default state
}

type BlackGlazedTerracottaFacing string

const (
	BlackGlazedTerracottaFacingNorth BlackGlazedTerracottaFacing = "north"
	BlackGlazedTerracottaFacingSouth BlackGlazedTerracottaFacing = "south"
	BlackGlazedTerracottaFacingWest  BlackGlazedTerracottaFacing = "west"
	BlackGlazedTerracottaFacingEast  BlackGlazedTerracottaFacing = "east"
)

type BlackGlazedTerracotta struct {
	Facing BlackGlazedTerracottaFacing
}

func (x BlackGlazedTerracotta) Id() uint16 {
	switch x.Facing {
	case BlackGlazedTerracottaFacingNorth:
		return 12724
	case BlackGlazedTerracottaFacingSouth:
		return 12725
	case BlackGlazedTerracottaFacingWest:
		return 12726
	case BlackGlazedTerracottaFacingEast:
		return 12727
	}
	return 12724 // default state
}

type WhiteConcrete struct{}

func (x WhiteConcrete) Id() uint16 {
	return 12728
}

type OrangeConcrete struct{}

func (x OrangeConcrete) Id() uint16 {
	return 12729
}

type MagentaConcrete struct{}

func (x MagentaConcrete) Id() uint16 {
	return 12730
}

type LightBlueConcrete struct{}

func (x LightBlueConcrete) Id() uint16 {
	return 12731
}

type YellowConcrete struct{}

func (x YellowConcrete) Id() uint16 {
	return 12732
}

type LimeConcrete struct{}

func (x LimeConcrete) Id() uint16 {
	return 12733
}

type PinkConcrete struct{}

func (x PinkConcrete) Id() uint16 {
	return 12734
}

type GrayConcrete struct{}

func (x GrayConcrete) Id() uint16 {
	return 12735
}

type LightGrayConcrete struct{}

func (x LightGrayConcrete) Id() uint16 {
	return 12736
}

type CyanConcrete struct{}

func (x CyanConcrete) Id() uint16 {
	return 12737
}

type PurpleConcrete struct{}

func (x PurpleConcrete) Id() uint16 {
	return 12738
}

type BlueConcrete struct{}

func (x BlueConcrete) Id() uint16 {
	return 12739
}

type BrownConcrete struct{}

func (x BrownConcrete) Id() uint16 {
	return 12740
}

type GreenConcrete struct{}

func (x GreenConcrete) Id() uint16 {
	return 12741
}

type RedConcrete struct{}

func (x RedConcrete) Id() uint16 {
	return 12742
}

type BlackConcrete struct{}

func (x BlackConcrete) Id() uint16 {
	return 12743
}

type WhiteConcretePowder struct{}

func (x WhiteConcretePowder) Id() uint16 {
	return 12744
}

type OrangeConcretePowder struct{}

func (x OrangeConcretePowder) Id() uint16 {
	return 12745
}

type MagentaConcretePowder struct{}

func (x MagentaConcretePowder) Id() uint16 {
	return 12746
}

type LightBlueConcretePowder struct{}

func (x LightBlueConcretePowder) Id() uint16 {
	return 12747
}

type YellowConcretePowder struct{}

func (x YellowConcretePowder) Id() uint16 {
	return 12748
}

type LimeConcretePowder struct{}

func (x LimeConcretePowder) Id() uint16 {
	return 12749
}

type PinkConcretePowder struct{}

func (x PinkConcretePowder) Id() uint16 {
	return 12750
}

type GrayConcretePowder struct{}

func (x GrayConcretePowder) Id() uint16 {
	return 12751
}

type LightGrayConcretePowder struct{}

func (x LightGrayConcretePowder) Id() uint16 {
	return 12752
}

type CyanConcretePowder struct{}

func (x CyanConcretePowder) Id() uint16 {
	return 12753
}

type PurpleConcretePowder struct{}

func (x PurpleConcretePowder) Id() uint16 {
	return 12754
}

type BlueConcretePowder struct{}

func (x BlueConcretePowder) Id() uint16 {
	return 12755
}

type BrownConcretePowder struct{}

func (x BrownConcretePowder) Id() uint16 {
	return 12756
}

type GreenConcretePowder struct{}

func (x GreenConcretePowder) Id() uint16 {
	return 12757
}

type RedConcretePowder struct{}

func (x RedConcretePowder) Id() uint16 {
	return 12758
}

type BlackConcretePowder struct{}

func (x BlackConcretePowder) Id() uint16 {
	return 12759
}

type Kelp struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Age int
}

func (x Kelp) Id() uint16 {
	switch x.Age {
	case 0:
		return 12760
	case 1:
		return 12761
	case 2:
		return 12762
	case 3:
		return 12763
	case 4:
		return 12764
	case 5:
		return 12765
	case 6:
		return 12766
	case 7:
		return 12767
	case 8:
		return 12768
	case 9:
		return 12769
	case 10:
		return 12770
	case 11:
		return 12771
	case 12:
		return 12772
	case 13:
		return 12773
	case 14:
		return 12774
	case 15:
		return 12775
	case 16:
		return 12776
	case 17:
		return 12777
	case 18:
		return 12778
	case 19:
		return 12779
	case 20:
		return 12780
	case 21:
		return 12781
	case 22:
		return 12782
	case 23:
		return 12783
	case 24:
		return 12784
	case 25:
		return 12785
	}
	return 12760 // default state
}

type KelpPlant struct{}

func (x KelpPlant) Id() uint16 {
	return 12786
}

type DriedKelpBlock struct{}

func (x DriedKelpBlock) Id() uint16 {
	return 12787
}

type TurtleEgg struct {
	// Valid values: 1, 2, 3, 4
	Eggs int
	// Valid values: 0, 1, 2
	Hatch int
}

func (x TurtleEgg) Id() uint16 {
	switch x.Eggs {
	case 1:
		switch x.Hatch {
		case 0:
			return 12788
		case 1:
			return 12789
		case 2:
			return 12790
		}
	case 2:
		switch x.Hatch {
		case 0:
			return 12791
		case 1:
			return 12792
		case 2:
			return 12793
		}
	case 3:
		switch x.Hatch {
		case 0:
			return 12794
		case 1:
			return 12795
		case 2:
			return 12796
		}
	case 4:
		switch x.Hatch {
		case 0:
			return 12797
		case 1:
			return 12798
		case 2:
			return 12799
		}
	}
	return 12788 // default state
}

type SnifferEgg struct {
	// Valid values: 0, 1, 2
	Hatch int
}

func (x SnifferEgg) Id() uint16 {
	switch x.Hatch {
	case 0:
		return 12800
	case 1:
		return 12801
	case 2:
		return 12802
	}
	return 12800 // default state
}

type DeadTubeCoralBlock struct{}

func (x DeadTubeCoralBlock) Id() uint16 {
	return 12803
}

type DeadBrainCoralBlock struct{}

func (x DeadBrainCoralBlock) Id() uint16 {
	return 12804
}

type DeadBubbleCoralBlock struct{}

func (x DeadBubbleCoralBlock) Id() uint16 {
	return 12805
}

type DeadFireCoralBlock struct{}

func (x DeadFireCoralBlock) Id() uint16 {
	return 12806
}

type DeadHornCoralBlock struct{}

func (x DeadHornCoralBlock) Id() uint16 {
	return 12807
}

type TubeCoralBlock struct{}

func (x TubeCoralBlock) Id() uint16 {
	return 12808
}

type BrainCoralBlock struct{}

func (x BrainCoralBlock) Id() uint16 {
	return 12809
}

type BubbleCoralBlock struct{}

func (x BubbleCoralBlock) Id() uint16 {
	return 12810
}

type FireCoralBlock struct{}

func (x FireCoralBlock) Id() uint16 {
	return 12811
}

type HornCoralBlock struct{}

func (x HornCoralBlock) Id() uint16 {
	return 12812
}

type DeadTubeCoral struct {
	Waterlogged bool
}

func (x DeadTubeCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12813
	case false:
		return 12814
	}
	return 12813 // default state
}

type DeadBrainCoral struct {
	Waterlogged bool
}

func (x DeadBrainCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12815
	case false:
		return 12816
	}
	return 12815 // default state
}

type DeadBubbleCoral struct {
	Waterlogged bool
}

func (x DeadBubbleCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12817
	case false:
		return 12818
	}
	return 12817 // default state
}

type DeadFireCoral struct {
	Waterlogged bool
}

func (x DeadFireCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12819
	case false:
		return 12820
	}
	return 12819 // default state
}

type DeadHornCoral struct {
	Waterlogged bool
}

func (x DeadHornCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12821
	case false:
		return 12822
	}
	return 12821 // default state
}

type TubeCoral struct {
	Waterlogged bool
}

func (x TubeCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12823
	case false:
		return 12824
	}
	return 12823 // default state
}

type BrainCoral struct {
	Waterlogged bool
}

func (x BrainCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12825
	case false:
		return 12826
	}
	return 12825 // default state
}

type BubbleCoral struct {
	Waterlogged bool
}

func (x BubbleCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12827
	case false:
		return 12828
	}
	return 12827 // default state
}

type FireCoral struct {
	Waterlogged bool
}

func (x FireCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12829
	case false:
		return 12830
	}
	return 12829 // default state
}

type HornCoral struct {
	Waterlogged bool
}

func (x HornCoral) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12831
	case false:
		return 12832
	}
	return 12831 // default state
}

type DeadTubeCoralFan struct {
	Waterlogged bool
}

func (x DeadTubeCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12833
	case false:
		return 12834
	}
	return 12833 // default state
}

type DeadBrainCoralFan struct {
	Waterlogged bool
}

func (x DeadBrainCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12835
	case false:
		return 12836
	}
	return 12835 // default state
}

type DeadBubbleCoralFan struct {
	Waterlogged bool
}

func (x DeadBubbleCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12837
	case false:
		return 12838
	}
	return 12837 // default state
}

type DeadFireCoralFan struct {
	Waterlogged bool
}

func (x DeadFireCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12839
	case false:
		return 12840
	}
	return 12839 // default state
}

type DeadHornCoralFan struct {
	Waterlogged bool
}

func (x DeadHornCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12841
	case false:
		return 12842
	}
	return 12841 // default state
}

type TubeCoralFan struct {
	Waterlogged bool
}

func (x TubeCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12843
	case false:
		return 12844
	}
	return 12843 // default state
}

type BrainCoralFan struct {
	Waterlogged bool
}

func (x BrainCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12845
	case false:
		return 12846
	}
	return 12845 // default state
}

type BubbleCoralFan struct {
	Waterlogged bool
}

func (x BubbleCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12847
	case false:
		return 12848
	}
	return 12847 // default state
}

type FireCoralFan struct {
	Waterlogged bool
}

func (x FireCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12849
	case false:
		return 12850
	}
	return 12849 // default state
}

type HornCoralFan struct {
	Waterlogged bool
}

func (x HornCoralFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12851
	case false:
		return 12852
	}
	return 12851 // default state
}

type DeadTubeCoralWallFanFacing string

const (
	DeadTubeCoralWallFanFacingNorth DeadTubeCoralWallFanFacing = "north"
	DeadTubeCoralWallFanFacingSouth DeadTubeCoralWallFanFacing = "south"
	DeadTubeCoralWallFanFacingWest  DeadTubeCoralWallFanFacing = "west"
	DeadTubeCoralWallFanFacingEast  DeadTubeCoralWallFanFacing = "east"
)

type DeadTubeCoralWallFan struct {
	Facing      DeadTubeCoralWallFanFacing
	Waterlogged bool
}

func (x DeadTubeCoralWallFan) Id() uint16 {
	switch x.Facing {
	case DeadTubeCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12853
		case false:
			return 12854
		}
	case DeadTubeCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12855
		case false:
			return 12856
		}
	case DeadTubeCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12857
		case false:
			return 12858
		}
	case DeadTubeCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12859
		case false:
			return 12860
		}
	}
	return 12853 // default state
}

type DeadBrainCoralWallFanFacing string

const (
	DeadBrainCoralWallFanFacingNorth DeadBrainCoralWallFanFacing = "north"
	DeadBrainCoralWallFanFacingSouth DeadBrainCoralWallFanFacing = "south"
	DeadBrainCoralWallFanFacingWest  DeadBrainCoralWallFanFacing = "west"
	DeadBrainCoralWallFanFacingEast  DeadBrainCoralWallFanFacing = "east"
)

type DeadBrainCoralWallFan struct {
	Waterlogged bool
	Facing      DeadBrainCoralWallFanFacing
}

func (x DeadBrainCoralWallFan) Id() uint16 {
	switch x.Facing {
	case DeadBrainCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12861
		case false:
			return 12862
		}
	case DeadBrainCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12863
		case false:
			return 12864
		}
	case DeadBrainCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12865
		case false:
			return 12866
		}
	case DeadBrainCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12867
		case false:
			return 12868
		}
	}
	return 12861 // default state
}

type DeadBubbleCoralWallFanFacing string

const (
	DeadBubbleCoralWallFanFacingNorth DeadBubbleCoralWallFanFacing = "north"
	DeadBubbleCoralWallFanFacingSouth DeadBubbleCoralWallFanFacing = "south"
	DeadBubbleCoralWallFanFacingWest  DeadBubbleCoralWallFanFacing = "west"
	DeadBubbleCoralWallFanFacingEast  DeadBubbleCoralWallFanFacing = "east"
)

type DeadBubbleCoralWallFan struct {
	Facing      DeadBubbleCoralWallFanFacing
	Waterlogged bool
}

func (x DeadBubbleCoralWallFan) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case DeadBubbleCoralWallFanFacingNorth:
			return 12869
		case DeadBubbleCoralWallFanFacingSouth:
			return 12871
		case DeadBubbleCoralWallFanFacingWest:
			return 12873
		case DeadBubbleCoralWallFanFacingEast:
			return 12875
		}
	case false:
		switch x.Facing {
		case DeadBubbleCoralWallFanFacingNorth:
			return 12870
		case DeadBubbleCoralWallFanFacingSouth:
			return 12872
		case DeadBubbleCoralWallFanFacingWest:
			return 12874
		case DeadBubbleCoralWallFanFacingEast:
			return 12876
		}
	}
	return 12869 // default state
}

type DeadFireCoralWallFanFacing string

const (
	DeadFireCoralWallFanFacingNorth DeadFireCoralWallFanFacing = "north"
	DeadFireCoralWallFanFacingSouth DeadFireCoralWallFanFacing = "south"
	DeadFireCoralWallFanFacingWest  DeadFireCoralWallFanFacing = "west"
	DeadFireCoralWallFanFacingEast  DeadFireCoralWallFanFacing = "east"
)

type DeadFireCoralWallFan struct {
	Facing      DeadFireCoralWallFanFacing
	Waterlogged bool
}

func (x DeadFireCoralWallFan) Id() uint16 {
	switch x.Facing {
	case DeadFireCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12877
		case false:
			return 12878
		}
	case DeadFireCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12879
		case false:
			return 12880
		}
	case DeadFireCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12881
		case false:
			return 12882
		}
	case DeadFireCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12883
		case false:
			return 12884
		}
	}
	return 12877 // default state
}

type DeadHornCoralWallFanFacing string

const (
	DeadHornCoralWallFanFacingNorth DeadHornCoralWallFanFacing = "north"
	DeadHornCoralWallFanFacingSouth DeadHornCoralWallFanFacing = "south"
	DeadHornCoralWallFanFacingWest  DeadHornCoralWallFanFacing = "west"
	DeadHornCoralWallFanFacingEast  DeadHornCoralWallFanFacing = "east"
)

type DeadHornCoralWallFan struct {
	Facing      DeadHornCoralWallFanFacing
	Waterlogged bool
}

func (x DeadHornCoralWallFan) Id() uint16 {
	switch x.Facing {
	case DeadHornCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12885
		case false:
			return 12886
		}
	case DeadHornCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12887
		case false:
			return 12888
		}
	case DeadHornCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12889
		case false:
			return 12890
		}
	case DeadHornCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12891
		case false:
			return 12892
		}
	}
	return 12885 // default state
}

type TubeCoralWallFanFacing string

const (
	TubeCoralWallFanFacingNorth TubeCoralWallFanFacing = "north"
	TubeCoralWallFanFacingSouth TubeCoralWallFanFacing = "south"
	TubeCoralWallFanFacingWest  TubeCoralWallFanFacing = "west"
	TubeCoralWallFanFacingEast  TubeCoralWallFanFacing = "east"
)

type TubeCoralWallFan struct {
	Facing      TubeCoralWallFanFacing
	Waterlogged bool
}

func (x TubeCoralWallFan) Id() uint16 {
	switch x.Facing {
	case TubeCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12893
		case false:
			return 12894
		}
	case TubeCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12895
		case false:
			return 12896
		}
	case TubeCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12897
		case false:
			return 12898
		}
	case TubeCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12899
		case false:
			return 12900
		}
	}
	return 12893 // default state
}

type BrainCoralWallFanFacing string

const (
	BrainCoralWallFanFacingNorth BrainCoralWallFanFacing = "north"
	BrainCoralWallFanFacingSouth BrainCoralWallFanFacing = "south"
	BrainCoralWallFanFacingWest  BrainCoralWallFanFacing = "west"
	BrainCoralWallFanFacingEast  BrainCoralWallFanFacing = "east"
)

type BrainCoralWallFan struct {
	Waterlogged bool
	Facing      BrainCoralWallFanFacing
}

func (x BrainCoralWallFan) Id() uint16 {
	switch x.Facing {
	case BrainCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12901
		case false:
			return 12902
		}
	case BrainCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12903
		case false:
			return 12904
		}
	case BrainCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12905
		case false:
			return 12906
		}
	case BrainCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12907
		case false:
			return 12908
		}
	}
	return 12901 // default state
}

type BubbleCoralWallFanFacing string

const (
	BubbleCoralWallFanFacingNorth BubbleCoralWallFanFacing = "north"
	BubbleCoralWallFanFacingSouth BubbleCoralWallFanFacing = "south"
	BubbleCoralWallFanFacingWest  BubbleCoralWallFanFacing = "west"
	BubbleCoralWallFanFacingEast  BubbleCoralWallFanFacing = "east"
)

type BubbleCoralWallFan struct {
	Facing      BubbleCoralWallFanFacing
	Waterlogged bool
}

func (x BubbleCoralWallFan) Id() uint16 {
	switch x.Facing {
	case BubbleCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12909
		case false:
			return 12910
		}
	case BubbleCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12911
		case false:
			return 12912
		}
	case BubbleCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12913
		case false:
			return 12914
		}
	case BubbleCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12915
		case false:
			return 12916
		}
	}
	return 12909 // default state
}

type FireCoralWallFanFacing string

const (
	FireCoralWallFanFacingNorth FireCoralWallFanFacing = "north"
	FireCoralWallFanFacingSouth FireCoralWallFanFacing = "south"
	FireCoralWallFanFacingWest  FireCoralWallFanFacing = "west"
	FireCoralWallFanFacingEast  FireCoralWallFanFacing = "east"
)

type FireCoralWallFan struct {
	Facing      FireCoralWallFanFacing
	Waterlogged bool
}

func (x FireCoralWallFan) Id() uint16 {
	switch x.Facing {
	case FireCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12917
		case false:
			return 12918
		}
	case FireCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12919
		case false:
			return 12920
		}
	case FireCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12921
		case false:
			return 12922
		}
	case FireCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12923
		case false:
			return 12924
		}
	}
	return 12917 // default state
}

type HornCoralWallFanFacing string

const (
	HornCoralWallFanFacingNorth HornCoralWallFanFacing = "north"
	HornCoralWallFanFacingSouth HornCoralWallFanFacing = "south"
	HornCoralWallFanFacingWest  HornCoralWallFanFacing = "west"
	HornCoralWallFanFacingEast  HornCoralWallFanFacing = "east"
)

type HornCoralWallFan struct {
	Facing      HornCoralWallFanFacing
	Waterlogged bool
}

func (x HornCoralWallFan) Id() uint16 {
	switch x.Facing {
	case HornCoralWallFanFacingNorth:
		switch x.Waterlogged {
		case true:
			return 12925
		case false:
			return 12926
		}
	case HornCoralWallFanFacingSouth:
		switch x.Waterlogged {
		case true:
			return 12927
		case false:
			return 12928
		}
	case HornCoralWallFanFacingWest:
		switch x.Waterlogged {
		case true:
			return 12929
		case false:
			return 12930
		}
	case HornCoralWallFanFacingEast:
		switch x.Waterlogged {
		case true:
			return 12931
		case false:
			return 12932
		}
	}
	return 12925 // default state
}

type SeaPickle struct {
	// Valid values: 1, 2, 3, 4
	Pickles     int
	Waterlogged bool
}

func (x SeaPickle) Id() uint16 {
	switch x.Pickles {
	case 1:
		switch x.Waterlogged {
		case true:
			return 12933
		case false:
			return 12934
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 12935
		case false:
			return 12936
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 12937
		case false:
			return 12938
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 12939
		case false:
			return 12940
		}
	}
	return 12933 // default state
}

type BlueIce struct{}

func (x BlueIce) Id() uint16 {
	return 12941
}

type Conduit struct {
	Waterlogged bool
}

func (x Conduit) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 12942
	case false:
		return 12943
	}
	return 12942 // default state
}

type BambooSapling struct{}

func (x BambooSapling) Id() uint16 {
	return 12944
}

type BambooLeaves string

const (
	BambooLeavesNone  BambooLeaves = "none"
	BambooLeavesSmall BambooLeaves = "small"
	BambooLeavesLarge BambooLeaves = "large"
)

type Bamboo struct {
	// Valid values: 0, 1
	Age    int
	Leaves BambooLeaves
	// Valid values: 0, 1
	Stage int
}

func (x Bamboo) Id() uint16 {
	switch x.Stage {
	case 0:
		switch x.Age {
		case 0:
			switch x.Leaves {
			case BambooLeavesNone:
				return 12945
			case BambooLeavesSmall:
				return 12947
			case BambooLeavesLarge:
				return 12949
			}
		case 1:
			switch x.Leaves {
			case BambooLeavesNone:
				return 12951
			case BambooLeavesSmall:
				return 12953
			case BambooLeavesLarge:
				return 12955
			}
		}
	case 1:
		switch x.Age {
		case 0:
			switch x.Leaves {
			case BambooLeavesNone:
				return 12946
			case BambooLeavesSmall:
				return 12948
			case BambooLeavesLarge:
				return 12950
			}
		case 1:
			switch x.Leaves {
			case BambooLeavesNone:
				return 12952
			case BambooLeavesSmall:
				return 12954
			case BambooLeavesLarge:
				return 12956
			}
		}
	}
	return 12945 // default state
}

type PottedBamboo struct{}

func (x PottedBamboo) Id() uint16 {
	return 12957
}

type VoidAir struct{}

func (x VoidAir) Id() uint16 {
	return 12958
}

type CaveAir struct{}

func (x CaveAir) Id() uint16 {
	return 12959
}

type BubbleColumn struct {
	Drag bool
}

func (x BubbleColumn) Id() uint16 {
	switch x.Drag {
	case true:
		return 12960
	case false:
		return 12961
	}
	return 12960 // default state
}

type PolishedGraniteStairsFacing string

const (
	PolishedGraniteStairsFacingNorth PolishedGraniteStairsFacing = "north"
	PolishedGraniteStairsFacingSouth PolishedGraniteStairsFacing = "south"
	PolishedGraniteStairsFacingWest  PolishedGraniteStairsFacing = "west"
	PolishedGraniteStairsFacingEast  PolishedGraniteStairsFacing = "east"
)

type PolishedGraniteStairsHalf string

const (
	PolishedGraniteStairsHalfTop    PolishedGraniteStairsHalf = "top"
	PolishedGraniteStairsHalfBottom PolishedGraniteStairsHalf = "bottom"
)

type PolishedGraniteStairsShape string

const (
	PolishedGraniteStairsShapeStraight   PolishedGraniteStairsShape = "straight"
	PolishedGraniteStairsShapeInnerLeft  PolishedGraniteStairsShape = "inner_left"
	PolishedGraniteStairsShapeInnerRight PolishedGraniteStairsShape = "inner_right"
	PolishedGraniteStairsShapeOuterLeft  PolishedGraniteStairsShape = "outer_left"
	PolishedGraniteStairsShapeOuterRight PolishedGraniteStairsShape = "outer_right"
)

type PolishedGraniteStairs struct {
	Facing      PolishedGraniteStairsFacing
	Half        PolishedGraniteStairsHalf
	Shape       PolishedGraniteStairsShape
	Waterlogged bool
}

func (x PolishedGraniteStairs) Id() uint16 {
	switch x.Facing {
	case PolishedGraniteStairsFacingNorth:
		switch x.Half {
		case PolishedGraniteStairsHalfTop:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 12962
				case false:
					return 12963
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 12964
				case false:
					return 12965
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 12966
				case false:
					return 12967
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 12968
				case false:
					return 12969
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 12970
				case false:
					return 12971
				}
			}
		case PolishedGraniteStairsHalfBottom:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 12972
				case false:
					return 12973
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 12974
				case false:
					return 12975
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 12976
				case false:
					return 12977
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 12978
				case false:
					return 12979
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 12980
				case false:
					return 12981
				}
			}
		}
	case PolishedGraniteStairsFacingSouth:
		switch x.Half {
		case PolishedGraniteStairsHalfTop:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 12982
				case false:
					return 12983
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 12984
				case false:
					return 12985
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 12986
				case false:
					return 12987
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 12988
				case false:
					return 12989
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 12990
				case false:
					return 12991
				}
			}
		case PolishedGraniteStairsHalfBottom:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 12992
				case false:
					return 12993
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 12994
				case false:
					return 12995
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 12996
				case false:
					return 12997
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 12998
				case false:
					return 12999
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13000
				case false:
					return 13001
				}
			}
		}
	case PolishedGraniteStairsFacingWest:
		switch x.Half {
		case PolishedGraniteStairsHalfTop:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13002
				case false:
					return 13003
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13004
				case false:
					return 13005
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13006
				case false:
					return 13007
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13008
				case false:
					return 13009
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13010
				case false:
					return 13011
				}
			}
		case PolishedGraniteStairsHalfBottom:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13012
				case false:
					return 13013
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13014
				case false:
					return 13015
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13016
				case false:
					return 13017
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13018
				case false:
					return 13019
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13020
				case false:
					return 13021
				}
			}
		}
	case PolishedGraniteStairsFacingEast:
		switch x.Half {
		case PolishedGraniteStairsHalfTop:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13022
				case false:
					return 13023
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13024
				case false:
					return 13025
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13026
				case false:
					return 13027
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13028
				case false:
					return 13029
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13030
				case false:
					return 13031
				}
			}
		case PolishedGraniteStairsHalfBottom:
			switch x.Shape {
			case PolishedGraniteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13032
				case false:
					return 13033
				}
			case PolishedGraniteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13034
				case false:
					return 13035
				}
			case PolishedGraniteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13036
				case false:
					return 13037
				}
			case PolishedGraniteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13038
				case false:
					return 13039
				}
			case PolishedGraniteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13040
				case false:
					return 13041
				}
			}
		}
	}
	return 12973 // default state
}

type SmoothRedSandstoneStairsFacing string

const (
	SmoothRedSandstoneStairsFacingNorth SmoothRedSandstoneStairsFacing = "north"
	SmoothRedSandstoneStairsFacingSouth SmoothRedSandstoneStairsFacing = "south"
	SmoothRedSandstoneStairsFacingWest  SmoothRedSandstoneStairsFacing = "west"
	SmoothRedSandstoneStairsFacingEast  SmoothRedSandstoneStairsFacing = "east"
)

type SmoothRedSandstoneStairsHalf string

const (
	SmoothRedSandstoneStairsHalfTop    SmoothRedSandstoneStairsHalf = "top"
	SmoothRedSandstoneStairsHalfBottom SmoothRedSandstoneStairsHalf = "bottom"
)

type SmoothRedSandstoneStairsShape string

const (
	SmoothRedSandstoneStairsShapeStraight   SmoothRedSandstoneStairsShape = "straight"
	SmoothRedSandstoneStairsShapeInnerLeft  SmoothRedSandstoneStairsShape = "inner_left"
	SmoothRedSandstoneStairsShapeInnerRight SmoothRedSandstoneStairsShape = "inner_right"
	SmoothRedSandstoneStairsShapeOuterLeft  SmoothRedSandstoneStairsShape = "outer_left"
	SmoothRedSandstoneStairsShapeOuterRight SmoothRedSandstoneStairsShape = "outer_right"
)

type SmoothRedSandstoneStairs struct {
	Facing      SmoothRedSandstoneStairsFacing
	Half        SmoothRedSandstoneStairsHalf
	Shape       SmoothRedSandstoneStairsShape
	Waterlogged bool
}

func (x SmoothRedSandstoneStairs) Id() uint16 {
	switch x.Facing {
	case SmoothRedSandstoneStairsFacingNorth:
		switch x.Half {
		case SmoothRedSandstoneStairsHalfTop:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13042
				case false:
					return 13043
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13044
				case false:
					return 13045
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13046
				case false:
					return 13047
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13048
				case false:
					return 13049
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13050
				case false:
					return 13051
				}
			}
		case SmoothRedSandstoneStairsHalfBottom:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13052
				case false:
					return 13053
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13054
				case false:
					return 13055
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13056
				case false:
					return 13057
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13058
				case false:
					return 13059
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13060
				case false:
					return 13061
				}
			}
		}
	case SmoothRedSandstoneStairsFacingSouth:
		switch x.Half {
		case SmoothRedSandstoneStairsHalfTop:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13062
				case false:
					return 13063
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13064
				case false:
					return 13065
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13066
				case false:
					return 13067
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13068
				case false:
					return 13069
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13070
				case false:
					return 13071
				}
			}
		case SmoothRedSandstoneStairsHalfBottom:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13072
				case false:
					return 13073
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13074
				case false:
					return 13075
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13076
				case false:
					return 13077
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13078
				case false:
					return 13079
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13080
				case false:
					return 13081
				}
			}
		}
	case SmoothRedSandstoneStairsFacingWest:
		switch x.Half {
		case SmoothRedSandstoneStairsHalfTop:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13082
				case false:
					return 13083
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13084
				case false:
					return 13085
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13086
				case false:
					return 13087
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13088
				case false:
					return 13089
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13090
				case false:
					return 13091
				}
			}
		case SmoothRedSandstoneStairsHalfBottom:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13092
				case false:
					return 13093
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13094
				case false:
					return 13095
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13096
				case false:
					return 13097
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13098
				case false:
					return 13099
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13100
				case false:
					return 13101
				}
			}
		}
	case SmoothRedSandstoneStairsFacingEast:
		switch x.Half {
		case SmoothRedSandstoneStairsHalfTop:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13102
				case false:
					return 13103
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13104
				case false:
					return 13105
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13106
				case false:
					return 13107
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13108
				case false:
					return 13109
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13110
				case false:
					return 13111
				}
			}
		case SmoothRedSandstoneStairsHalfBottom:
			switch x.Shape {
			case SmoothRedSandstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13112
				case false:
					return 13113
				}
			case SmoothRedSandstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13114
				case false:
					return 13115
				}
			case SmoothRedSandstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13116
				case false:
					return 13117
				}
			case SmoothRedSandstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13118
				case false:
					return 13119
				}
			case SmoothRedSandstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13120
				case false:
					return 13121
				}
			}
		}
	}
	return 13053 // default state
}

type MossyStoneBrickStairsFacing string

const (
	MossyStoneBrickStairsFacingNorth MossyStoneBrickStairsFacing = "north"
	MossyStoneBrickStairsFacingSouth MossyStoneBrickStairsFacing = "south"
	MossyStoneBrickStairsFacingWest  MossyStoneBrickStairsFacing = "west"
	MossyStoneBrickStairsFacingEast  MossyStoneBrickStairsFacing = "east"
)

type MossyStoneBrickStairsHalf string

const (
	MossyStoneBrickStairsHalfTop    MossyStoneBrickStairsHalf = "top"
	MossyStoneBrickStairsHalfBottom MossyStoneBrickStairsHalf = "bottom"
)

type MossyStoneBrickStairsShape string

const (
	MossyStoneBrickStairsShapeStraight   MossyStoneBrickStairsShape = "straight"
	MossyStoneBrickStairsShapeInnerLeft  MossyStoneBrickStairsShape = "inner_left"
	MossyStoneBrickStairsShapeInnerRight MossyStoneBrickStairsShape = "inner_right"
	MossyStoneBrickStairsShapeOuterLeft  MossyStoneBrickStairsShape = "outer_left"
	MossyStoneBrickStairsShapeOuterRight MossyStoneBrickStairsShape = "outer_right"
)

type MossyStoneBrickStairs struct {
	Facing      MossyStoneBrickStairsFacing
	Half        MossyStoneBrickStairsHalf
	Shape       MossyStoneBrickStairsShape
	Waterlogged bool
}

func (x MossyStoneBrickStairs) Id() uint16 {
	switch x.Facing {
	case MossyStoneBrickStairsFacingNorth:
		switch x.Half {
		case MossyStoneBrickStairsHalfTop:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13122
				case false:
					return 13123
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13124
				case false:
					return 13125
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13126
				case false:
					return 13127
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13128
				case false:
					return 13129
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13130
				case false:
					return 13131
				}
			}
		case MossyStoneBrickStairsHalfBottom:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13132
				case false:
					return 13133
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13134
				case false:
					return 13135
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13136
				case false:
					return 13137
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13138
				case false:
					return 13139
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13140
				case false:
					return 13141
				}
			}
		}
	case MossyStoneBrickStairsFacingSouth:
		switch x.Half {
		case MossyStoneBrickStairsHalfTop:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13142
				case false:
					return 13143
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13144
				case false:
					return 13145
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13146
				case false:
					return 13147
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13148
				case false:
					return 13149
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13150
				case false:
					return 13151
				}
			}
		case MossyStoneBrickStairsHalfBottom:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13152
				case false:
					return 13153
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13154
				case false:
					return 13155
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13156
				case false:
					return 13157
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13158
				case false:
					return 13159
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13160
				case false:
					return 13161
				}
			}
		}
	case MossyStoneBrickStairsFacingWest:
		switch x.Half {
		case MossyStoneBrickStairsHalfTop:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13162
				case false:
					return 13163
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13164
				case false:
					return 13165
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13166
				case false:
					return 13167
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13168
				case false:
					return 13169
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13170
				case false:
					return 13171
				}
			}
		case MossyStoneBrickStairsHalfBottom:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13172
				case false:
					return 13173
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13174
				case false:
					return 13175
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13176
				case false:
					return 13177
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13178
				case false:
					return 13179
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13180
				case false:
					return 13181
				}
			}
		}
	case MossyStoneBrickStairsFacingEast:
		switch x.Half {
		case MossyStoneBrickStairsHalfTop:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13182
				case false:
					return 13183
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13184
				case false:
					return 13185
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13186
				case false:
					return 13187
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13188
				case false:
					return 13189
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13190
				case false:
					return 13191
				}
			}
		case MossyStoneBrickStairsHalfBottom:
			switch x.Shape {
			case MossyStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13192
				case false:
					return 13193
				}
			case MossyStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13194
				case false:
					return 13195
				}
			case MossyStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13196
				case false:
					return 13197
				}
			case MossyStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13198
				case false:
					return 13199
				}
			case MossyStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13200
				case false:
					return 13201
				}
			}
		}
	}
	return 13133 // default state
}

type PolishedDioriteStairsFacing string

const (
	PolishedDioriteStairsFacingNorth PolishedDioriteStairsFacing = "north"
	PolishedDioriteStairsFacingSouth PolishedDioriteStairsFacing = "south"
	PolishedDioriteStairsFacingWest  PolishedDioriteStairsFacing = "west"
	PolishedDioriteStairsFacingEast  PolishedDioriteStairsFacing = "east"
)

type PolishedDioriteStairsHalf string

const (
	PolishedDioriteStairsHalfTop    PolishedDioriteStairsHalf = "top"
	PolishedDioriteStairsHalfBottom PolishedDioriteStairsHalf = "bottom"
)

type PolishedDioriteStairsShape string

const (
	PolishedDioriteStairsShapeStraight   PolishedDioriteStairsShape = "straight"
	PolishedDioriteStairsShapeInnerLeft  PolishedDioriteStairsShape = "inner_left"
	PolishedDioriteStairsShapeInnerRight PolishedDioriteStairsShape = "inner_right"
	PolishedDioriteStairsShapeOuterLeft  PolishedDioriteStairsShape = "outer_left"
	PolishedDioriteStairsShapeOuterRight PolishedDioriteStairsShape = "outer_right"
)

type PolishedDioriteStairs struct {
	Facing      PolishedDioriteStairsFacing
	Half        PolishedDioriteStairsHalf
	Shape       PolishedDioriteStairsShape
	Waterlogged bool
}

func (x PolishedDioriteStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case PolishedDioriteStairsFacingNorth:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13202
				case PolishedDioriteStairsShapeInnerLeft:
					return 13204
				case PolishedDioriteStairsShapeInnerRight:
					return 13206
				case PolishedDioriteStairsShapeOuterLeft:
					return 13208
				case PolishedDioriteStairsShapeOuterRight:
					return 13210
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13212
				case PolishedDioriteStairsShapeInnerLeft:
					return 13214
				case PolishedDioriteStairsShapeInnerRight:
					return 13216
				case PolishedDioriteStairsShapeOuterLeft:
					return 13218
				case PolishedDioriteStairsShapeOuterRight:
					return 13220
				}
			}
		case PolishedDioriteStairsFacingSouth:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13222
				case PolishedDioriteStairsShapeInnerLeft:
					return 13224
				case PolishedDioriteStairsShapeInnerRight:
					return 13226
				case PolishedDioriteStairsShapeOuterLeft:
					return 13228
				case PolishedDioriteStairsShapeOuterRight:
					return 13230
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13232
				case PolishedDioriteStairsShapeInnerLeft:
					return 13234
				case PolishedDioriteStairsShapeInnerRight:
					return 13236
				case PolishedDioriteStairsShapeOuterLeft:
					return 13238
				case PolishedDioriteStairsShapeOuterRight:
					return 13240
				}
			}
		case PolishedDioriteStairsFacingWest:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13242
				case PolishedDioriteStairsShapeInnerLeft:
					return 13244
				case PolishedDioriteStairsShapeInnerRight:
					return 13246
				case PolishedDioriteStairsShapeOuterLeft:
					return 13248
				case PolishedDioriteStairsShapeOuterRight:
					return 13250
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13252
				case PolishedDioriteStairsShapeInnerLeft:
					return 13254
				case PolishedDioriteStairsShapeInnerRight:
					return 13256
				case PolishedDioriteStairsShapeOuterLeft:
					return 13258
				case PolishedDioriteStairsShapeOuterRight:
					return 13260
				}
			}
		case PolishedDioriteStairsFacingEast:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13262
				case PolishedDioriteStairsShapeInnerLeft:
					return 13264
				case PolishedDioriteStairsShapeInnerRight:
					return 13266
				case PolishedDioriteStairsShapeOuterLeft:
					return 13268
				case PolishedDioriteStairsShapeOuterRight:
					return 13270
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13272
				case PolishedDioriteStairsShapeInnerLeft:
					return 13274
				case PolishedDioriteStairsShapeInnerRight:
					return 13276
				case PolishedDioriteStairsShapeOuterLeft:
					return 13278
				case PolishedDioriteStairsShapeOuterRight:
					return 13280
				}
			}
		}
	case false:
		switch x.Facing {
		case PolishedDioriteStairsFacingNorth:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13203
				case PolishedDioriteStairsShapeInnerLeft:
					return 13205
				case PolishedDioriteStairsShapeInnerRight:
					return 13207
				case PolishedDioriteStairsShapeOuterLeft:
					return 13209
				case PolishedDioriteStairsShapeOuterRight:
					return 13211
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13213
				case PolishedDioriteStairsShapeInnerLeft:
					return 13215
				case PolishedDioriteStairsShapeInnerRight:
					return 13217
				case PolishedDioriteStairsShapeOuterLeft:
					return 13219
				case PolishedDioriteStairsShapeOuterRight:
					return 13221
				}
			}
		case PolishedDioriteStairsFacingSouth:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13223
				case PolishedDioriteStairsShapeInnerLeft:
					return 13225
				case PolishedDioriteStairsShapeInnerRight:
					return 13227
				case PolishedDioriteStairsShapeOuterLeft:
					return 13229
				case PolishedDioriteStairsShapeOuterRight:
					return 13231
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13233
				case PolishedDioriteStairsShapeInnerLeft:
					return 13235
				case PolishedDioriteStairsShapeInnerRight:
					return 13237
				case PolishedDioriteStairsShapeOuterLeft:
					return 13239
				case PolishedDioriteStairsShapeOuterRight:
					return 13241
				}
			}
		case PolishedDioriteStairsFacingWest:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13243
				case PolishedDioriteStairsShapeInnerLeft:
					return 13245
				case PolishedDioriteStairsShapeInnerRight:
					return 13247
				case PolishedDioriteStairsShapeOuterLeft:
					return 13249
				case PolishedDioriteStairsShapeOuterRight:
					return 13251
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13253
				case PolishedDioriteStairsShapeInnerLeft:
					return 13255
				case PolishedDioriteStairsShapeInnerRight:
					return 13257
				case PolishedDioriteStairsShapeOuterLeft:
					return 13259
				case PolishedDioriteStairsShapeOuterRight:
					return 13261
				}
			}
		case PolishedDioriteStairsFacingEast:
			switch x.Half {
			case PolishedDioriteStairsHalfTop:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13263
				case PolishedDioriteStairsShapeInnerLeft:
					return 13265
				case PolishedDioriteStairsShapeInnerRight:
					return 13267
				case PolishedDioriteStairsShapeOuterLeft:
					return 13269
				case PolishedDioriteStairsShapeOuterRight:
					return 13271
				}
			case PolishedDioriteStairsHalfBottom:
				switch x.Shape {
				case PolishedDioriteStairsShapeStraight:
					return 13273
				case PolishedDioriteStairsShapeInnerLeft:
					return 13275
				case PolishedDioriteStairsShapeInnerRight:
					return 13277
				case PolishedDioriteStairsShapeOuterLeft:
					return 13279
				case PolishedDioriteStairsShapeOuterRight:
					return 13281
				}
			}
		}
	}
	return 13213 // default state
}

type MossyCobblestoneStairsFacing string

const (
	MossyCobblestoneStairsFacingNorth MossyCobblestoneStairsFacing = "north"
	MossyCobblestoneStairsFacingSouth MossyCobblestoneStairsFacing = "south"
	MossyCobblestoneStairsFacingWest  MossyCobblestoneStairsFacing = "west"
	MossyCobblestoneStairsFacingEast  MossyCobblestoneStairsFacing = "east"
)

type MossyCobblestoneStairsHalf string

const (
	MossyCobblestoneStairsHalfTop    MossyCobblestoneStairsHalf = "top"
	MossyCobblestoneStairsHalfBottom MossyCobblestoneStairsHalf = "bottom"
)

type MossyCobblestoneStairsShape string

const (
	MossyCobblestoneStairsShapeStraight   MossyCobblestoneStairsShape = "straight"
	MossyCobblestoneStairsShapeInnerLeft  MossyCobblestoneStairsShape = "inner_left"
	MossyCobblestoneStairsShapeInnerRight MossyCobblestoneStairsShape = "inner_right"
	MossyCobblestoneStairsShapeOuterLeft  MossyCobblestoneStairsShape = "outer_left"
	MossyCobblestoneStairsShapeOuterRight MossyCobblestoneStairsShape = "outer_right"
)

type MossyCobblestoneStairs struct {
	Waterlogged bool
	Facing      MossyCobblestoneStairsFacing
	Half        MossyCobblestoneStairsHalf
	Shape       MossyCobblestoneStairsShape
}

func (x MossyCobblestoneStairs) Id() uint16 {
	switch x.Shape {
	case MossyCobblestoneStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13282
				case MossyCobblestoneStairsHalfBottom:
					return 13292
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13302
				case MossyCobblestoneStairsHalfBottom:
					return 13312
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13322
				case MossyCobblestoneStairsHalfBottom:
					return 13332
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13342
				case MossyCobblestoneStairsHalfBottom:
					return 13352
				}
			}
		case false:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13283
				case MossyCobblestoneStairsHalfBottom:
					return 13293
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13303
				case MossyCobblestoneStairsHalfBottom:
					return 13313
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13323
				case MossyCobblestoneStairsHalfBottom:
					return 13333
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13343
				case MossyCobblestoneStairsHalfBottom:
					return 13353
				}
			}
		}
	case MossyCobblestoneStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13284
				case MossyCobblestoneStairsHalfBottom:
					return 13294
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13304
				case MossyCobblestoneStairsHalfBottom:
					return 13314
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13324
				case MossyCobblestoneStairsHalfBottom:
					return 13334
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13344
				case MossyCobblestoneStairsHalfBottom:
					return 13354
				}
			}
		case false:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13285
				case MossyCobblestoneStairsHalfBottom:
					return 13295
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13305
				case MossyCobblestoneStairsHalfBottom:
					return 13315
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13325
				case MossyCobblestoneStairsHalfBottom:
					return 13335
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13345
				case MossyCobblestoneStairsHalfBottom:
					return 13355
				}
			}
		}
	case MossyCobblestoneStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13286
				case MossyCobblestoneStairsHalfBottom:
					return 13296
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13306
				case MossyCobblestoneStairsHalfBottom:
					return 13316
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13326
				case MossyCobblestoneStairsHalfBottom:
					return 13336
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13346
				case MossyCobblestoneStairsHalfBottom:
					return 13356
				}
			}
		case false:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13287
				case MossyCobblestoneStairsHalfBottom:
					return 13297
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13307
				case MossyCobblestoneStairsHalfBottom:
					return 13317
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13327
				case MossyCobblestoneStairsHalfBottom:
					return 13337
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13347
				case MossyCobblestoneStairsHalfBottom:
					return 13357
				}
			}
		}
	case MossyCobblestoneStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13288
				case MossyCobblestoneStairsHalfBottom:
					return 13298
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13308
				case MossyCobblestoneStairsHalfBottom:
					return 13318
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13328
				case MossyCobblestoneStairsHalfBottom:
					return 13338
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13348
				case MossyCobblestoneStairsHalfBottom:
					return 13358
				}
			}
		case false:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13289
				case MossyCobblestoneStairsHalfBottom:
					return 13299
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13309
				case MossyCobblestoneStairsHalfBottom:
					return 13319
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13329
				case MossyCobblestoneStairsHalfBottom:
					return 13339
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13349
				case MossyCobblestoneStairsHalfBottom:
					return 13359
				}
			}
		}
	case MossyCobblestoneStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13290
				case MossyCobblestoneStairsHalfBottom:
					return 13300
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13310
				case MossyCobblestoneStairsHalfBottom:
					return 13320
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13330
				case MossyCobblestoneStairsHalfBottom:
					return 13340
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13350
				case MossyCobblestoneStairsHalfBottom:
					return 13360
				}
			}
		case false:
			switch x.Facing {
			case MossyCobblestoneStairsFacingNorth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13291
				case MossyCobblestoneStairsHalfBottom:
					return 13301
				}
			case MossyCobblestoneStairsFacingSouth:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13311
				case MossyCobblestoneStairsHalfBottom:
					return 13321
				}
			case MossyCobblestoneStairsFacingWest:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13331
				case MossyCobblestoneStairsHalfBottom:
					return 13341
				}
			case MossyCobblestoneStairsFacingEast:
				switch x.Half {
				case MossyCobblestoneStairsHalfTop:
					return 13351
				case MossyCobblestoneStairsHalfBottom:
					return 13361
				}
			}
		}
	}
	return 13293 // default state
}

type EndStoneBrickStairsFacing string

const (
	EndStoneBrickStairsFacingNorth EndStoneBrickStairsFacing = "north"
	EndStoneBrickStairsFacingSouth EndStoneBrickStairsFacing = "south"
	EndStoneBrickStairsFacingWest  EndStoneBrickStairsFacing = "west"
	EndStoneBrickStairsFacingEast  EndStoneBrickStairsFacing = "east"
)

type EndStoneBrickStairsHalf string

const (
	EndStoneBrickStairsHalfTop    EndStoneBrickStairsHalf = "top"
	EndStoneBrickStairsHalfBottom EndStoneBrickStairsHalf = "bottom"
)

type EndStoneBrickStairsShape string

const (
	EndStoneBrickStairsShapeStraight   EndStoneBrickStairsShape = "straight"
	EndStoneBrickStairsShapeInnerLeft  EndStoneBrickStairsShape = "inner_left"
	EndStoneBrickStairsShapeInnerRight EndStoneBrickStairsShape = "inner_right"
	EndStoneBrickStairsShapeOuterLeft  EndStoneBrickStairsShape = "outer_left"
	EndStoneBrickStairsShapeOuterRight EndStoneBrickStairsShape = "outer_right"
)

type EndStoneBrickStairs struct {
	Facing      EndStoneBrickStairsFacing
	Half        EndStoneBrickStairsHalf
	Shape       EndStoneBrickStairsShape
	Waterlogged bool
}

func (x EndStoneBrickStairs) Id() uint16 {
	switch x.Facing {
	case EndStoneBrickStairsFacingNorth:
		switch x.Half {
		case EndStoneBrickStairsHalfTop:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13362
				case false:
					return 13363
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13364
				case false:
					return 13365
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13366
				case false:
					return 13367
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13368
				case false:
					return 13369
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13370
				case false:
					return 13371
				}
			}
		case EndStoneBrickStairsHalfBottom:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13372
				case false:
					return 13373
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13374
				case false:
					return 13375
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13376
				case false:
					return 13377
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13378
				case false:
					return 13379
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13380
				case false:
					return 13381
				}
			}
		}
	case EndStoneBrickStairsFacingSouth:
		switch x.Half {
		case EndStoneBrickStairsHalfTop:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13382
				case false:
					return 13383
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13384
				case false:
					return 13385
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13386
				case false:
					return 13387
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13388
				case false:
					return 13389
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13390
				case false:
					return 13391
				}
			}
		case EndStoneBrickStairsHalfBottom:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13392
				case false:
					return 13393
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13394
				case false:
					return 13395
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13396
				case false:
					return 13397
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13398
				case false:
					return 13399
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13400
				case false:
					return 13401
				}
			}
		}
	case EndStoneBrickStairsFacingWest:
		switch x.Half {
		case EndStoneBrickStairsHalfTop:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13402
				case false:
					return 13403
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13404
				case false:
					return 13405
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13406
				case false:
					return 13407
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13408
				case false:
					return 13409
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13410
				case false:
					return 13411
				}
			}
		case EndStoneBrickStairsHalfBottom:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13412
				case false:
					return 13413
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13414
				case false:
					return 13415
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13416
				case false:
					return 13417
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13418
				case false:
					return 13419
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13420
				case false:
					return 13421
				}
			}
		}
	case EndStoneBrickStairsFacingEast:
		switch x.Half {
		case EndStoneBrickStairsHalfTop:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13422
				case false:
					return 13423
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13424
				case false:
					return 13425
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13426
				case false:
					return 13427
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13428
				case false:
					return 13429
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13430
				case false:
					return 13431
				}
			}
		case EndStoneBrickStairsHalfBottom:
			switch x.Shape {
			case EndStoneBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13432
				case false:
					return 13433
				}
			case EndStoneBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13434
				case false:
					return 13435
				}
			case EndStoneBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13436
				case false:
					return 13437
				}
			case EndStoneBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13438
				case false:
					return 13439
				}
			case EndStoneBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13440
				case false:
					return 13441
				}
			}
		}
	}
	return 13373 // default state
}

type StoneStairsFacing string

const (
	StoneStairsFacingNorth StoneStairsFacing = "north"
	StoneStairsFacingSouth StoneStairsFacing = "south"
	StoneStairsFacingWest  StoneStairsFacing = "west"
	StoneStairsFacingEast  StoneStairsFacing = "east"
)

type StoneStairsHalf string

const (
	StoneStairsHalfTop    StoneStairsHalf = "top"
	StoneStairsHalfBottom StoneStairsHalf = "bottom"
)

type StoneStairsShape string

const (
	StoneStairsShapeStraight   StoneStairsShape = "straight"
	StoneStairsShapeInnerLeft  StoneStairsShape = "inner_left"
	StoneStairsShapeInnerRight StoneStairsShape = "inner_right"
	StoneStairsShapeOuterLeft  StoneStairsShape = "outer_left"
	StoneStairsShapeOuterRight StoneStairsShape = "outer_right"
)

type StoneStairs struct {
	Facing      StoneStairsFacing
	Half        StoneStairsHalf
	Shape       StoneStairsShape
	Waterlogged bool
}

func (x StoneStairs) Id() uint16 {
	switch x.Facing {
	case StoneStairsFacingNorth:
		switch x.Half {
		case StoneStairsHalfTop:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13442
				case false:
					return 13443
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13444
				case false:
					return 13445
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13446
				case false:
					return 13447
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13448
				case false:
					return 13449
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13450
				case false:
					return 13451
				}
			}
		case StoneStairsHalfBottom:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13452
				case false:
					return 13453
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13454
				case false:
					return 13455
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13456
				case false:
					return 13457
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13458
				case false:
					return 13459
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13460
				case false:
					return 13461
				}
			}
		}
	case StoneStairsFacingSouth:
		switch x.Half {
		case StoneStairsHalfTop:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13462
				case false:
					return 13463
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13464
				case false:
					return 13465
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13466
				case false:
					return 13467
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13468
				case false:
					return 13469
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13470
				case false:
					return 13471
				}
			}
		case StoneStairsHalfBottom:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13472
				case false:
					return 13473
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13474
				case false:
					return 13475
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13476
				case false:
					return 13477
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13478
				case false:
					return 13479
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13480
				case false:
					return 13481
				}
			}
		}
	case StoneStairsFacingWest:
		switch x.Half {
		case StoneStairsHalfTop:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13482
				case false:
					return 13483
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13484
				case false:
					return 13485
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13486
				case false:
					return 13487
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13488
				case false:
					return 13489
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13490
				case false:
					return 13491
				}
			}
		case StoneStairsHalfBottom:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13492
				case false:
					return 13493
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13494
				case false:
					return 13495
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13496
				case false:
					return 13497
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13498
				case false:
					return 13499
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13500
				case false:
					return 13501
				}
			}
		}
	case StoneStairsFacingEast:
		switch x.Half {
		case StoneStairsHalfTop:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13502
				case false:
					return 13503
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13504
				case false:
					return 13505
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13506
				case false:
					return 13507
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13508
				case false:
					return 13509
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13510
				case false:
					return 13511
				}
			}
		case StoneStairsHalfBottom:
			switch x.Shape {
			case StoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13512
				case false:
					return 13513
				}
			case StoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13514
				case false:
					return 13515
				}
			case StoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13516
				case false:
					return 13517
				}
			case StoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13518
				case false:
					return 13519
				}
			case StoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13520
				case false:
					return 13521
				}
			}
		}
	}
	return 13453 // default state
}

type SmoothSandstoneStairsFacing string

const (
	SmoothSandstoneStairsFacingNorth SmoothSandstoneStairsFacing = "north"
	SmoothSandstoneStairsFacingSouth SmoothSandstoneStairsFacing = "south"
	SmoothSandstoneStairsFacingWest  SmoothSandstoneStairsFacing = "west"
	SmoothSandstoneStairsFacingEast  SmoothSandstoneStairsFacing = "east"
)

type SmoothSandstoneStairsHalf string

const (
	SmoothSandstoneStairsHalfTop    SmoothSandstoneStairsHalf = "top"
	SmoothSandstoneStairsHalfBottom SmoothSandstoneStairsHalf = "bottom"
)

type SmoothSandstoneStairsShape string

const (
	SmoothSandstoneStairsShapeStraight   SmoothSandstoneStairsShape = "straight"
	SmoothSandstoneStairsShapeInnerLeft  SmoothSandstoneStairsShape = "inner_left"
	SmoothSandstoneStairsShapeInnerRight SmoothSandstoneStairsShape = "inner_right"
	SmoothSandstoneStairsShapeOuterLeft  SmoothSandstoneStairsShape = "outer_left"
	SmoothSandstoneStairsShapeOuterRight SmoothSandstoneStairsShape = "outer_right"
)

type SmoothSandstoneStairs struct {
	Waterlogged bool
	Facing      SmoothSandstoneStairsFacing
	Half        SmoothSandstoneStairsHalf
	Shape       SmoothSandstoneStairsShape
}

func (x SmoothSandstoneStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case SmoothSandstoneStairsFacingNorth:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13522
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13524
				case SmoothSandstoneStairsShapeInnerRight:
					return 13526
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13528
				case SmoothSandstoneStairsShapeOuterRight:
					return 13530
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13532
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13534
				case SmoothSandstoneStairsShapeInnerRight:
					return 13536
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13538
				case SmoothSandstoneStairsShapeOuterRight:
					return 13540
				}
			}
		case SmoothSandstoneStairsFacingSouth:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13542
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13544
				case SmoothSandstoneStairsShapeInnerRight:
					return 13546
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13548
				case SmoothSandstoneStairsShapeOuterRight:
					return 13550
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13552
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13554
				case SmoothSandstoneStairsShapeInnerRight:
					return 13556
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13558
				case SmoothSandstoneStairsShapeOuterRight:
					return 13560
				}
			}
		case SmoothSandstoneStairsFacingWest:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13562
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13564
				case SmoothSandstoneStairsShapeInnerRight:
					return 13566
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13568
				case SmoothSandstoneStairsShapeOuterRight:
					return 13570
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13572
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13574
				case SmoothSandstoneStairsShapeInnerRight:
					return 13576
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13578
				case SmoothSandstoneStairsShapeOuterRight:
					return 13580
				}
			}
		case SmoothSandstoneStairsFacingEast:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13582
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13584
				case SmoothSandstoneStairsShapeInnerRight:
					return 13586
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13588
				case SmoothSandstoneStairsShapeOuterRight:
					return 13590
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13592
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13594
				case SmoothSandstoneStairsShapeInnerRight:
					return 13596
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13598
				case SmoothSandstoneStairsShapeOuterRight:
					return 13600
				}
			}
		}
	case false:
		switch x.Facing {
		case SmoothSandstoneStairsFacingNorth:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13523
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13525
				case SmoothSandstoneStairsShapeInnerRight:
					return 13527
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13529
				case SmoothSandstoneStairsShapeOuterRight:
					return 13531
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13533
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13535
				case SmoothSandstoneStairsShapeInnerRight:
					return 13537
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13539
				case SmoothSandstoneStairsShapeOuterRight:
					return 13541
				}
			}
		case SmoothSandstoneStairsFacingSouth:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13543
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13545
				case SmoothSandstoneStairsShapeInnerRight:
					return 13547
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13549
				case SmoothSandstoneStairsShapeOuterRight:
					return 13551
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13553
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13555
				case SmoothSandstoneStairsShapeInnerRight:
					return 13557
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13559
				case SmoothSandstoneStairsShapeOuterRight:
					return 13561
				}
			}
		case SmoothSandstoneStairsFacingWest:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13563
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13565
				case SmoothSandstoneStairsShapeInnerRight:
					return 13567
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13569
				case SmoothSandstoneStairsShapeOuterRight:
					return 13571
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13573
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13575
				case SmoothSandstoneStairsShapeInnerRight:
					return 13577
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13579
				case SmoothSandstoneStairsShapeOuterRight:
					return 13581
				}
			}
		case SmoothSandstoneStairsFacingEast:
			switch x.Half {
			case SmoothSandstoneStairsHalfTop:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13583
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13585
				case SmoothSandstoneStairsShapeInnerRight:
					return 13587
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13589
				case SmoothSandstoneStairsShapeOuterRight:
					return 13591
				}
			case SmoothSandstoneStairsHalfBottom:
				switch x.Shape {
				case SmoothSandstoneStairsShapeStraight:
					return 13593
				case SmoothSandstoneStairsShapeInnerLeft:
					return 13595
				case SmoothSandstoneStairsShapeInnerRight:
					return 13597
				case SmoothSandstoneStairsShapeOuterLeft:
					return 13599
				case SmoothSandstoneStairsShapeOuterRight:
					return 13601
				}
			}
		}
	}
	return 13533 // default state
}

type SmoothQuartzStairsShape string

const (
	SmoothQuartzStairsShapeStraight   SmoothQuartzStairsShape = "straight"
	SmoothQuartzStairsShapeInnerLeft  SmoothQuartzStairsShape = "inner_left"
	SmoothQuartzStairsShapeInnerRight SmoothQuartzStairsShape = "inner_right"
	SmoothQuartzStairsShapeOuterLeft  SmoothQuartzStairsShape = "outer_left"
	SmoothQuartzStairsShapeOuterRight SmoothQuartzStairsShape = "outer_right"
)

type SmoothQuartzStairsFacing string

const (
	SmoothQuartzStairsFacingNorth SmoothQuartzStairsFacing = "north"
	SmoothQuartzStairsFacingSouth SmoothQuartzStairsFacing = "south"
	SmoothQuartzStairsFacingWest  SmoothQuartzStairsFacing = "west"
	SmoothQuartzStairsFacingEast  SmoothQuartzStairsFacing = "east"
)

type SmoothQuartzStairsHalf string

const (
	SmoothQuartzStairsHalfTop    SmoothQuartzStairsHalf = "top"
	SmoothQuartzStairsHalfBottom SmoothQuartzStairsHalf = "bottom"
)

type SmoothQuartzStairs struct {
	Shape       SmoothQuartzStairsShape
	Waterlogged bool
	Facing      SmoothQuartzStairsFacing
	Half        SmoothQuartzStairsHalf
}

func (x SmoothQuartzStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case SmoothQuartzStairsFacingNorth:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13602
				case SmoothQuartzStairsShapeInnerLeft:
					return 13604
				case SmoothQuartzStairsShapeInnerRight:
					return 13606
				case SmoothQuartzStairsShapeOuterLeft:
					return 13608
				case SmoothQuartzStairsShapeOuterRight:
					return 13610
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13612
				case SmoothQuartzStairsShapeInnerLeft:
					return 13614
				case SmoothQuartzStairsShapeInnerRight:
					return 13616
				case SmoothQuartzStairsShapeOuterLeft:
					return 13618
				case SmoothQuartzStairsShapeOuterRight:
					return 13620
				}
			}
		case SmoothQuartzStairsFacingSouth:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13622
				case SmoothQuartzStairsShapeInnerLeft:
					return 13624
				case SmoothQuartzStairsShapeInnerRight:
					return 13626
				case SmoothQuartzStairsShapeOuterLeft:
					return 13628
				case SmoothQuartzStairsShapeOuterRight:
					return 13630
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13632
				case SmoothQuartzStairsShapeInnerLeft:
					return 13634
				case SmoothQuartzStairsShapeInnerRight:
					return 13636
				case SmoothQuartzStairsShapeOuterLeft:
					return 13638
				case SmoothQuartzStairsShapeOuterRight:
					return 13640
				}
			}
		case SmoothQuartzStairsFacingWest:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13642
				case SmoothQuartzStairsShapeInnerLeft:
					return 13644
				case SmoothQuartzStairsShapeInnerRight:
					return 13646
				case SmoothQuartzStairsShapeOuterLeft:
					return 13648
				case SmoothQuartzStairsShapeOuterRight:
					return 13650
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13652
				case SmoothQuartzStairsShapeInnerLeft:
					return 13654
				case SmoothQuartzStairsShapeInnerRight:
					return 13656
				case SmoothQuartzStairsShapeOuterLeft:
					return 13658
				case SmoothQuartzStairsShapeOuterRight:
					return 13660
				}
			}
		case SmoothQuartzStairsFacingEast:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13662
				case SmoothQuartzStairsShapeInnerLeft:
					return 13664
				case SmoothQuartzStairsShapeInnerRight:
					return 13666
				case SmoothQuartzStairsShapeOuterLeft:
					return 13668
				case SmoothQuartzStairsShapeOuterRight:
					return 13670
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13672
				case SmoothQuartzStairsShapeInnerLeft:
					return 13674
				case SmoothQuartzStairsShapeInnerRight:
					return 13676
				case SmoothQuartzStairsShapeOuterLeft:
					return 13678
				case SmoothQuartzStairsShapeOuterRight:
					return 13680
				}
			}
		}
	case false:
		switch x.Facing {
		case SmoothQuartzStairsFacingNorth:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13603
				case SmoothQuartzStairsShapeInnerLeft:
					return 13605
				case SmoothQuartzStairsShapeInnerRight:
					return 13607
				case SmoothQuartzStairsShapeOuterLeft:
					return 13609
				case SmoothQuartzStairsShapeOuterRight:
					return 13611
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13613
				case SmoothQuartzStairsShapeInnerLeft:
					return 13615
				case SmoothQuartzStairsShapeInnerRight:
					return 13617
				case SmoothQuartzStairsShapeOuterLeft:
					return 13619
				case SmoothQuartzStairsShapeOuterRight:
					return 13621
				}
			}
		case SmoothQuartzStairsFacingSouth:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13623
				case SmoothQuartzStairsShapeInnerLeft:
					return 13625
				case SmoothQuartzStairsShapeInnerRight:
					return 13627
				case SmoothQuartzStairsShapeOuterLeft:
					return 13629
				case SmoothQuartzStairsShapeOuterRight:
					return 13631
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13633
				case SmoothQuartzStairsShapeInnerLeft:
					return 13635
				case SmoothQuartzStairsShapeInnerRight:
					return 13637
				case SmoothQuartzStairsShapeOuterLeft:
					return 13639
				case SmoothQuartzStairsShapeOuterRight:
					return 13641
				}
			}
		case SmoothQuartzStairsFacingWest:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13643
				case SmoothQuartzStairsShapeInnerLeft:
					return 13645
				case SmoothQuartzStairsShapeInnerRight:
					return 13647
				case SmoothQuartzStairsShapeOuterLeft:
					return 13649
				case SmoothQuartzStairsShapeOuterRight:
					return 13651
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13653
				case SmoothQuartzStairsShapeInnerLeft:
					return 13655
				case SmoothQuartzStairsShapeInnerRight:
					return 13657
				case SmoothQuartzStairsShapeOuterLeft:
					return 13659
				case SmoothQuartzStairsShapeOuterRight:
					return 13661
				}
			}
		case SmoothQuartzStairsFacingEast:
			switch x.Half {
			case SmoothQuartzStairsHalfTop:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13663
				case SmoothQuartzStairsShapeInnerLeft:
					return 13665
				case SmoothQuartzStairsShapeInnerRight:
					return 13667
				case SmoothQuartzStairsShapeOuterLeft:
					return 13669
				case SmoothQuartzStairsShapeOuterRight:
					return 13671
				}
			case SmoothQuartzStairsHalfBottom:
				switch x.Shape {
				case SmoothQuartzStairsShapeStraight:
					return 13673
				case SmoothQuartzStairsShapeInnerLeft:
					return 13675
				case SmoothQuartzStairsShapeInnerRight:
					return 13677
				case SmoothQuartzStairsShapeOuterLeft:
					return 13679
				case SmoothQuartzStairsShapeOuterRight:
					return 13681
				}
			}
		}
	}
	return 13613 // default state
}

type GraniteStairsFacing string

const (
	GraniteStairsFacingNorth GraniteStairsFacing = "north"
	GraniteStairsFacingSouth GraniteStairsFacing = "south"
	GraniteStairsFacingWest  GraniteStairsFacing = "west"
	GraniteStairsFacingEast  GraniteStairsFacing = "east"
)

type GraniteStairsHalf string

const (
	GraniteStairsHalfTop    GraniteStairsHalf = "top"
	GraniteStairsHalfBottom GraniteStairsHalf = "bottom"
)

type GraniteStairsShape string

const (
	GraniteStairsShapeStraight   GraniteStairsShape = "straight"
	GraniteStairsShapeInnerLeft  GraniteStairsShape = "inner_left"
	GraniteStairsShapeInnerRight GraniteStairsShape = "inner_right"
	GraniteStairsShapeOuterLeft  GraniteStairsShape = "outer_left"
	GraniteStairsShapeOuterRight GraniteStairsShape = "outer_right"
)

type GraniteStairs struct {
	Facing      GraniteStairsFacing
	Half        GraniteStairsHalf
	Shape       GraniteStairsShape
	Waterlogged bool
}

func (x GraniteStairs) Id() uint16 {
	switch x.Shape {
	case GraniteStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13682
				case GraniteStairsHalfBottom:
					return 13692
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13702
				case GraniteStairsHalfBottom:
					return 13712
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13722
				case GraniteStairsHalfBottom:
					return 13732
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13742
				case GraniteStairsHalfBottom:
					return 13752
				}
			}
		case false:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13683
				case GraniteStairsHalfBottom:
					return 13693
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13703
				case GraniteStairsHalfBottom:
					return 13713
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13723
				case GraniteStairsHalfBottom:
					return 13733
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13743
				case GraniteStairsHalfBottom:
					return 13753
				}
			}
		}
	case GraniteStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13684
				case GraniteStairsHalfBottom:
					return 13694
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13704
				case GraniteStairsHalfBottom:
					return 13714
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13724
				case GraniteStairsHalfBottom:
					return 13734
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13744
				case GraniteStairsHalfBottom:
					return 13754
				}
			}
		case false:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13685
				case GraniteStairsHalfBottom:
					return 13695
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13705
				case GraniteStairsHalfBottom:
					return 13715
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13725
				case GraniteStairsHalfBottom:
					return 13735
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13745
				case GraniteStairsHalfBottom:
					return 13755
				}
			}
		}
	case GraniteStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13686
				case GraniteStairsHalfBottom:
					return 13696
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13706
				case GraniteStairsHalfBottom:
					return 13716
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13726
				case GraniteStairsHalfBottom:
					return 13736
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13746
				case GraniteStairsHalfBottom:
					return 13756
				}
			}
		case false:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13687
				case GraniteStairsHalfBottom:
					return 13697
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13707
				case GraniteStairsHalfBottom:
					return 13717
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13727
				case GraniteStairsHalfBottom:
					return 13737
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13747
				case GraniteStairsHalfBottom:
					return 13757
				}
			}
		}
	case GraniteStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13688
				case GraniteStairsHalfBottom:
					return 13698
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13708
				case GraniteStairsHalfBottom:
					return 13718
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13728
				case GraniteStairsHalfBottom:
					return 13738
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13748
				case GraniteStairsHalfBottom:
					return 13758
				}
			}
		case false:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13689
				case GraniteStairsHalfBottom:
					return 13699
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13709
				case GraniteStairsHalfBottom:
					return 13719
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13729
				case GraniteStairsHalfBottom:
					return 13739
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13749
				case GraniteStairsHalfBottom:
					return 13759
				}
			}
		}
	case GraniteStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13690
				case GraniteStairsHalfBottom:
					return 13700
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13710
				case GraniteStairsHalfBottom:
					return 13720
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13730
				case GraniteStairsHalfBottom:
					return 13740
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13750
				case GraniteStairsHalfBottom:
					return 13760
				}
			}
		case false:
			switch x.Facing {
			case GraniteStairsFacingNorth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13691
				case GraniteStairsHalfBottom:
					return 13701
				}
			case GraniteStairsFacingSouth:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13711
				case GraniteStairsHalfBottom:
					return 13721
				}
			case GraniteStairsFacingWest:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13731
				case GraniteStairsHalfBottom:
					return 13741
				}
			case GraniteStairsFacingEast:
				switch x.Half {
				case GraniteStairsHalfTop:
					return 13751
				case GraniteStairsHalfBottom:
					return 13761
				}
			}
		}
	}
	return 13693 // default state
}

type AndesiteStairsFacing string

const (
	AndesiteStairsFacingNorth AndesiteStairsFacing = "north"
	AndesiteStairsFacingSouth AndesiteStairsFacing = "south"
	AndesiteStairsFacingWest  AndesiteStairsFacing = "west"
	AndesiteStairsFacingEast  AndesiteStairsFacing = "east"
)

type AndesiteStairsHalf string

const (
	AndesiteStairsHalfTop    AndesiteStairsHalf = "top"
	AndesiteStairsHalfBottom AndesiteStairsHalf = "bottom"
)

type AndesiteStairsShape string

const (
	AndesiteStairsShapeStraight   AndesiteStairsShape = "straight"
	AndesiteStairsShapeInnerLeft  AndesiteStairsShape = "inner_left"
	AndesiteStairsShapeInnerRight AndesiteStairsShape = "inner_right"
	AndesiteStairsShapeOuterLeft  AndesiteStairsShape = "outer_left"
	AndesiteStairsShapeOuterRight AndesiteStairsShape = "outer_right"
)

type AndesiteStairs struct {
	Facing      AndesiteStairsFacing
	Half        AndesiteStairsHalf
	Shape       AndesiteStairsShape
	Waterlogged bool
}

func (x AndesiteStairs) Id() uint16 {
	switch x.Half {
	case AndesiteStairsHalfTop:
		switch x.Shape {
		case AndesiteStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13762
				case AndesiteStairsFacingSouth:
					return 13782
				case AndesiteStairsFacingWest:
					return 13802
				case AndesiteStairsFacingEast:
					return 13822
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13763
				case AndesiteStairsFacingSouth:
					return 13783
				case AndesiteStairsFacingWest:
					return 13803
				case AndesiteStairsFacingEast:
					return 13823
				}
			}
		case AndesiteStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13764
				case AndesiteStairsFacingSouth:
					return 13784
				case AndesiteStairsFacingWest:
					return 13804
				case AndesiteStairsFacingEast:
					return 13824
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13765
				case AndesiteStairsFacingSouth:
					return 13785
				case AndesiteStairsFacingWest:
					return 13805
				case AndesiteStairsFacingEast:
					return 13825
				}
			}
		case AndesiteStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13766
				case AndesiteStairsFacingSouth:
					return 13786
				case AndesiteStairsFacingWest:
					return 13806
				case AndesiteStairsFacingEast:
					return 13826
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13767
				case AndesiteStairsFacingSouth:
					return 13787
				case AndesiteStairsFacingWest:
					return 13807
				case AndesiteStairsFacingEast:
					return 13827
				}
			}
		case AndesiteStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13768
				case AndesiteStairsFacingSouth:
					return 13788
				case AndesiteStairsFacingWest:
					return 13808
				case AndesiteStairsFacingEast:
					return 13828
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13769
				case AndesiteStairsFacingSouth:
					return 13789
				case AndesiteStairsFacingWest:
					return 13809
				case AndesiteStairsFacingEast:
					return 13829
				}
			}
		case AndesiteStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13770
				case AndesiteStairsFacingSouth:
					return 13790
				case AndesiteStairsFacingWest:
					return 13810
				case AndesiteStairsFacingEast:
					return 13830
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13771
				case AndesiteStairsFacingSouth:
					return 13791
				case AndesiteStairsFacingWest:
					return 13811
				case AndesiteStairsFacingEast:
					return 13831
				}
			}
		}
	case AndesiteStairsHalfBottom:
		switch x.Shape {
		case AndesiteStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13772
				case AndesiteStairsFacingSouth:
					return 13792
				case AndesiteStairsFacingWest:
					return 13812
				case AndesiteStairsFacingEast:
					return 13832
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13773
				case AndesiteStairsFacingSouth:
					return 13793
				case AndesiteStairsFacingWest:
					return 13813
				case AndesiteStairsFacingEast:
					return 13833
				}
			}
		case AndesiteStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13774
				case AndesiteStairsFacingSouth:
					return 13794
				case AndesiteStairsFacingWest:
					return 13814
				case AndesiteStairsFacingEast:
					return 13834
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13775
				case AndesiteStairsFacingSouth:
					return 13795
				case AndesiteStairsFacingWest:
					return 13815
				case AndesiteStairsFacingEast:
					return 13835
				}
			}
		case AndesiteStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13776
				case AndesiteStairsFacingSouth:
					return 13796
				case AndesiteStairsFacingWest:
					return 13816
				case AndesiteStairsFacingEast:
					return 13836
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13777
				case AndesiteStairsFacingSouth:
					return 13797
				case AndesiteStairsFacingWest:
					return 13817
				case AndesiteStairsFacingEast:
					return 13837
				}
			}
		case AndesiteStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13778
				case AndesiteStairsFacingSouth:
					return 13798
				case AndesiteStairsFacingWest:
					return 13818
				case AndesiteStairsFacingEast:
					return 13838
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13779
				case AndesiteStairsFacingSouth:
					return 13799
				case AndesiteStairsFacingWest:
					return 13819
				case AndesiteStairsFacingEast:
					return 13839
				}
			}
		case AndesiteStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13780
				case AndesiteStairsFacingSouth:
					return 13800
				case AndesiteStairsFacingWest:
					return 13820
				case AndesiteStairsFacingEast:
					return 13840
				}
			case false:
				switch x.Facing {
				case AndesiteStairsFacingNorth:
					return 13781
				case AndesiteStairsFacingSouth:
					return 13801
				case AndesiteStairsFacingWest:
					return 13821
				case AndesiteStairsFacingEast:
					return 13841
				}
			}
		}
	}
	return 13773 // default state
}

type RedNetherBrickStairsFacing string

const (
	RedNetherBrickStairsFacingNorth RedNetherBrickStairsFacing = "north"
	RedNetherBrickStairsFacingSouth RedNetherBrickStairsFacing = "south"
	RedNetherBrickStairsFacingWest  RedNetherBrickStairsFacing = "west"
	RedNetherBrickStairsFacingEast  RedNetherBrickStairsFacing = "east"
)

type RedNetherBrickStairsHalf string

const (
	RedNetherBrickStairsHalfTop    RedNetherBrickStairsHalf = "top"
	RedNetherBrickStairsHalfBottom RedNetherBrickStairsHalf = "bottom"
)

type RedNetherBrickStairsShape string

const (
	RedNetherBrickStairsShapeStraight   RedNetherBrickStairsShape = "straight"
	RedNetherBrickStairsShapeInnerLeft  RedNetherBrickStairsShape = "inner_left"
	RedNetherBrickStairsShapeInnerRight RedNetherBrickStairsShape = "inner_right"
	RedNetherBrickStairsShapeOuterLeft  RedNetherBrickStairsShape = "outer_left"
	RedNetherBrickStairsShapeOuterRight RedNetherBrickStairsShape = "outer_right"
)

type RedNetherBrickStairs struct {
	Facing      RedNetherBrickStairsFacing
	Half        RedNetherBrickStairsHalf
	Shape       RedNetherBrickStairsShape
	Waterlogged bool
}

func (x RedNetherBrickStairs) Id() uint16 {
	switch x.Half {
	case RedNetherBrickStairsHalfTop:
		switch x.Shape {
		case RedNetherBrickStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13842
				case RedNetherBrickStairsFacingSouth:
					return 13862
				case RedNetherBrickStairsFacingWest:
					return 13882
				case RedNetherBrickStairsFacingEast:
					return 13902
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13843
				case RedNetherBrickStairsFacingSouth:
					return 13863
				case RedNetherBrickStairsFacingWest:
					return 13883
				case RedNetherBrickStairsFacingEast:
					return 13903
				}
			}
		case RedNetherBrickStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13844
				case RedNetherBrickStairsFacingSouth:
					return 13864
				case RedNetherBrickStairsFacingWest:
					return 13884
				case RedNetherBrickStairsFacingEast:
					return 13904
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13845
				case RedNetherBrickStairsFacingSouth:
					return 13865
				case RedNetherBrickStairsFacingWest:
					return 13885
				case RedNetherBrickStairsFacingEast:
					return 13905
				}
			}
		case RedNetherBrickStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13846
				case RedNetherBrickStairsFacingSouth:
					return 13866
				case RedNetherBrickStairsFacingWest:
					return 13886
				case RedNetherBrickStairsFacingEast:
					return 13906
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13847
				case RedNetherBrickStairsFacingSouth:
					return 13867
				case RedNetherBrickStairsFacingWest:
					return 13887
				case RedNetherBrickStairsFacingEast:
					return 13907
				}
			}
		case RedNetherBrickStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13848
				case RedNetherBrickStairsFacingSouth:
					return 13868
				case RedNetherBrickStairsFacingWest:
					return 13888
				case RedNetherBrickStairsFacingEast:
					return 13908
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13849
				case RedNetherBrickStairsFacingSouth:
					return 13869
				case RedNetherBrickStairsFacingWest:
					return 13889
				case RedNetherBrickStairsFacingEast:
					return 13909
				}
			}
		case RedNetherBrickStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13850
				case RedNetherBrickStairsFacingSouth:
					return 13870
				case RedNetherBrickStairsFacingWest:
					return 13890
				case RedNetherBrickStairsFacingEast:
					return 13910
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13851
				case RedNetherBrickStairsFacingSouth:
					return 13871
				case RedNetherBrickStairsFacingWest:
					return 13891
				case RedNetherBrickStairsFacingEast:
					return 13911
				}
			}
		}
	case RedNetherBrickStairsHalfBottom:
		switch x.Shape {
		case RedNetherBrickStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13852
				case RedNetherBrickStairsFacingSouth:
					return 13872
				case RedNetherBrickStairsFacingWest:
					return 13892
				case RedNetherBrickStairsFacingEast:
					return 13912
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13853
				case RedNetherBrickStairsFacingSouth:
					return 13873
				case RedNetherBrickStairsFacingWest:
					return 13893
				case RedNetherBrickStairsFacingEast:
					return 13913
				}
			}
		case RedNetherBrickStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13854
				case RedNetherBrickStairsFacingSouth:
					return 13874
				case RedNetherBrickStairsFacingWest:
					return 13894
				case RedNetherBrickStairsFacingEast:
					return 13914
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13855
				case RedNetherBrickStairsFacingSouth:
					return 13875
				case RedNetherBrickStairsFacingWest:
					return 13895
				case RedNetherBrickStairsFacingEast:
					return 13915
				}
			}
		case RedNetherBrickStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13856
				case RedNetherBrickStairsFacingSouth:
					return 13876
				case RedNetherBrickStairsFacingWest:
					return 13896
				case RedNetherBrickStairsFacingEast:
					return 13916
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13857
				case RedNetherBrickStairsFacingSouth:
					return 13877
				case RedNetherBrickStairsFacingWest:
					return 13897
				case RedNetherBrickStairsFacingEast:
					return 13917
				}
			}
		case RedNetherBrickStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13858
				case RedNetherBrickStairsFacingSouth:
					return 13878
				case RedNetherBrickStairsFacingWest:
					return 13898
				case RedNetherBrickStairsFacingEast:
					return 13918
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13859
				case RedNetherBrickStairsFacingSouth:
					return 13879
				case RedNetherBrickStairsFacingWest:
					return 13899
				case RedNetherBrickStairsFacingEast:
					return 13919
				}
			}
		case RedNetherBrickStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13860
				case RedNetherBrickStairsFacingSouth:
					return 13880
				case RedNetherBrickStairsFacingWest:
					return 13900
				case RedNetherBrickStairsFacingEast:
					return 13920
				}
			case false:
				switch x.Facing {
				case RedNetherBrickStairsFacingNorth:
					return 13861
				case RedNetherBrickStairsFacingSouth:
					return 13881
				case RedNetherBrickStairsFacingWest:
					return 13901
				case RedNetherBrickStairsFacingEast:
					return 13921
				}
			}
		}
	}
	return 13853 // default state
}

type PolishedAndesiteStairsFacing string

const (
	PolishedAndesiteStairsFacingNorth PolishedAndesiteStairsFacing = "north"
	PolishedAndesiteStairsFacingSouth PolishedAndesiteStairsFacing = "south"
	PolishedAndesiteStairsFacingWest  PolishedAndesiteStairsFacing = "west"
	PolishedAndesiteStairsFacingEast  PolishedAndesiteStairsFacing = "east"
)

type PolishedAndesiteStairsHalf string

const (
	PolishedAndesiteStairsHalfTop    PolishedAndesiteStairsHalf = "top"
	PolishedAndesiteStairsHalfBottom PolishedAndesiteStairsHalf = "bottom"
)

type PolishedAndesiteStairsShape string

const (
	PolishedAndesiteStairsShapeStraight   PolishedAndesiteStairsShape = "straight"
	PolishedAndesiteStairsShapeInnerLeft  PolishedAndesiteStairsShape = "inner_left"
	PolishedAndesiteStairsShapeInnerRight PolishedAndesiteStairsShape = "inner_right"
	PolishedAndesiteStairsShapeOuterLeft  PolishedAndesiteStairsShape = "outer_left"
	PolishedAndesiteStairsShapeOuterRight PolishedAndesiteStairsShape = "outer_right"
)

type PolishedAndesiteStairs struct {
	Facing      PolishedAndesiteStairsFacing
	Half        PolishedAndesiteStairsHalf
	Shape       PolishedAndesiteStairsShape
	Waterlogged bool
}

func (x PolishedAndesiteStairs) Id() uint16 {
	switch x.Facing {
	case PolishedAndesiteStairsFacingNorth:
		switch x.Half {
		case PolishedAndesiteStairsHalfTop:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13922
				case false:
					return 13923
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13924
				case false:
					return 13925
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13926
				case false:
					return 13927
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13928
				case false:
					return 13929
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13930
				case false:
					return 13931
				}
			}
		case PolishedAndesiteStairsHalfBottom:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13932
				case false:
					return 13933
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13934
				case false:
					return 13935
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13936
				case false:
					return 13937
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13938
				case false:
					return 13939
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13940
				case false:
					return 13941
				}
			}
		}
	case PolishedAndesiteStairsFacingSouth:
		switch x.Half {
		case PolishedAndesiteStairsHalfTop:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13942
				case false:
					return 13943
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13944
				case false:
					return 13945
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13946
				case false:
					return 13947
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13948
				case false:
					return 13949
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13950
				case false:
					return 13951
				}
			}
		case PolishedAndesiteStairsHalfBottom:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13952
				case false:
					return 13953
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13954
				case false:
					return 13955
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13956
				case false:
					return 13957
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13958
				case false:
					return 13959
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13960
				case false:
					return 13961
				}
			}
		}
	case PolishedAndesiteStairsFacingWest:
		switch x.Half {
		case PolishedAndesiteStairsHalfTop:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13962
				case false:
					return 13963
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13964
				case false:
					return 13965
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13966
				case false:
					return 13967
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13968
				case false:
					return 13969
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13970
				case false:
					return 13971
				}
			}
		case PolishedAndesiteStairsHalfBottom:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13972
				case false:
					return 13973
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13974
				case false:
					return 13975
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13976
				case false:
					return 13977
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13978
				case false:
					return 13979
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13980
				case false:
					return 13981
				}
			}
		}
	case PolishedAndesiteStairsFacingEast:
		switch x.Half {
		case PolishedAndesiteStairsHalfTop:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13982
				case false:
					return 13983
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13984
				case false:
					return 13985
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13986
				case false:
					return 13987
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13988
				case false:
					return 13989
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 13990
				case false:
					return 13991
				}
			}
		case PolishedAndesiteStairsHalfBottom:
			switch x.Shape {
			case PolishedAndesiteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 13992
				case false:
					return 13993
				}
			case PolishedAndesiteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 13994
				case false:
					return 13995
				}
			case PolishedAndesiteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 13996
				case false:
					return 13997
				}
			case PolishedAndesiteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 13998
				case false:
					return 13999
				}
			case PolishedAndesiteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14000
				case false:
					return 14001
				}
			}
		}
	}
	return 13933 // default state
}

type DioriteStairsFacing string

const (
	DioriteStairsFacingNorth DioriteStairsFacing = "north"
	DioriteStairsFacingSouth DioriteStairsFacing = "south"
	DioriteStairsFacingWest  DioriteStairsFacing = "west"
	DioriteStairsFacingEast  DioriteStairsFacing = "east"
)

type DioriteStairsHalf string

const (
	DioriteStairsHalfTop    DioriteStairsHalf = "top"
	DioriteStairsHalfBottom DioriteStairsHalf = "bottom"
)

type DioriteStairsShape string

const (
	DioriteStairsShapeStraight   DioriteStairsShape = "straight"
	DioriteStairsShapeInnerLeft  DioriteStairsShape = "inner_left"
	DioriteStairsShapeInnerRight DioriteStairsShape = "inner_right"
	DioriteStairsShapeOuterLeft  DioriteStairsShape = "outer_left"
	DioriteStairsShapeOuterRight DioriteStairsShape = "outer_right"
)

type DioriteStairs struct {
	Facing      DioriteStairsFacing
	Half        DioriteStairsHalf
	Shape       DioriteStairsShape
	Waterlogged bool
}

func (x DioriteStairs) Id() uint16 {
	switch x.Facing {
	case DioriteStairsFacingNorth:
		switch x.Half {
		case DioriteStairsHalfTop:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14002
				case false:
					return 14003
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14004
				case false:
					return 14005
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14006
				case false:
					return 14007
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14008
				case false:
					return 14009
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14010
				case false:
					return 14011
				}
			}
		case DioriteStairsHalfBottom:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14012
				case false:
					return 14013
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14014
				case false:
					return 14015
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14016
				case false:
					return 14017
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14018
				case false:
					return 14019
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14020
				case false:
					return 14021
				}
			}
		}
	case DioriteStairsFacingSouth:
		switch x.Half {
		case DioriteStairsHalfTop:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14022
				case false:
					return 14023
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14024
				case false:
					return 14025
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14026
				case false:
					return 14027
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14028
				case false:
					return 14029
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14030
				case false:
					return 14031
				}
			}
		case DioriteStairsHalfBottom:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14032
				case false:
					return 14033
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14034
				case false:
					return 14035
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14036
				case false:
					return 14037
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14038
				case false:
					return 14039
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14040
				case false:
					return 14041
				}
			}
		}
	case DioriteStairsFacingWest:
		switch x.Half {
		case DioriteStairsHalfTop:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14042
				case false:
					return 14043
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14044
				case false:
					return 14045
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14046
				case false:
					return 14047
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14048
				case false:
					return 14049
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14050
				case false:
					return 14051
				}
			}
		case DioriteStairsHalfBottom:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14052
				case false:
					return 14053
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14054
				case false:
					return 14055
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14056
				case false:
					return 14057
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14058
				case false:
					return 14059
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14060
				case false:
					return 14061
				}
			}
		}
	case DioriteStairsFacingEast:
		switch x.Half {
		case DioriteStairsHalfTop:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14062
				case false:
					return 14063
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14064
				case false:
					return 14065
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14066
				case false:
					return 14067
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14068
				case false:
					return 14069
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14070
				case false:
					return 14071
				}
			}
		case DioriteStairsHalfBottom:
			switch x.Shape {
			case DioriteStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 14072
				case false:
					return 14073
				}
			case DioriteStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 14074
				case false:
					return 14075
				}
			case DioriteStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 14076
				case false:
					return 14077
				}
			case DioriteStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 14078
				case false:
					return 14079
				}
			case DioriteStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 14080
				case false:
					return 14081
				}
			}
		}
	}
	return 14013 // default state
}

type PolishedGraniteSlabType string

const (
	PolishedGraniteSlabTypeTop    PolishedGraniteSlabType = "top"
	PolishedGraniteSlabTypeBottom PolishedGraniteSlabType = "bottom"
	PolishedGraniteSlabTypeDouble PolishedGraniteSlabType = "double"
)

type PolishedGraniteSlab struct {
	Waterlogged bool
	Type        PolishedGraniteSlabType
}

func (x PolishedGraniteSlab) Id() uint16 {
	switch x.Type {
	case PolishedGraniteSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14082
		case false:
			return 14083
		}
	case PolishedGraniteSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14084
		case false:
			return 14085
		}
	case PolishedGraniteSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14086
		case false:
			return 14087
		}
	}
	return 14085 // default state
}

type SmoothRedSandstoneSlabType string

const (
	SmoothRedSandstoneSlabTypeTop    SmoothRedSandstoneSlabType = "top"
	SmoothRedSandstoneSlabTypeBottom SmoothRedSandstoneSlabType = "bottom"
	SmoothRedSandstoneSlabTypeDouble SmoothRedSandstoneSlabType = "double"
)

type SmoothRedSandstoneSlab struct {
	Type        SmoothRedSandstoneSlabType
	Waterlogged bool
}

func (x SmoothRedSandstoneSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case SmoothRedSandstoneSlabTypeTop:
			return 14088
		case SmoothRedSandstoneSlabTypeBottom:
			return 14090
		case SmoothRedSandstoneSlabTypeDouble:
			return 14092
		}
	case false:
		switch x.Type {
		case SmoothRedSandstoneSlabTypeTop:
			return 14089
		case SmoothRedSandstoneSlabTypeBottom:
			return 14091
		case SmoothRedSandstoneSlabTypeDouble:
			return 14093
		}
	}
	return 14091 // default state
}

type MossyStoneBrickSlabType string

const (
	MossyStoneBrickSlabTypeTop    MossyStoneBrickSlabType = "top"
	MossyStoneBrickSlabTypeBottom MossyStoneBrickSlabType = "bottom"
	MossyStoneBrickSlabTypeDouble MossyStoneBrickSlabType = "double"
)

type MossyStoneBrickSlab struct {
	Type        MossyStoneBrickSlabType
	Waterlogged bool
}

func (x MossyStoneBrickSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case MossyStoneBrickSlabTypeTop:
			return 14094
		case MossyStoneBrickSlabTypeBottom:
			return 14096
		case MossyStoneBrickSlabTypeDouble:
			return 14098
		}
	case false:
		switch x.Type {
		case MossyStoneBrickSlabTypeTop:
			return 14095
		case MossyStoneBrickSlabTypeBottom:
			return 14097
		case MossyStoneBrickSlabTypeDouble:
			return 14099
		}
	}
	return 14097 // default state
}

type PolishedDioriteSlabType string

const (
	PolishedDioriteSlabTypeTop    PolishedDioriteSlabType = "top"
	PolishedDioriteSlabTypeBottom PolishedDioriteSlabType = "bottom"
	PolishedDioriteSlabTypeDouble PolishedDioriteSlabType = "double"
)

type PolishedDioriteSlab struct {
	Type        PolishedDioriteSlabType
	Waterlogged bool
}

func (x PolishedDioriteSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case PolishedDioriteSlabTypeTop:
			return 14100
		case PolishedDioriteSlabTypeBottom:
			return 14102
		case PolishedDioriteSlabTypeDouble:
			return 14104
		}
	case false:
		switch x.Type {
		case PolishedDioriteSlabTypeTop:
			return 14101
		case PolishedDioriteSlabTypeBottom:
			return 14103
		case PolishedDioriteSlabTypeDouble:
			return 14105
		}
	}
	return 14103 // default state
}

type MossyCobblestoneSlabType string

const (
	MossyCobblestoneSlabTypeTop    MossyCobblestoneSlabType = "top"
	MossyCobblestoneSlabTypeBottom MossyCobblestoneSlabType = "bottom"
	MossyCobblestoneSlabTypeDouble MossyCobblestoneSlabType = "double"
)

type MossyCobblestoneSlab struct {
	Type        MossyCobblestoneSlabType
	Waterlogged bool
}

func (x MossyCobblestoneSlab) Id() uint16 {
	switch x.Type {
	case MossyCobblestoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14106
		case false:
			return 14107
		}
	case MossyCobblestoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14108
		case false:
			return 14109
		}
	case MossyCobblestoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14110
		case false:
			return 14111
		}
	}
	return 14109 // default state
}

type EndStoneBrickSlabType string

const (
	EndStoneBrickSlabTypeTop    EndStoneBrickSlabType = "top"
	EndStoneBrickSlabTypeBottom EndStoneBrickSlabType = "bottom"
	EndStoneBrickSlabTypeDouble EndStoneBrickSlabType = "double"
)

type EndStoneBrickSlab struct {
	Type        EndStoneBrickSlabType
	Waterlogged bool
}

func (x EndStoneBrickSlab) Id() uint16 {
	switch x.Type {
	case EndStoneBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14112
		case false:
			return 14113
		}
	case EndStoneBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14114
		case false:
			return 14115
		}
	case EndStoneBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14116
		case false:
			return 14117
		}
	}
	return 14115 // default state
}

type SmoothSandstoneSlabType string

const (
	SmoothSandstoneSlabTypeTop    SmoothSandstoneSlabType = "top"
	SmoothSandstoneSlabTypeBottom SmoothSandstoneSlabType = "bottom"
	SmoothSandstoneSlabTypeDouble SmoothSandstoneSlabType = "double"
)

type SmoothSandstoneSlab struct {
	Type        SmoothSandstoneSlabType
	Waterlogged bool
}

func (x SmoothSandstoneSlab) Id() uint16 {
	switch x.Type {
	case SmoothSandstoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14118
		case false:
			return 14119
		}
	case SmoothSandstoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14120
		case false:
			return 14121
		}
	case SmoothSandstoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14122
		case false:
			return 14123
		}
	}
	return 14121 // default state
}

type SmoothQuartzSlabType string

const (
	SmoothQuartzSlabTypeTop    SmoothQuartzSlabType = "top"
	SmoothQuartzSlabTypeBottom SmoothQuartzSlabType = "bottom"
	SmoothQuartzSlabTypeDouble SmoothQuartzSlabType = "double"
)

type SmoothQuartzSlab struct {
	Type        SmoothQuartzSlabType
	Waterlogged bool
}

func (x SmoothQuartzSlab) Id() uint16 {
	switch x.Type {
	case SmoothQuartzSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14124
		case false:
			return 14125
		}
	case SmoothQuartzSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14126
		case false:
			return 14127
		}
	case SmoothQuartzSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14128
		case false:
			return 14129
		}
	}
	return 14127 // default state
}

type GraniteSlabType string

const (
	GraniteSlabTypeTop    GraniteSlabType = "top"
	GraniteSlabTypeBottom GraniteSlabType = "bottom"
	GraniteSlabTypeDouble GraniteSlabType = "double"
)

type GraniteSlab struct {
	Waterlogged bool
	Type        GraniteSlabType
}

func (x GraniteSlab) Id() uint16 {
	switch x.Type {
	case GraniteSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14130
		case false:
			return 14131
		}
	case GraniteSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14132
		case false:
			return 14133
		}
	case GraniteSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14134
		case false:
			return 14135
		}
	}
	return 14133 // default state
}

type AndesiteSlabType string

const (
	AndesiteSlabTypeTop    AndesiteSlabType = "top"
	AndesiteSlabTypeBottom AndesiteSlabType = "bottom"
	AndesiteSlabTypeDouble AndesiteSlabType = "double"
)

type AndesiteSlab struct {
	Type        AndesiteSlabType
	Waterlogged bool
}

func (x AndesiteSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case AndesiteSlabTypeTop:
			return 14136
		case AndesiteSlabTypeBottom:
			return 14138
		case AndesiteSlabTypeDouble:
			return 14140
		}
	case false:
		switch x.Type {
		case AndesiteSlabTypeTop:
			return 14137
		case AndesiteSlabTypeBottom:
			return 14139
		case AndesiteSlabTypeDouble:
			return 14141
		}
	}
	return 14139 // default state
}

type RedNetherBrickSlabType string

const (
	RedNetherBrickSlabTypeTop    RedNetherBrickSlabType = "top"
	RedNetherBrickSlabTypeBottom RedNetherBrickSlabType = "bottom"
	RedNetherBrickSlabTypeDouble RedNetherBrickSlabType = "double"
)

type RedNetherBrickSlab struct {
	Type        RedNetherBrickSlabType
	Waterlogged bool
}

func (x RedNetherBrickSlab) Id() uint16 {
	switch x.Type {
	case RedNetherBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14142
		case false:
			return 14143
		}
	case RedNetherBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14144
		case false:
			return 14145
		}
	case RedNetherBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14146
		case false:
			return 14147
		}
	}
	return 14145 // default state
}

type PolishedAndesiteSlabType string

const (
	PolishedAndesiteSlabTypeTop    PolishedAndesiteSlabType = "top"
	PolishedAndesiteSlabTypeBottom PolishedAndesiteSlabType = "bottom"
	PolishedAndesiteSlabTypeDouble PolishedAndesiteSlabType = "double"
)

type PolishedAndesiteSlab struct {
	Type        PolishedAndesiteSlabType
	Waterlogged bool
}

func (x PolishedAndesiteSlab) Id() uint16 {
	switch x.Type {
	case PolishedAndesiteSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14148
		case false:
			return 14149
		}
	case PolishedAndesiteSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14150
		case false:
			return 14151
		}
	case PolishedAndesiteSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14152
		case false:
			return 14153
		}
	}
	return 14151 // default state
}

type DioriteSlabType string

const (
	DioriteSlabTypeTop    DioriteSlabType = "top"
	DioriteSlabTypeBottom DioriteSlabType = "bottom"
	DioriteSlabTypeDouble DioriteSlabType = "double"
)

type DioriteSlab struct {
	Type        DioriteSlabType
	Waterlogged bool
}

func (x DioriteSlab) Id() uint16 {
	switch x.Type {
	case DioriteSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 14154
		case false:
			return 14155
		}
	case DioriteSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 14156
		case false:
			return 14157
		}
	case DioriteSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 14158
		case false:
			return 14159
		}
	}
	return 14157 // default state
}

type BrickWallWest string

const (
	BrickWallWestNone BrickWallWest = "none"
	BrickWallWestLow  BrickWallWest = "low"
	BrickWallWestTall BrickWallWest = "tall"
)

type BrickWallEast string

const (
	BrickWallEastNone BrickWallEast = "none"
	BrickWallEastLow  BrickWallEast = "low"
	BrickWallEastTall BrickWallEast = "tall"
)

type BrickWallNorth string

const (
	BrickWallNorthNone BrickWallNorth = "none"
	BrickWallNorthLow  BrickWallNorth = "low"
	BrickWallNorthTall BrickWallNorth = "tall"
)

type BrickWallSouth string

const (
	BrickWallSouthNone BrickWallSouth = "none"
	BrickWallSouthLow  BrickWallSouth = "low"
	BrickWallSouthTall BrickWallSouth = "tall"
)

type BrickWall struct {
	Waterlogged bool
	West        BrickWallWest
	East        BrickWallEast
	North       BrickWallNorth
	South       BrickWallSouth
	Up          bool
}

func (x BrickWall) Id() uint16 {
	switch x.West {
	case BrickWallWestNone:
		switch x.East {
		case BrickWallEastNone:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14160
						case false:
							return 14163
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14166
						case false:
							return 14169
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14172
						case false:
							return 14175
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14178
						case false:
							return 14181
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14184
						case false:
							return 14187
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14190
						case false:
							return 14193
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14196
						case false:
							return 14199
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14202
						case false:
							return 14205
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14208
						case false:
							return 14211
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14214
						case false:
							return 14217
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14220
						case false:
							return 14223
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14226
						case false:
							return 14229
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14232
						case false:
							return 14235
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14238
						case false:
							return 14241
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14244
						case false:
							return 14247
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14250
						case false:
							return 14253
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14256
						case false:
							return 14259
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14262
						case false:
							return 14265
						}
					}
				}
			}
		case BrickWallEastLow:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14268
						case false:
							return 14271
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14274
						case false:
							return 14277
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14280
						case false:
							return 14283
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14286
						case false:
							return 14289
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14292
						case false:
							return 14295
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14298
						case false:
							return 14301
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14304
						case false:
							return 14307
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14310
						case false:
							return 14313
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14316
						case false:
							return 14319
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14322
						case false:
							return 14325
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14328
						case false:
							return 14331
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14334
						case false:
							return 14337
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14340
						case false:
							return 14343
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14346
						case false:
							return 14349
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14352
						case false:
							return 14355
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14358
						case false:
							return 14361
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14364
						case false:
							return 14367
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14370
						case false:
							return 14373
						}
					}
				}
			}
		case BrickWallEastTall:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14376
						case false:
							return 14379
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14382
						case false:
							return 14385
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14388
						case false:
							return 14391
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14394
						case false:
							return 14397
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14400
						case false:
							return 14403
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14406
						case false:
							return 14409
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14412
						case false:
							return 14415
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14418
						case false:
							return 14421
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14424
						case false:
							return 14427
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14430
						case false:
							return 14433
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14436
						case false:
							return 14439
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14442
						case false:
							return 14445
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14448
						case false:
							return 14451
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14454
						case false:
							return 14457
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14460
						case false:
							return 14463
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14466
						case false:
							return 14469
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14472
						case false:
							return 14475
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14478
						case false:
							return 14481
						}
					}
				}
			}
		}
	case BrickWallWestLow:
		switch x.East {
		case BrickWallEastNone:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14161
						case false:
							return 14164
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14167
						case false:
							return 14170
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14173
						case false:
							return 14176
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14179
						case false:
							return 14182
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14185
						case false:
							return 14188
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14191
						case false:
							return 14194
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14197
						case false:
							return 14200
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14203
						case false:
							return 14206
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14209
						case false:
							return 14212
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14215
						case false:
							return 14218
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14221
						case false:
							return 14224
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14227
						case false:
							return 14230
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14233
						case false:
							return 14236
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14239
						case false:
							return 14242
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14245
						case false:
							return 14248
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14251
						case false:
							return 14254
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14257
						case false:
							return 14260
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14263
						case false:
							return 14266
						}
					}
				}
			}
		case BrickWallEastLow:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14269
						case false:
							return 14272
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14275
						case false:
							return 14278
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14281
						case false:
							return 14284
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14287
						case false:
							return 14290
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14293
						case false:
							return 14296
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14299
						case false:
							return 14302
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14305
						case false:
							return 14308
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14311
						case false:
							return 14314
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14317
						case false:
							return 14320
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14323
						case false:
							return 14326
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14329
						case false:
							return 14332
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14335
						case false:
							return 14338
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14341
						case false:
							return 14344
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14347
						case false:
							return 14350
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14353
						case false:
							return 14356
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14359
						case false:
							return 14362
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14365
						case false:
							return 14368
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14371
						case false:
							return 14374
						}
					}
				}
			}
		case BrickWallEastTall:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14377
						case false:
							return 14380
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14383
						case false:
							return 14386
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14389
						case false:
							return 14392
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14395
						case false:
							return 14398
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14401
						case false:
							return 14404
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14407
						case false:
							return 14410
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14413
						case false:
							return 14416
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14419
						case false:
							return 14422
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14425
						case false:
							return 14428
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14431
						case false:
							return 14434
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14437
						case false:
							return 14440
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14443
						case false:
							return 14446
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14449
						case false:
							return 14452
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14455
						case false:
							return 14458
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14461
						case false:
							return 14464
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14467
						case false:
							return 14470
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14473
						case false:
							return 14476
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14479
						case false:
							return 14482
						}
					}
				}
			}
		}
	case BrickWallWestTall:
		switch x.East {
		case BrickWallEastNone:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14162
						case false:
							return 14165
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14168
						case false:
							return 14171
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14174
						case false:
							return 14177
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14180
						case false:
							return 14183
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14186
						case false:
							return 14189
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14192
						case false:
							return 14195
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14198
						case false:
							return 14201
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14204
						case false:
							return 14207
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14210
						case false:
							return 14213
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14216
						case false:
							return 14219
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14222
						case false:
							return 14225
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14228
						case false:
							return 14231
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14234
						case false:
							return 14237
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14240
						case false:
							return 14243
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14246
						case false:
							return 14249
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14252
						case false:
							return 14255
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14258
						case false:
							return 14261
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14264
						case false:
							return 14267
						}
					}
				}
			}
		case BrickWallEastLow:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14270
						case false:
							return 14273
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14276
						case false:
							return 14279
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14282
						case false:
							return 14285
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14288
						case false:
							return 14291
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14294
						case false:
							return 14297
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14300
						case false:
							return 14303
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14306
						case false:
							return 14309
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14312
						case false:
							return 14315
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14318
						case false:
							return 14321
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14324
						case false:
							return 14327
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14330
						case false:
							return 14333
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14336
						case false:
							return 14339
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14342
						case false:
							return 14345
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14348
						case false:
							return 14351
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14354
						case false:
							return 14357
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14360
						case false:
							return 14363
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14366
						case false:
							return 14369
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14372
						case false:
							return 14375
						}
					}
				}
			}
		case BrickWallEastTall:
			switch x.North {
			case BrickWallNorthNone:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14378
						case false:
							return 14381
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14384
						case false:
							return 14387
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14390
						case false:
							return 14393
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14396
						case false:
							return 14399
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14402
						case false:
							return 14405
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14408
						case false:
							return 14411
						}
					}
				}
			case BrickWallNorthLow:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14414
						case false:
							return 14417
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14420
						case false:
							return 14423
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14426
						case false:
							return 14429
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14432
						case false:
							return 14435
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14438
						case false:
							return 14441
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14444
						case false:
							return 14447
						}
					}
				}
			case BrickWallNorthTall:
				switch x.South {
				case BrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14450
						case false:
							return 14453
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14456
						case false:
							return 14459
						}
					}
				case BrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14462
						case false:
							return 14465
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14468
						case false:
							return 14471
						}
					}
				case BrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 14474
						case false:
							return 14477
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 14480
						case false:
							return 14483
						}
					}
				}
			}
		}
	}
	return 14163 // default state
}

type PrismarineWallWest string

const (
	PrismarineWallWestNone PrismarineWallWest = "none"
	PrismarineWallWestLow  PrismarineWallWest = "low"
	PrismarineWallWestTall PrismarineWallWest = "tall"
)

type PrismarineWallEast string

const (
	PrismarineWallEastNone PrismarineWallEast = "none"
	PrismarineWallEastLow  PrismarineWallEast = "low"
	PrismarineWallEastTall PrismarineWallEast = "tall"
)

type PrismarineWallNorth string

const (
	PrismarineWallNorthNone PrismarineWallNorth = "none"
	PrismarineWallNorthLow  PrismarineWallNorth = "low"
	PrismarineWallNorthTall PrismarineWallNorth = "tall"
)

type PrismarineWallSouth string

const (
	PrismarineWallSouthNone PrismarineWallSouth = "none"
	PrismarineWallSouthLow  PrismarineWallSouth = "low"
	PrismarineWallSouthTall PrismarineWallSouth = "tall"
)

type PrismarineWall struct {
	West        PrismarineWallWest
	East        PrismarineWallEast
	North       PrismarineWallNorth
	South       PrismarineWallSouth
	Up          bool
	Waterlogged bool
}

func (x PrismarineWall) Id() uint16 {
	switch x.Up {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case PrismarineWallWestNone:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14484
						case PrismarineWallSouthLow:
							return 14496
						case PrismarineWallSouthTall:
							return 14508
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14520
						case PrismarineWallSouthLow:
							return 14532
						case PrismarineWallSouthTall:
							return 14544
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14556
						case PrismarineWallSouthLow:
							return 14568
						case PrismarineWallSouthTall:
							return 14580
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14592
						case PrismarineWallSouthLow:
							return 14604
						case PrismarineWallSouthTall:
							return 14616
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14628
						case PrismarineWallSouthLow:
							return 14640
						case PrismarineWallSouthTall:
							return 14652
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14664
						case PrismarineWallSouthLow:
							return 14676
						case PrismarineWallSouthTall:
							return 14688
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14700
						case PrismarineWallSouthLow:
							return 14712
						case PrismarineWallSouthTall:
							return 14724
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14736
						case PrismarineWallSouthLow:
							return 14748
						case PrismarineWallSouthTall:
							return 14760
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14772
						case PrismarineWallSouthLow:
							return 14784
						case PrismarineWallSouthTall:
							return 14796
						}
					}
				}
			case PrismarineWallWestLow:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14485
						case PrismarineWallSouthLow:
							return 14497
						case PrismarineWallSouthTall:
							return 14509
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14521
						case PrismarineWallSouthLow:
							return 14533
						case PrismarineWallSouthTall:
							return 14545
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14557
						case PrismarineWallSouthLow:
							return 14569
						case PrismarineWallSouthTall:
							return 14581
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14593
						case PrismarineWallSouthLow:
							return 14605
						case PrismarineWallSouthTall:
							return 14617
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14629
						case PrismarineWallSouthLow:
							return 14641
						case PrismarineWallSouthTall:
							return 14653
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14665
						case PrismarineWallSouthLow:
							return 14677
						case PrismarineWallSouthTall:
							return 14689
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14701
						case PrismarineWallSouthLow:
							return 14713
						case PrismarineWallSouthTall:
							return 14725
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14737
						case PrismarineWallSouthLow:
							return 14749
						case PrismarineWallSouthTall:
							return 14761
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14773
						case PrismarineWallSouthLow:
							return 14785
						case PrismarineWallSouthTall:
							return 14797
						}
					}
				}
			case PrismarineWallWestTall:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14486
						case PrismarineWallSouthLow:
							return 14498
						case PrismarineWallSouthTall:
							return 14510
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14522
						case PrismarineWallSouthLow:
							return 14534
						case PrismarineWallSouthTall:
							return 14546
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14558
						case PrismarineWallSouthLow:
							return 14570
						case PrismarineWallSouthTall:
							return 14582
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14594
						case PrismarineWallSouthLow:
							return 14606
						case PrismarineWallSouthTall:
							return 14618
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14630
						case PrismarineWallSouthLow:
							return 14642
						case PrismarineWallSouthTall:
							return 14654
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14666
						case PrismarineWallSouthLow:
							return 14678
						case PrismarineWallSouthTall:
							return 14690
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14702
						case PrismarineWallSouthLow:
							return 14714
						case PrismarineWallSouthTall:
							return 14726
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14738
						case PrismarineWallSouthLow:
							return 14750
						case PrismarineWallSouthTall:
							return 14762
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14774
						case PrismarineWallSouthLow:
							return 14786
						case PrismarineWallSouthTall:
							return 14798
						}
					}
				}
			}
		case false:
			switch x.West {
			case PrismarineWallWestNone:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14487
						case PrismarineWallSouthLow:
							return 14499
						case PrismarineWallSouthTall:
							return 14511
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14523
						case PrismarineWallSouthLow:
							return 14535
						case PrismarineWallSouthTall:
							return 14547
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14559
						case PrismarineWallSouthLow:
							return 14571
						case PrismarineWallSouthTall:
							return 14583
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14595
						case PrismarineWallSouthLow:
							return 14607
						case PrismarineWallSouthTall:
							return 14619
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14631
						case PrismarineWallSouthLow:
							return 14643
						case PrismarineWallSouthTall:
							return 14655
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14667
						case PrismarineWallSouthLow:
							return 14679
						case PrismarineWallSouthTall:
							return 14691
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14703
						case PrismarineWallSouthLow:
							return 14715
						case PrismarineWallSouthTall:
							return 14727
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14739
						case PrismarineWallSouthLow:
							return 14751
						case PrismarineWallSouthTall:
							return 14763
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14775
						case PrismarineWallSouthLow:
							return 14787
						case PrismarineWallSouthTall:
							return 14799
						}
					}
				}
			case PrismarineWallWestLow:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14488
						case PrismarineWallSouthLow:
							return 14500
						case PrismarineWallSouthTall:
							return 14512
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14524
						case PrismarineWallSouthLow:
							return 14536
						case PrismarineWallSouthTall:
							return 14548
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14560
						case PrismarineWallSouthLow:
							return 14572
						case PrismarineWallSouthTall:
							return 14584
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14596
						case PrismarineWallSouthLow:
							return 14608
						case PrismarineWallSouthTall:
							return 14620
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14632
						case PrismarineWallSouthLow:
							return 14644
						case PrismarineWallSouthTall:
							return 14656
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14668
						case PrismarineWallSouthLow:
							return 14680
						case PrismarineWallSouthTall:
							return 14692
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14704
						case PrismarineWallSouthLow:
							return 14716
						case PrismarineWallSouthTall:
							return 14728
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14740
						case PrismarineWallSouthLow:
							return 14752
						case PrismarineWallSouthTall:
							return 14764
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14776
						case PrismarineWallSouthLow:
							return 14788
						case PrismarineWallSouthTall:
							return 14800
						}
					}
				}
			case PrismarineWallWestTall:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14489
						case PrismarineWallSouthLow:
							return 14501
						case PrismarineWallSouthTall:
							return 14513
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14525
						case PrismarineWallSouthLow:
							return 14537
						case PrismarineWallSouthTall:
							return 14549
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14561
						case PrismarineWallSouthLow:
							return 14573
						case PrismarineWallSouthTall:
							return 14585
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14597
						case PrismarineWallSouthLow:
							return 14609
						case PrismarineWallSouthTall:
							return 14621
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14633
						case PrismarineWallSouthLow:
							return 14645
						case PrismarineWallSouthTall:
							return 14657
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14669
						case PrismarineWallSouthLow:
							return 14681
						case PrismarineWallSouthTall:
							return 14693
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14705
						case PrismarineWallSouthLow:
							return 14717
						case PrismarineWallSouthTall:
							return 14729
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14741
						case PrismarineWallSouthLow:
							return 14753
						case PrismarineWallSouthTall:
							return 14765
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14777
						case PrismarineWallSouthLow:
							return 14789
						case PrismarineWallSouthTall:
							return 14801
						}
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case PrismarineWallWestNone:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14490
						case PrismarineWallSouthLow:
							return 14502
						case PrismarineWallSouthTall:
							return 14514
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14526
						case PrismarineWallSouthLow:
							return 14538
						case PrismarineWallSouthTall:
							return 14550
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14562
						case PrismarineWallSouthLow:
							return 14574
						case PrismarineWallSouthTall:
							return 14586
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14598
						case PrismarineWallSouthLow:
							return 14610
						case PrismarineWallSouthTall:
							return 14622
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14634
						case PrismarineWallSouthLow:
							return 14646
						case PrismarineWallSouthTall:
							return 14658
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14670
						case PrismarineWallSouthLow:
							return 14682
						case PrismarineWallSouthTall:
							return 14694
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14706
						case PrismarineWallSouthLow:
							return 14718
						case PrismarineWallSouthTall:
							return 14730
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14742
						case PrismarineWallSouthLow:
							return 14754
						case PrismarineWallSouthTall:
							return 14766
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14778
						case PrismarineWallSouthLow:
							return 14790
						case PrismarineWallSouthTall:
							return 14802
						}
					}
				}
			case PrismarineWallWestLow:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14491
						case PrismarineWallSouthLow:
							return 14503
						case PrismarineWallSouthTall:
							return 14515
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14527
						case PrismarineWallSouthLow:
							return 14539
						case PrismarineWallSouthTall:
							return 14551
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14563
						case PrismarineWallSouthLow:
							return 14575
						case PrismarineWallSouthTall:
							return 14587
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14599
						case PrismarineWallSouthLow:
							return 14611
						case PrismarineWallSouthTall:
							return 14623
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14635
						case PrismarineWallSouthLow:
							return 14647
						case PrismarineWallSouthTall:
							return 14659
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14671
						case PrismarineWallSouthLow:
							return 14683
						case PrismarineWallSouthTall:
							return 14695
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14707
						case PrismarineWallSouthLow:
							return 14719
						case PrismarineWallSouthTall:
							return 14731
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14743
						case PrismarineWallSouthLow:
							return 14755
						case PrismarineWallSouthTall:
							return 14767
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14779
						case PrismarineWallSouthLow:
							return 14791
						case PrismarineWallSouthTall:
							return 14803
						}
					}
				}
			case PrismarineWallWestTall:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14492
						case PrismarineWallSouthLow:
							return 14504
						case PrismarineWallSouthTall:
							return 14516
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14528
						case PrismarineWallSouthLow:
							return 14540
						case PrismarineWallSouthTall:
							return 14552
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14564
						case PrismarineWallSouthLow:
							return 14576
						case PrismarineWallSouthTall:
							return 14588
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14600
						case PrismarineWallSouthLow:
							return 14612
						case PrismarineWallSouthTall:
							return 14624
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14636
						case PrismarineWallSouthLow:
							return 14648
						case PrismarineWallSouthTall:
							return 14660
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14672
						case PrismarineWallSouthLow:
							return 14684
						case PrismarineWallSouthTall:
							return 14696
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14708
						case PrismarineWallSouthLow:
							return 14720
						case PrismarineWallSouthTall:
							return 14732
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14744
						case PrismarineWallSouthLow:
							return 14756
						case PrismarineWallSouthTall:
							return 14768
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14780
						case PrismarineWallSouthLow:
							return 14792
						case PrismarineWallSouthTall:
							return 14804
						}
					}
				}
			}
		case false:
			switch x.West {
			case PrismarineWallWestNone:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14493
						case PrismarineWallSouthLow:
							return 14505
						case PrismarineWallSouthTall:
							return 14517
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14529
						case PrismarineWallSouthLow:
							return 14541
						case PrismarineWallSouthTall:
							return 14553
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14565
						case PrismarineWallSouthLow:
							return 14577
						case PrismarineWallSouthTall:
							return 14589
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14601
						case PrismarineWallSouthLow:
							return 14613
						case PrismarineWallSouthTall:
							return 14625
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14637
						case PrismarineWallSouthLow:
							return 14649
						case PrismarineWallSouthTall:
							return 14661
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14673
						case PrismarineWallSouthLow:
							return 14685
						case PrismarineWallSouthTall:
							return 14697
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14709
						case PrismarineWallSouthLow:
							return 14721
						case PrismarineWallSouthTall:
							return 14733
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14745
						case PrismarineWallSouthLow:
							return 14757
						case PrismarineWallSouthTall:
							return 14769
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14781
						case PrismarineWallSouthLow:
							return 14793
						case PrismarineWallSouthTall:
							return 14805
						}
					}
				}
			case PrismarineWallWestLow:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14494
						case PrismarineWallSouthLow:
							return 14506
						case PrismarineWallSouthTall:
							return 14518
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14530
						case PrismarineWallSouthLow:
							return 14542
						case PrismarineWallSouthTall:
							return 14554
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14566
						case PrismarineWallSouthLow:
							return 14578
						case PrismarineWallSouthTall:
							return 14590
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14602
						case PrismarineWallSouthLow:
							return 14614
						case PrismarineWallSouthTall:
							return 14626
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14638
						case PrismarineWallSouthLow:
							return 14650
						case PrismarineWallSouthTall:
							return 14662
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14674
						case PrismarineWallSouthLow:
							return 14686
						case PrismarineWallSouthTall:
							return 14698
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14710
						case PrismarineWallSouthLow:
							return 14722
						case PrismarineWallSouthTall:
							return 14734
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14746
						case PrismarineWallSouthLow:
							return 14758
						case PrismarineWallSouthTall:
							return 14770
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14782
						case PrismarineWallSouthLow:
							return 14794
						case PrismarineWallSouthTall:
							return 14806
						}
					}
				}
			case PrismarineWallWestTall:
				switch x.East {
				case PrismarineWallEastNone:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14495
						case PrismarineWallSouthLow:
							return 14507
						case PrismarineWallSouthTall:
							return 14519
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14531
						case PrismarineWallSouthLow:
							return 14543
						case PrismarineWallSouthTall:
							return 14555
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14567
						case PrismarineWallSouthLow:
							return 14579
						case PrismarineWallSouthTall:
							return 14591
						}
					}
				case PrismarineWallEastLow:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14603
						case PrismarineWallSouthLow:
							return 14615
						case PrismarineWallSouthTall:
							return 14627
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14639
						case PrismarineWallSouthLow:
							return 14651
						case PrismarineWallSouthTall:
							return 14663
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14675
						case PrismarineWallSouthLow:
							return 14687
						case PrismarineWallSouthTall:
							return 14699
						}
					}
				case PrismarineWallEastTall:
					switch x.North {
					case PrismarineWallNorthNone:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14711
						case PrismarineWallSouthLow:
							return 14723
						case PrismarineWallSouthTall:
							return 14735
						}
					case PrismarineWallNorthLow:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14747
						case PrismarineWallSouthLow:
							return 14759
						case PrismarineWallSouthTall:
							return 14771
						}
					case PrismarineWallNorthTall:
						switch x.South {
						case PrismarineWallSouthNone:
							return 14783
						case PrismarineWallSouthLow:
							return 14795
						case PrismarineWallSouthTall:
							return 14807
						}
					}
				}
			}
		}
	}
	return 14487 // default state
}

type RedSandstoneWallWest string

const (
	RedSandstoneWallWestNone RedSandstoneWallWest = "none"
	RedSandstoneWallWestLow  RedSandstoneWallWest = "low"
	RedSandstoneWallWestTall RedSandstoneWallWest = "tall"
)

type RedSandstoneWallEast string

const (
	RedSandstoneWallEastNone RedSandstoneWallEast = "none"
	RedSandstoneWallEastLow  RedSandstoneWallEast = "low"
	RedSandstoneWallEastTall RedSandstoneWallEast = "tall"
)

type RedSandstoneWallNorth string

const (
	RedSandstoneWallNorthNone RedSandstoneWallNorth = "none"
	RedSandstoneWallNorthLow  RedSandstoneWallNorth = "low"
	RedSandstoneWallNorthTall RedSandstoneWallNorth = "tall"
)

type RedSandstoneWallSouth string

const (
	RedSandstoneWallSouthNone RedSandstoneWallSouth = "none"
	RedSandstoneWallSouthLow  RedSandstoneWallSouth = "low"
	RedSandstoneWallSouthTall RedSandstoneWallSouth = "tall"
)

type RedSandstoneWall struct {
	West        RedSandstoneWallWest
	East        RedSandstoneWallEast
	North       RedSandstoneWallNorth
	South       RedSandstoneWallSouth
	Up          bool
	Waterlogged bool
}

func (x RedSandstoneWall) Id() uint16 {
	switch x.East {
	case RedSandstoneWallEastNone:
		switch x.North {
		case RedSandstoneWallNorthNone:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14808
						case RedSandstoneWallWestLow:
							return 14809
						case RedSandstoneWallWestTall:
							return 14810
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14811
						case RedSandstoneWallWestLow:
							return 14812
						case RedSandstoneWallWestTall:
							return 14813
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14814
						case RedSandstoneWallWestLow:
							return 14815
						case RedSandstoneWallWestTall:
							return 14816
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14817
						case RedSandstoneWallWestLow:
							return 14818
						case RedSandstoneWallWestTall:
							return 14819
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14820
						case RedSandstoneWallWestLow:
							return 14821
						case RedSandstoneWallWestTall:
							return 14822
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14823
						case RedSandstoneWallWestLow:
							return 14824
						case RedSandstoneWallWestTall:
							return 14825
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14826
						case RedSandstoneWallWestLow:
							return 14827
						case RedSandstoneWallWestTall:
							return 14828
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14829
						case RedSandstoneWallWestLow:
							return 14830
						case RedSandstoneWallWestTall:
							return 14831
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14832
						case RedSandstoneWallWestLow:
							return 14833
						case RedSandstoneWallWestTall:
							return 14834
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14835
						case RedSandstoneWallWestLow:
							return 14836
						case RedSandstoneWallWestTall:
							return 14837
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14838
						case RedSandstoneWallWestLow:
							return 14839
						case RedSandstoneWallWestTall:
							return 14840
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14841
						case RedSandstoneWallWestLow:
							return 14842
						case RedSandstoneWallWestTall:
							return 14843
						}
					}
				}
			}
		case RedSandstoneWallNorthLow:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14844
						case RedSandstoneWallWestLow:
							return 14845
						case RedSandstoneWallWestTall:
							return 14846
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14847
						case RedSandstoneWallWestLow:
							return 14848
						case RedSandstoneWallWestTall:
							return 14849
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14850
						case RedSandstoneWallWestLow:
							return 14851
						case RedSandstoneWallWestTall:
							return 14852
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14853
						case RedSandstoneWallWestLow:
							return 14854
						case RedSandstoneWallWestTall:
							return 14855
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14856
						case RedSandstoneWallWestLow:
							return 14857
						case RedSandstoneWallWestTall:
							return 14858
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14859
						case RedSandstoneWallWestLow:
							return 14860
						case RedSandstoneWallWestTall:
							return 14861
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14862
						case RedSandstoneWallWestLow:
							return 14863
						case RedSandstoneWallWestTall:
							return 14864
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14865
						case RedSandstoneWallWestLow:
							return 14866
						case RedSandstoneWallWestTall:
							return 14867
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14868
						case RedSandstoneWallWestLow:
							return 14869
						case RedSandstoneWallWestTall:
							return 14870
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14871
						case RedSandstoneWallWestLow:
							return 14872
						case RedSandstoneWallWestTall:
							return 14873
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14874
						case RedSandstoneWallWestLow:
							return 14875
						case RedSandstoneWallWestTall:
							return 14876
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14877
						case RedSandstoneWallWestLow:
							return 14878
						case RedSandstoneWallWestTall:
							return 14879
						}
					}
				}
			}
		case RedSandstoneWallNorthTall:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14880
						case RedSandstoneWallWestLow:
							return 14881
						case RedSandstoneWallWestTall:
							return 14882
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14883
						case RedSandstoneWallWestLow:
							return 14884
						case RedSandstoneWallWestTall:
							return 14885
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14886
						case RedSandstoneWallWestLow:
							return 14887
						case RedSandstoneWallWestTall:
							return 14888
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14889
						case RedSandstoneWallWestLow:
							return 14890
						case RedSandstoneWallWestTall:
							return 14891
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14892
						case RedSandstoneWallWestLow:
							return 14893
						case RedSandstoneWallWestTall:
							return 14894
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14895
						case RedSandstoneWallWestLow:
							return 14896
						case RedSandstoneWallWestTall:
							return 14897
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14898
						case RedSandstoneWallWestLow:
							return 14899
						case RedSandstoneWallWestTall:
							return 14900
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14901
						case RedSandstoneWallWestLow:
							return 14902
						case RedSandstoneWallWestTall:
							return 14903
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14904
						case RedSandstoneWallWestLow:
							return 14905
						case RedSandstoneWallWestTall:
							return 14906
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14907
						case RedSandstoneWallWestLow:
							return 14908
						case RedSandstoneWallWestTall:
							return 14909
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14910
						case RedSandstoneWallWestLow:
							return 14911
						case RedSandstoneWallWestTall:
							return 14912
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14913
						case RedSandstoneWallWestLow:
							return 14914
						case RedSandstoneWallWestTall:
							return 14915
						}
					}
				}
			}
		}
	case RedSandstoneWallEastLow:
		switch x.North {
		case RedSandstoneWallNorthNone:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14916
						case RedSandstoneWallWestLow:
							return 14917
						case RedSandstoneWallWestTall:
							return 14918
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14919
						case RedSandstoneWallWestLow:
							return 14920
						case RedSandstoneWallWestTall:
							return 14921
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14922
						case RedSandstoneWallWestLow:
							return 14923
						case RedSandstoneWallWestTall:
							return 14924
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14925
						case RedSandstoneWallWestLow:
							return 14926
						case RedSandstoneWallWestTall:
							return 14927
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14928
						case RedSandstoneWallWestLow:
							return 14929
						case RedSandstoneWallWestTall:
							return 14930
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14931
						case RedSandstoneWallWestLow:
							return 14932
						case RedSandstoneWallWestTall:
							return 14933
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14934
						case RedSandstoneWallWestLow:
							return 14935
						case RedSandstoneWallWestTall:
							return 14936
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14937
						case RedSandstoneWallWestLow:
							return 14938
						case RedSandstoneWallWestTall:
							return 14939
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14940
						case RedSandstoneWallWestLow:
							return 14941
						case RedSandstoneWallWestTall:
							return 14942
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14943
						case RedSandstoneWallWestLow:
							return 14944
						case RedSandstoneWallWestTall:
							return 14945
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14946
						case RedSandstoneWallWestLow:
							return 14947
						case RedSandstoneWallWestTall:
							return 14948
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14949
						case RedSandstoneWallWestLow:
							return 14950
						case RedSandstoneWallWestTall:
							return 14951
						}
					}
				}
			}
		case RedSandstoneWallNorthLow:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14952
						case RedSandstoneWallWestLow:
							return 14953
						case RedSandstoneWallWestTall:
							return 14954
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14955
						case RedSandstoneWallWestLow:
							return 14956
						case RedSandstoneWallWestTall:
							return 14957
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14958
						case RedSandstoneWallWestLow:
							return 14959
						case RedSandstoneWallWestTall:
							return 14960
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14961
						case RedSandstoneWallWestLow:
							return 14962
						case RedSandstoneWallWestTall:
							return 14963
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14964
						case RedSandstoneWallWestLow:
							return 14965
						case RedSandstoneWallWestTall:
							return 14966
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14967
						case RedSandstoneWallWestLow:
							return 14968
						case RedSandstoneWallWestTall:
							return 14969
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14970
						case RedSandstoneWallWestLow:
							return 14971
						case RedSandstoneWallWestTall:
							return 14972
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14973
						case RedSandstoneWallWestLow:
							return 14974
						case RedSandstoneWallWestTall:
							return 14975
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14976
						case RedSandstoneWallWestLow:
							return 14977
						case RedSandstoneWallWestTall:
							return 14978
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14979
						case RedSandstoneWallWestLow:
							return 14980
						case RedSandstoneWallWestTall:
							return 14981
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14982
						case RedSandstoneWallWestLow:
							return 14983
						case RedSandstoneWallWestTall:
							return 14984
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14985
						case RedSandstoneWallWestLow:
							return 14986
						case RedSandstoneWallWestTall:
							return 14987
						}
					}
				}
			}
		case RedSandstoneWallNorthTall:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14988
						case RedSandstoneWallWestLow:
							return 14989
						case RedSandstoneWallWestTall:
							return 14990
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14991
						case RedSandstoneWallWestLow:
							return 14992
						case RedSandstoneWallWestTall:
							return 14993
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14994
						case RedSandstoneWallWestLow:
							return 14995
						case RedSandstoneWallWestTall:
							return 14996
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 14997
						case RedSandstoneWallWestLow:
							return 14998
						case RedSandstoneWallWestTall:
							return 14999
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15000
						case RedSandstoneWallWestLow:
							return 15001
						case RedSandstoneWallWestTall:
							return 15002
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15003
						case RedSandstoneWallWestLow:
							return 15004
						case RedSandstoneWallWestTall:
							return 15005
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15006
						case RedSandstoneWallWestLow:
							return 15007
						case RedSandstoneWallWestTall:
							return 15008
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15009
						case RedSandstoneWallWestLow:
							return 15010
						case RedSandstoneWallWestTall:
							return 15011
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15012
						case RedSandstoneWallWestLow:
							return 15013
						case RedSandstoneWallWestTall:
							return 15014
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15015
						case RedSandstoneWallWestLow:
							return 15016
						case RedSandstoneWallWestTall:
							return 15017
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15018
						case RedSandstoneWallWestLow:
							return 15019
						case RedSandstoneWallWestTall:
							return 15020
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15021
						case RedSandstoneWallWestLow:
							return 15022
						case RedSandstoneWallWestTall:
							return 15023
						}
					}
				}
			}
		}
	case RedSandstoneWallEastTall:
		switch x.North {
		case RedSandstoneWallNorthNone:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15024
						case RedSandstoneWallWestLow:
							return 15025
						case RedSandstoneWallWestTall:
							return 15026
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15027
						case RedSandstoneWallWestLow:
							return 15028
						case RedSandstoneWallWestTall:
							return 15029
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15030
						case RedSandstoneWallWestLow:
							return 15031
						case RedSandstoneWallWestTall:
							return 15032
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15033
						case RedSandstoneWallWestLow:
							return 15034
						case RedSandstoneWallWestTall:
							return 15035
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15036
						case RedSandstoneWallWestLow:
							return 15037
						case RedSandstoneWallWestTall:
							return 15038
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15039
						case RedSandstoneWallWestLow:
							return 15040
						case RedSandstoneWallWestTall:
							return 15041
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15042
						case RedSandstoneWallWestLow:
							return 15043
						case RedSandstoneWallWestTall:
							return 15044
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15045
						case RedSandstoneWallWestLow:
							return 15046
						case RedSandstoneWallWestTall:
							return 15047
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15048
						case RedSandstoneWallWestLow:
							return 15049
						case RedSandstoneWallWestTall:
							return 15050
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15051
						case RedSandstoneWallWestLow:
							return 15052
						case RedSandstoneWallWestTall:
							return 15053
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15054
						case RedSandstoneWallWestLow:
							return 15055
						case RedSandstoneWallWestTall:
							return 15056
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15057
						case RedSandstoneWallWestLow:
							return 15058
						case RedSandstoneWallWestTall:
							return 15059
						}
					}
				}
			}
		case RedSandstoneWallNorthLow:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15060
						case RedSandstoneWallWestLow:
							return 15061
						case RedSandstoneWallWestTall:
							return 15062
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15063
						case RedSandstoneWallWestLow:
							return 15064
						case RedSandstoneWallWestTall:
							return 15065
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15066
						case RedSandstoneWallWestLow:
							return 15067
						case RedSandstoneWallWestTall:
							return 15068
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15069
						case RedSandstoneWallWestLow:
							return 15070
						case RedSandstoneWallWestTall:
							return 15071
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15072
						case RedSandstoneWallWestLow:
							return 15073
						case RedSandstoneWallWestTall:
							return 15074
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15075
						case RedSandstoneWallWestLow:
							return 15076
						case RedSandstoneWallWestTall:
							return 15077
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15078
						case RedSandstoneWallWestLow:
							return 15079
						case RedSandstoneWallWestTall:
							return 15080
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15081
						case RedSandstoneWallWestLow:
							return 15082
						case RedSandstoneWallWestTall:
							return 15083
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15084
						case RedSandstoneWallWestLow:
							return 15085
						case RedSandstoneWallWestTall:
							return 15086
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15087
						case RedSandstoneWallWestLow:
							return 15088
						case RedSandstoneWallWestTall:
							return 15089
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15090
						case RedSandstoneWallWestLow:
							return 15091
						case RedSandstoneWallWestTall:
							return 15092
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15093
						case RedSandstoneWallWestLow:
							return 15094
						case RedSandstoneWallWestTall:
							return 15095
						}
					}
				}
			}
		case RedSandstoneWallNorthTall:
			switch x.South {
			case RedSandstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15096
						case RedSandstoneWallWestLow:
							return 15097
						case RedSandstoneWallWestTall:
							return 15098
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15099
						case RedSandstoneWallWestLow:
							return 15100
						case RedSandstoneWallWestTall:
							return 15101
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15102
						case RedSandstoneWallWestLow:
							return 15103
						case RedSandstoneWallWestTall:
							return 15104
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15105
						case RedSandstoneWallWestLow:
							return 15106
						case RedSandstoneWallWestTall:
							return 15107
						}
					}
				}
			case RedSandstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15108
						case RedSandstoneWallWestLow:
							return 15109
						case RedSandstoneWallWestTall:
							return 15110
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15111
						case RedSandstoneWallWestLow:
							return 15112
						case RedSandstoneWallWestTall:
							return 15113
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15114
						case RedSandstoneWallWestLow:
							return 15115
						case RedSandstoneWallWestTall:
							return 15116
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15117
						case RedSandstoneWallWestLow:
							return 15118
						case RedSandstoneWallWestTall:
							return 15119
						}
					}
				}
			case RedSandstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15120
						case RedSandstoneWallWestLow:
							return 15121
						case RedSandstoneWallWestTall:
							return 15122
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15123
						case RedSandstoneWallWestLow:
							return 15124
						case RedSandstoneWallWestTall:
							return 15125
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15126
						case RedSandstoneWallWestLow:
							return 15127
						case RedSandstoneWallWestTall:
							return 15128
						}
					case false:
						switch x.West {
						case RedSandstoneWallWestNone:
							return 15129
						case RedSandstoneWallWestLow:
							return 15130
						case RedSandstoneWallWestTall:
							return 15131
						}
					}
				}
			}
		}
	}
	return 14811 // default state
}

type MossyStoneBrickWallSouth string

const (
	MossyStoneBrickWallSouthNone MossyStoneBrickWallSouth = "none"
	MossyStoneBrickWallSouthLow  MossyStoneBrickWallSouth = "low"
	MossyStoneBrickWallSouthTall MossyStoneBrickWallSouth = "tall"
)

type MossyStoneBrickWallWest string

const (
	MossyStoneBrickWallWestNone MossyStoneBrickWallWest = "none"
	MossyStoneBrickWallWestLow  MossyStoneBrickWallWest = "low"
	MossyStoneBrickWallWestTall MossyStoneBrickWallWest = "tall"
)

type MossyStoneBrickWallEast string

const (
	MossyStoneBrickWallEastNone MossyStoneBrickWallEast = "none"
	MossyStoneBrickWallEastLow  MossyStoneBrickWallEast = "low"
	MossyStoneBrickWallEastTall MossyStoneBrickWallEast = "tall"
)

type MossyStoneBrickWallNorth string

const (
	MossyStoneBrickWallNorthNone MossyStoneBrickWallNorth = "none"
	MossyStoneBrickWallNorthLow  MossyStoneBrickWallNorth = "low"
	MossyStoneBrickWallNorthTall MossyStoneBrickWallNorth = "tall"
)

type MossyStoneBrickWall struct {
	South       MossyStoneBrickWallSouth
	Up          bool
	Waterlogged bool
	West        MossyStoneBrickWallWest
	East        MossyStoneBrickWallEast
	North       MossyStoneBrickWallNorth
}

func (x MossyStoneBrickWall) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case MossyStoneBrickWallWestNone:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15132
						case false:
							return 15138
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15144
						case false:
							return 15150
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15156
						case false:
							return 15162
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15168
						case false:
							return 15174
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15180
						case false:
							return 15186
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15192
						case false:
							return 15198
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15204
						case false:
							return 15210
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15216
						case false:
							return 15222
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15228
						case false:
							return 15234
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15240
						case false:
							return 15246
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15252
						case false:
							return 15258
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15264
						case false:
							return 15270
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15276
						case false:
							return 15282
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15288
						case false:
							return 15294
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15300
						case false:
							return 15306
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15312
						case false:
							return 15318
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15324
						case false:
							return 15330
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15336
						case false:
							return 15342
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15348
						case false:
							return 15354
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15360
						case false:
							return 15366
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15372
						case false:
							return 15378
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15384
						case false:
							return 15390
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15396
						case false:
							return 15402
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15408
						case false:
							return 15414
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15420
						case false:
							return 15426
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15432
						case false:
							return 15438
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15444
						case false:
							return 15450
						}
					}
				}
			}
		case MossyStoneBrickWallWestLow:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15133
						case false:
							return 15139
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15145
						case false:
							return 15151
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15157
						case false:
							return 15163
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15169
						case false:
							return 15175
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15181
						case false:
							return 15187
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15193
						case false:
							return 15199
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15205
						case false:
							return 15211
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15217
						case false:
							return 15223
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15229
						case false:
							return 15235
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15241
						case false:
							return 15247
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15253
						case false:
							return 15259
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15265
						case false:
							return 15271
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15277
						case false:
							return 15283
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15289
						case false:
							return 15295
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15301
						case false:
							return 15307
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15313
						case false:
							return 15319
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15325
						case false:
							return 15331
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15337
						case false:
							return 15343
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15349
						case false:
							return 15355
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15361
						case false:
							return 15367
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15373
						case false:
							return 15379
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15385
						case false:
							return 15391
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15397
						case false:
							return 15403
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15409
						case false:
							return 15415
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15421
						case false:
							return 15427
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15433
						case false:
							return 15439
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15445
						case false:
							return 15451
						}
					}
				}
			}
		case MossyStoneBrickWallWestTall:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15134
						case false:
							return 15140
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15146
						case false:
							return 15152
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15158
						case false:
							return 15164
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15170
						case false:
							return 15176
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15182
						case false:
							return 15188
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15194
						case false:
							return 15200
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15206
						case false:
							return 15212
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15218
						case false:
							return 15224
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15230
						case false:
							return 15236
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15242
						case false:
							return 15248
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15254
						case false:
							return 15260
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15266
						case false:
							return 15272
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15278
						case false:
							return 15284
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15290
						case false:
							return 15296
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15302
						case false:
							return 15308
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15314
						case false:
							return 15320
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15326
						case false:
							return 15332
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15338
						case false:
							return 15344
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15350
						case false:
							return 15356
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15362
						case false:
							return 15368
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15374
						case false:
							return 15380
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15386
						case false:
							return 15392
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15398
						case false:
							return 15404
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15410
						case false:
							return 15416
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15422
						case false:
							return 15428
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15434
						case false:
							return 15440
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15446
						case false:
							return 15452
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case MossyStoneBrickWallWestNone:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15135
						case false:
							return 15141
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15147
						case false:
							return 15153
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15159
						case false:
							return 15165
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15171
						case false:
							return 15177
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15183
						case false:
							return 15189
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15195
						case false:
							return 15201
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15207
						case false:
							return 15213
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15219
						case false:
							return 15225
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15231
						case false:
							return 15237
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15243
						case false:
							return 15249
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15255
						case false:
							return 15261
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15267
						case false:
							return 15273
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15279
						case false:
							return 15285
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15291
						case false:
							return 15297
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15303
						case false:
							return 15309
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15315
						case false:
							return 15321
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15327
						case false:
							return 15333
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15339
						case false:
							return 15345
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15351
						case false:
							return 15357
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15363
						case false:
							return 15369
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15375
						case false:
							return 15381
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15387
						case false:
							return 15393
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15399
						case false:
							return 15405
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15411
						case false:
							return 15417
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15423
						case false:
							return 15429
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15435
						case false:
							return 15441
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15447
						case false:
							return 15453
						}
					}
				}
			}
		case MossyStoneBrickWallWestLow:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15136
						case false:
							return 15142
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15148
						case false:
							return 15154
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15160
						case false:
							return 15166
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15172
						case false:
							return 15178
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15184
						case false:
							return 15190
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15196
						case false:
							return 15202
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15208
						case false:
							return 15214
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15220
						case false:
							return 15226
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15232
						case false:
							return 15238
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15244
						case false:
							return 15250
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15256
						case false:
							return 15262
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15268
						case false:
							return 15274
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15280
						case false:
							return 15286
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15292
						case false:
							return 15298
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15304
						case false:
							return 15310
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15316
						case false:
							return 15322
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15328
						case false:
							return 15334
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15340
						case false:
							return 15346
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15352
						case false:
							return 15358
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15364
						case false:
							return 15370
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15376
						case false:
							return 15382
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15388
						case false:
							return 15394
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15400
						case false:
							return 15406
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15412
						case false:
							return 15418
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15424
						case false:
							return 15430
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15436
						case false:
							return 15442
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15448
						case false:
							return 15454
						}
					}
				}
			}
		case MossyStoneBrickWallWestTall:
			switch x.East {
			case MossyStoneBrickWallEastNone:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15137
						case false:
							return 15143
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15149
						case false:
							return 15155
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15161
						case false:
							return 15167
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15173
						case false:
							return 15179
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15185
						case false:
							return 15191
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15197
						case false:
							return 15203
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15209
						case false:
							return 15215
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15221
						case false:
							return 15227
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15233
						case false:
							return 15239
						}
					}
				}
			case MossyStoneBrickWallEastLow:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15245
						case false:
							return 15251
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15257
						case false:
							return 15263
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15269
						case false:
							return 15275
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15281
						case false:
							return 15287
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15293
						case false:
							return 15299
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15305
						case false:
							return 15311
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15317
						case false:
							return 15323
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15329
						case false:
							return 15335
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15341
						case false:
							return 15347
						}
					}
				}
			case MossyStoneBrickWallEastTall:
				switch x.North {
				case MossyStoneBrickWallNorthNone:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15353
						case false:
							return 15359
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15365
						case false:
							return 15371
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15377
						case false:
							return 15383
						}
					}
				case MossyStoneBrickWallNorthLow:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15389
						case false:
							return 15395
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15401
						case false:
							return 15407
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15413
						case false:
							return 15419
						}
					}
				case MossyStoneBrickWallNorthTall:
					switch x.South {
					case MossyStoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15425
						case false:
							return 15431
						}
					case MossyStoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15437
						case false:
							return 15443
						}
					case MossyStoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15449
						case false:
							return 15455
						}
					}
				}
			}
		}
	}
	return 15135 // default state
}

type GraniteWallSouth string

const (
	GraniteWallSouthNone GraniteWallSouth = "none"
	GraniteWallSouthLow  GraniteWallSouth = "low"
	GraniteWallSouthTall GraniteWallSouth = "tall"
)

type GraniteWallWest string

const (
	GraniteWallWestNone GraniteWallWest = "none"
	GraniteWallWestLow  GraniteWallWest = "low"
	GraniteWallWestTall GraniteWallWest = "tall"
)

type GraniteWallEast string

const (
	GraniteWallEastNone GraniteWallEast = "none"
	GraniteWallEastLow  GraniteWallEast = "low"
	GraniteWallEastTall GraniteWallEast = "tall"
)

type GraniteWallNorth string

const (
	GraniteWallNorthNone GraniteWallNorth = "none"
	GraniteWallNorthLow  GraniteWallNorth = "low"
	GraniteWallNorthTall GraniteWallNorth = "tall"
)

type GraniteWall struct {
	South       GraniteWallSouth
	Up          bool
	Waterlogged bool
	West        GraniteWallWest
	East        GraniteWallEast
	North       GraniteWallNorth
}

func (x GraniteWall) Id() uint16 {
	switch x.North {
	case GraniteWallNorthNone:
		switch x.South {
		case GraniteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15456
						case GraniteWallEastLow:
							return 15564
						case GraniteWallEastTall:
							return 15672
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15457
						case GraniteWallEastLow:
							return 15565
						case GraniteWallEastTall:
							return 15673
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15458
						case GraniteWallEastLow:
							return 15566
						case GraniteWallEastTall:
							return 15674
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15459
						case GraniteWallEastLow:
							return 15567
						case GraniteWallEastTall:
							return 15675
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15460
						case GraniteWallEastLow:
							return 15568
						case GraniteWallEastTall:
							return 15676
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15461
						case GraniteWallEastLow:
							return 15569
						case GraniteWallEastTall:
							return 15677
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15462
						case GraniteWallEastLow:
							return 15570
						case GraniteWallEastTall:
							return 15678
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15463
						case GraniteWallEastLow:
							return 15571
						case GraniteWallEastTall:
							return 15679
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15464
						case GraniteWallEastLow:
							return 15572
						case GraniteWallEastTall:
							return 15680
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15465
						case GraniteWallEastLow:
							return 15573
						case GraniteWallEastTall:
							return 15681
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15466
						case GraniteWallEastLow:
							return 15574
						case GraniteWallEastTall:
							return 15682
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15467
						case GraniteWallEastLow:
							return 15575
						case GraniteWallEastTall:
							return 15683
						}
					}
				}
			}
		case GraniteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15468
						case GraniteWallEastLow:
							return 15576
						case GraniteWallEastTall:
							return 15684
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15469
						case GraniteWallEastLow:
							return 15577
						case GraniteWallEastTall:
							return 15685
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15470
						case GraniteWallEastLow:
							return 15578
						case GraniteWallEastTall:
							return 15686
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15471
						case GraniteWallEastLow:
							return 15579
						case GraniteWallEastTall:
							return 15687
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15472
						case GraniteWallEastLow:
							return 15580
						case GraniteWallEastTall:
							return 15688
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15473
						case GraniteWallEastLow:
							return 15581
						case GraniteWallEastTall:
							return 15689
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15474
						case GraniteWallEastLow:
							return 15582
						case GraniteWallEastTall:
							return 15690
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15475
						case GraniteWallEastLow:
							return 15583
						case GraniteWallEastTall:
							return 15691
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15476
						case GraniteWallEastLow:
							return 15584
						case GraniteWallEastTall:
							return 15692
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15477
						case GraniteWallEastLow:
							return 15585
						case GraniteWallEastTall:
							return 15693
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15478
						case GraniteWallEastLow:
							return 15586
						case GraniteWallEastTall:
							return 15694
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15479
						case GraniteWallEastLow:
							return 15587
						case GraniteWallEastTall:
							return 15695
						}
					}
				}
			}
		case GraniteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15480
						case GraniteWallEastLow:
							return 15588
						case GraniteWallEastTall:
							return 15696
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15481
						case GraniteWallEastLow:
							return 15589
						case GraniteWallEastTall:
							return 15697
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15482
						case GraniteWallEastLow:
							return 15590
						case GraniteWallEastTall:
							return 15698
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15483
						case GraniteWallEastLow:
							return 15591
						case GraniteWallEastTall:
							return 15699
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15484
						case GraniteWallEastLow:
							return 15592
						case GraniteWallEastTall:
							return 15700
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15485
						case GraniteWallEastLow:
							return 15593
						case GraniteWallEastTall:
							return 15701
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15486
						case GraniteWallEastLow:
							return 15594
						case GraniteWallEastTall:
							return 15702
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15487
						case GraniteWallEastLow:
							return 15595
						case GraniteWallEastTall:
							return 15703
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15488
						case GraniteWallEastLow:
							return 15596
						case GraniteWallEastTall:
							return 15704
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15489
						case GraniteWallEastLow:
							return 15597
						case GraniteWallEastTall:
							return 15705
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15490
						case GraniteWallEastLow:
							return 15598
						case GraniteWallEastTall:
							return 15706
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15491
						case GraniteWallEastLow:
							return 15599
						case GraniteWallEastTall:
							return 15707
						}
					}
				}
			}
		}
	case GraniteWallNorthLow:
		switch x.South {
		case GraniteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15492
						case GraniteWallEastLow:
							return 15600
						case GraniteWallEastTall:
							return 15708
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15493
						case GraniteWallEastLow:
							return 15601
						case GraniteWallEastTall:
							return 15709
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15494
						case GraniteWallEastLow:
							return 15602
						case GraniteWallEastTall:
							return 15710
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15495
						case GraniteWallEastLow:
							return 15603
						case GraniteWallEastTall:
							return 15711
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15496
						case GraniteWallEastLow:
							return 15604
						case GraniteWallEastTall:
							return 15712
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15497
						case GraniteWallEastLow:
							return 15605
						case GraniteWallEastTall:
							return 15713
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15498
						case GraniteWallEastLow:
							return 15606
						case GraniteWallEastTall:
							return 15714
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15499
						case GraniteWallEastLow:
							return 15607
						case GraniteWallEastTall:
							return 15715
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15500
						case GraniteWallEastLow:
							return 15608
						case GraniteWallEastTall:
							return 15716
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15501
						case GraniteWallEastLow:
							return 15609
						case GraniteWallEastTall:
							return 15717
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15502
						case GraniteWallEastLow:
							return 15610
						case GraniteWallEastTall:
							return 15718
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15503
						case GraniteWallEastLow:
							return 15611
						case GraniteWallEastTall:
							return 15719
						}
					}
				}
			}
		case GraniteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15504
						case GraniteWallEastLow:
							return 15612
						case GraniteWallEastTall:
							return 15720
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15505
						case GraniteWallEastLow:
							return 15613
						case GraniteWallEastTall:
							return 15721
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15506
						case GraniteWallEastLow:
							return 15614
						case GraniteWallEastTall:
							return 15722
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15507
						case GraniteWallEastLow:
							return 15615
						case GraniteWallEastTall:
							return 15723
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15508
						case GraniteWallEastLow:
							return 15616
						case GraniteWallEastTall:
							return 15724
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15509
						case GraniteWallEastLow:
							return 15617
						case GraniteWallEastTall:
							return 15725
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15510
						case GraniteWallEastLow:
							return 15618
						case GraniteWallEastTall:
							return 15726
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15511
						case GraniteWallEastLow:
							return 15619
						case GraniteWallEastTall:
							return 15727
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15512
						case GraniteWallEastLow:
							return 15620
						case GraniteWallEastTall:
							return 15728
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15513
						case GraniteWallEastLow:
							return 15621
						case GraniteWallEastTall:
							return 15729
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15514
						case GraniteWallEastLow:
							return 15622
						case GraniteWallEastTall:
							return 15730
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15515
						case GraniteWallEastLow:
							return 15623
						case GraniteWallEastTall:
							return 15731
						}
					}
				}
			}
		case GraniteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15516
						case GraniteWallEastLow:
							return 15624
						case GraniteWallEastTall:
							return 15732
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15517
						case GraniteWallEastLow:
							return 15625
						case GraniteWallEastTall:
							return 15733
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15518
						case GraniteWallEastLow:
							return 15626
						case GraniteWallEastTall:
							return 15734
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15519
						case GraniteWallEastLow:
							return 15627
						case GraniteWallEastTall:
							return 15735
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15520
						case GraniteWallEastLow:
							return 15628
						case GraniteWallEastTall:
							return 15736
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15521
						case GraniteWallEastLow:
							return 15629
						case GraniteWallEastTall:
							return 15737
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15522
						case GraniteWallEastLow:
							return 15630
						case GraniteWallEastTall:
							return 15738
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15523
						case GraniteWallEastLow:
							return 15631
						case GraniteWallEastTall:
							return 15739
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15524
						case GraniteWallEastLow:
							return 15632
						case GraniteWallEastTall:
							return 15740
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15525
						case GraniteWallEastLow:
							return 15633
						case GraniteWallEastTall:
							return 15741
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15526
						case GraniteWallEastLow:
							return 15634
						case GraniteWallEastTall:
							return 15742
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15527
						case GraniteWallEastLow:
							return 15635
						case GraniteWallEastTall:
							return 15743
						}
					}
				}
			}
		}
	case GraniteWallNorthTall:
		switch x.South {
		case GraniteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15528
						case GraniteWallEastLow:
							return 15636
						case GraniteWallEastTall:
							return 15744
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15529
						case GraniteWallEastLow:
							return 15637
						case GraniteWallEastTall:
							return 15745
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15530
						case GraniteWallEastLow:
							return 15638
						case GraniteWallEastTall:
							return 15746
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15531
						case GraniteWallEastLow:
							return 15639
						case GraniteWallEastTall:
							return 15747
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15532
						case GraniteWallEastLow:
							return 15640
						case GraniteWallEastTall:
							return 15748
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15533
						case GraniteWallEastLow:
							return 15641
						case GraniteWallEastTall:
							return 15749
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15534
						case GraniteWallEastLow:
							return 15642
						case GraniteWallEastTall:
							return 15750
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15535
						case GraniteWallEastLow:
							return 15643
						case GraniteWallEastTall:
							return 15751
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15536
						case GraniteWallEastLow:
							return 15644
						case GraniteWallEastTall:
							return 15752
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15537
						case GraniteWallEastLow:
							return 15645
						case GraniteWallEastTall:
							return 15753
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15538
						case GraniteWallEastLow:
							return 15646
						case GraniteWallEastTall:
							return 15754
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15539
						case GraniteWallEastLow:
							return 15647
						case GraniteWallEastTall:
							return 15755
						}
					}
				}
			}
		case GraniteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15540
						case GraniteWallEastLow:
							return 15648
						case GraniteWallEastTall:
							return 15756
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15541
						case GraniteWallEastLow:
							return 15649
						case GraniteWallEastTall:
							return 15757
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15542
						case GraniteWallEastLow:
							return 15650
						case GraniteWallEastTall:
							return 15758
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15543
						case GraniteWallEastLow:
							return 15651
						case GraniteWallEastTall:
							return 15759
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15544
						case GraniteWallEastLow:
							return 15652
						case GraniteWallEastTall:
							return 15760
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15545
						case GraniteWallEastLow:
							return 15653
						case GraniteWallEastTall:
							return 15761
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15546
						case GraniteWallEastLow:
							return 15654
						case GraniteWallEastTall:
							return 15762
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15547
						case GraniteWallEastLow:
							return 15655
						case GraniteWallEastTall:
							return 15763
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15548
						case GraniteWallEastLow:
							return 15656
						case GraniteWallEastTall:
							return 15764
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15549
						case GraniteWallEastLow:
							return 15657
						case GraniteWallEastTall:
							return 15765
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15550
						case GraniteWallEastLow:
							return 15658
						case GraniteWallEastTall:
							return 15766
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15551
						case GraniteWallEastLow:
							return 15659
						case GraniteWallEastTall:
							return 15767
						}
					}
				}
			}
		case GraniteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15552
						case GraniteWallEastLow:
							return 15660
						case GraniteWallEastTall:
							return 15768
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15553
						case GraniteWallEastLow:
							return 15661
						case GraniteWallEastTall:
							return 15769
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15554
						case GraniteWallEastLow:
							return 15662
						case GraniteWallEastTall:
							return 15770
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15555
						case GraniteWallEastLow:
							return 15663
						case GraniteWallEastTall:
							return 15771
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15556
						case GraniteWallEastLow:
							return 15664
						case GraniteWallEastTall:
							return 15772
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15557
						case GraniteWallEastLow:
							return 15665
						case GraniteWallEastTall:
							return 15773
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15558
						case GraniteWallEastLow:
							return 15666
						case GraniteWallEastTall:
							return 15774
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15559
						case GraniteWallEastLow:
							return 15667
						case GraniteWallEastTall:
							return 15775
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15560
						case GraniteWallEastLow:
							return 15668
						case GraniteWallEastTall:
							return 15776
						}
					}
				case false:
					switch x.West {
					case GraniteWallWestNone:
						switch x.East {
						case GraniteWallEastNone:
							return 15561
						case GraniteWallEastLow:
							return 15669
						case GraniteWallEastTall:
							return 15777
						}
					case GraniteWallWestLow:
						switch x.East {
						case GraniteWallEastNone:
							return 15562
						case GraniteWallEastLow:
							return 15670
						case GraniteWallEastTall:
							return 15778
						}
					case GraniteWallWestTall:
						switch x.East {
						case GraniteWallEastNone:
							return 15563
						case GraniteWallEastLow:
							return 15671
						case GraniteWallEastTall:
							return 15779
						}
					}
				}
			}
		}
	}
	return 15459 // default state
}

type StoneBrickWallEast string

const (
	StoneBrickWallEastNone StoneBrickWallEast = "none"
	StoneBrickWallEastLow  StoneBrickWallEast = "low"
	StoneBrickWallEastTall StoneBrickWallEast = "tall"
)

type StoneBrickWallNorth string

const (
	StoneBrickWallNorthNone StoneBrickWallNorth = "none"
	StoneBrickWallNorthLow  StoneBrickWallNorth = "low"
	StoneBrickWallNorthTall StoneBrickWallNorth = "tall"
)

type StoneBrickWallSouth string

const (
	StoneBrickWallSouthNone StoneBrickWallSouth = "none"
	StoneBrickWallSouthLow  StoneBrickWallSouth = "low"
	StoneBrickWallSouthTall StoneBrickWallSouth = "tall"
)

type StoneBrickWallWest string

const (
	StoneBrickWallWestNone StoneBrickWallWest = "none"
	StoneBrickWallWestLow  StoneBrickWallWest = "low"
	StoneBrickWallWestTall StoneBrickWallWest = "tall"
)

type StoneBrickWall struct {
	East        StoneBrickWallEast
	North       StoneBrickWallNorth
	South       StoneBrickWallSouth
	Up          bool
	Waterlogged bool
	West        StoneBrickWallWest
}

func (x StoneBrickWall) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case StoneBrickWallWestNone:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15780
						case false:
							return 15786
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15792
						case false:
							return 15798
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15804
						case false:
							return 15810
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15816
						case false:
							return 15822
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15828
						case false:
							return 15834
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15840
						case false:
							return 15846
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15852
						case false:
							return 15858
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15864
						case false:
							return 15870
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15876
						case false:
							return 15882
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15888
						case false:
							return 15894
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15900
						case false:
							return 15906
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15912
						case false:
							return 15918
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15924
						case false:
							return 15930
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15936
						case false:
							return 15942
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15948
						case false:
							return 15954
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15960
						case false:
							return 15966
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15972
						case false:
							return 15978
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15984
						case false:
							return 15990
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15996
						case false:
							return 16002
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16008
						case false:
							return 16014
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16020
						case false:
							return 16026
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16032
						case false:
							return 16038
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16044
						case false:
							return 16050
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16056
						case false:
							return 16062
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16068
						case false:
							return 16074
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16080
						case false:
							return 16086
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16092
						case false:
							return 16098
						}
					}
				}
			}
		case StoneBrickWallWestLow:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15781
						case false:
							return 15787
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15793
						case false:
							return 15799
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15805
						case false:
							return 15811
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15817
						case false:
							return 15823
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15829
						case false:
							return 15835
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15841
						case false:
							return 15847
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15853
						case false:
							return 15859
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15865
						case false:
							return 15871
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15877
						case false:
							return 15883
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15889
						case false:
							return 15895
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15901
						case false:
							return 15907
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15913
						case false:
							return 15919
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15925
						case false:
							return 15931
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15937
						case false:
							return 15943
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15949
						case false:
							return 15955
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15961
						case false:
							return 15967
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15973
						case false:
							return 15979
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15985
						case false:
							return 15991
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15997
						case false:
							return 16003
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16009
						case false:
							return 16015
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16021
						case false:
							return 16027
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16033
						case false:
							return 16039
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16045
						case false:
							return 16051
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16057
						case false:
							return 16063
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16069
						case false:
							return 16075
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16081
						case false:
							return 16087
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16093
						case false:
							return 16099
						}
					}
				}
			}
		case StoneBrickWallWestTall:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15782
						case false:
							return 15788
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15794
						case false:
							return 15800
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15806
						case false:
							return 15812
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15818
						case false:
							return 15824
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15830
						case false:
							return 15836
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15842
						case false:
							return 15848
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15854
						case false:
							return 15860
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15866
						case false:
							return 15872
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15878
						case false:
							return 15884
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15890
						case false:
							return 15896
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15902
						case false:
							return 15908
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15914
						case false:
							return 15920
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15926
						case false:
							return 15932
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15938
						case false:
							return 15944
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15950
						case false:
							return 15956
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15962
						case false:
							return 15968
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15974
						case false:
							return 15980
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15986
						case false:
							return 15992
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15998
						case false:
							return 16004
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16010
						case false:
							return 16016
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16022
						case false:
							return 16028
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16034
						case false:
							return 16040
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16046
						case false:
							return 16052
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16058
						case false:
							return 16064
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16070
						case false:
							return 16076
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16082
						case false:
							return 16088
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16094
						case false:
							return 16100
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case StoneBrickWallWestNone:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15783
						case false:
							return 15789
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15795
						case false:
							return 15801
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15807
						case false:
							return 15813
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15819
						case false:
							return 15825
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15831
						case false:
							return 15837
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15843
						case false:
							return 15849
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15855
						case false:
							return 15861
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15867
						case false:
							return 15873
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15879
						case false:
							return 15885
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15891
						case false:
							return 15897
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15903
						case false:
							return 15909
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15915
						case false:
							return 15921
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15927
						case false:
							return 15933
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15939
						case false:
							return 15945
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15951
						case false:
							return 15957
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15963
						case false:
							return 15969
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15975
						case false:
							return 15981
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15987
						case false:
							return 15993
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15999
						case false:
							return 16005
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16011
						case false:
							return 16017
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16023
						case false:
							return 16029
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16035
						case false:
							return 16041
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16047
						case false:
							return 16053
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16059
						case false:
							return 16065
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16071
						case false:
							return 16077
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16083
						case false:
							return 16089
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16095
						case false:
							return 16101
						}
					}
				}
			}
		case StoneBrickWallWestLow:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15784
						case false:
							return 15790
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15796
						case false:
							return 15802
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15808
						case false:
							return 15814
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15820
						case false:
							return 15826
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15832
						case false:
							return 15838
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15844
						case false:
							return 15850
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15856
						case false:
							return 15862
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15868
						case false:
							return 15874
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15880
						case false:
							return 15886
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15892
						case false:
							return 15898
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15904
						case false:
							return 15910
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15916
						case false:
							return 15922
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15928
						case false:
							return 15934
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15940
						case false:
							return 15946
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15952
						case false:
							return 15958
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15964
						case false:
							return 15970
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15976
						case false:
							return 15982
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15988
						case false:
							return 15994
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16000
						case false:
							return 16006
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16012
						case false:
							return 16018
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16024
						case false:
							return 16030
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16036
						case false:
							return 16042
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16048
						case false:
							return 16054
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16060
						case false:
							return 16066
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16072
						case false:
							return 16078
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16084
						case false:
							return 16090
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16096
						case false:
							return 16102
						}
					}
				}
			}
		case StoneBrickWallWestTall:
			switch x.East {
			case StoneBrickWallEastNone:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15785
						case false:
							return 15791
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15797
						case false:
							return 15803
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15809
						case false:
							return 15815
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15821
						case false:
							return 15827
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15833
						case false:
							return 15839
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15845
						case false:
							return 15851
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15857
						case false:
							return 15863
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15869
						case false:
							return 15875
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15881
						case false:
							return 15887
						}
					}
				}
			case StoneBrickWallEastLow:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15893
						case false:
							return 15899
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15905
						case false:
							return 15911
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15917
						case false:
							return 15923
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15929
						case false:
							return 15935
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15941
						case false:
							return 15947
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15953
						case false:
							return 15959
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 15965
						case false:
							return 15971
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 15977
						case false:
							return 15983
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 15989
						case false:
							return 15995
						}
					}
				}
			case StoneBrickWallEastTall:
				switch x.North {
				case StoneBrickWallNorthNone:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16001
						case false:
							return 16007
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16013
						case false:
							return 16019
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16025
						case false:
							return 16031
						}
					}
				case StoneBrickWallNorthLow:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16037
						case false:
							return 16043
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16049
						case false:
							return 16055
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16061
						case false:
							return 16067
						}
					}
				case StoneBrickWallNorthTall:
					switch x.South {
					case StoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 16073
						case false:
							return 16079
						}
					case StoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 16085
						case false:
							return 16091
						}
					case StoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 16097
						case false:
							return 16103
						}
					}
				}
			}
		}
	}
	return 15783 // default state
}

type MudBrickWallWest string

const (
	MudBrickWallWestNone MudBrickWallWest = "none"
	MudBrickWallWestLow  MudBrickWallWest = "low"
	MudBrickWallWestTall MudBrickWallWest = "tall"
)

type MudBrickWallEast string

const (
	MudBrickWallEastNone MudBrickWallEast = "none"
	MudBrickWallEastLow  MudBrickWallEast = "low"
	MudBrickWallEastTall MudBrickWallEast = "tall"
)

type MudBrickWallNorth string

const (
	MudBrickWallNorthNone MudBrickWallNorth = "none"
	MudBrickWallNorthLow  MudBrickWallNorth = "low"
	MudBrickWallNorthTall MudBrickWallNorth = "tall"
)

type MudBrickWallSouth string

const (
	MudBrickWallSouthNone MudBrickWallSouth = "none"
	MudBrickWallSouthLow  MudBrickWallSouth = "low"
	MudBrickWallSouthTall MudBrickWallSouth = "tall"
)

type MudBrickWall struct {
	Waterlogged bool
	West        MudBrickWallWest
	East        MudBrickWallEast
	North       MudBrickWallNorth
	South       MudBrickWallSouth
	Up          bool
}

func (x MudBrickWall) Id() uint16 {
	switch x.West {
	case MudBrickWallWestNone:
		switch x.East {
		case MudBrickWallEastNone:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16104
						case false:
							return 16107
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16110
						case false:
							return 16113
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16116
						case false:
							return 16119
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16122
						case false:
							return 16125
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16128
						case false:
							return 16131
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16134
						case false:
							return 16137
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16140
						case false:
							return 16143
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16146
						case false:
							return 16149
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16152
						case false:
							return 16155
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16158
						case false:
							return 16161
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16164
						case false:
							return 16167
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16170
						case false:
							return 16173
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16176
						case false:
							return 16179
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16182
						case false:
							return 16185
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16188
						case false:
							return 16191
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16194
						case false:
							return 16197
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16200
						case false:
							return 16203
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16206
						case false:
							return 16209
						}
					}
				}
			}
		case MudBrickWallEastLow:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16212
						case false:
							return 16215
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16218
						case false:
							return 16221
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16224
						case false:
							return 16227
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16230
						case false:
							return 16233
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16236
						case false:
							return 16239
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16242
						case false:
							return 16245
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16248
						case false:
							return 16251
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16254
						case false:
							return 16257
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16260
						case false:
							return 16263
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16266
						case false:
							return 16269
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16272
						case false:
							return 16275
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16278
						case false:
							return 16281
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16284
						case false:
							return 16287
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16290
						case false:
							return 16293
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16296
						case false:
							return 16299
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16302
						case false:
							return 16305
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16308
						case false:
							return 16311
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16314
						case false:
							return 16317
						}
					}
				}
			}
		case MudBrickWallEastTall:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16320
						case false:
							return 16323
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16326
						case false:
							return 16329
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16332
						case false:
							return 16335
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16338
						case false:
							return 16341
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16344
						case false:
							return 16347
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16350
						case false:
							return 16353
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16356
						case false:
							return 16359
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16362
						case false:
							return 16365
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16368
						case false:
							return 16371
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16374
						case false:
							return 16377
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16380
						case false:
							return 16383
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16386
						case false:
							return 16389
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16392
						case false:
							return 16395
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16398
						case false:
							return 16401
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16404
						case false:
							return 16407
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16410
						case false:
							return 16413
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16416
						case false:
							return 16419
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16422
						case false:
							return 16425
						}
					}
				}
			}
		}
	case MudBrickWallWestLow:
		switch x.East {
		case MudBrickWallEastNone:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16105
						case false:
							return 16108
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16111
						case false:
							return 16114
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16117
						case false:
							return 16120
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16123
						case false:
							return 16126
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16129
						case false:
							return 16132
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16135
						case false:
							return 16138
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16141
						case false:
							return 16144
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16147
						case false:
							return 16150
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16153
						case false:
							return 16156
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16159
						case false:
							return 16162
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16165
						case false:
							return 16168
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16171
						case false:
							return 16174
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16177
						case false:
							return 16180
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16183
						case false:
							return 16186
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16189
						case false:
							return 16192
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16195
						case false:
							return 16198
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16201
						case false:
							return 16204
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16207
						case false:
							return 16210
						}
					}
				}
			}
		case MudBrickWallEastLow:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16213
						case false:
							return 16216
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16219
						case false:
							return 16222
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16225
						case false:
							return 16228
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16231
						case false:
							return 16234
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16237
						case false:
							return 16240
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16243
						case false:
							return 16246
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16249
						case false:
							return 16252
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16255
						case false:
							return 16258
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16261
						case false:
							return 16264
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16267
						case false:
							return 16270
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16273
						case false:
							return 16276
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16279
						case false:
							return 16282
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16285
						case false:
							return 16288
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16291
						case false:
							return 16294
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16297
						case false:
							return 16300
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16303
						case false:
							return 16306
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16309
						case false:
							return 16312
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16315
						case false:
							return 16318
						}
					}
				}
			}
		case MudBrickWallEastTall:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16321
						case false:
							return 16324
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16327
						case false:
							return 16330
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16333
						case false:
							return 16336
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16339
						case false:
							return 16342
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16345
						case false:
							return 16348
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16351
						case false:
							return 16354
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16357
						case false:
							return 16360
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16363
						case false:
							return 16366
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16369
						case false:
							return 16372
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16375
						case false:
							return 16378
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16381
						case false:
							return 16384
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16387
						case false:
							return 16390
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16393
						case false:
							return 16396
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16399
						case false:
							return 16402
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16405
						case false:
							return 16408
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16411
						case false:
							return 16414
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16417
						case false:
							return 16420
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16423
						case false:
							return 16426
						}
					}
				}
			}
		}
	case MudBrickWallWestTall:
		switch x.East {
		case MudBrickWallEastNone:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16106
						case false:
							return 16109
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16112
						case false:
							return 16115
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16118
						case false:
							return 16121
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16124
						case false:
							return 16127
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16130
						case false:
							return 16133
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16136
						case false:
							return 16139
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16142
						case false:
							return 16145
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16148
						case false:
							return 16151
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16154
						case false:
							return 16157
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16160
						case false:
							return 16163
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16166
						case false:
							return 16169
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16172
						case false:
							return 16175
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16178
						case false:
							return 16181
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16184
						case false:
							return 16187
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16190
						case false:
							return 16193
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16196
						case false:
							return 16199
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16202
						case false:
							return 16205
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16208
						case false:
							return 16211
						}
					}
				}
			}
		case MudBrickWallEastLow:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16214
						case false:
							return 16217
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16220
						case false:
							return 16223
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16226
						case false:
							return 16229
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16232
						case false:
							return 16235
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16238
						case false:
							return 16241
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16244
						case false:
							return 16247
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16250
						case false:
							return 16253
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16256
						case false:
							return 16259
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16262
						case false:
							return 16265
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16268
						case false:
							return 16271
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16274
						case false:
							return 16277
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16280
						case false:
							return 16283
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16286
						case false:
							return 16289
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16292
						case false:
							return 16295
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16298
						case false:
							return 16301
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16304
						case false:
							return 16307
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16310
						case false:
							return 16313
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16316
						case false:
							return 16319
						}
					}
				}
			}
		case MudBrickWallEastTall:
			switch x.North {
			case MudBrickWallNorthNone:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16322
						case false:
							return 16325
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16328
						case false:
							return 16331
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16334
						case false:
							return 16337
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16340
						case false:
							return 16343
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16346
						case false:
							return 16349
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16352
						case false:
							return 16355
						}
					}
				}
			case MudBrickWallNorthLow:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16358
						case false:
							return 16361
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16364
						case false:
							return 16367
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16370
						case false:
							return 16373
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16376
						case false:
							return 16379
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16382
						case false:
							return 16385
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16388
						case false:
							return 16391
						}
					}
				}
			case MudBrickWallNorthTall:
				switch x.South {
				case MudBrickWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16394
						case false:
							return 16397
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16400
						case false:
							return 16403
						}
					}
				case MudBrickWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16406
						case false:
							return 16409
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16412
						case false:
							return 16415
						}
					}
				case MudBrickWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 16418
						case false:
							return 16421
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 16424
						case false:
							return 16427
						}
					}
				}
			}
		}
	}
	return 16107 // default state
}

type NetherBrickWallWest string

const (
	NetherBrickWallWestNone NetherBrickWallWest = "none"
	NetherBrickWallWestLow  NetherBrickWallWest = "low"
	NetherBrickWallWestTall NetherBrickWallWest = "tall"
)

type NetherBrickWallEast string

const (
	NetherBrickWallEastNone NetherBrickWallEast = "none"
	NetherBrickWallEastLow  NetherBrickWallEast = "low"
	NetherBrickWallEastTall NetherBrickWallEast = "tall"
)

type NetherBrickWallNorth string

const (
	NetherBrickWallNorthNone NetherBrickWallNorth = "none"
	NetherBrickWallNorthLow  NetherBrickWallNorth = "low"
	NetherBrickWallNorthTall NetherBrickWallNorth = "tall"
)

type NetherBrickWallSouth string

const (
	NetherBrickWallSouthNone NetherBrickWallSouth = "none"
	NetherBrickWallSouthLow  NetherBrickWallSouth = "low"
	NetherBrickWallSouthTall NetherBrickWallSouth = "tall"
)

type NetherBrickWall struct {
	Waterlogged bool
	West        NetherBrickWallWest
	East        NetherBrickWallEast
	North       NetherBrickWallNorth
	South       NetherBrickWallSouth
	Up          bool
}

func (x NetherBrickWall) Id() uint16 {
	switch x.South {
	case NetherBrickWallSouthNone:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16428
						case NetherBrickWallNorthLow:
							return 16464
						case NetherBrickWallNorthTall:
							return 16500
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16536
						case NetherBrickWallNorthLow:
							return 16572
						case NetherBrickWallNorthTall:
							return 16608
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16644
						case NetherBrickWallNorthLow:
							return 16680
						case NetherBrickWallNorthTall:
							return 16716
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16429
						case NetherBrickWallNorthLow:
							return 16465
						case NetherBrickWallNorthTall:
							return 16501
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16537
						case NetherBrickWallNorthLow:
							return 16573
						case NetherBrickWallNorthTall:
							return 16609
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16645
						case NetherBrickWallNorthLow:
							return 16681
						case NetherBrickWallNorthTall:
							return 16717
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16430
						case NetherBrickWallNorthLow:
							return 16466
						case NetherBrickWallNorthTall:
							return 16502
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16538
						case NetherBrickWallNorthLow:
							return 16574
						case NetherBrickWallNorthTall:
							return 16610
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16646
						case NetherBrickWallNorthLow:
							return 16682
						case NetherBrickWallNorthTall:
							return 16718
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16431
						case NetherBrickWallNorthLow:
							return 16467
						case NetherBrickWallNorthTall:
							return 16503
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16539
						case NetherBrickWallNorthLow:
							return 16575
						case NetherBrickWallNorthTall:
							return 16611
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16647
						case NetherBrickWallNorthLow:
							return 16683
						case NetherBrickWallNorthTall:
							return 16719
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16432
						case NetherBrickWallNorthLow:
							return 16468
						case NetherBrickWallNorthTall:
							return 16504
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16540
						case NetherBrickWallNorthLow:
							return 16576
						case NetherBrickWallNorthTall:
							return 16612
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16648
						case NetherBrickWallNorthLow:
							return 16684
						case NetherBrickWallNorthTall:
							return 16720
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16433
						case NetherBrickWallNorthLow:
							return 16469
						case NetherBrickWallNorthTall:
							return 16505
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16541
						case NetherBrickWallNorthLow:
							return 16577
						case NetherBrickWallNorthTall:
							return 16613
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16649
						case NetherBrickWallNorthLow:
							return 16685
						case NetherBrickWallNorthTall:
							return 16721
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16434
						case NetherBrickWallNorthLow:
							return 16470
						case NetherBrickWallNorthTall:
							return 16506
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16542
						case NetherBrickWallNorthLow:
							return 16578
						case NetherBrickWallNorthTall:
							return 16614
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16650
						case NetherBrickWallNorthLow:
							return 16686
						case NetherBrickWallNorthTall:
							return 16722
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16435
						case NetherBrickWallNorthLow:
							return 16471
						case NetherBrickWallNorthTall:
							return 16507
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16543
						case NetherBrickWallNorthLow:
							return 16579
						case NetherBrickWallNorthTall:
							return 16615
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16651
						case NetherBrickWallNorthLow:
							return 16687
						case NetherBrickWallNorthTall:
							return 16723
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16436
						case NetherBrickWallNorthLow:
							return 16472
						case NetherBrickWallNorthTall:
							return 16508
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16544
						case NetherBrickWallNorthLow:
							return 16580
						case NetherBrickWallNorthTall:
							return 16616
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16652
						case NetherBrickWallNorthLow:
							return 16688
						case NetherBrickWallNorthTall:
							return 16724
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16437
						case NetherBrickWallNorthLow:
							return 16473
						case NetherBrickWallNorthTall:
							return 16509
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16545
						case NetherBrickWallNorthLow:
							return 16581
						case NetherBrickWallNorthTall:
							return 16617
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16653
						case NetherBrickWallNorthLow:
							return 16689
						case NetherBrickWallNorthTall:
							return 16725
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16438
						case NetherBrickWallNorthLow:
							return 16474
						case NetherBrickWallNorthTall:
							return 16510
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16546
						case NetherBrickWallNorthLow:
							return 16582
						case NetherBrickWallNorthTall:
							return 16618
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16654
						case NetherBrickWallNorthLow:
							return 16690
						case NetherBrickWallNorthTall:
							return 16726
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16439
						case NetherBrickWallNorthLow:
							return 16475
						case NetherBrickWallNorthTall:
							return 16511
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16547
						case NetherBrickWallNorthLow:
							return 16583
						case NetherBrickWallNorthTall:
							return 16619
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16655
						case NetherBrickWallNorthLow:
							return 16691
						case NetherBrickWallNorthTall:
							return 16727
						}
					}
				}
			}
		}
	case NetherBrickWallSouthLow:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16440
						case NetherBrickWallNorthLow:
							return 16476
						case NetherBrickWallNorthTall:
							return 16512
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16548
						case NetherBrickWallNorthLow:
							return 16584
						case NetherBrickWallNorthTall:
							return 16620
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16656
						case NetherBrickWallNorthLow:
							return 16692
						case NetherBrickWallNorthTall:
							return 16728
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16441
						case NetherBrickWallNorthLow:
							return 16477
						case NetherBrickWallNorthTall:
							return 16513
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16549
						case NetherBrickWallNorthLow:
							return 16585
						case NetherBrickWallNorthTall:
							return 16621
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16657
						case NetherBrickWallNorthLow:
							return 16693
						case NetherBrickWallNorthTall:
							return 16729
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16442
						case NetherBrickWallNorthLow:
							return 16478
						case NetherBrickWallNorthTall:
							return 16514
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16550
						case NetherBrickWallNorthLow:
							return 16586
						case NetherBrickWallNorthTall:
							return 16622
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16658
						case NetherBrickWallNorthLow:
							return 16694
						case NetherBrickWallNorthTall:
							return 16730
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16443
						case NetherBrickWallNorthLow:
							return 16479
						case NetherBrickWallNorthTall:
							return 16515
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16551
						case NetherBrickWallNorthLow:
							return 16587
						case NetherBrickWallNorthTall:
							return 16623
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16659
						case NetherBrickWallNorthLow:
							return 16695
						case NetherBrickWallNorthTall:
							return 16731
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16444
						case NetherBrickWallNorthLow:
							return 16480
						case NetherBrickWallNorthTall:
							return 16516
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16552
						case NetherBrickWallNorthLow:
							return 16588
						case NetherBrickWallNorthTall:
							return 16624
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16660
						case NetherBrickWallNorthLow:
							return 16696
						case NetherBrickWallNorthTall:
							return 16732
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16445
						case NetherBrickWallNorthLow:
							return 16481
						case NetherBrickWallNorthTall:
							return 16517
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16553
						case NetherBrickWallNorthLow:
							return 16589
						case NetherBrickWallNorthTall:
							return 16625
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16661
						case NetherBrickWallNorthLow:
							return 16697
						case NetherBrickWallNorthTall:
							return 16733
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16446
						case NetherBrickWallNorthLow:
							return 16482
						case NetherBrickWallNorthTall:
							return 16518
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16554
						case NetherBrickWallNorthLow:
							return 16590
						case NetherBrickWallNorthTall:
							return 16626
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16662
						case NetherBrickWallNorthLow:
							return 16698
						case NetherBrickWallNorthTall:
							return 16734
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16447
						case NetherBrickWallNorthLow:
							return 16483
						case NetherBrickWallNorthTall:
							return 16519
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16555
						case NetherBrickWallNorthLow:
							return 16591
						case NetherBrickWallNorthTall:
							return 16627
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16663
						case NetherBrickWallNorthLow:
							return 16699
						case NetherBrickWallNorthTall:
							return 16735
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16448
						case NetherBrickWallNorthLow:
							return 16484
						case NetherBrickWallNorthTall:
							return 16520
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16556
						case NetherBrickWallNorthLow:
							return 16592
						case NetherBrickWallNorthTall:
							return 16628
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16664
						case NetherBrickWallNorthLow:
							return 16700
						case NetherBrickWallNorthTall:
							return 16736
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16449
						case NetherBrickWallNorthLow:
							return 16485
						case NetherBrickWallNorthTall:
							return 16521
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16557
						case NetherBrickWallNorthLow:
							return 16593
						case NetherBrickWallNorthTall:
							return 16629
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16665
						case NetherBrickWallNorthLow:
							return 16701
						case NetherBrickWallNorthTall:
							return 16737
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16450
						case NetherBrickWallNorthLow:
							return 16486
						case NetherBrickWallNorthTall:
							return 16522
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16558
						case NetherBrickWallNorthLow:
							return 16594
						case NetherBrickWallNorthTall:
							return 16630
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16666
						case NetherBrickWallNorthLow:
							return 16702
						case NetherBrickWallNorthTall:
							return 16738
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16451
						case NetherBrickWallNorthLow:
							return 16487
						case NetherBrickWallNorthTall:
							return 16523
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16559
						case NetherBrickWallNorthLow:
							return 16595
						case NetherBrickWallNorthTall:
							return 16631
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16667
						case NetherBrickWallNorthLow:
							return 16703
						case NetherBrickWallNorthTall:
							return 16739
						}
					}
				}
			}
		}
	case NetherBrickWallSouthTall:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16452
						case NetherBrickWallNorthLow:
							return 16488
						case NetherBrickWallNorthTall:
							return 16524
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16560
						case NetherBrickWallNorthLow:
							return 16596
						case NetherBrickWallNorthTall:
							return 16632
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16668
						case NetherBrickWallNorthLow:
							return 16704
						case NetherBrickWallNorthTall:
							return 16740
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16453
						case NetherBrickWallNorthLow:
							return 16489
						case NetherBrickWallNorthTall:
							return 16525
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16561
						case NetherBrickWallNorthLow:
							return 16597
						case NetherBrickWallNorthTall:
							return 16633
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16669
						case NetherBrickWallNorthLow:
							return 16705
						case NetherBrickWallNorthTall:
							return 16741
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16454
						case NetherBrickWallNorthLow:
							return 16490
						case NetherBrickWallNorthTall:
							return 16526
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16562
						case NetherBrickWallNorthLow:
							return 16598
						case NetherBrickWallNorthTall:
							return 16634
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16670
						case NetherBrickWallNorthLow:
							return 16706
						case NetherBrickWallNorthTall:
							return 16742
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16455
						case NetherBrickWallNorthLow:
							return 16491
						case NetherBrickWallNorthTall:
							return 16527
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16563
						case NetherBrickWallNorthLow:
							return 16599
						case NetherBrickWallNorthTall:
							return 16635
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16671
						case NetherBrickWallNorthLow:
							return 16707
						case NetherBrickWallNorthTall:
							return 16743
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16456
						case NetherBrickWallNorthLow:
							return 16492
						case NetherBrickWallNorthTall:
							return 16528
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16564
						case NetherBrickWallNorthLow:
							return 16600
						case NetherBrickWallNorthTall:
							return 16636
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16672
						case NetherBrickWallNorthLow:
							return 16708
						case NetherBrickWallNorthTall:
							return 16744
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16457
						case NetherBrickWallNorthLow:
							return 16493
						case NetherBrickWallNorthTall:
							return 16529
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16565
						case NetherBrickWallNorthLow:
							return 16601
						case NetherBrickWallNorthTall:
							return 16637
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16673
						case NetherBrickWallNorthLow:
							return 16709
						case NetherBrickWallNorthTall:
							return 16745
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16458
						case NetherBrickWallNorthLow:
							return 16494
						case NetherBrickWallNorthTall:
							return 16530
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16566
						case NetherBrickWallNorthLow:
							return 16602
						case NetherBrickWallNorthTall:
							return 16638
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16674
						case NetherBrickWallNorthLow:
							return 16710
						case NetherBrickWallNorthTall:
							return 16746
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16459
						case NetherBrickWallNorthLow:
							return 16495
						case NetherBrickWallNorthTall:
							return 16531
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16567
						case NetherBrickWallNorthLow:
							return 16603
						case NetherBrickWallNorthTall:
							return 16639
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16675
						case NetherBrickWallNorthLow:
							return 16711
						case NetherBrickWallNorthTall:
							return 16747
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16460
						case NetherBrickWallNorthLow:
							return 16496
						case NetherBrickWallNorthTall:
							return 16532
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16568
						case NetherBrickWallNorthLow:
							return 16604
						case NetherBrickWallNorthTall:
							return 16640
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16676
						case NetherBrickWallNorthLow:
							return 16712
						case NetherBrickWallNorthTall:
							return 16748
						}
					}
				}
			case false:
				switch x.West {
				case NetherBrickWallWestNone:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16461
						case NetherBrickWallNorthLow:
							return 16497
						case NetherBrickWallNorthTall:
							return 16533
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16569
						case NetherBrickWallNorthLow:
							return 16605
						case NetherBrickWallNorthTall:
							return 16641
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16677
						case NetherBrickWallNorthLow:
							return 16713
						case NetherBrickWallNorthTall:
							return 16749
						}
					}
				case NetherBrickWallWestLow:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16462
						case NetherBrickWallNorthLow:
							return 16498
						case NetherBrickWallNorthTall:
							return 16534
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16570
						case NetherBrickWallNorthLow:
							return 16606
						case NetherBrickWallNorthTall:
							return 16642
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16678
						case NetherBrickWallNorthLow:
							return 16714
						case NetherBrickWallNorthTall:
							return 16750
						}
					}
				case NetherBrickWallWestTall:
					switch x.East {
					case NetherBrickWallEastNone:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16463
						case NetherBrickWallNorthLow:
							return 16499
						case NetherBrickWallNorthTall:
							return 16535
						}
					case NetherBrickWallEastLow:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16571
						case NetherBrickWallNorthLow:
							return 16607
						case NetherBrickWallNorthTall:
							return 16643
						}
					case NetherBrickWallEastTall:
						switch x.North {
						case NetherBrickWallNorthNone:
							return 16679
						case NetherBrickWallNorthLow:
							return 16715
						case NetherBrickWallNorthTall:
							return 16751
						}
					}
				}
			}
		}
	}
	return 16431 // default state
}

type AndesiteWallWest string

const (
	AndesiteWallWestNone AndesiteWallWest = "none"
	AndesiteWallWestLow  AndesiteWallWest = "low"
	AndesiteWallWestTall AndesiteWallWest = "tall"
)

type AndesiteWallEast string

const (
	AndesiteWallEastNone AndesiteWallEast = "none"
	AndesiteWallEastLow  AndesiteWallEast = "low"
	AndesiteWallEastTall AndesiteWallEast = "tall"
)

type AndesiteWallNorth string

const (
	AndesiteWallNorthNone AndesiteWallNorth = "none"
	AndesiteWallNorthLow  AndesiteWallNorth = "low"
	AndesiteWallNorthTall AndesiteWallNorth = "tall"
)

type AndesiteWallSouth string

const (
	AndesiteWallSouthNone AndesiteWallSouth = "none"
	AndesiteWallSouthLow  AndesiteWallSouth = "low"
	AndesiteWallSouthTall AndesiteWallSouth = "tall"
)

type AndesiteWall struct {
	West        AndesiteWallWest
	East        AndesiteWallEast
	North       AndesiteWallNorth
	South       AndesiteWallSouth
	Up          bool
	Waterlogged bool
}

func (x AndesiteWall) Id() uint16 {
	switch x.North {
	case AndesiteWallNorthNone:
		switch x.South {
		case AndesiteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16752
						case AndesiteWallEastLow:
							return 16860
						case AndesiteWallEastTall:
							return 16968
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16753
						case AndesiteWallEastLow:
							return 16861
						case AndesiteWallEastTall:
							return 16969
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16754
						case AndesiteWallEastLow:
							return 16862
						case AndesiteWallEastTall:
							return 16970
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16755
						case AndesiteWallEastLow:
							return 16863
						case AndesiteWallEastTall:
							return 16971
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16756
						case AndesiteWallEastLow:
							return 16864
						case AndesiteWallEastTall:
							return 16972
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16757
						case AndesiteWallEastLow:
							return 16865
						case AndesiteWallEastTall:
							return 16973
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16758
						case AndesiteWallEastLow:
							return 16866
						case AndesiteWallEastTall:
							return 16974
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16759
						case AndesiteWallEastLow:
							return 16867
						case AndesiteWallEastTall:
							return 16975
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16760
						case AndesiteWallEastLow:
							return 16868
						case AndesiteWallEastTall:
							return 16976
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16761
						case AndesiteWallEastLow:
							return 16869
						case AndesiteWallEastTall:
							return 16977
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16762
						case AndesiteWallEastLow:
							return 16870
						case AndesiteWallEastTall:
							return 16978
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16763
						case AndesiteWallEastLow:
							return 16871
						case AndesiteWallEastTall:
							return 16979
						}
					}
				}
			}
		case AndesiteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16764
						case AndesiteWallEastLow:
							return 16872
						case AndesiteWallEastTall:
							return 16980
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16765
						case AndesiteWallEastLow:
							return 16873
						case AndesiteWallEastTall:
							return 16981
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16766
						case AndesiteWallEastLow:
							return 16874
						case AndesiteWallEastTall:
							return 16982
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16767
						case AndesiteWallEastLow:
							return 16875
						case AndesiteWallEastTall:
							return 16983
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16768
						case AndesiteWallEastLow:
							return 16876
						case AndesiteWallEastTall:
							return 16984
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16769
						case AndesiteWallEastLow:
							return 16877
						case AndesiteWallEastTall:
							return 16985
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16770
						case AndesiteWallEastLow:
							return 16878
						case AndesiteWallEastTall:
							return 16986
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16771
						case AndesiteWallEastLow:
							return 16879
						case AndesiteWallEastTall:
							return 16987
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16772
						case AndesiteWallEastLow:
							return 16880
						case AndesiteWallEastTall:
							return 16988
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16773
						case AndesiteWallEastLow:
							return 16881
						case AndesiteWallEastTall:
							return 16989
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16774
						case AndesiteWallEastLow:
							return 16882
						case AndesiteWallEastTall:
							return 16990
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16775
						case AndesiteWallEastLow:
							return 16883
						case AndesiteWallEastTall:
							return 16991
						}
					}
				}
			}
		case AndesiteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16776
						case AndesiteWallEastLow:
							return 16884
						case AndesiteWallEastTall:
							return 16992
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16777
						case AndesiteWallEastLow:
							return 16885
						case AndesiteWallEastTall:
							return 16993
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16778
						case AndesiteWallEastLow:
							return 16886
						case AndesiteWallEastTall:
							return 16994
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16779
						case AndesiteWallEastLow:
							return 16887
						case AndesiteWallEastTall:
							return 16995
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16780
						case AndesiteWallEastLow:
							return 16888
						case AndesiteWallEastTall:
							return 16996
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16781
						case AndesiteWallEastLow:
							return 16889
						case AndesiteWallEastTall:
							return 16997
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16782
						case AndesiteWallEastLow:
							return 16890
						case AndesiteWallEastTall:
							return 16998
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16783
						case AndesiteWallEastLow:
							return 16891
						case AndesiteWallEastTall:
							return 16999
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16784
						case AndesiteWallEastLow:
							return 16892
						case AndesiteWallEastTall:
							return 17000
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16785
						case AndesiteWallEastLow:
							return 16893
						case AndesiteWallEastTall:
							return 17001
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16786
						case AndesiteWallEastLow:
							return 16894
						case AndesiteWallEastTall:
							return 17002
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16787
						case AndesiteWallEastLow:
							return 16895
						case AndesiteWallEastTall:
							return 17003
						}
					}
				}
			}
		}
	case AndesiteWallNorthLow:
		switch x.South {
		case AndesiteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16788
						case AndesiteWallEastLow:
							return 16896
						case AndesiteWallEastTall:
							return 17004
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16789
						case AndesiteWallEastLow:
							return 16897
						case AndesiteWallEastTall:
							return 17005
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16790
						case AndesiteWallEastLow:
							return 16898
						case AndesiteWallEastTall:
							return 17006
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16791
						case AndesiteWallEastLow:
							return 16899
						case AndesiteWallEastTall:
							return 17007
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16792
						case AndesiteWallEastLow:
							return 16900
						case AndesiteWallEastTall:
							return 17008
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16793
						case AndesiteWallEastLow:
							return 16901
						case AndesiteWallEastTall:
							return 17009
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16794
						case AndesiteWallEastLow:
							return 16902
						case AndesiteWallEastTall:
							return 17010
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16795
						case AndesiteWallEastLow:
							return 16903
						case AndesiteWallEastTall:
							return 17011
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16796
						case AndesiteWallEastLow:
							return 16904
						case AndesiteWallEastTall:
							return 17012
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16797
						case AndesiteWallEastLow:
							return 16905
						case AndesiteWallEastTall:
							return 17013
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16798
						case AndesiteWallEastLow:
							return 16906
						case AndesiteWallEastTall:
							return 17014
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16799
						case AndesiteWallEastLow:
							return 16907
						case AndesiteWallEastTall:
							return 17015
						}
					}
				}
			}
		case AndesiteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16800
						case AndesiteWallEastLow:
							return 16908
						case AndesiteWallEastTall:
							return 17016
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16801
						case AndesiteWallEastLow:
							return 16909
						case AndesiteWallEastTall:
							return 17017
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16802
						case AndesiteWallEastLow:
							return 16910
						case AndesiteWallEastTall:
							return 17018
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16803
						case AndesiteWallEastLow:
							return 16911
						case AndesiteWallEastTall:
							return 17019
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16804
						case AndesiteWallEastLow:
							return 16912
						case AndesiteWallEastTall:
							return 17020
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16805
						case AndesiteWallEastLow:
							return 16913
						case AndesiteWallEastTall:
							return 17021
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16806
						case AndesiteWallEastLow:
							return 16914
						case AndesiteWallEastTall:
							return 17022
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16807
						case AndesiteWallEastLow:
							return 16915
						case AndesiteWallEastTall:
							return 17023
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16808
						case AndesiteWallEastLow:
							return 16916
						case AndesiteWallEastTall:
							return 17024
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16809
						case AndesiteWallEastLow:
							return 16917
						case AndesiteWallEastTall:
							return 17025
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16810
						case AndesiteWallEastLow:
							return 16918
						case AndesiteWallEastTall:
							return 17026
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16811
						case AndesiteWallEastLow:
							return 16919
						case AndesiteWallEastTall:
							return 17027
						}
					}
				}
			}
		case AndesiteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16812
						case AndesiteWallEastLow:
							return 16920
						case AndesiteWallEastTall:
							return 17028
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16813
						case AndesiteWallEastLow:
							return 16921
						case AndesiteWallEastTall:
							return 17029
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16814
						case AndesiteWallEastLow:
							return 16922
						case AndesiteWallEastTall:
							return 17030
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16815
						case AndesiteWallEastLow:
							return 16923
						case AndesiteWallEastTall:
							return 17031
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16816
						case AndesiteWallEastLow:
							return 16924
						case AndesiteWallEastTall:
							return 17032
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16817
						case AndesiteWallEastLow:
							return 16925
						case AndesiteWallEastTall:
							return 17033
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16818
						case AndesiteWallEastLow:
							return 16926
						case AndesiteWallEastTall:
							return 17034
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16819
						case AndesiteWallEastLow:
							return 16927
						case AndesiteWallEastTall:
							return 17035
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16820
						case AndesiteWallEastLow:
							return 16928
						case AndesiteWallEastTall:
							return 17036
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16821
						case AndesiteWallEastLow:
							return 16929
						case AndesiteWallEastTall:
							return 17037
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16822
						case AndesiteWallEastLow:
							return 16930
						case AndesiteWallEastTall:
							return 17038
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16823
						case AndesiteWallEastLow:
							return 16931
						case AndesiteWallEastTall:
							return 17039
						}
					}
				}
			}
		}
	case AndesiteWallNorthTall:
		switch x.South {
		case AndesiteWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16824
						case AndesiteWallEastLow:
							return 16932
						case AndesiteWallEastTall:
							return 17040
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16825
						case AndesiteWallEastLow:
							return 16933
						case AndesiteWallEastTall:
							return 17041
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16826
						case AndesiteWallEastLow:
							return 16934
						case AndesiteWallEastTall:
							return 17042
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16827
						case AndesiteWallEastLow:
							return 16935
						case AndesiteWallEastTall:
							return 17043
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16828
						case AndesiteWallEastLow:
							return 16936
						case AndesiteWallEastTall:
							return 17044
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16829
						case AndesiteWallEastLow:
							return 16937
						case AndesiteWallEastTall:
							return 17045
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16830
						case AndesiteWallEastLow:
							return 16938
						case AndesiteWallEastTall:
							return 17046
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16831
						case AndesiteWallEastLow:
							return 16939
						case AndesiteWallEastTall:
							return 17047
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16832
						case AndesiteWallEastLow:
							return 16940
						case AndesiteWallEastTall:
							return 17048
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16833
						case AndesiteWallEastLow:
							return 16941
						case AndesiteWallEastTall:
							return 17049
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16834
						case AndesiteWallEastLow:
							return 16942
						case AndesiteWallEastTall:
							return 17050
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16835
						case AndesiteWallEastLow:
							return 16943
						case AndesiteWallEastTall:
							return 17051
						}
					}
				}
			}
		case AndesiteWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16836
						case AndesiteWallEastLow:
							return 16944
						case AndesiteWallEastTall:
							return 17052
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16837
						case AndesiteWallEastLow:
							return 16945
						case AndesiteWallEastTall:
							return 17053
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16838
						case AndesiteWallEastLow:
							return 16946
						case AndesiteWallEastTall:
							return 17054
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16839
						case AndesiteWallEastLow:
							return 16947
						case AndesiteWallEastTall:
							return 17055
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16840
						case AndesiteWallEastLow:
							return 16948
						case AndesiteWallEastTall:
							return 17056
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16841
						case AndesiteWallEastLow:
							return 16949
						case AndesiteWallEastTall:
							return 17057
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16842
						case AndesiteWallEastLow:
							return 16950
						case AndesiteWallEastTall:
							return 17058
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16843
						case AndesiteWallEastLow:
							return 16951
						case AndesiteWallEastTall:
							return 17059
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16844
						case AndesiteWallEastLow:
							return 16952
						case AndesiteWallEastTall:
							return 17060
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16845
						case AndesiteWallEastLow:
							return 16953
						case AndesiteWallEastTall:
							return 17061
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16846
						case AndesiteWallEastLow:
							return 16954
						case AndesiteWallEastTall:
							return 17062
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16847
						case AndesiteWallEastLow:
							return 16955
						case AndesiteWallEastTall:
							return 17063
						}
					}
				}
			}
		case AndesiteWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16848
						case AndesiteWallEastLow:
							return 16956
						case AndesiteWallEastTall:
							return 17064
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16849
						case AndesiteWallEastLow:
							return 16957
						case AndesiteWallEastTall:
							return 17065
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16850
						case AndesiteWallEastLow:
							return 16958
						case AndesiteWallEastTall:
							return 17066
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16851
						case AndesiteWallEastLow:
							return 16959
						case AndesiteWallEastTall:
							return 17067
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16852
						case AndesiteWallEastLow:
							return 16960
						case AndesiteWallEastTall:
							return 17068
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16853
						case AndesiteWallEastLow:
							return 16961
						case AndesiteWallEastTall:
							return 17069
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16854
						case AndesiteWallEastLow:
							return 16962
						case AndesiteWallEastTall:
							return 17070
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16855
						case AndesiteWallEastLow:
							return 16963
						case AndesiteWallEastTall:
							return 17071
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16856
						case AndesiteWallEastLow:
							return 16964
						case AndesiteWallEastTall:
							return 17072
						}
					}
				case false:
					switch x.West {
					case AndesiteWallWestNone:
						switch x.East {
						case AndesiteWallEastNone:
							return 16857
						case AndesiteWallEastLow:
							return 16965
						case AndesiteWallEastTall:
							return 17073
						}
					case AndesiteWallWestLow:
						switch x.East {
						case AndesiteWallEastNone:
							return 16858
						case AndesiteWallEastLow:
							return 16966
						case AndesiteWallEastTall:
							return 17074
						}
					case AndesiteWallWestTall:
						switch x.East {
						case AndesiteWallEastNone:
							return 16859
						case AndesiteWallEastLow:
							return 16967
						case AndesiteWallEastTall:
							return 17075
						}
					}
				}
			}
		}
	}
	return 16755 // default state
}

type RedNetherBrickWallWest string

const (
	RedNetherBrickWallWestNone RedNetherBrickWallWest = "none"
	RedNetherBrickWallWestLow  RedNetherBrickWallWest = "low"
	RedNetherBrickWallWestTall RedNetherBrickWallWest = "tall"
)

type RedNetherBrickWallEast string

const (
	RedNetherBrickWallEastNone RedNetherBrickWallEast = "none"
	RedNetherBrickWallEastLow  RedNetherBrickWallEast = "low"
	RedNetherBrickWallEastTall RedNetherBrickWallEast = "tall"
)

type RedNetherBrickWallNorth string

const (
	RedNetherBrickWallNorthNone RedNetherBrickWallNorth = "none"
	RedNetherBrickWallNorthLow  RedNetherBrickWallNorth = "low"
	RedNetherBrickWallNorthTall RedNetherBrickWallNorth = "tall"
)

type RedNetherBrickWallSouth string

const (
	RedNetherBrickWallSouthNone RedNetherBrickWallSouth = "none"
	RedNetherBrickWallSouthLow  RedNetherBrickWallSouth = "low"
	RedNetherBrickWallSouthTall RedNetherBrickWallSouth = "tall"
)

type RedNetherBrickWall struct {
	West        RedNetherBrickWallWest
	East        RedNetherBrickWallEast
	North       RedNetherBrickWallNorth
	South       RedNetherBrickWallSouth
	Up          bool
	Waterlogged bool
}

func (x RedNetherBrickWall) Id() uint16 {
	switch x.Up {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case RedNetherBrickWallWestNone:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17076
						case RedNetherBrickWallSouthLow:
							return 17088
						case RedNetherBrickWallSouthTall:
							return 17100
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17112
						case RedNetherBrickWallSouthLow:
							return 17124
						case RedNetherBrickWallSouthTall:
							return 17136
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17148
						case RedNetherBrickWallSouthLow:
							return 17160
						case RedNetherBrickWallSouthTall:
							return 17172
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17184
						case RedNetherBrickWallSouthLow:
							return 17196
						case RedNetherBrickWallSouthTall:
							return 17208
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17220
						case RedNetherBrickWallSouthLow:
							return 17232
						case RedNetherBrickWallSouthTall:
							return 17244
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17256
						case RedNetherBrickWallSouthLow:
							return 17268
						case RedNetherBrickWallSouthTall:
							return 17280
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17292
						case RedNetherBrickWallSouthLow:
							return 17304
						case RedNetherBrickWallSouthTall:
							return 17316
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17328
						case RedNetherBrickWallSouthLow:
							return 17340
						case RedNetherBrickWallSouthTall:
							return 17352
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17364
						case RedNetherBrickWallSouthLow:
							return 17376
						case RedNetherBrickWallSouthTall:
							return 17388
						}
					}
				}
			case RedNetherBrickWallWestLow:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17077
						case RedNetherBrickWallSouthLow:
							return 17089
						case RedNetherBrickWallSouthTall:
							return 17101
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17113
						case RedNetherBrickWallSouthLow:
							return 17125
						case RedNetherBrickWallSouthTall:
							return 17137
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17149
						case RedNetherBrickWallSouthLow:
							return 17161
						case RedNetherBrickWallSouthTall:
							return 17173
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17185
						case RedNetherBrickWallSouthLow:
							return 17197
						case RedNetherBrickWallSouthTall:
							return 17209
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17221
						case RedNetherBrickWallSouthLow:
							return 17233
						case RedNetherBrickWallSouthTall:
							return 17245
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17257
						case RedNetherBrickWallSouthLow:
							return 17269
						case RedNetherBrickWallSouthTall:
							return 17281
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17293
						case RedNetherBrickWallSouthLow:
							return 17305
						case RedNetherBrickWallSouthTall:
							return 17317
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17329
						case RedNetherBrickWallSouthLow:
							return 17341
						case RedNetherBrickWallSouthTall:
							return 17353
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17365
						case RedNetherBrickWallSouthLow:
							return 17377
						case RedNetherBrickWallSouthTall:
							return 17389
						}
					}
				}
			case RedNetherBrickWallWestTall:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17078
						case RedNetherBrickWallSouthLow:
							return 17090
						case RedNetherBrickWallSouthTall:
							return 17102
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17114
						case RedNetherBrickWallSouthLow:
							return 17126
						case RedNetherBrickWallSouthTall:
							return 17138
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17150
						case RedNetherBrickWallSouthLow:
							return 17162
						case RedNetherBrickWallSouthTall:
							return 17174
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17186
						case RedNetherBrickWallSouthLow:
							return 17198
						case RedNetherBrickWallSouthTall:
							return 17210
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17222
						case RedNetherBrickWallSouthLow:
							return 17234
						case RedNetherBrickWallSouthTall:
							return 17246
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17258
						case RedNetherBrickWallSouthLow:
							return 17270
						case RedNetherBrickWallSouthTall:
							return 17282
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17294
						case RedNetherBrickWallSouthLow:
							return 17306
						case RedNetherBrickWallSouthTall:
							return 17318
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17330
						case RedNetherBrickWallSouthLow:
							return 17342
						case RedNetherBrickWallSouthTall:
							return 17354
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17366
						case RedNetherBrickWallSouthLow:
							return 17378
						case RedNetherBrickWallSouthTall:
							return 17390
						}
					}
				}
			}
		case false:
			switch x.West {
			case RedNetherBrickWallWestNone:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17079
						case RedNetherBrickWallSouthLow:
							return 17091
						case RedNetherBrickWallSouthTall:
							return 17103
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17115
						case RedNetherBrickWallSouthLow:
							return 17127
						case RedNetherBrickWallSouthTall:
							return 17139
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17151
						case RedNetherBrickWallSouthLow:
							return 17163
						case RedNetherBrickWallSouthTall:
							return 17175
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17187
						case RedNetherBrickWallSouthLow:
							return 17199
						case RedNetherBrickWallSouthTall:
							return 17211
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17223
						case RedNetherBrickWallSouthLow:
							return 17235
						case RedNetherBrickWallSouthTall:
							return 17247
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17259
						case RedNetherBrickWallSouthLow:
							return 17271
						case RedNetherBrickWallSouthTall:
							return 17283
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17295
						case RedNetherBrickWallSouthLow:
							return 17307
						case RedNetherBrickWallSouthTall:
							return 17319
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17331
						case RedNetherBrickWallSouthLow:
							return 17343
						case RedNetherBrickWallSouthTall:
							return 17355
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17367
						case RedNetherBrickWallSouthLow:
							return 17379
						case RedNetherBrickWallSouthTall:
							return 17391
						}
					}
				}
			case RedNetherBrickWallWestLow:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17080
						case RedNetherBrickWallSouthLow:
							return 17092
						case RedNetherBrickWallSouthTall:
							return 17104
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17116
						case RedNetherBrickWallSouthLow:
							return 17128
						case RedNetherBrickWallSouthTall:
							return 17140
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17152
						case RedNetherBrickWallSouthLow:
							return 17164
						case RedNetherBrickWallSouthTall:
							return 17176
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17188
						case RedNetherBrickWallSouthLow:
							return 17200
						case RedNetherBrickWallSouthTall:
							return 17212
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17224
						case RedNetherBrickWallSouthLow:
							return 17236
						case RedNetherBrickWallSouthTall:
							return 17248
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17260
						case RedNetherBrickWallSouthLow:
							return 17272
						case RedNetherBrickWallSouthTall:
							return 17284
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17296
						case RedNetherBrickWallSouthLow:
							return 17308
						case RedNetherBrickWallSouthTall:
							return 17320
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17332
						case RedNetherBrickWallSouthLow:
							return 17344
						case RedNetherBrickWallSouthTall:
							return 17356
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17368
						case RedNetherBrickWallSouthLow:
							return 17380
						case RedNetherBrickWallSouthTall:
							return 17392
						}
					}
				}
			case RedNetherBrickWallWestTall:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17081
						case RedNetherBrickWallSouthLow:
							return 17093
						case RedNetherBrickWallSouthTall:
							return 17105
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17117
						case RedNetherBrickWallSouthLow:
							return 17129
						case RedNetherBrickWallSouthTall:
							return 17141
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17153
						case RedNetherBrickWallSouthLow:
							return 17165
						case RedNetherBrickWallSouthTall:
							return 17177
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17189
						case RedNetherBrickWallSouthLow:
							return 17201
						case RedNetherBrickWallSouthTall:
							return 17213
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17225
						case RedNetherBrickWallSouthLow:
							return 17237
						case RedNetherBrickWallSouthTall:
							return 17249
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17261
						case RedNetherBrickWallSouthLow:
							return 17273
						case RedNetherBrickWallSouthTall:
							return 17285
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17297
						case RedNetherBrickWallSouthLow:
							return 17309
						case RedNetherBrickWallSouthTall:
							return 17321
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17333
						case RedNetherBrickWallSouthLow:
							return 17345
						case RedNetherBrickWallSouthTall:
							return 17357
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17369
						case RedNetherBrickWallSouthLow:
							return 17381
						case RedNetherBrickWallSouthTall:
							return 17393
						}
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case RedNetherBrickWallWestNone:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17082
						case RedNetherBrickWallSouthLow:
							return 17094
						case RedNetherBrickWallSouthTall:
							return 17106
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17118
						case RedNetherBrickWallSouthLow:
							return 17130
						case RedNetherBrickWallSouthTall:
							return 17142
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17154
						case RedNetherBrickWallSouthLow:
							return 17166
						case RedNetherBrickWallSouthTall:
							return 17178
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17190
						case RedNetherBrickWallSouthLow:
							return 17202
						case RedNetherBrickWallSouthTall:
							return 17214
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17226
						case RedNetherBrickWallSouthLow:
							return 17238
						case RedNetherBrickWallSouthTall:
							return 17250
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17262
						case RedNetherBrickWallSouthLow:
							return 17274
						case RedNetherBrickWallSouthTall:
							return 17286
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17298
						case RedNetherBrickWallSouthLow:
							return 17310
						case RedNetherBrickWallSouthTall:
							return 17322
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17334
						case RedNetherBrickWallSouthLow:
							return 17346
						case RedNetherBrickWallSouthTall:
							return 17358
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17370
						case RedNetherBrickWallSouthLow:
							return 17382
						case RedNetherBrickWallSouthTall:
							return 17394
						}
					}
				}
			case RedNetherBrickWallWestLow:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17083
						case RedNetherBrickWallSouthLow:
							return 17095
						case RedNetherBrickWallSouthTall:
							return 17107
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17119
						case RedNetherBrickWallSouthLow:
							return 17131
						case RedNetherBrickWallSouthTall:
							return 17143
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17155
						case RedNetherBrickWallSouthLow:
							return 17167
						case RedNetherBrickWallSouthTall:
							return 17179
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17191
						case RedNetherBrickWallSouthLow:
							return 17203
						case RedNetherBrickWallSouthTall:
							return 17215
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17227
						case RedNetherBrickWallSouthLow:
							return 17239
						case RedNetherBrickWallSouthTall:
							return 17251
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17263
						case RedNetherBrickWallSouthLow:
							return 17275
						case RedNetherBrickWallSouthTall:
							return 17287
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17299
						case RedNetherBrickWallSouthLow:
							return 17311
						case RedNetherBrickWallSouthTall:
							return 17323
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17335
						case RedNetherBrickWallSouthLow:
							return 17347
						case RedNetherBrickWallSouthTall:
							return 17359
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17371
						case RedNetherBrickWallSouthLow:
							return 17383
						case RedNetherBrickWallSouthTall:
							return 17395
						}
					}
				}
			case RedNetherBrickWallWestTall:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17084
						case RedNetherBrickWallSouthLow:
							return 17096
						case RedNetherBrickWallSouthTall:
							return 17108
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17120
						case RedNetherBrickWallSouthLow:
							return 17132
						case RedNetherBrickWallSouthTall:
							return 17144
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17156
						case RedNetherBrickWallSouthLow:
							return 17168
						case RedNetherBrickWallSouthTall:
							return 17180
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17192
						case RedNetherBrickWallSouthLow:
							return 17204
						case RedNetherBrickWallSouthTall:
							return 17216
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17228
						case RedNetherBrickWallSouthLow:
							return 17240
						case RedNetherBrickWallSouthTall:
							return 17252
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17264
						case RedNetherBrickWallSouthLow:
							return 17276
						case RedNetherBrickWallSouthTall:
							return 17288
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17300
						case RedNetherBrickWallSouthLow:
							return 17312
						case RedNetherBrickWallSouthTall:
							return 17324
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17336
						case RedNetherBrickWallSouthLow:
							return 17348
						case RedNetherBrickWallSouthTall:
							return 17360
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17372
						case RedNetherBrickWallSouthLow:
							return 17384
						case RedNetherBrickWallSouthTall:
							return 17396
						}
					}
				}
			}
		case false:
			switch x.West {
			case RedNetherBrickWallWestNone:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17085
						case RedNetherBrickWallSouthLow:
							return 17097
						case RedNetherBrickWallSouthTall:
							return 17109
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17121
						case RedNetherBrickWallSouthLow:
							return 17133
						case RedNetherBrickWallSouthTall:
							return 17145
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17157
						case RedNetherBrickWallSouthLow:
							return 17169
						case RedNetherBrickWallSouthTall:
							return 17181
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17193
						case RedNetherBrickWallSouthLow:
							return 17205
						case RedNetherBrickWallSouthTall:
							return 17217
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17229
						case RedNetherBrickWallSouthLow:
							return 17241
						case RedNetherBrickWallSouthTall:
							return 17253
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17265
						case RedNetherBrickWallSouthLow:
							return 17277
						case RedNetherBrickWallSouthTall:
							return 17289
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17301
						case RedNetherBrickWallSouthLow:
							return 17313
						case RedNetherBrickWallSouthTall:
							return 17325
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17337
						case RedNetherBrickWallSouthLow:
							return 17349
						case RedNetherBrickWallSouthTall:
							return 17361
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17373
						case RedNetherBrickWallSouthLow:
							return 17385
						case RedNetherBrickWallSouthTall:
							return 17397
						}
					}
				}
			case RedNetherBrickWallWestLow:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17086
						case RedNetherBrickWallSouthLow:
							return 17098
						case RedNetherBrickWallSouthTall:
							return 17110
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17122
						case RedNetherBrickWallSouthLow:
							return 17134
						case RedNetherBrickWallSouthTall:
							return 17146
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17158
						case RedNetherBrickWallSouthLow:
							return 17170
						case RedNetherBrickWallSouthTall:
							return 17182
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17194
						case RedNetherBrickWallSouthLow:
							return 17206
						case RedNetherBrickWallSouthTall:
							return 17218
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17230
						case RedNetherBrickWallSouthLow:
							return 17242
						case RedNetherBrickWallSouthTall:
							return 17254
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17266
						case RedNetherBrickWallSouthLow:
							return 17278
						case RedNetherBrickWallSouthTall:
							return 17290
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17302
						case RedNetherBrickWallSouthLow:
							return 17314
						case RedNetherBrickWallSouthTall:
							return 17326
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17338
						case RedNetherBrickWallSouthLow:
							return 17350
						case RedNetherBrickWallSouthTall:
							return 17362
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17374
						case RedNetherBrickWallSouthLow:
							return 17386
						case RedNetherBrickWallSouthTall:
							return 17398
						}
					}
				}
			case RedNetherBrickWallWestTall:
				switch x.East {
				case RedNetherBrickWallEastNone:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17087
						case RedNetherBrickWallSouthLow:
							return 17099
						case RedNetherBrickWallSouthTall:
							return 17111
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17123
						case RedNetherBrickWallSouthLow:
							return 17135
						case RedNetherBrickWallSouthTall:
							return 17147
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17159
						case RedNetherBrickWallSouthLow:
							return 17171
						case RedNetherBrickWallSouthTall:
							return 17183
						}
					}
				case RedNetherBrickWallEastLow:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17195
						case RedNetherBrickWallSouthLow:
							return 17207
						case RedNetherBrickWallSouthTall:
							return 17219
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17231
						case RedNetherBrickWallSouthLow:
							return 17243
						case RedNetherBrickWallSouthTall:
							return 17255
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17267
						case RedNetherBrickWallSouthLow:
							return 17279
						case RedNetherBrickWallSouthTall:
							return 17291
						}
					}
				case RedNetherBrickWallEastTall:
					switch x.North {
					case RedNetherBrickWallNorthNone:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17303
						case RedNetherBrickWallSouthLow:
							return 17315
						case RedNetherBrickWallSouthTall:
							return 17327
						}
					case RedNetherBrickWallNorthLow:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17339
						case RedNetherBrickWallSouthLow:
							return 17351
						case RedNetherBrickWallSouthTall:
							return 17363
						}
					case RedNetherBrickWallNorthTall:
						switch x.South {
						case RedNetherBrickWallSouthNone:
							return 17375
						case RedNetherBrickWallSouthLow:
							return 17387
						case RedNetherBrickWallSouthTall:
							return 17399
						}
					}
				}
			}
		}
	}
	return 17079 // default state
}

type SandstoneWallEast string

const (
	SandstoneWallEastNone SandstoneWallEast = "none"
	SandstoneWallEastLow  SandstoneWallEast = "low"
	SandstoneWallEastTall SandstoneWallEast = "tall"
)

type SandstoneWallNorth string

const (
	SandstoneWallNorthNone SandstoneWallNorth = "none"
	SandstoneWallNorthLow  SandstoneWallNorth = "low"
	SandstoneWallNorthTall SandstoneWallNorth = "tall"
)

type SandstoneWallSouth string

const (
	SandstoneWallSouthNone SandstoneWallSouth = "none"
	SandstoneWallSouthLow  SandstoneWallSouth = "low"
	SandstoneWallSouthTall SandstoneWallSouth = "tall"
)

type SandstoneWallWest string

const (
	SandstoneWallWestNone SandstoneWallWest = "none"
	SandstoneWallWestLow  SandstoneWallWest = "low"
	SandstoneWallWestTall SandstoneWallWest = "tall"
)

type SandstoneWall struct {
	East        SandstoneWallEast
	North       SandstoneWallNorth
	South       SandstoneWallSouth
	Up          bool
	Waterlogged bool
	West        SandstoneWallWest
}

func (x SandstoneWall) Id() uint16 {
	switch x.Up {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case SandstoneWallWestNone:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17400
						case SandstoneWallSouthLow:
							return 17412
						case SandstoneWallSouthTall:
							return 17424
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17436
						case SandstoneWallSouthLow:
							return 17448
						case SandstoneWallSouthTall:
							return 17460
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17472
						case SandstoneWallSouthLow:
							return 17484
						case SandstoneWallSouthTall:
							return 17496
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17508
						case SandstoneWallSouthLow:
							return 17520
						case SandstoneWallSouthTall:
							return 17532
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17544
						case SandstoneWallSouthLow:
							return 17556
						case SandstoneWallSouthTall:
							return 17568
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17580
						case SandstoneWallSouthLow:
							return 17592
						case SandstoneWallSouthTall:
							return 17604
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17616
						case SandstoneWallSouthLow:
							return 17628
						case SandstoneWallSouthTall:
							return 17640
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17652
						case SandstoneWallSouthLow:
							return 17664
						case SandstoneWallSouthTall:
							return 17676
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17688
						case SandstoneWallSouthLow:
							return 17700
						case SandstoneWallSouthTall:
							return 17712
						}
					}
				}
			case SandstoneWallWestLow:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17401
						case SandstoneWallSouthLow:
							return 17413
						case SandstoneWallSouthTall:
							return 17425
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17437
						case SandstoneWallSouthLow:
							return 17449
						case SandstoneWallSouthTall:
							return 17461
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17473
						case SandstoneWallSouthLow:
							return 17485
						case SandstoneWallSouthTall:
							return 17497
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17509
						case SandstoneWallSouthLow:
							return 17521
						case SandstoneWallSouthTall:
							return 17533
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17545
						case SandstoneWallSouthLow:
							return 17557
						case SandstoneWallSouthTall:
							return 17569
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17581
						case SandstoneWallSouthLow:
							return 17593
						case SandstoneWallSouthTall:
							return 17605
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17617
						case SandstoneWallSouthLow:
							return 17629
						case SandstoneWallSouthTall:
							return 17641
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17653
						case SandstoneWallSouthLow:
							return 17665
						case SandstoneWallSouthTall:
							return 17677
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17689
						case SandstoneWallSouthLow:
							return 17701
						case SandstoneWallSouthTall:
							return 17713
						}
					}
				}
			case SandstoneWallWestTall:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17402
						case SandstoneWallSouthLow:
							return 17414
						case SandstoneWallSouthTall:
							return 17426
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17438
						case SandstoneWallSouthLow:
							return 17450
						case SandstoneWallSouthTall:
							return 17462
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17474
						case SandstoneWallSouthLow:
							return 17486
						case SandstoneWallSouthTall:
							return 17498
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17510
						case SandstoneWallSouthLow:
							return 17522
						case SandstoneWallSouthTall:
							return 17534
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17546
						case SandstoneWallSouthLow:
							return 17558
						case SandstoneWallSouthTall:
							return 17570
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17582
						case SandstoneWallSouthLow:
							return 17594
						case SandstoneWallSouthTall:
							return 17606
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17618
						case SandstoneWallSouthLow:
							return 17630
						case SandstoneWallSouthTall:
							return 17642
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17654
						case SandstoneWallSouthLow:
							return 17666
						case SandstoneWallSouthTall:
							return 17678
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17690
						case SandstoneWallSouthLow:
							return 17702
						case SandstoneWallSouthTall:
							return 17714
						}
					}
				}
			}
		case false:
			switch x.West {
			case SandstoneWallWestNone:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17403
						case SandstoneWallSouthLow:
							return 17415
						case SandstoneWallSouthTall:
							return 17427
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17439
						case SandstoneWallSouthLow:
							return 17451
						case SandstoneWallSouthTall:
							return 17463
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17475
						case SandstoneWallSouthLow:
							return 17487
						case SandstoneWallSouthTall:
							return 17499
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17511
						case SandstoneWallSouthLow:
							return 17523
						case SandstoneWallSouthTall:
							return 17535
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17547
						case SandstoneWallSouthLow:
							return 17559
						case SandstoneWallSouthTall:
							return 17571
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17583
						case SandstoneWallSouthLow:
							return 17595
						case SandstoneWallSouthTall:
							return 17607
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17619
						case SandstoneWallSouthLow:
							return 17631
						case SandstoneWallSouthTall:
							return 17643
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17655
						case SandstoneWallSouthLow:
							return 17667
						case SandstoneWallSouthTall:
							return 17679
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17691
						case SandstoneWallSouthLow:
							return 17703
						case SandstoneWallSouthTall:
							return 17715
						}
					}
				}
			case SandstoneWallWestLow:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17404
						case SandstoneWallSouthLow:
							return 17416
						case SandstoneWallSouthTall:
							return 17428
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17440
						case SandstoneWallSouthLow:
							return 17452
						case SandstoneWallSouthTall:
							return 17464
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17476
						case SandstoneWallSouthLow:
							return 17488
						case SandstoneWallSouthTall:
							return 17500
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17512
						case SandstoneWallSouthLow:
							return 17524
						case SandstoneWallSouthTall:
							return 17536
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17548
						case SandstoneWallSouthLow:
							return 17560
						case SandstoneWallSouthTall:
							return 17572
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17584
						case SandstoneWallSouthLow:
							return 17596
						case SandstoneWallSouthTall:
							return 17608
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17620
						case SandstoneWallSouthLow:
							return 17632
						case SandstoneWallSouthTall:
							return 17644
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17656
						case SandstoneWallSouthLow:
							return 17668
						case SandstoneWallSouthTall:
							return 17680
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17692
						case SandstoneWallSouthLow:
							return 17704
						case SandstoneWallSouthTall:
							return 17716
						}
					}
				}
			case SandstoneWallWestTall:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17405
						case SandstoneWallSouthLow:
							return 17417
						case SandstoneWallSouthTall:
							return 17429
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17441
						case SandstoneWallSouthLow:
							return 17453
						case SandstoneWallSouthTall:
							return 17465
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17477
						case SandstoneWallSouthLow:
							return 17489
						case SandstoneWallSouthTall:
							return 17501
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17513
						case SandstoneWallSouthLow:
							return 17525
						case SandstoneWallSouthTall:
							return 17537
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17549
						case SandstoneWallSouthLow:
							return 17561
						case SandstoneWallSouthTall:
							return 17573
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17585
						case SandstoneWallSouthLow:
							return 17597
						case SandstoneWallSouthTall:
							return 17609
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17621
						case SandstoneWallSouthLow:
							return 17633
						case SandstoneWallSouthTall:
							return 17645
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17657
						case SandstoneWallSouthLow:
							return 17669
						case SandstoneWallSouthTall:
							return 17681
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17693
						case SandstoneWallSouthLow:
							return 17705
						case SandstoneWallSouthTall:
							return 17717
						}
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case SandstoneWallWestNone:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17406
						case SandstoneWallSouthLow:
							return 17418
						case SandstoneWallSouthTall:
							return 17430
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17442
						case SandstoneWallSouthLow:
							return 17454
						case SandstoneWallSouthTall:
							return 17466
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17478
						case SandstoneWallSouthLow:
							return 17490
						case SandstoneWallSouthTall:
							return 17502
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17514
						case SandstoneWallSouthLow:
							return 17526
						case SandstoneWallSouthTall:
							return 17538
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17550
						case SandstoneWallSouthLow:
							return 17562
						case SandstoneWallSouthTall:
							return 17574
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17586
						case SandstoneWallSouthLow:
							return 17598
						case SandstoneWallSouthTall:
							return 17610
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17622
						case SandstoneWallSouthLow:
							return 17634
						case SandstoneWallSouthTall:
							return 17646
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17658
						case SandstoneWallSouthLow:
							return 17670
						case SandstoneWallSouthTall:
							return 17682
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17694
						case SandstoneWallSouthLow:
							return 17706
						case SandstoneWallSouthTall:
							return 17718
						}
					}
				}
			case SandstoneWallWestLow:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17407
						case SandstoneWallSouthLow:
							return 17419
						case SandstoneWallSouthTall:
							return 17431
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17443
						case SandstoneWallSouthLow:
							return 17455
						case SandstoneWallSouthTall:
							return 17467
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17479
						case SandstoneWallSouthLow:
							return 17491
						case SandstoneWallSouthTall:
							return 17503
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17515
						case SandstoneWallSouthLow:
							return 17527
						case SandstoneWallSouthTall:
							return 17539
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17551
						case SandstoneWallSouthLow:
							return 17563
						case SandstoneWallSouthTall:
							return 17575
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17587
						case SandstoneWallSouthLow:
							return 17599
						case SandstoneWallSouthTall:
							return 17611
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17623
						case SandstoneWallSouthLow:
							return 17635
						case SandstoneWallSouthTall:
							return 17647
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17659
						case SandstoneWallSouthLow:
							return 17671
						case SandstoneWallSouthTall:
							return 17683
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17695
						case SandstoneWallSouthLow:
							return 17707
						case SandstoneWallSouthTall:
							return 17719
						}
					}
				}
			case SandstoneWallWestTall:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17408
						case SandstoneWallSouthLow:
							return 17420
						case SandstoneWallSouthTall:
							return 17432
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17444
						case SandstoneWallSouthLow:
							return 17456
						case SandstoneWallSouthTall:
							return 17468
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17480
						case SandstoneWallSouthLow:
							return 17492
						case SandstoneWallSouthTall:
							return 17504
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17516
						case SandstoneWallSouthLow:
							return 17528
						case SandstoneWallSouthTall:
							return 17540
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17552
						case SandstoneWallSouthLow:
							return 17564
						case SandstoneWallSouthTall:
							return 17576
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17588
						case SandstoneWallSouthLow:
							return 17600
						case SandstoneWallSouthTall:
							return 17612
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17624
						case SandstoneWallSouthLow:
							return 17636
						case SandstoneWallSouthTall:
							return 17648
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17660
						case SandstoneWallSouthLow:
							return 17672
						case SandstoneWallSouthTall:
							return 17684
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17696
						case SandstoneWallSouthLow:
							return 17708
						case SandstoneWallSouthTall:
							return 17720
						}
					}
				}
			}
		case false:
			switch x.West {
			case SandstoneWallWestNone:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17409
						case SandstoneWallSouthLow:
							return 17421
						case SandstoneWallSouthTall:
							return 17433
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17445
						case SandstoneWallSouthLow:
							return 17457
						case SandstoneWallSouthTall:
							return 17469
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17481
						case SandstoneWallSouthLow:
							return 17493
						case SandstoneWallSouthTall:
							return 17505
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17517
						case SandstoneWallSouthLow:
							return 17529
						case SandstoneWallSouthTall:
							return 17541
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17553
						case SandstoneWallSouthLow:
							return 17565
						case SandstoneWallSouthTall:
							return 17577
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17589
						case SandstoneWallSouthLow:
							return 17601
						case SandstoneWallSouthTall:
							return 17613
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17625
						case SandstoneWallSouthLow:
							return 17637
						case SandstoneWallSouthTall:
							return 17649
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17661
						case SandstoneWallSouthLow:
							return 17673
						case SandstoneWallSouthTall:
							return 17685
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17697
						case SandstoneWallSouthLow:
							return 17709
						case SandstoneWallSouthTall:
							return 17721
						}
					}
				}
			case SandstoneWallWestLow:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17410
						case SandstoneWallSouthLow:
							return 17422
						case SandstoneWallSouthTall:
							return 17434
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17446
						case SandstoneWallSouthLow:
							return 17458
						case SandstoneWallSouthTall:
							return 17470
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17482
						case SandstoneWallSouthLow:
							return 17494
						case SandstoneWallSouthTall:
							return 17506
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17518
						case SandstoneWallSouthLow:
							return 17530
						case SandstoneWallSouthTall:
							return 17542
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17554
						case SandstoneWallSouthLow:
							return 17566
						case SandstoneWallSouthTall:
							return 17578
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17590
						case SandstoneWallSouthLow:
							return 17602
						case SandstoneWallSouthTall:
							return 17614
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17626
						case SandstoneWallSouthLow:
							return 17638
						case SandstoneWallSouthTall:
							return 17650
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17662
						case SandstoneWallSouthLow:
							return 17674
						case SandstoneWallSouthTall:
							return 17686
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17698
						case SandstoneWallSouthLow:
							return 17710
						case SandstoneWallSouthTall:
							return 17722
						}
					}
				}
			case SandstoneWallWestTall:
				switch x.East {
				case SandstoneWallEastNone:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17411
						case SandstoneWallSouthLow:
							return 17423
						case SandstoneWallSouthTall:
							return 17435
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17447
						case SandstoneWallSouthLow:
							return 17459
						case SandstoneWallSouthTall:
							return 17471
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17483
						case SandstoneWallSouthLow:
							return 17495
						case SandstoneWallSouthTall:
							return 17507
						}
					}
				case SandstoneWallEastLow:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17519
						case SandstoneWallSouthLow:
							return 17531
						case SandstoneWallSouthTall:
							return 17543
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17555
						case SandstoneWallSouthLow:
							return 17567
						case SandstoneWallSouthTall:
							return 17579
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17591
						case SandstoneWallSouthLow:
							return 17603
						case SandstoneWallSouthTall:
							return 17615
						}
					}
				case SandstoneWallEastTall:
					switch x.North {
					case SandstoneWallNorthNone:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17627
						case SandstoneWallSouthLow:
							return 17639
						case SandstoneWallSouthTall:
							return 17651
						}
					case SandstoneWallNorthLow:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17663
						case SandstoneWallSouthLow:
							return 17675
						case SandstoneWallSouthTall:
							return 17687
						}
					case SandstoneWallNorthTall:
						switch x.South {
						case SandstoneWallSouthNone:
							return 17699
						case SandstoneWallSouthLow:
							return 17711
						case SandstoneWallSouthTall:
							return 17723
						}
					}
				}
			}
		}
	}
	return 17403 // default state
}

type EndStoneBrickWallWest string

const (
	EndStoneBrickWallWestNone EndStoneBrickWallWest = "none"
	EndStoneBrickWallWestLow  EndStoneBrickWallWest = "low"
	EndStoneBrickWallWestTall EndStoneBrickWallWest = "tall"
)

type EndStoneBrickWallEast string

const (
	EndStoneBrickWallEastNone EndStoneBrickWallEast = "none"
	EndStoneBrickWallEastLow  EndStoneBrickWallEast = "low"
	EndStoneBrickWallEastTall EndStoneBrickWallEast = "tall"
)

type EndStoneBrickWallNorth string

const (
	EndStoneBrickWallNorthNone EndStoneBrickWallNorth = "none"
	EndStoneBrickWallNorthLow  EndStoneBrickWallNorth = "low"
	EndStoneBrickWallNorthTall EndStoneBrickWallNorth = "tall"
)

type EndStoneBrickWallSouth string

const (
	EndStoneBrickWallSouthNone EndStoneBrickWallSouth = "none"
	EndStoneBrickWallSouthLow  EndStoneBrickWallSouth = "low"
	EndStoneBrickWallSouthTall EndStoneBrickWallSouth = "tall"
)

type EndStoneBrickWall struct {
	Up          bool
	Waterlogged bool
	West        EndStoneBrickWallWest
	East        EndStoneBrickWallEast
	North       EndStoneBrickWallNorth
	South       EndStoneBrickWallSouth
}

func (x EndStoneBrickWall) Id() uint16 {
	switch x.East {
	case EndStoneBrickWallEastNone:
		switch x.North {
		case EndStoneBrickWallNorthNone:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17724
						case EndStoneBrickWallWestLow:
							return 17725
						case EndStoneBrickWallWestTall:
							return 17726
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17727
						case EndStoneBrickWallWestLow:
							return 17728
						case EndStoneBrickWallWestTall:
							return 17729
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17730
						case EndStoneBrickWallWestLow:
							return 17731
						case EndStoneBrickWallWestTall:
							return 17732
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17733
						case EndStoneBrickWallWestLow:
							return 17734
						case EndStoneBrickWallWestTall:
							return 17735
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17736
						case EndStoneBrickWallWestLow:
							return 17737
						case EndStoneBrickWallWestTall:
							return 17738
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17739
						case EndStoneBrickWallWestLow:
							return 17740
						case EndStoneBrickWallWestTall:
							return 17741
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17742
						case EndStoneBrickWallWestLow:
							return 17743
						case EndStoneBrickWallWestTall:
							return 17744
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17745
						case EndStoneBrickWallWestLow:
							return 17746
						case EndStoneBrickWallWestTall:
							return 17747
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17748
						case EndStoneBrickWallWestLow:
							return 17749
						case EndStoneBrickWallWestTall:
							return 17750
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17751
						case EndStoneBrickWallWestLow:
							return 17752
						case EndStoneBrickWallWestTall:
							return 17753
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17754
						case EndStoneBrickWallWestLow:
							return 17755
						case EndStoneBrickWallWestTall:
							return 17756
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17757
						case EndStoneBrickWallWestLow:
							return 17758
						case EndStoneBrickWallWestTall:
							return 17759
						}
					}
				}
			}
		case EndStoneBrickWallNorthLow:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17760
						case EndStoneBrickWallWestLow:
							return 17761
						case EndStoneBrickWallWestTall:
							return 17762
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17763
						case EndStoneBrickWallWestLow:
							return 17764
						case EndStoneBrickWallWestTall:
							return 17765
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17766
						case EndStoneBrickWallWestLow:
							return 17767
						case EndStoneBrickWallWestTall:
							return 17768
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17769
						case EndStoneBrickWallWestLow:
							return 17770
						case EndStoneBrickWallWestTall:
							return 17771
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17772
						case EndStoneBrickWallWestLow:
							return 17773
						case EndStoneBrickWallWestTall:
							return 17774
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17775
						case EndStoneBrickWallWestLow:
							return 17776
						case EndStoneBrickWallWestTall:
							return 17777
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17778
						case EndStoneBrickWallWestLow:
							return 17779
						case EndStoneBrickWallWestTall:
							return 17780
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17781
						case EndStoneBrickWallWestLow:
							return 17782
						case EndStoneBrickWallWestTall:
							return 17783
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17784
						case EndStoneBrickWallWestLow:
							return 17785
						case EndStoneBrickWallWestTall:
							return 17786
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17787
						case EndStoneBrickWallWestLow:
							return 17788
						case EndStoneBrickWallWestTall:
							return 17789
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17790
						case EndStoneBrickWallWestLow:
							return 17791
						case EndStoneBrickWallWestTall:
							return 17792
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17793
						case EndStoneBrickWallWestLow:
							return 17794
						case EndStoneBrickWallWestTall:
							return 17795
						}
					}
				}
			}
		case EndStoneBrickWallNorthTall:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17796
						case EndStoneBrickWallWestLow:
							return 17797
						case EndStoneBrickWallWestTall:
							return 17798
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17799
						case EndStoneBrickWallWestLow:
							return 17800
						case EndStoneBrickWallWestTall:
							return 17801
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17802
						case EndStoneBrickWallWestLow:
							return 17803
						case EndStoneBrickWallWestTall:
							return 17804
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17805
						case EndStoneBrickWallWestLow:
							return 17806
						case EndStoneBrickWallWestTall:
							return 17807
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17808
						case EndStoneBrickWallWestLow:
							return 17809
						case EndStoneBrickWallWestTall:
							return 17810
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17811
						case EndStoneBrickWallWestLow:
							return 17812
						case EndStoneBrickWallWestTall:
							return 17813
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17814
						case EndStoneBrickWallWestLow:
							return 17815
						case EndStoneBrickWallWestTall:
							return 17816
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17817
						case EndStoneBrickWallWestLow:
							return 17818
						case EndStoneBrickWallWestTall:
							return 17819
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17820
						case EndStoneBrickWallWestLow:
							return 17821
						case EndStoneBrickWallWestTall:
							return 17822
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17823
						case EndStoneBrickWallWestLow:
							return 17824
						case EndStoneBrickWallWestTall:
							return 17825
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17826
						case EndStoneBrickWallWestLow:
							return 17827
						case EndStoneBrickWallWestTall:
							return 17828
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17829
						case EndStoneBrickWallWestLow:
							return 17830
						case EndStoneBrickWallWestTall:
							return 17831
						}
					}
				}
			}
		}
	case EndStoneBrickWallEastLow:
		switch x.North {
		case EndStoneBrickWallNorthNone:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17832
						case EndStoneBrickWallWestLow:
							return 17833
						case EndStoneBrickWallWestTall:
							return 17834
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17835
						case EndStoneBrickWallWestLow:
							return 17836
						case EndStoneBrickWallWestTall:
							return 17837
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17838
						case EndStoneBrickWallWestLow:
							return 17839
						case EndStoneBrickWallWestTall:
							return 17840
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17841
						case EndStoneBrickWallWestLow:
							return 17842
						case EndStoneBrickWallWestTall:
							return 17843
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17844
						case EndStoneBrickWallWestLow:
							return 17845
						case EndStoneBrickWallWestTall:
							return 17846
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17847
						case EndStoneBrickWallWestLow:
							return 17848
						case EndStoneBrickWallWestTall:
							return 17849
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17850
						case EndStoneBrickWallWestLow:
							return 17851
						case EndStoneBrickWallWestTall:
							return 17852
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17853
						case EndStoneBrickWallWestLow:
							return 17854
						case EndStoneBrickWallWestTall:
							return 17855
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17856
						case EndStoneBrickWallWestLow:
							return 17857
						case EndStoneBrickWallWestTall:
							return 17858
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17859
						case EndStoneBrickWallWestLow:
							return 17860
						case EndStoneBrickWallWestTall:
							return 17861
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17862
						case EndStoneBrickWallWestLow:
							return 17863
						case EndStoneBrickWallWestTall:
							return 17864
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17865
						case EndStoneBrickWallWestLow:
							return 17866
						case EndStoneBrickWallWestTall:
							return 17867
						}
					}
				}
			}
		case EndStoneBrickWallNorthLow:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17868
						case EndStoneBrickWallWestLow:
							return 17869
						case EndStoneBrickWallWestTall:
							return 17870
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17871
						case EndStoneBrickWallWestLow:
							return 17872
						case EndStoneBrickWallWestTall:
							return 17873
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17874
						case EndStoneBrickWallWestLow:
							return 17875
						case EndStoneBrickWallWestTall:
							return 17876
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17877
						case EndStoneBrickWallWestLow:
							return 17878
						case EndStoneBrickWallWestTall:
							return 17879
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17880
						case EndStoneBrickWallWestLow:
							return 17881
						case EndStoneBrickWallWestTall:
							return 17882
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17883
						case EndStoneBrickWallWestLow:
							return 17884
						case EndStoneBrickWallWestTall:
							return 17885
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17886
						case EndStoneBrickWallWestLow:
							return 17887
						case EndStoneBrickWallWestTall:
							return 17888
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17889
						case EndStoneBrickWallWestLow:
							return 17890
						case EndStoneBrickWallWestTall:
							return 17891
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17892
						case EndStoneBrickWallWestLow:
							return 17893
						case EndStoneBrickWallWestTall:
							return 17894
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17895
						case EndStoneBrickWallWestLow:
							return 17896
						case EndStoneBrickWallWestTall:
							return 17897
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17898
						case EndStoneBrickWallWestLow:
							return 17899
						case EndStoneBrickWallWestTall:
							return 17900
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17901
						case EndStoneBrickWallWestLow:
							return 17902
						case EndStoneBrickWallWestTall:
							return 17903
						}
					}
				}
			}
		case EndStoneBrickWallNorthTall:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17904
						case EndStoneBrickWallWestLow:
							return 17905
						case EndStoneBrickWallWestTall:
							return 17906
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17907
						case EndStoneBrickWallWestLow:
							return 17908
						case EndStoneBrickWallWestTall:
							return 17909
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17910
						case EndStoneBrickWallWestLow:
							return 17911
						case EndStoneBrickWallWestTall:
							return 17912
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17913
						case EndStoneBrickWallWestLow:
							return 17914
						case EndStoneBrickWallWestTall:
							return 17915
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17916
						case EndStoneBrickWallWestLow:
							return 17917
						case EndStoneBrickWallWestTall:
							return 17918
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17919
						case EndStoneBrickWallWestLow:
							return 17920
						case EndStoneBrickWallWestTall:
							return 17921
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17922
						case EndStoneBrickWallWestLow:
							return 17923
						case EndStoneBrickWallWestTall:
							return 17924
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17925
						case EndStoneBrickWallWestLow:
							return 17926
						case EndStoneBrickWallWestTall:
							return 17927
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17928
						case EndStoneBrickWallWestLow:
							return 17929
						case EndStoneBrickWallWestTall:
							return 17930
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17931
						case EndStoneBrickWallWestLow:
							return 17932
						case EndStoneBrickWallWestTall:
							return 17933
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17934
						case EndStoneBrickWallWestLow:
							return 17935
						case EndStoneBrickWallWestTall:
							return 17936
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17937
						case EndStoneBrickWallWestLow:
							return 17938
						case EndStoneBrickWallWestTall:
							return 17939
						}
					}
				}
			}
		}
	case EndStoneBrickWallEastTall:
		switch x.North {
		case EndStoneBrickWallNorthNone:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17940
						case EndStoneBrickWallWestLow:
							return 17941
						case EndStoneBrickWallWestTall:
							return 17942
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17943
						case EndStoneBrickWallWestLow:
							return 17944
						case EndStoneBrickWallWestTall:
							return 17945
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17946
						case EndStoneBrickWallWestLow:
							return 17947
						case EndStoneBrickWallWestTall:
							return 17948
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17949
						case EndStoneBrickWallWestLow:
							return 17950
						case EndStoneBrickWallWestTall:
							return 17951
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17952
						case EndStoneBrickWallWestLow:
							return 17953
						case EndStoneBrickWallWestTall:
							return 17954
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17955
						case EndStoneBrickWallWestLow:
							return 17956
						case EndStoneBrickWallWestTall:
							return 17957
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17958
						case EndStoneBrickWallWestLow:
							return 17959
						case EndStoneBrickWallWestTall:
							return 17960
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17961
						case EndStoneBrickWallWestLow:
							return 17962
						case EndStoneBrickWallWestTall:
							return 17963
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17964
						case EndStoneBrickWallWestLow:
							return 17965
						case EndStoneBrickWallWestTall:
							return 17966
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17967
						case EndStoneBrickWallWestLow:
							return 17968
						case EndStoneBrickWallWestTall:
							return 17969
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17970
						case EndStoneBrickWallWestLow:
							return 17971
						case EndStoneBrickWallWestTall:
							return 17972
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17973
						case EndStoneBrickWallWestLow:
							return 17974
						case EndStoneBrickWallWestTall:
							return 17975
						}
					}
				}
			}
		case EndStoneBrickWallNorthLow:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17976
						case EndStoneBrickWallWestLow:
							return 17977
						case EndStoneBrickWallWestTall:
							return 17978
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17979
						case EndStoneBrickWallWestLow:
							return 17980
						case EndStoneBrickWallWestTall:
							return 17981
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17982
						case EndStoneBrickWallWestLow:
							return 17983
						case EndStoneBrickWallWestTall:
							return 17984
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17985
						case EndStoneBrickWallWestLow:
							return 17986
						case EndStoneBrickWallWestTall:
							return 17987
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17988
						case EndStoneBrickWallWestLow:
							return 17989
						case EndStoneBrickWallWestTall:
							return 17990
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17991
						case EndStoneBrickWallWestLow:
							return 17992
						case EndStoneBrickWallWestTall:
							return 17993
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17994
						case EndStoneBrickWallWestLow:
							return 17995
						case EndStoneBrickWallWestTall:
							return 17996
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 17997
						case EndStoneBrickWallWestLow:
							return 17998
						case EndStoneBrickWallWestTall:
							return 17999
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18000
						case EndStoneBrickWallWestLow:
							return 18001
						case EndStoneBrickWallWestTall:
							return 18002
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18003
						case EndStoneBrickWallWestLow:
							return 18004
						case EndStoneBrickWallWestTall:
							return 18005
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18006
						case EndStoneBrickWallWestLow:
							return 18007
						case EndStoneBrickWallWestTall:
							return 18008
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18009
						case EndStoneBrickWallWestLow:
							return 18010
						case EndStoneBrickWallWestTall:
							return 18011
						}
					}
				}
			}
		case EndStoneBrickWallNorthTall:
			switch x.South {
			case EndStoneBrickWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18012
						case EndStoneBrickWallWestLow:
							return 18013
						case EndStoneBrickWallWestTall:
							return 18014
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18015
						case EndStoneBrickWallWestLow:
							return 18016
						case EndStoneBrickWallWestTall:
							return 18017
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18018
						case EndStoneBrickWallWestLow:
							return 18019
						case EndStoneBrickWallWestTall:
							return 18020
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18021
						case EndStoneBrickWallWestLow:
							return 18022
						case EndStoneBrickWallWestTall:
							return 18023
						}
					}
				}
			case EndStoneBrickWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18024
						case EndStoneBrickWallWestLow:
							return 18025
						case EndStoneBrickWallWestTall:
							return 18026
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18027
						case EndStoneBrickWallWestLow:
							return 18028
						case EndStoneBrickWallWestTall:
							return 18029
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18030
						case EndStoneBrickWallWestLow:
							return 18031
						case EndStoneBrickWallWestTall:
							return 18032
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18033
						case EndStoneBrickWallWestLow:
							return 18034
						case EndStoneBrickWallWestTall:
							return 18035
						}
					}
				}
			case EndStoneBrickWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18036
						case EndStoneBrickWallWestLow:
							return 18037
						case EndStoneBrickWallWestTall:
							return 18038
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18039
						case EndStoneBrickWallWestLow:
							return 18040
						case EndStoneBrickWallWestTall:
							return 18041
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18042
						case EndStoneBrickWallWestLow:
							return 18043
						case EndStoneBrickWallWestTall:
							return 18044
						}
					case false:
						switch x.West {
						case EndStoneBrickWallWestNone:
							return 18045
						case EndStoneBrickWallWestLow:
							return 18046
						case EndStoneBrickWallWestTall:
							return 18047
						}
					}
				}
			}
		}
	}
	return 17727 // default state
}

type DioriteWallEast string

const (
	DioriteWallEastNone DioriteWallEast = "none"
	DioriteWallEastLow  DioriteWallEast = "low"
	DioriteWallEastTall DioriteWallEast = "tall"
)

type DioriteWallNorth string

const (
	DioriteWallNorthNone DioriteWallNorth = "none"
	DioriteWallNorthLow  DioriteWallNorth = "low"
	DioriteWallNorthTall DioriteWallNorth = "tall"
)

type DioriteWallSouth string

const (
	DioriteWallSouthNone DioriteWallSouth = "none"
	DioriteWallSouthLow  DioriteWallSouth = "low"
	DioriteWallSouthTall DioriteWallSouth = "tall"
)

type DioriteWallWest string

const (
	DioriteWallWestNone DioriteWallWest = "none"
	DioriteWallWestLow  DioriteWallWest = "low"
	DioriteWallWestTall DioriteWallWest = "tall"
)

type DioriteWall struct {
	East        DioriteWallEast
	North       DioriteWallNorth
	South       DioriteWallSouth
	Up          bool
	Waterlogged bool
	West        DioriteWallWest
}

func (x DioriteWall) Id() uint16 {
	switch x.East {
	case DioriteWallEastNone:
		switch x.North {
		case DioriteWallNorthNone:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18048
						case DioriteWallWestLow:
							return 18049
						case DioriteWallWestTall:
							return 18050
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18051
						case DioriteWallWestLow:
							return 18052
						case DioriteWallWestTall:
							return 18053
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18054
						case DioriteWallWestLow:
							return 18055
						case DioriteWallWestTall:
							return 18056
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18057
						case DioriteWallWestLow:
							return 18058
						case DioriteWallWestTall:
							return 18059
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18060
						case DioriteWallWestLow:
							return 18061
						case DioriteWallWestTall:
							return 18062
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18063
						case DioriteWallWestLow:
							return 18064
						case DioriteWallWestTall:
							return 18065
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18066
						case DioriteWallWestLow:
							return 18067
						case DioriteWallWestTall:
							return 18068
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18069
						case DioriteWallWestLow:
							return 18070
						case DioriteWallWestTall:
							return 18071
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18072
						case DioriteWallWestLow:
							return 18073
						case DioriteWallWestTall:
							return 18074
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18075
						case DioriteWallWestLow:
							return 18076
						case DioriteWallWestTall:
							return 18077
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18078
						case DioriteWallWestLow:
							return 18079
						case DioriteWallWestTall:
							return 18080
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18081
						case DioriteWallWestLow:
							return 18082
						case DioriteWallWestTall:
							return 18083
						}
					}
				}
			}
		case DioriteWallNorthLow:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18084
						case DioriteWallWestLow:
							return 18085
						case DioriteWallWestTall:
							return 18086
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18087
						case DioriteWallWestLow:
							return 18088
						case DioriteWallWestTall:
							return 18089
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18090
						case DioriteWallWestLow:
							return 18091
						case DioriteWallWestTall:
							return 18092
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18093
						case DioriteWallWestLow:
							return 18094
						case DioriteWallWestTall:
							return 18095
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18096
						case DioriteWallWestLow:
							return 18097
						case DioriteWallWestTall:
							return 18098
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18099
						case DioriteWallWestLow:
							return 18100
						case DioriteWallWestTall:
							return 18101
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18102
						case DioriteWallWestLow:
							return 18103
						case DioriteWallWestTall:
							return 18104
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18105
						case DioriteWallWestLow:
							return 18106
						case DioriteWallWestTall:
							return 18107
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18108
						case DioriteWallWestLow:
							return 18109
						case DioriteWallWestTall:
							return 18110
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18111
						case DioriteWallWestLow:
							return 18112
						case DioriteWallWestTall:
							return 18113
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18114
						case DioriteWallWestLow:
							return 18115
						case DioriteWallWestTall:
							return 18116
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18117
						case DioriteWallWestLow:
							return 18118
						case DioriteWallWestTall:
							return 18119
						}
					}
				}
			}
		case DioriteWallNorthTall:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18120
						case DioriteWallWestLow:
							return 18121
						case DioriteWallWestTall:
							return 18122
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18123
						case DioriteWallWestLow:
							return 18124
						case DioriteWallWestTall:
							return 18125
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18126
						case DioriteWallWestLow:
							return 18127
						case DioriteWallWestTall:
							return 18128
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18129
						case DioriteWallWestLow:
							return 18130
						case DioriteWallWestTall:
							return 18131
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18132
						case DioriteWallWestLow:
							return 18133
						case DioriteWallWestTall:
							return 18134
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18135
						case DioriteWallWestLow:
							return 18136
						case DioriteWallWestTall:
							return 18137
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18138
						case DioriteWallWestLow:
							return 18139
						case DioriteWallWestTall:
							return 18140
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18141
						case DioriteWallWestLow:
							return 18142
						case DioriteWallWestTall:
							return 18143
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18144
						case DioriteWallWestLow:
							return 18145
						case DioriteWallWestTall:
							return 18146
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18147
						case DioriteWallWestLow:
							return 18148
						case DioriteWallWestTall:
							return 18149
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18150
						case DioriteWallWestLow:
							return 18151
						case DioriteWallWestTall:
							return 18152
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18153
						case DioriteWallWestLow:
							return 18154
						case DioriteWallWestTall:
							return 18155
						}
					}
				}
			}
		}
	case DioriteWallEastLow:
		switch x.North {
		case DioriteWallNorthNone:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18156
						case DioriteWallWestLow:
							return 18157
						case DioriteWallWestTall:
							return 18158
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18159
						case DioriteWallWestLow:
							return 18160
						case DioriteWallWestTall:
							return 18161
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18162
						case DioriteWallWestLow:
							return 18163
						case DioriteWallWestTall:
							return 18164
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18165
						case DioriteWallWestLow:
							return 18166
						case DioriteWallWestTall:
							return 18167
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18168
						case DioriteWallWestLow:
							return 18169
						case DioriteWallWestTall:
							return 18170
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18171
						case DioriteWallWestLow:
							return 18172
						case DioriteWallWestTall:
							return 18173
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18174
						case DioriteWallWestLow:
							return 18175
						case DioriteWallWestTall:
							return 18176
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18177
						case DioriteWallWestLow:
							return 18178
						case DioriteWallWestTall:
							return 18179
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18180
						case DioriteWallWestLow:
							return 18181
						case DioriteWallWestTall:
							return 18182
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18183
						case DioriteWallWestLow:
							return 18184
						case DioriteWallWestTall:
							return 18185
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18186
						case DioriteWallWestLow:
							return 18187
						case DioriteWallWestTall:
							return 18188
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18189
						case DioriteWallWestLow:
							return 18190
						case DioriteWallWestTall:
							return 18191
						}
					}
				}
			}
		case DioriteWallNorthLow:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18192
						case DioriteWallWestLow:
							return 18193
						case DioriteWallWestTall:
							return 18194
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18195
						case DioriteWallWestLow:
							return 18196
						case DioriteWallWestTall:
							return 18197
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18198
						case DioriteWallWestLow:
							return 18199
						case DioriteWallWestTall:
							return 18200
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18201
						case DioriteWallWestLow:
							return 18202
						case DioriteWallWestTall:
							return 18203
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18204
						case DioriteWallWestLow:
							return 18205
						case DioriteWallWestTall:
							return 18206
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18207
						case DioriteWallWestLow:
							return 18208
						case DioriteWallWestTall:
							return 18209
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18210
						case DioriteWallWestLow:
							return 18211
						case DioriteWallWestTall:
							return 18212
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18213
						case DioriteWallWestLow:
							return 18214
						case DioriteWallWestTall:
							return 18215
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18216
						case DioriteWallWestLow:
							return 18217
						case DioriteWallWestTall:
							return 18218
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18219
						case DioriteWallWestLow:
							return 18220
						case DioriteWallWestTall:
							return 18221
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18222
						case DioriteWallWestLow:
							return 18223
						case DioriteWallWestTall:
							return 18224
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18225
						case DioriteWallWestLow:
							return 18226
						case DioriteWallWestTall:
							return 18227
						}
					}
				}
			}
		case DioriteWallNorthTall:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18228
						case DioriteWallWestLow:
							return 18229
						case DioriteWallWestTall:
							return 18230
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18231
						case DioriteWallWestLow:
							return 18232
						case DioriteWallWestTall:
							return 18233
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18234
						case DioriteWallWestLow:
							return 18235
						case DioriteWallWestTall:
							return 18236
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18237
						case DioriteWallWestLow:
							return 18238
						case DioriteWallWestTall:
							return 18239
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18240
						case DioriteWallWestLow:
							return 18241
						case DioriteWallWestTall:
							return 18242
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18243
						case DioriteWallWestLow:
							return 18244
						case DioriteWallWestTall:
							return 18245
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18246
						case DioriteWallWestLow:
							return 18247
						case DioriteWallWestTall:
							return 18248
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18249
						case DioriteWallWestLow:
							return 18250
						case DioriteWallWestTall:
							return 18251
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18252
						case DioriteWallWestLow:
							return 18253
						case DioriteWallWestTall:
							return 18254
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18255
						case DioriteWallWestLow:
							return 18256
						case DioriteWallWestTall:
							return 18257
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18258
						case DioriteWallWestLow:
							return 18259
						case DioriteWallWestTall:
							return 18260
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18261
						case DioriteWallWestLow:
							return 18262
						case DioriteWallWestTall:
							return 18263
						}
					}
				}
			}
		}
	case DioriteWallEastTall:
		switch x.North {
		case DioriteWallNorthNone:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18264
						case DioriteWallWestLow:
							return 18265
						case DioriteWallWestTall:
							return 18266
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18267
						case DioriteWallWestLow:
							return 18268
						case DioriteWallWestTall:
							return 18269
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18270
						case DioriteWallWestLow:
							return 18271
						case DioriteWallWestTall:
							return 18272
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18273
						case DioriteWallWestLow:
							return 18274
						case DioriteWallWestTall:
							return 18275
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18276
						case DioriteWallWestLow:
							return 18277
						case DioriteWallWestTall:
							return 18278
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18279
						case DioriteWallWestLow:
							return 18280
						case DioriteWallWestTall:
							return 18281
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18282
						case DioriteWallWestLow:
							return 18283
						case DioriteWallWestTall:
							return 18284
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18285
						case DioriteWallWestLow:
							return 18286
						case DioriteWallWestTall:
							return 18287
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18288
						case DioriteWallWestLow:
							return 18289
						case DioriteWallWestTall:
							return 18290
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18291
						case DioriteWallWestLow:
							return 18292
						case DioriteWallWestTall:
							return 18293
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18294
						case DioriteWallWestLow:
							return 18295
						case DioriteWallWestTall:
							return 18296
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18297
						case DioriteWallWestLow:
							return 18298
						case DioriteWallWestTall:
							return 18299
						}
					}
				}
			}
		case DioriteWallNorthLow:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18300
						case DioriteWallWestLow:
							return 18301
						case DioriteWallWestTall:
							return 18302
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18303
						case DioriteWallWestLow:
							return 18304
						case DioriteWallWestTall:
							return 18305
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18306
						case DioriteWallWestLow:
							return 18307
						case DioriteWallWestTall:
							return 18308
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18309
						case DioriteWallWestLow:
							return 18310
						case DioriteWallWestTall:
							return 18311
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18312
						case DioriteWallWestLow:
							return 18313
						case DioriteWallWestTall:
							return 18314
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18315
						case DioriteWallWestLow:
							return 18316
						case DioriteWallWestTall:
							return 18317
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18318
						case DioriteWallWestLow:
							return 18319
						case DioriteWallWestTall:
							return 18320
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18321
						case DioriteWallWestLow:
							return 18322
						case DioriteWallWestTall:
							return 18323
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18324
						case DioriteWallWestLow:
							return 18325
						case DioriteWallWestTall:
							return 18326
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18327
						case DioriteWallWestLow:
							return 18328
						case DioriteWallWestTall:
							return 18329
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18330
						case DioriteWallWestLow:
							return 18331
						case DioriteWallWestTall:
							return 18332
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18333
						case DioriteWallWestLow:
							return 18334
						case DioriteWallWestTall:
							return 18335
						}
					}
				}
			}
		case DioriteWallNorthTall:
			switch x.South {
			case DioriteWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18336
						case DioriteWallWestLow:
							return 18337
						case DioriteWallWestTall:
							return 18338
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18339
						case DioriteWallWestLow:
							return 18340
						case DioriteWallWestTall:
							return 18341
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18342
						case DioriteWallWestLow:
							return 18343
						case DioriteWallWestTall:
							return 18344
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18345
						case DioriteWallWestLow:
							return 18346
						case DioriteWallWestTall:
							return 18347
						}
					}
				}
			case DioriteWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18348
						case DioriteWallWestLow:
							return 18349
						case DioriteWallWestTall:
							return 18350
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18351
						case DioriteWallWestLow:
							return 18352
						case DioriteWallWestTall:
							return 18353
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18354
						case DioriteWallWestLow:
							return 18355
						case DioriteWallWestTall:
							return 18356
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18357
						case DioriteWallWestLow:
							return 18358
						case DioriteWallWestTall:
							return 18359
						}
					}
				}
			case DioriteWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18360
						case DioriteWallWestLow:
							return 18361
						case DioriteWallWestTall:
							return 18362
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18363
						case DioriteWallWestLow:
							return 18364
						case DioriteWallWestTall:
							return 18365
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DioriteWallWestNone:
							return 18366
						case DioriteWallWestLow:
							return 18367
						case DioriteWallWestTall:
							return 18368
						}
					case false:
						switch x.West {
						case DioriteWallWestNone:
							return 18369
						case DioriteWallWestLow:
							return 18370
						case DioriteWallWestTall:
							return 18371
						}
					}
				}
			}
		}
	}
	return 18051 // default state
}

type Scaffolding struct {
	Bottom bool
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7
	Distance    int
	Waterlogged bool
}

func (x Scaffolding) Id() uint16 {
	switch x.Bottom {
	case true:
		switch x.Distance {
		case 0:
			switch x.Waterlogged {
			case true:
				return 18372
			case false:
				return 18373
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 18374
			case false:
				return 18375
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 18376
			case false:
				return 18377
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 18378
			case false:
				return 18379
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 18380
			case false:
				return 18381
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 18382
			case false:
				return 18383
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 18384
			case false:
				return 18385
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 18386
			case false:
				return 18387
			}
		}
	case false:
		switch x.Distance {
		case 0:
			switch x.Waterlogged {
			case true:
				return 18388
			case false:
				return 18389
			}
		case 1:
			switch x.Waterlogged {
			case true:
				return 18390
			case false:
				return 18391
			}
		case 2:
			switch x.Waterlogged {
			case true:
				return 18392
			case false:
				return 18393
			}
		case 3:
			switch x.Waterlogged {
			case true:
				return 18394
			case false:
				return 18395
			}
		case 4:
			switch x.Waterlogged {
			case true:
				return 18396
			case false:
				return 18397
			}
		case 5:
			switch x.Waterlogged {
			case true:
				return 18398
			case false:
				return 18399
			}
		case 6:
			switch x.Waterlogged {
			case true:
				return 18400
			case false:
				return 18401
			}
		case 7:
			switch x.Waterlogged {
			case true:
				return 18402
			case false:
				return 18403
			}
		}
	}
	return 18403 // default state
}

type LoomFacing string

const (
	LoomFacingNorth LoomFacing = "north"
	LoomFacingSouth LoomFacing = "south"
	LoomFacingWest  LoomFacing = "west"
	LoomFacingEast  LoomFacing = "east"
)

type Loom struct {
	Facing LoomFacing
}

func (x Loom) Id() uint16 {
	switch x.Facing {
	case LoomFacingNorth:
		return 18404
	case LoomFacingSouth:
		return 18405
	case LoomFacingWest:
		return 18406
	case LoomFacingEast:
		return 18407
	}
	return 18404 // default state
}

type BarrelFacing string

const (
	BarrelFacingNorth BarrelFacing = "north"
	BarrelFacingEast  BarrelFacing = "east"
	BarrelFacingSouth BarrelFacing = "south"
	BarrelFacingWest  BarrelFacing = "west"
	BarrelFacingUp    BarrelFacing = "up"
	BarrelFacingDown  BarrelFacing = "down"
)

type Barrel struct {
	Open   bool
	Facing BarrelFacing
}

func (x Barrel) Id() uint16 {
	switch x.Facing {
	case BarrelFacingNorth:
		switch x.Open {
		case true:
			return 18408
		case false:
			return 18409
		}
	case BarrelFacingEast:
		switch x.Open {
		case true:
			return 18410
		case false:
			return 18411
		}
	case BarrelFacingSouth:
		switch x.Open {
		case true:
			return 18412
		case false:
			return 18413
		}
	case BarrelFacingWest:
		switch x.Open {
		case true:
			return 18414
		case false:
			return 18415
		}
	case BarrelFacingUp:
		switch x.Open {
		case true:
			return 18416
		case false:
			return 18417
		}
	case BarrelFacingDown:
		switch x.Open {
		case true:
			return 18418
		case false:
			return 18419
		}
	}
	return 18409 // default state
}

type SmokerFacing string

const (
	SmokerFacingNorth SmokerFacing = "north"
	SmokerFacingSouth SmokerFacing = "south"
	SmokerFacingWest  SmokerFacing = "west"
	SmokerFacingEast  SmokerFacing = "east"
)

type Smoker struct {
	Facing SmokerFacing
	Lit    bool
}

func (x Smoker) Id() uint16 {
	switch x.Facing {
	case SmokerFacingNorth:
		switch x.Lit {
		case true:
			return 18420
		case false:
			return 18421
		}
	case SmokerFacingSouth:
		switch x.Lit {
		case true:
			return 18422
		case false:
			return 18423
		}
	case SmokerFacingWest:
		switch x.Lit {
		case true:
			return 18424
		case false:
			return 18425
		}
	case SmokerFacingEast:
		switch x.Lit {
		case true:
			return 18426
		case false:
			return 18427
		}
	}
	return 18421 // default state
}

type BlastFurnaceFacing string

const (
	BlastFurnaceFacingNorth BlastFurnaceFacing = "north"
	BlastFurnaceFacingSouth BlastFurnaceFacing = "south"
	BlastFurnaceFacingWest  BlastFurnaceFacing = "west"
	BlastFurnaceFacingEast  BlastFurnaceFacing = "east"
)

type BlastFurnace struct {
	Facing BlastFurnaceFacing
	Lit    bool
}

func (x BlastFurnace) Id() uint16 {
	switch x.Facing {
	case BlastFurnaceFacingNorth:
		switch x.Lit {
		case true:
			return 18428
		case false:
			return 18429
		}
	case BlastFurnaceFacingSouth:
		switch x.Lit {
		case true:
			return 18430
		case false:
			return 18431
		}
	case BlastFurnaceFacingWest:
		switch x.Lit {
		case true:
			return 18432
		case false:
			return 18433
		}
	case BlastFurnaceFacingEast:
		switch x.Lit {
		case true:
			return 18434
		case false:
			return 18435
		}
	}
	return 18429 // default state
}

type CartographyTable struct{}

func (x CartographyTable) Id() uint16 {
	return 18436
}

type FletchingTable struct{}

func (x FletchingTable) Id() uint16 {
	return 18437
}

type GrindstoneFace string

const (
	GrindstoneFaceFloor   GrindstoneFace = "floor"
	GrindstoneFaceWall    GrindstoneFace = "wall"
	GrindstoneFaceCeiling GrindstoneFace = "ceiling"
)

type GrindstoneFacing string

const (
	GrindstoneFacingNorth GrindstoneFacing = "north"
	GrindstoneFacingSouth GrindstoneFacing = "south"
	GrindstoneFacingWest  GrindstoneFacing = "west"
	GrindstoneFacingEast  GrindstoneFacing = "east"
)

type Grindstone struct {
	Face   GrindstoneFace
	Facing GrindstoneFacing
}

func (x Grindstone) Id() uint16 {
	switch x.Face {
	case GrindstoneFaceFloor:
		switch x.Facing {
		case GrindstoneFacingNorth:
			return 18438
		case GrindstoneFacingSouth:
			return 18439
		case GrindstoneFacingWest:
			return 18440
		case GrindstoneFacingEast:
			return 18441
		}
	case GrindstoneFaceWall:
		switch x.Facing {
		case GrindstoneFacingNorth:
			return 18442
		case GrindstoneFacingSouth:
			return 18443
		case GrindstoneFacingWest:
			return 18444
		case GrindstoneFacingEast:
			return 18445
		}
	case GrindstoneFaceCeiling:
		switch x.Facing {
		case GrindstoneFacingNorth:
			return 18446
		case GrindstoneFacingSouth:
			return 18447
		case GrindstoneFacingWest:
			return 18448
		case GrindstoneFacingEast:
			return 18449
		}
	}
	return 18442 // default state
}

type LecternFacing string

const (
	LecternFacingNorth LecternFacing = "north"
	LecternFacingSouth LecternFacing = "south"
	LecternFacingWest  LecternFacing = "west"
	LecternFacingEast  LecternFacing = "east"
)

type Lectern struct {
	Facing  LecternFacing
	HasBook bool
	Powered bool
}

func (x Lectern) Id() uint16 {
	switch x.Facing {
	case LecternFacingNorth:
		switch x.HasBook {
		case true:
			switch x.Powered {
			case true:
				return 18450
			case false:
				return 18451
			}
		case false:
			switch x.Powered {
			case true:
				return 18452
			case false:
				return 18453
			}
		}
	case LecternFacingSouth:
		switch x.HasBook {
		case true:
			switch x.Powered {
			case true:
				return 18454
			case false:
				return 18455
			}
		case false:
			switch x.Powered {
			case true:
				return 18456
			case false:
				return 18457
			}
		}
	case LecternFacingWest:
		switch x.HasBook {
		case true:
			switch x.Powered {
			case true:
				return 18458
			case false:
				return 18459
			}
		case false:
			switch x.Powered {
			case true:
				return 18460
			case false:
				return 18461
			}
		}
	case LecternFacingEast:
		switch x.HasBook {
		case true:
			switch x.Powered {
			case true:
				return 18462
			case false:
				return 18463
			}
		case false:
			switch x.Powered {
			case true:
				return 18464
			case false:
				return 18465
			}
		}
	}
	return 18453 // default state
}

type SmithingTable struct{}

func (x SmithingTable) Id() uint16 {
	return 18466
}

type StonecutterFacing string

const (
	StonecutterFacingNorth StonecutterFacing = "north"
	StonecutterFacingSouth StonecutterFacing = "south"
	StonecutterFacingWest  StonecutterFacing = "west"
	StonecutterFacingEast  StonecutterFacing = "east"
)

type Stonecutter struct {
	Facing StonecutterFacing
}

func (x Stonecutter) Id() uint16 {
	switch x.Facing {
	case StonecutterFacingNorth:
		return 18467
	case StonecutterFacingSouth:
		return 18468
	case StonecutterFacingWest:
		return 18469
	case StonecutterFacingEast:
		return 18470
	}
	return 18467 // default state
}

type BellAttachment string

const (
	BellAttachmentFloor      BellAttachment = "floor"
	BellAttachmentCeiling    BellAttachment = "ceiling"
	BellAttachmentSingleWall BellAttachment = "single_wall"
	BellAttachmentDoubleWall BellAttachment = "double_wall"
)

type BellFacing string

const (
	BellFacingNorth BellFacing = "north"
	BellFacingSouth BellFacing = "south"
	BellFacingWest  BellFacing = "west"
	BellFacingEast  BellFacing = "east"
)

type Bell struct {
	Attachment BellAttachment
	Facing     BellFacing
	Powered    bool
}

func (x Bell) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Attachment {
		case BellAttachmentFloor:
			switch x.Facing {
			case BellFacingNorth:
				return 18471
			case BellFacingSouth:
				return 18473
			case BellFacingWest:
				return 18475
			case BellFacingEast:
				return 18477
			}
		case BellAttachmentCeiling:
			switch x.Facing {
			case BellFacingNorth:
				return 18479
			case BellFacingSouth:
				return 18481
			case BellFacingWest:
				return 18483
			case BellFacingEast:
				return 18485
			}
		case BellAttachmentSingleWall:
			switch x.Facing {
			case BellFacingNorth:
				return 18487
			case BellFacingSouth:
				return 18489
			case BellFacingWest:
				return 18491
			case BellFacingEast:
				return 18493
			}
		case BellAttachmentDoubleWall:
			switch x.Facing {
			case BellFacingNorth:
				return 18495
			case BellFacingSouth:
				return 18497
			case BellFacingWest:
				return 18499
			case BellFacingEast:
				return 18501
			}
		}
	case false:
		switch x.Attachment {
		case BellAttachmentFloor:
			switch x.Facing {
			case BellFacingNorth:
				return 18472
			case BellFacingSouth:
				return 18474
			case BellFacingWest:
				return 18476
			case BellFacingEast:
				return 18478
			}
		case BellAttachmentCeiling:
			switch x.Facing {
			case BellFacingNorth:
				return 18480
			case BellFacingSouth:
				return 18482
			case BellFacingWest:
				return 18484
			case BellFacingEast:
				return 18486
			}
		case BellAttachmentSingleWall:
			switch x.Facing {
			case BellFacingNorth:
				return 18488
			case BellFacingSouth:
				return 18490
			case BellFacingWest:
				return 18492
			case BellFacingEast:
				return 18494
			}
		case BellAttachmentDoubleWall:
			switch x.Facing {
			case BellFacingNorth:
				return 18496
			case BellFacingSouth:
				return 18498
			case BellFacingWest:
				return 18500
			case BellFacingEast:
				return 18502
			}
		}
	}
	return 18472 // default state
}

type Lantern struct {
	Hanging     bool
	Waterlogged bool
}

func (x Lantern) Id() uint16 {
	switch x.Hanging {
	case true:
		switch x.Waterlogged {
		case true:
			return 18503
		case false:
			return 18504
		}
	case false:
		switch x.Waterlogged {
		case true:
			return 18505
		case false:
			return 18506
		}
	}
	return 18506 // default state
}

type SoulLantern struct {
	Hanging     bool
	Waterlogged bool
}

func (x SoulLantern) Id() uint16 {
	switch x.Hanging {
	case true:
		switch x.Waterlogged {
		case true:
			return 18507
		case false:
			return 18508
		}
	case false:
		switch x.Waterlogged {
		case true:
			return 18509
		case false:
			return 18510
		}
	}
	return 18510 // default state
}

type CampfireFacing string

const (
	CampfireFacingNorth CampfireFacing = "north"
	CampfireFacingSouth CampfireFacing = "south"
	CampfireFacingWest  CampfireFacing = "west"
	CampfireFacingEast  CampfireFacing = "east"
)

type Campfire struct {
	Facing      CampfireFacing
	Lit         bool
	SignalFire  bool
	Waterlogged bool
}

func (x Campfire) Id() uint16 {
	switch x.SignalFire {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case CampfireFacingNorth:
				switch x.Lit {
				case true:
					return 18511
				case false:
					return 18515
				}
			case CampfireFacingSouth:
				switch x.Lit {
				case true:
					return 18519
				case false:
					return 18523
				}
			case CampfireFacingWest:
				switch x.Lit {
				case true:
					return 18527
				case false:
					return 18531
				}
			case CampfireFacingEast:
				switch x.Lit {
				case true:
					return 18535
				case false:
					return 18539
				}
			}
		case false:
			switch x.Facing {
			case CampfireFacingNorth:
				switch x.Lit {
				case true:
					return 18512
				case false:
					return 18516
				}
			case CampfireFacingSouth:
				switch x.Lit {
				case true:
					return 18520
				case false:
					return 18524
				}
			case CampfireFacingWest:
				switch x.Lit {
				case true:
					return 18528
				case false:
					return 18532
				}
			case CampfireFacingEast:
				switch x.Lit {
				case true:
					return 18536
				case false:
					return 18540
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case CampfireFacingNorth:
				switch x.Lit {
				case true:
					return 18513
				case false:
					return 18517
				}
			case CampfireFacingSouth:
				switch x.Lit {
				case true:
					return 18521
				case false:
					return 18525
				}
			case CampfireFacingWest:
				switch x.Lit {
				case true:
					return 18529
				case false:
					return 18533
				}
			case CampfireFacingEast:
				switch x.Lit {
				case true:
					return 18537
				case false:
					return 18541
				}
			}
		case false:
			switch x.Facing {
			case CampfireFacingNorth:
				switch x.Lit {
				case true:
					return 18514
				case false:
					return 18518
				}
			case CampfireFacingSouth:
				switch x.Lit {
				case true:
					return 18522
				case false:
					return 18526
				}
			case CampfireFacingWest:
				switch x.Lit {
				case true:
					return 18530
				case false:
					return 18534
				}
			case CampfireFacingEast:
				switch x.Lit {
				case true:
					return 18538
				case false:
					return 18542
				}
			}
		}
	}
	return 18514 // default state
}

type SoulCampfireFacing string

const (
	SoulCampfireFacingNorth SoulCampfireFacing = "north"
	SoulCampfireFacingSouth SoulCampfireFacing = "south"
	SoulCampfireFacingWest  SoulCampfireFacing = "west"
	SoulCampfireFacingEast  SoulCampfireFacing = "east"
)

type SoulCampfire struct {
	Facing      SoulCampfireFacing
	Lit         bool
	SignalFire  bool
	Waterlogged bool
}

func (x SoulCampfire) Id() uint16 {
	switch x.Facing {
	case SoulCampfireFacingNorth:
		switch x.Lit {
		case true:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18543
				case false:
					return 18544
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18545
				case false:
					return 18546
				}
			}
		case false:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18547
				case false:
					return 18548
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18549
				case false:
					return 18550
				}
			}
		}
	case SoulCampfireFacingSouth:
		switch x.Lit {
		case true:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18551
				case false:
					return 18552
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18553
				case false:
					return 18554
				}
			}
		case false:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18555
				case false:
					return 18556
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18557
				case false:
					return 18558
				}
			}
		}
	case SoulCampfireFacingWest:
		switch x.Lit {
		case true:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18559
				case false:
					return 18560
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18561
				case false:
					return 18562
				}
			}
		case false:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18563
				case false:
					return 18564
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18565
				case false:
					return 18566
				}
			}
		}
	case SoulCampfireFacingEast:
		switch x.Lit {
		case true:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18567
				case false:
					return 18568
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18569
				case false:
					return 18570
				}
			}
		case false:
			switch x.SignalFire {
			case true:
				switch x.Waterlogged {
				case true:
					return 18571
				case false:
					return 18572
				}
			case false:
				switch x.Waterlogged {
				case true:
					return 18573
				case false:
					return 18574
				}
			}
		}
	}
	return 18546 // default state
}

type SweetBerryBush struct {
	// Valid values: 0, 1, 2, 3
	Age int
}

func (x SweetBerryBush) Id() uint16 {
	switch x.Age {
	case 0:
		return 18575
	case 1:
		return 18576
	case 2:
		return 18577
	case 3:
		return 18578
	}
	return 18575 // default state
}

type WarpedStemAxis string

const (
	WarpedStemAxisX WarpedStemAxis = "x"
	WarpedStemAxisY WarpedStemAxis = "y"
	WarpedStemAxisZ WarpedStemAxis = "z"
)

type WarpedStem struct {
	Axis WarpedStemAxis
}

func (x WarpedStem) Id() uint16 {
	switch x.Axis {
	case WarpedStemAxisX:
		return 18579
	case WarpedStemAxisY:
		return 18580
	case WarpedStemAxisZ:
		return 18581
	}
	return 18580 // default state
}

type StrippedWarpedStemAxis string

const (
	StrippedWarpedStemAxisX StrippedWarpedStemAxis = "x"
	StrippedWarpedStemAxisY StrippedWarpedStemAxis = "y"
	StrippedWarpedStemAxisZ StrippedWarpedStemAxis = "z"
)

type StrippedWarpedStem struct {
	Axis StrippedWarpedStemAxis
}

func (x StrippedWarpedStem) Id() uint16 {
	switch x.Axis {
	case StrippedWarpedStemAxisX:
		return 18582
	case StrippedWarpedStemAxisY:
		return 18583
	case StrippedWarpedStemAxisZ:
		return 18584
	}
	return 18583 // default state
}

type WarpedHyphaeAxis string

const (
	WarpedHyphaeAxisX WarpedHyphaeAxis = "x"
	WarpedHyphaeAxisY WarpedHyphaeAxis = "y"
	WarpedHyphaeAxisZ WarpedHyphaeAxis = "z"
)

type WarpedHyphae struct {
	Axis WarpedHyphaeAxis
}

func (x WarpedHyphae) Id() uint16 {
	switch x.Axis {
	case WarpedHyphaeAxisX:
		return 18585
	case WarpedHyphaeAxisY:
		return 18586
	case WarpedHyphaeAxisZ:
		return 18587
	}
	return 18586 // default state
}

type StrippedWarpedHyphaeAxis string

const (
	StrippedWarpedHyphaeAxisX StrippedWarpedHyphaeAxis = "x"
	StrippedWarpedHyphaeAxisY StrippedWarpedHyphaeAxis = "y"
	StrippedWarpedHyphaeAxisZ StrippedWarpedHyphaeAxis = "z"
)

type StrippedWarpedHyphae struct {
	Axis StrippedWarpedHyphaeAxis
}

func (x StrippedWarpedHyphae) Id() uint16 {
	switch x.Axis {
	case StrippedWarpedHyphaeAxisX:
		return 18588
	case StrippedWarpedHyphaeAxisY:
		return 18589
	case StrippedWarpedHyphaeAxisZ:
		return 18590
	}
	return 18589 // default state
}

type WarpedNylium struct{}

func (x WarpedNylium) Id() uint16 {
	return 18591
}

type WarpedFungus struct{}

func (x WarpedFungus) Id() uint16 {
	return 18592
}

type WarpedWartBlock struct{}

func (x WarpedWartBlock) Id() uint16 {
	return 18593
}

type WarpedRoots struct{}

func (x WarpedRoots) Id() uint16 {
	return 18594
}

type NetherSprouts struct{}

func (x NetherSprouts) Id() uint16 {
	return 18595
}

type CrimsonStemAxis string

const (
	CrimsonStemAxisX CrimsonStemAxis = "x"
	CrimsonStemAxisY CrimsonStemAxis = "y"
	CrimsonStemAxisZ CrimsonStemAxis = "z"
)

type CrimsonStem struct {
	Axis CrimsonStemAxis
}

func (x CrimsonStem) Id() uint16 {
	switch x.Axis {
	case CrimsonStemAxisX:
		return 18596
	case CrimsonStemAxisY:
		return 18597
	case CrimsonStemAxisZ:
		return 18598
	}
	return 18597 // default state
}

type StrippedCrimsonStemAxis string

const (
	StrippedCrimsonStemAxisX StrippedCrimsonStemAxis = "x"
	StrippedCrimsonStemAxisY StrippedCrimsonStemAxis = "y"
	StrippedCrimsonStemAxisZ StrippedCrimsonStemAxis = "z"
)

type StrippedCrimsonStem struct {
	Axis StrippedCrimsonStemAxis
}

func (x StrippedCrimsonStem) Id() uint16 {
	switch x.Axis {
	case StrippedCrimsonStemAxisX:
		return 18599
	case StrippedCrimsonStemAxisY:
		return 18600
	case StrippedCrimsonStemAxisZ:
		return 18601
	}
	return 18600 // default state
}

type CrimsonHyphaeAxis string

const (
	CrimsonHyphaeAxisX CrimsonHyphaeAxis = "x"
	CrimsonHyphaeAxisY CrimsonHyphaeAxis = "y"
	CrimsonHyphaeAxisZ CrimsonHyphaeAxis = "z"
)

type CrimsonHyphae struct {
	Axis CrimsonHyphaeAxis
}

func (x CrimsonHyphae) Id() uint16 {
	switch x.Axis {
	case CrimsonHyphaeAxisX:
		return 18602
	case CrimsonHyphaeAxisY:
		return 18603
	case CrimsonHyphaeAxisZ:
		return 18604
	}
	return 18603 // default state
}

type StrippedCrimsonHyphaeAxis string

const (
	StrippedCrimsonHyphaeAxisX StrippedCrimsonHyphaeAxis = "x"
	StrippedCrimsonHyphaeAxisY StrippedCrimsonHyphaeAxis = "y"
	StrippedCrimsonHyphaeAxisZ StrippedCrimsonHyphaeAxis = "z"
)

type StrippedCrimsonHyphae struct {
	Axis StrippedCrimsonHyphaeAxis
}

func (x StrippedCrimsonHyphae) Id() uint16 {
	switch x.Axis {
	case StrippedCrimsonHyphaeAxisX:
		return 18605
	case StrippedCrimsonHyphaeAxisY:
		return 18606
	case StrippedCrimsonHyphaeAxisZ:
		return 18607
	}
	return 18606 // default state
}

type CrimsonNylium struct{}

func (x CrimsonNylium) Id() uint16 {
	return 18608
}

type CrimsonFungus struct{}

func (x CrimsonFungus) Id() uint16 {
	return 18609
}

type Shroomlight struct{}

func (x Shroomlight) Id() uint16 {
	return 18610
}

type WeepingVines struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Age int
}

func (x WeepingVines) Id() uint16 {
	switch x.Age {
	case 0:
		return 18611
	case 1:
		return 18612
	case 2:
		return 18613
	case 3:
		return 18614
	case 4:
		return 18615
	case 5:
		return 18616
	case 6:
		return 18617
	case 7:
		return 18618
	case 8:
		return 18619
	case 9:
		return 18620
	case 10:
		return 18621
	case 11:
		return 18622
	case 12:
		return 18623
	case 13:
		return 18624
	case 14:
		return 18625
	case 15:
		return 18626
	case 16:
		return 18627
	case 17:
		return 18628
	case 18:
		return 18629
	case 19:
		return 18630
	case 20:
		return 18631
	case 21:
		return 18632
	case 22:
		return 18633
	case 23:
		return 18634
	case 24:
		return 18635
	case 25:
		return 18636
	}
	return 18611 // default state
}

type WeepingVinesPlant struct{}

func (x WeepingVinesPlant) Id() uint16 {
	return 18637
}

type TwistingVines struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Age int
}

func (x TwistingVines) Id() uint16 {
	switch x.Age {
	case 0:
		return 18638
	case 1:
		return 18639
	case 2:
		return 18640
	case 3:
		return 18641
	case 4:
		return 18642
	case 5:
		return 18643
	case 6:
		return 18644
	case 7:
		return 18645
	case 8:
		return 18646
	case 9:
		return 18647
	case 10:
		return 18648
	case 11:
		return 18649
	case 12:
		return 18650
	case 13:
		return 18651
	case 14:
		return 18652
	case 15:
		return 18653
	case 16:
		return 18654
	case 17:
		return 18655
	case 18:
		return 18656
	case 19:
		return 18657
	case 20:
		return 18658
	case 21:
		return 18659
	case 22:
		return 18660
	case 23:
		return 18661
	case 24:
		return 18662
	case 25:
		return 18663
	}
	return 18638 // default state
}

type TwistingVinesPlant struct{}

func (x TwistingVinesPlant) Id() uint16 {
	return 18664
}

type CrimsonRoots struct{}

func (x CrimsonRoots) Id() uint16 {
	return 18665
}

type CrimsonPlanks struct{}

func (x CrimsonPlanks) Id() uint16 {
	return 18666
}

type WarpedPlanks struct{}

func (x WarpedPlanks) Id() uint16 {
	return 18667
}

type CrimsonSlabType string

const (
	CrimsonSlabTypeTop    CrimsonSlabType = "top"
	CrimsonSlabTypeBottom CrimsonSlabType = "bottom"
	CrimsonSlabTypeDouble CrimsonSlabType = "double"
)

type CrimsonSlab struct {
	Type        CrimsonSlabType
	Waterlogged bool
}

func (x CrimsonSlab) Id() uint16 {
	switch x.Type {
	case CrimsonSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 18668
		case false:
			return 18669
		}
	case CrimsonSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 18670
		case false:
			return 18671
		}
	case CrimsonSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 18672
		case false:
			return 18673
		}
	}
	return 18671 // default state
}

type WarpedSlabType string

const (
	WarpedSlabTypeTop    WarpedSlabType = "top"
	WarpedSlabTypeBottom WarpedSlabType = "bottom"
	WarpedSlabTypeDouble WarpedSlabType = "double"
)

type WarpedSlab struct {
	Type        WarpedSlabType
	Waterlogged bool
}

func (x WarpedSlab) Id() uint16 {
	switch x.Type {
	case WarpedSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 18674
		case false:
			return 18675
		}
	case WarpedSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 18676
		case false:
			return 18677
		}
	case WarpedSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 18678
		case false:
			return 18679
		}
	}
	return 18677 // default state
}

type CrimsonPressurePlate struct {
	Powered bool
}

func (x CrimsonPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 18680
	case false:
		return 18681
	}
	return 18681 // default state
}

type WarpedPressurePlate struct {
	Powered bool
}

func (x WarpedPressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 18682
	case false:
		return 18683
	}
	return 18683 // default state
}

type CrimsonFence struct {
	South       bool
	Waterlogged bool
	West        bool
	East        bool
	North       bool
}

func (x CrimsonFence) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18684
					case false:
						return 18688
					}
				case false:
					switch x.South {
					case true:
						return 18692
					case false:
						return 18696
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18700
					case false:
						return 18704
					}
				case false:
					switch x.South {
					case true:
						return 18708
					case false:
						return 18712
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18685
					case false:
						return 18689
					}
				case false:
					switch x.South {
					case true:
						return 18693
					case false:
						return 18697
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18701
					case false:
						return 18705
					}
				case false:
					switch x.South {
					case true:
						return 18709
					case false:
						return 18713
					}
				}
			}
		}
	case false:
		switch x.West {
		case true:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18686
					case false:
						return 18690
					}
				case false:
					switch x.South {
					case true:
						return 18694
					case false:
						return 18698
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18702
					case false:
						return 18706
					}
				case false:
					switch x.South {
					case true:
						return 18710
					case false:
						return 18714
					}
				}
			}
		case false:
			switch x.East {
			case true:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18687
					case false:
						return 18691
					}
				case false:
					switch x.South {
					case true:
						return 18695
					case false:
						return 18699
					}
				}
			case false:
				switch x.North {
				case true:
					switch x.South {
					case true:
						return 18703
					case false:
						return 18707
					}
				case false:
					switch x.South {
					case true:
						return 18711
					case false:
						return 18715
					}
				}
			}
		}
	}
	return 18715 // default state
}

type WarpedFence struct {
	East        bool
	North       bool
	South       bool
	Waterlogged bool
	West        bool
}

func (x WarpedFence) Id() uint16 {
	switch x.East {
	case true:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18716
					case false:
						return 18717
					}
				case false:
					switch x.West {
					case true:
						return 18718
					case false:
						return 18719
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18720
					case false:
						return 18721
					}
				case false:
					switch x.West {
					case true:
						return 18722
					case false:
						return 18723
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18724
					case false:
						return 18725
					}
				case false:
					switch x.West {
					case true:
						return 18726
					case false:
						return 18727
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18728
					case false:
						return 18729
					}
				case false:
					switch x.West {
					case true:
						return 18730
					case false:
						return 18731
					}
				}
			}
		}
	case false:
		switch x.North {
		case true:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18732
					case false:
						return 18733
					}
				case false:
					switch x.West {
					case true:
						return 18734
					case false:
						return 18735
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18736
					case false:
						return 18737
					}
				case false:
					switch x.West {
					case true:
						return 18738
					case false:
						return 18739
					}
				}
			}
		case false:
			switch x.South {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18740
					case false:
						return 18741
					}
				case false:
					switch x.West {
					case true:
						return 18742
					case false:
						return 18743
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case true:
						return 18744
					case false:
						return 18745
					}
				case false:
					switch x.West {
					case true:
						return 18746
					case false:
						return 18747
					}
				}
			}
		}
	}
	return 18747 // default state
}

type CrimsonTrapdoorFacing string

const (
	CrimsonTrapdoorFacingNorth CrimsonTrapdoorFacing = "north"
	CrimsonTrapdoorFacingSouth CrimsonTrapdoorFacing = "south"
	CrimsonTrapdoorFacingWest  CrimsonTrapdoorFacing = "west"
	CrimsonTrapdoorFacingEast  CrimsonTrapdoorFacing = "east"
)

type CrimsonTrapdoorHalf string

const (
	CrimsonTrapdoorHalfTop    CrimsonTrapdoorHalf = "top"
	CrimsonTrapdoorHalfBottom CrimsonTrapdoorHalf = "bottom"
)

type CrimsonTrapdoor struct {
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      CrimsonTrapdoorFacing
	Half        CrimsonTrapdoorHalf
}

func (x CrimsonTrapdoor) Id() uint16 {
	switch x.Facing {
	case CrimsonTrapdoorFacingNorth:
		switch x.Half {
		case CrimsonTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18748
					case false:
						return 18749
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18750
					case false:
						return 18751
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18752
					case false:
						return 18753
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18754
					case false:
						return 18755
					}
				}
			}
		case CrimsonTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18756
					case false:
						return 18757
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18758
					case false:
						return 18759
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18760
					case false:
						return 18761
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18762
					case false:
						return 18763
					}
				}
			}
		}
	case CrimsonTrapdoorFacingSouth:
		switch x.Half {
		case CrimsonTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18764
					case false:
						return 18765
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18766
					case false:
						return 18767
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18768
					case false:
						return 18769
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18770
					case false:
						return 18771
					}
				}
			}
		case CrimsonTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18772
					case false:
						return 18773
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18774
					case false:
						return 18775
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18776
					case false:
						return 18777
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18778
					case false:
						return 18779
					}
				}
			}
		}
	case CrimsonTrapdoorFacingWest:
		switch x.Half {
		case CrimsonTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18780
					case false:
						return 18781
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18782
					case false:
						return 18783
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18784
					case false:
						return 18785
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18786
					case false:
						return 18787
					}
				}
			}
		case CrimsonTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18788
					case false:
						return 18789
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18790
					case false:
						return 18791
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18792
					case false:
						return 18793
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18794
					case false:
						return 18795
					}
				}
			}
		}
	case CrimsonTrapdoorFacingEast:
		switch x.Half {
		case CrimsonTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18796
					case false:
						return 18797
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18798
					case false:
						return 18799
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18800
					case false:
						return 18801
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18802
					case false:
						return 18803
					}
				}
			}
		case CrimsonTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18804
					case false:
						return 18805
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18806
					case false:
						return 18807
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 18808
					case false:
						return 18809
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 18810
					case false:
						return 18811
					}
				}
			}
		}
	}
	return 18763 // default state
}

type WarpedTrapdoorHalf string

const (
	WarpedTrapdoorHalfTop    WarpedTrapdoorHalf = "top"
	WarpedTrapdoorHalfBottom WarpedTrapdoorHalf = "bottom"
)

type WarpedTrapdoorFacing string

const (
	WarpedTrapdoorFacingNorth WarpedTrapdoorFacing = "north"
	WarpedTrapdoorFacingSouth WarpedTrapdoorFacing = "south"
	WarpedTrapdoorFacingWest  WarpedTrapdoorFacing = "west"
	WarpedTrapdoorFacingEast  WarpedTrapdoorFacing = "east"
)

type WarpedTrapdoor struct {
	Half        WarpedTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      WarpedTrapdoorFacing
}

func (x WarpedTrapdoor) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WarpedTrapdoorFacingNorth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18812
					case false:
						return 18816
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18820
					case false:
						return 18824
					}
				}
			case WarpedTrapdoorFacingSouth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18828
					case false:
						return 18832
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18836
					case false:
						return 18840
					}
				}
			case WarpedTrapdoorFacingWest:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18844
					case false:
						return 18848
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18852
					case false:
						return 18856
					}
				}
			case WarpedTrapdoorFacingEast:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18860
					case false:
						return 18864
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18868
					case false:
						return 18872
					}
				}
			}
		case false:
			switch x.Facing {
			case WarpedTrapdoorFacingNorth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18813
					case false:
						return 18817
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18821
					case false:
						return 18825
					}
				}
			case WarpedTrapdoorFacingSouth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18829
					case false:
						return 18833
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18837
					case false:
						return 18841
					}
				}
			case WarpedTrapdoorFacingWest:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18845
					case false:
						return 18849
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18853
					case false:
						return 18857
					}
				}
			case WarpedTrapdoorFacingEast:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18861
					case false:
						return 18865
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18869
					case false:
						return 18873
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WarpedTrapdoorFacingNorth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18814
					case false:
						return 18818
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18822
					case false:
						return 18826
					}
				}
			case WarpedTrapdoorFacingSouth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18830
					case false:
						return 18834
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18838
					case false:
						return 18842
					}
				}
			case WarpedTrapdoorFacingWest:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18846
					case false:
						return 18850
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18854
					case false:
						return 18858
					}
				}
			case WarpedTrapdoorFacingEast:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18862
					case false:
						return 18866
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18870
					case false:
						return 18874
					}
				}
			}
		case false:
			switch x.Facing {
			case WarpedTrapdoorFacingNorth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18815
					case false:
						return 18819
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18823
					case false:
						return 18827
					}
				}
			case WarpedTrapdoorFacingSouth:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18831
					case false:
						return 18835
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18839
					case false:
						return 18843
					}
				}
			case WarpedTrapdoorFacingWest:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18847
					case false:
						return 18851
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18855
					case false:
						return 18859
					}
				}
			case WarpedTrapdoorFacingEast:
				switch x.Half {
				case WarpedTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 18863
					case false:
						return 18867
					}
				case WarpedTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 18871
					case false:
						return 18875
					}
				}
			}
		}
	}
	return 18827 // default state
}

type CrimsonFenceGateFacing string

const (
	CrimsonFenceGateFacingNorth CrimsonFenceGateFacing = "north"
	CrimsonFenceGateFacingSouth CrimsonFenceGateFacing = "south"
	CrimsonFenceGateFacingWest  CrimsonFenceGateFacing = "west"
	CrimsonFenceGateFacingEast  CrimsonFenceGateFacing = "east"
)

type CrimsonFenceGate struct {
	Facing  CrimsonFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x CrimsonFenceGate) Id() uint16 {
	switch x.Facing {
	case CrimsonFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18876
				case false:
					return 18877
				}
			case false:
				switch x.Powered {
				case true:
					return 18878
				case false:
					return 18879
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18880
				case false:
					return 18881
				}
			case false:
				switch x.Powered {
				case true:
					return 18882
				case false:
					return 18883
				}
			}
		}
	case CrimsonFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18884
				case false:
					return 18885
				}
			case false:
				switch x.Powered {
				case true:
					return 18886
				case false:
					return 18887
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18888
				case false:
					return 18889
				}
			case false:
				switch x.Powered {
				case true:
					return 18890
				case false:
					return 18891
				}
			}
		}
	case CrimsonFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18892
				case false:
					return 18893
				}
			case false:
				switch x.Powered {
				case true:
					return 18894
				case false:
					return 18895
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18896
				case false:
					return 18897
				}
			case false:
				switch x.Powered {
				case true:
					return 18898
				case false:
					return 18899
				}
			}
		}
	case CrimsonFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18900
				case false:
					return 18901
				}
			case false:
				switch x.Powered {
				case true:
					return 18902
				case false:
					return 18903
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18904
				case false:
					return 18905
				}
			case false:
				switch x.Powered {
				case true:
					return 18906
				case false:
					return 18907
				}
			}
		}
	}
	return 18883 // default state
}

type WarpedFenceGateFacing string

const (
	WarpedFenceGateFacingNorth WarpedFenceGateFacing = "north"
	WarpedFenceGateFacingSouth WarpedFenceGateFacing = "south"
	WarpedFenceGateFacingWest  WarpedFenceGateFacing = "west"
	WarpedFenceGateFacingEast  WarpedFenceGateFacing = "east"
)

type WarpedFenceGate struct {
	Facing  WarpedFenceGateFacing
	InWall  bool
	Open    bool
	Powered bool
}

func (x WarpedFenceGate) Id() uint16 {
	switch x.Facing {
	case WarpedFenceGateFacingNorth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18908
				case false:
					return 18909
				}
			case false:
				switch x.Powered {
				case true:
					return 18910
				case false:
					return 18911
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18912
				case false:
					return 18913
				}
			case false:
				switch x.Powered {
				case true:
					return 18914
				case false:
					return 18915
				}
			}
		}
	case WarpedFenceGateFacingSouth:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18916
				case false:
					return 18917
				}
			case false:
				switch x.Powered {
				case true:
					return 18918
				case false:
					return 18919
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18920
				case false:
					return 18921
				}
			case false:
				switch x.Powered {
				case true:
					return 18922
				case false:
					return 18923
				}
			}
		}
	case WarpedFenceGateFacingWest:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18924
				case false:
					return 18925
				}
			case false:
				switch x.Powered {
				case true:
					return 18926
				case false:
					return 18927
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18928
				case false:
					return 18929
				}
			case false:
				switch x.Powered {
				case true:
					return 18930
				case false:
					return 18931
				}
			}
		}
	case WarpedFenceGateFacingEast:
		switch x.InWall {
		case true:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18932
				case false:
					return 18933
				}
			case false:
				switch x.Powered {
				case true:
					return 18934
				case false:
					return 18935
				}
			}
		case false:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					return 18936
				case false:
					return 18937
				}
			case false:
				switch x.Powered {
				case true:
					return 18938
				case false:
					return 18939
				}
			}
		}
	}
	return 18915 // default state
}

type CrimsonStairsFacing string

const (
	CrimsonStairsFacingNorth CrimsonStairsFacing = "north"
	CrimsonStairsFacingSouth CrimsonStairsFacing = "south"
	CrimsonStairsFacingWest  CrimsonStairsFacing = "west"
	CrimsonStairsFacingEast  CrimsonStairsFacing = "east"
)

type CrimsonStairsHalf string

const (
	CrimsonStairsHalfTop    CrimsonStairsHalf = "top"
	CrimsonStairsHalfBottom CrimsonStairsHalf = "bottom"
)

type CrimsonStairsShape string

const (
	CrimsonStairsShapeStraight   CrimsonStairsShape = "straight"
	CrimsonStairsShapeInnerLeft  CrimsonStairsShape = "inner_left"
	CrimsonStairsShapeInnerRight CrimsonStairsShape = "inner_right"
	CrimsonStairsShapeOuterLeft  CrimsonStairsShape = "outer_left"
	CrimsonStairsShapeOuterRight CrimsonStairsShape = "outer_right"
)

type CrimsonStairs struct {
	Facing      CrimsonStairsFacing
	Half        CrimsonStairsHalf
	Shape       CrimsonStairsShape
	Waterlogged bool
}

func (x CrimsonStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CrimsonStairsFacingNorth:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18940
				case CrimsonStairsShapeInnerLeft:
					return 18942
				case CrimsonStairsShapeInnerRight:
					return 18944
				case CrimsonStairsShapeOuterLeft:
					return 18946
				case CrimsonStairsShapeOuterRight:
					return 18948
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18950
				case CrimsonStairsShapeInnerLeft:
					return 18952
				case CrimsonStairsShapeInnerRight:
					return 18954
				case CrimsonStairsShapeOuterLeft:
					return 18956
				case CrimsonStairsShapeOuterRight:
					return 18958
				}
			}
		case CrimsonStairsFacingSouth:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18960
				case CrimsonStairsShapeInnerLeft:
					return 18962
				case CrimsonStairsShapeInnerRight:
					return 18964
				case CrimsonStairsShapeOuterLeft:
					return 18966
				case CrimsonStairsShapeOuterRight:
					return 18968
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18970
				case CrimsonStairsShapeInnerLeft:
					return 18972
				case CrimsonStairsShapeInnerRight:
					return 18974
				case CrimsonStairsShapeOuterLeft:
					return 18976
				case CrimsonStairsShapeOuterRight:
					return 18978
				}
			}
		case CrimsonStairsFacingWest:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18980
				case CrimsonStairsShapeInnerLeft:
					return 18982
				case CrimsonStairsShapeInnerRight:
					return 18984
				case CrimsonStairsShapeOuterLeft:
					return 18986
				case CrimsonStairsShapeOuterRight:
					return 18988
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18990
				case CrimsonStairsShapeInnerLeft:
					return 18992
				case CrimsonStairsShapeInnerRight:
					return 18994
				case CrimsonStairsShapeOuterLeft:
					return 18996
				case CrimsonStairsShapeOuterRight:
					return 18998
				}
			}
		case CrimsonStairsFacingEast:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 19000
				case CrimsonStairsShapeInnerLeft:
					return 19002
				case CrimsonStairsShapeInnerRight:
					return 19004
				case CrimsonStairsShapeOuterLeft:
					return 19006
				case CrimsonStairsShapeOuterRight:
					return 19008
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 19010
				case CrimsonStairsShapeInnerLeft:
					return 19012
				case CrimsonStairsShapeInnerRight:
					return 19014
				case CrimsonStairsShapeOuterLeft:
					return 19016
				case CrimsonStairsShapeOuterRight:
					return 19018
				}
			}
		}
	case false:
		switch x.Facing {
		case CrimsonStairsFacingNorth:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18941
				case CrimsonStairsShapeInnerLeft:
					return 18943
				case CrimsonStairsShapeInnerRight:
					return 18945
				case CrimsonStairsShapeOuterLeft:
					return 18947
				case CrimsonStairsShapeOuterRight:
					return 18949
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18951
				case CrimsonStairsShapeInnerLeft:
					return 18953
				case CrimsonStairsShapeInnerRight:
					return 18955
				case CrimsonStairsShapeOuterLeft:
					return 18957
				case CrimsonStairsShapeOuterRight:
					return 18959
				}
			}
		case CrimsonStairsFacingSouth:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18961
				case CrimsonStairsShapeInnerLeft:
					return 18963
				case CrimsonStairsShapeInnerRight:
					return 18965
				case CrimsonStairsShapeOuterLeft:
					return 18967
				case CrimsonStairsShapeOuterRight:
					return 18969
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18971
				case CrimsonStairsShapeInnerLeft:
					return 18973
				case CrimsonStairsShapeInnerRight:
					return 18975
				case CrimsonStairsShapeOuterLeft:
					return 18977
				case CrimsonStairsShapeOuterRight:
					return 18979
				}
			}
		case CrimsonStairsFacingWest:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18981
				case CrimsonStairsShapeInnerLeft:
					return 18983
				case CrimsonStairsShapeInnerRight:
					return 18985
				case CrimsonStairsShapeOuterLeft:
					return 18987
				case CrimsonStairsShapeOuterRight:
					return 18989
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 18991
				case CrimsonStairsShapeInnerLeft:
					return 18993
				case CrimsonStairsShapeInnerRight:
					return 18995
				case CrimsonStairsShapeOuterLeft:
					return 18997
				case CrimsonStairsShapeOuterRight:
					return 18999
				}
			}
		case CrimsonStairsFacingEast:
			switch x.Half {
			case CrimsonStairsHalfTop:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 19001
				case CrimsonStairsShapeInnerLeft:
					return 19003
				case CrimsonStairsShapeInnerRight:
					return 19005
				case CrimsonStairsShapeOuterLeft:
					return 19007
				case CrimsonStairsShapeOuterRight:
					return 19009
				}
			case CrimsonStairsHalfBottom:
				switch x.Shape {
				case CrimsonStairsShapeStraight:
					return 19011
				case CrimsonStairsShapeInnerLeft:
					return 19013
				case CrimsonStairsShapeInnerRight:
					return 19015
				case CrimsonStairsShapeOuterLeft:
					return 19017
				case CrimsonStairsShapeOuterRight:
					return 19019
				}
			}
		}
	}
	return 18951 // default state
}

type WarpedStairsFacing string

const (
	WarpedStairsFacingNorth WarpedStairsFacing = "north"
	WarpedStairsFacingSouth WarpedStairsFacing = "south"
	WarpedStairsFacingWest  WarpedStairsFacing = "west"
	WarpedStairsFacingEast  WarpedStairsFacing = "east"
)

type WarpedStairsHalf string

const (
	WarpedStairsHalfTop    WarpedStairsHalf = "top"
	WarpedStairsHalfBottom WarpedStairsHalf = "bottom"
)

type WarpedStairsShape string

const (
	WarpedStairsShapeStraight   WarpedStairsShape = "straight"
	WarpedStairsShapeInnerLeft  WarpedStairsShape = "inner_left"
	WarpedStairsShapeInnerRight WarpedStairsShape = "inner_right"
	WarpedStairsShapeOuterLeft  WarpedStairsShape = "outer_left"
	WarpedStairsShapeOuterRight WarpedStairsShape = "outer_right"
)

type WarpedStairs struct {
	Facing      WarpedStairsFacing
	Half        WarpedStairsHalf
	Shape       WarpedStairsShape
	Waterlogged bool
}

func (x WarpedStairs) Id() uint16 {
	switch x.Facing {
	case WarpedStairsFacingNorth:
		switch x.Half {
		case WarpedStairsHalfTop:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19020
				case false:
					return 19021
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19022
				case false:
					return 19023
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19024
				case false:
					return 19025
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19026
				case false:
					return 19027
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19028
				case false:
					return 19029
				}
			}
		case WarpedStairsHalfBottom:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19030
				case false:
					return 19031
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19032
				case false:
					return 19033
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19034
				case false:
					return 19035
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19036
				case false:
					return 19037
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19038
				case false:
					return 19039
				}
			}
		}
	case WarpedStairsFacingSouth:
		switch x.Half {
		case WarpedStairsHalfTop:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19040
				case false:
					return 19041
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19042
				case false:
					return 19043
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19044
				case false:
					return 19045
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19046
				case false:
					return 19047
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19048
				case false:
					return 19049
				}
			}
		case WarpedStairsHalfBottom:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19050
				case false:
					return 19051
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19052
				case false:
					return 19053
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19054
				case false:
					return 19055
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19056
				case false:
					return 19057
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19058
				case false:
					return 19059
				}
			}
		}
	case WarpedStairsFacingWest:
		switch x.Half {
		case WarpedStairsHalfTop:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19060
				case false:
					return 19061
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19062
				case false:
					return 19063
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19064
				case false:
					return 19065
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19066
				case false:
					return 19067
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19068
				case false:
					return 19069
				}
			}
		case WarpedStairsHalfBottom:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19070
				case false:
					return 19071
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19072
				case false:
					return 19073
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19074
				case false:
					return 19075
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19076
				case false:
					return 19077
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19078
				case false:
					return 19079
				}
			}
		}
	case WarpedStairsFacingEast:
		switch x.Half {
		case WarpedStairsHalfTop:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19080
				case false:
					return 19081
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19082
				case false:
					return 19083
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19084
				case false:
					return 19085
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19086
				case false:
					return 19087
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19088
				case false:
					return 19089
				}
			}
		case WarpedStairsHalfBottom:
			switch x.Shape {
			case WarpedStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19090
				case false:
					return 19091
				}
			case WarpedStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19092
				case false:
					return 19093
				}
			case WarpedStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19094
				case false:
					return 19095
				}
			case WarpedStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19096
				case false:
					return 19097
				}
			case WarpedStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19098
				case false:
					return 19099
				}
			}
		}
	}
	return 19031 // default state
}

type CrimsonButtonFace string

const (
	CrimsonButtonFaceFloor   CrimsonButtonFace = "floor"
	CrimsonButtonFaceWall    CrimsonButtonFace = "wall"
	CrimsonButtonFaceCeiling CrimsonButtonFace = "ceiling"
)

type CrimsonButtonFacing string

const (
	CrimsonButtonFacingNorth CrimsonButtonFacing = "north"
	CrimsonButtonFacingSouth CrimsonButtonFacing = "south"
	CrimsonButtonFacingWest  CrimsonButtonFacing = "west"
	CrimsonButtonFacingEast  CrimsonButtonFacing = "east"
)

type CrimsonButton struct {
	Face    CrimsonButtonFace
	Facing  CrimsonButtonFacing
	Powered bool
}

func (x CrimsonButton) Id() uint16 {
	switch x.Facing {
	case CrimsonButtonFacingNorth:
		switch x.Powered {
		case true:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19100
			case CrimsonButtonFaceWall:
				return 19108
			case CrimsonButtonFaceCeiling:
				return 19116
			}
		case false:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19101
			case CrimsonButtonFaceWall:
				return 19109
			case CrimsonButtonFaceCeiling:
				return 19117
			}
		}
	case CrimsonButtonFacingSouth:
		switch x.Powered {
		case true:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19102
			case CrimsonButtonFaceWall:
				return 19110
			case CrimsonButtonFaceCeiling:
				return 19118
			}
		case false:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19103
			case CrimsonButtonFaceWall:
				return 19111
			case CrimsonButtonFaceCeiling:
				return 19119
			}
		}
	case CrimsonButtonFacingWest:
		switch x.Powered {
		case true:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19104
			case CrimsonButtonFaceWall:
				return 19112
			case CrimsonButtonFaceCeiling:
				return 19120
			}
		case false:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19105
			case CrimsonButtonFaceWall:
				return 19113
			case CrimsonButtonFaceCeiling:
				return 19121
			}
		}
	case CrimsonButtonFacingEast:
		switch x.Powered {
		case true:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19106
			case CrimsonButtonFaceWall:
				return 19114
			case CrimsonButtonFaceCeiling:
				return 19122
			}
		case false:
			switch x.Face {
			case CrimsonButtonFaceFloor:
				return 19107
			case CrimsonButtonFaceWall:
				return 19115
			case CrimsonButtonFaceCeiling:
				return 19123
			}
		}
	}
	return 19109 // default state
}

type WarpedButtonFace string

const (
	WarpedButtonFaceFloor   WarpedButtonFace = "floor"
	WarpedButtonFaceWall    WarpedButtonFace = "wall"
	WarpedButtonFaceCeiling WarpedButtonFace = "ceiling"
)

type WarpedButtonFacing string

const (
	WarpedButtonFacingNorth WarpedButtonFacing = "north"
	WarpedButtonFacingSouth WarpedButtonFacing = "south"
	WarpedButtonFacingWest  WarpedButtonFacing = "west"
	WarpedButtonFacingEast  WarpedButtonFacing = "east"
)

type WarpedButton struct {
	Face    WarpedButtonFace
	Facing  WarpedButtonFacing
	Powered bool
}

func (x WarpedButton) Id() uint16 {
	switch x.Face {
	case WarpedButtonFaceFloor:
		switch x.Facing {
		case WarpedButtonFacingNorth:
			switch x.Powered {
			case true:
				return 19124
			case false:
				return 19125
			}
		case WarpedButtonFacingSouth:
			switch x.Powered {
			case true:
				return 19126
			case false:
				return 19127
			}
		case WarpedButtonFacingWest:
			switch x.Powered {
			case true:
				return 19128
			case false:
				return 19129
			}
		case WarpedButtonFacingEast:
			switch x.Powered {
			case true:
				return 19130
			case false:
				return 19131
			}
		}
	case WarpedButtonFaceWall:
		switch x.Facing {
		case WarpedButtonFacingNorth:
			switch x.Powered {
			case true:
				return 19132
			case false:
				return 19133
			}
		case WarpedButtonFacingSouth:
			switch x.Powered {
			case true:
				return 19134
			case false:
				return 19135
			}
		case WarpedButtonFacingWest:
			switch x.Powered {
			case true:
				return 19136
			case false:
				return 19137
			}
		case WarpedButtonFacingEast:
			switch x.Powered {
			case true:
				return 19138
			case false:
				return 19139
			}
		}
	case WarpedButtonFaceCeiling:
		switch x.Facing {
		case WarpedButtonFacingNorth:
			switch x.Powered {
			case true:
				return 19140
			case false:
				return 19141
			}
		case WarpedButtonFacingSouth:
			switch x.Powered {
			case true:
				return 19142
			case false:
				return 19143
			}
		case WarpedButtonFacingWest:
			switch x.Powered {
			case true:
				return 19144
			case false:
				return 19145
			}
		case WarpedButtonFacingEast:
			switch x.Powered {
			case true:
				return 19146
			case false:
				return 19147
			}
		}
	}
	return 19133 // default state
}

type CrimsonDoorFacing string

const (
	CrimsonDoorFacingNorth CrimsonDoorFacing = "north"
	CrimsonDoorFacingSouth CrimsonDoorFacing = "south"
	CrimsonDoorFacingWest  CrimsonDoorFacing = "west"
	CrimsonDoorFacingEast  CrimsonDoorFacing = "east"
)

type CrimsonDoorHalf string

const (
	CrimsonDoorHalfUpper CrimsonDoorHalf = "upper"
	CrimsonDoorHalfLower CrimsonDoorHalf = "lower"
)

type CrimsonDoorHinge string

const (
	CrimsonDoorHingeLeft  CrimsonDoorHinge = "left"
	CrimsonDoorHingeRight CrimsonDoorHinge = "right"
)

type CrimsonDoor struct {
	Facing  CrimsonDoorFacing
	Half    CrimsonDoorHalf
	Hinge   CrimsonDoorHinge
	Open    bool
	Powered bool
}

func (x CrimsonDoor) Id() uint16 {
	switch x.Half {
	case CrimsonDoorHalfUpper:
		switch x.Hinge {
		case CrimsonDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19148
					case CrimsonDoorFacingSouth:
						return 19164
					case CrimsonDoorFacingWest:
						return 19180
					case CrimsonDoorFacingEast:
						return 19196
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19149
					case CrimsonDoorFacingSouth:
						return 19165
					case CrimsonDoorFacingWest:
						return 19181
					case CrimsonDoorFacingEast:
						return 19197
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19150
					case CrimsonDoorFacingSouth:
						return 19166
					case CrimsonDoorFacingWest:
						return 19182
					case CrimsonDoorFacingEast:
						return 19198
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19151
					case CrimsonDoorFacingSouth:
						return 19167
					case CrimsonDoorFacingWest:
						return 19183
					case CrimsonDoorFacingEast:
						return 19199
					}
				}
			}
		case CrimsonDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19152
					case CrimsonDoorFacingSouth:
						return 19168
					case CrimsonDoorFacingWest:
						return 19184
					case CrimsonDoorFacingEast:
						return 19200
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19153
					case CrimsonDoorFacingSouth:
						return 19169
					case CrimsonDoorFacingWest:
						return 19185
					case CrimsonDoorFacingEast:
						return 19201
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19154
					case CrimsonDoorFacingSouth:
						return 19170
					case CrimsonDoorFacingWest:
						return 19186
					case CrimsonDoorFacingEast:
						return 19202
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19155
					case CrimsonDoorFacingSouth:
						return 19171
					case CrimsonDoorFacingWest:
						return 19187
					case CrimsonDoorFacingEast:
						return 19203
					}
				}
			}
		}
	case CrimsonDoorHalfLower:
		switch x.Hinge {
		case CrimsonDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19156
					case CrimsonDoorFacingSouth:
						return 19172
					case CrimsonDoorFacingWest:
						return 19188
					case CrimsonDoorFacingEast:
						return 19204
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19157
					case CrimsonDoorFacingSouth:
						return 19173
					case CrimsonDoorFacingWest:
						return 19189
					case CrimsonDoorFacingEast:
						return 19205
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19158
					case CrimsonDoorFacingSouth:
						return 19174
					case CrimsonDoorFacingWest:
						return 19190
					case CrimsonDoorFacingEast:
						return 19206
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19159
					case CrimsonDoorFacingSouth:
						return 19175
					case CrimsonDoorFacingWest:
						return 19191
					case CrimsonDoorFacingEast:
						return 19207
					}
				}
			}
		case CrimsonDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19160
					case CrimsonDoorFacingSouth:
						return 19176
					case CrimsonDoorFacingWest:
						return 19192
					case CrimsonDoorFacingEast:
						return 19208
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19161
					case CrimsonDoorFacingSouth:
						return 19177
					case CrimsonDoorFacingWest:
						return 19193
					case CrimsonDoorFacingEast:
						return 19209
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19162
					case CrimsonDoorFacingSouth:
						return 19178
					case CrimsonDoorFacingWest:
						return 19194
					case CrimsonDoorFacingEast:
						return 19210
					}
				case false:
					switch x.Facing {
					case CrimsonDoorFacingNorth:
						return 19163
					case CrimsonDoorFacingSouth:
						return 19179
					case CrimsonDoorFacingWest:
						return 19195
					case CrimsonDoorFacingEast:
						return 19211
					}
				}
			}
		}
	}
	return 19159 // default state
}

type WarpedDoorFacing string

const (
	WarpedDoorFacingNorth WarpedDoorFacing = "north"
	WarpedDoorFacingSouth WarpedDoorFacing = "south"
	WarpedDoorFacingWest  WarpedDoorFacing = "west"
	WarpedDoorFacingEast  WarpedDoorFacing = "east"
)

type WarpedDoorHalf string

const (
	WarpedDoorHalfUpper WarpedDoorHalf = "upper"
	WarpedDoorHalfLower WarpedDoorHalf = "lower"
)

type WarpedDoorHinge string

const (
	WarpedDoorHingeLeft  WarpedDoorHinge = "left"
	WarpedDoorHingeRight WarpedDoorHinge = "right"
)

type WarpedDoor struct {
	Facing  WarpedDoorFacing
	Half    WarpedDoorHalf
	Hinge   WarpedDoorHinge
	Open    bool
	Powered bool
}

func (x WarpedDoor) Id() uint16 {
	switch x.Hinge {
	case WarpedDoorHingeLeft:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19212
					case WarpedDoorHalfLower:
						return 19220
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19228
					case WarpedDoorHalfLower:
						return 19236
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19244
					case WarpedDoorHalfLower:
						return 19252
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19260
					case WarpedDoorHalfLower:
						return 19268
					}
				}
			case false:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19213
					case WarpedDoorHalfLower:
						return 19221
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19229
					case WarpedDoorHalfLower:
						return 19237
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19245
					case WarpedDoorHalfLower:
						return 19253
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19261
					case WarpedDoorHalfLower:
						return 19269
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19214
					case WarpedDoorHalfLower:
						return 19222
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19230
					case WarpedDoorHalfLower:
						return 19238
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19246
					case WarpedDoorHalfLower:
						return 19254
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19262
					case WarpedDoorHalfLower:
						return 19270
					}
				}
			case false:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19215
					case WarpedDoorHalfLower:
						return 19223
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19231
					case WarpedDoorHalfLower:
						return 19239
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19247
					case WarpedDoorHalfLower:
						return 19255
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19263
					case WarpedDoorHalfLower:
						return 19271
					}
				}
			}
		}
	case WarpedDoorHingeRight:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19216
					case WarpedDoorHalfLower:
						return 19224
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19232
					case WarpedDoorHalfLower:
						return 19240
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19248
					case WarpedDoorHalfLower:
						return 19256
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19264
					case WarpedDoorHalfLower:
						return 19272
					}
				}
			case false:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19217
					case WarpedDoorHalfLower:
						return 19225
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19233
					case WarpedDoorHalfLower:
						return 19241
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19249
					case WarpedDoorHalfLower:
						return 19257
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19265
					case WarpedDoorHalfLower:
						return 19273
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19218
					case WarpedDoorHalfLower:
						return 19226
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19234
					case WarpedDoorHalfLower:
						return 19242
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19250
					case WarpedDoorHalfLower:
						return 19258
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19266
					case WarpedDoorHalfLower:
						return 19274
					}
				}
			case false:
				switch x.Facing {
				case WarpedDoorFacingNorth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19219
					case WarpedDoorHalfLower:
						return 19227
					}
				case WarpedDoorFacingSouth:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19235
					case WarpedDoorHalfLower:
						return 19243
					}
				case WarpedDoorFacingWest:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19251
					case WarpedDoorHalfLower:
						return 19259
					}
				case WarpedDoorFacingEast:
					switch x.Half {
					case WarpedDoorHalfUpper:
						return 19267
					case WarpedDoorHalfLower:
						return 19275
					}
				}
			}
		}
	}
	return 19223 // default state
}

type CrimsonSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x CrimsonSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 19276
		case false:
			return 19277
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 19278
		case false:
			return 19279
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 19280
		case false:
			return 19281
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 19282
		case false:
			return 19283
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 19284
		case false:
			return 19285
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 19286
		case false:
			return 19287
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 19288
		case false:
			return 19289
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 19290
		case false:
			return 19291
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 19292
		case false:
			return 19293
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 19294
		case false:
			return 19295
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 19296
		case false:
			return 19297
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 19298
		case false:
			return 19299
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 19300
		case false:
			return 19301
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 19302
		case false:
			return 19303
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 19304
		case false:
			return 19305
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 19306
		case false:
			return 19307
		}
	}
	return 19277 // default state
}

type WarpedSign struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Rotation    int
	Waterlogged bool
}

func (x WarpedSign) Id() uint16 {
	switch x.Rotation {
	case 0:
		switch x.Waterlogged {
		case true:
			return 19308
		case false:
			return 19309
		}
	case 1:
		switch x.Waterlogged {
		case true:
			return 19310
		case false:
			return 19311
		}
	case 2:
		switch x.Waterlogged {
		case true:
			return 19312
		case false:
			return 19313
		}
	case 3:
		switch x.Waterlogged {
		case true:
			return 19314
		case false:
			return 19315
		}
	case 4:
		switch x.Waterlogged {
		case true:
			return 19316
		case false:
			return 19317
		}
	case 5:
		switch x.Waterlogged {
		case true:
			return 19318
		case false:
			return 19319
		}
	case 6:
		switch x.Waterlogged {
		case true:
			return 19320
		case false:
			return 19321
		}
	case 7:
		switch x.Waterlogged {
		case true:
			return 19322
		case false:
			return 19323
		}
	case 8:
		switch x.Waterlogged {
		case true:
			return 19324
		case false:
			return 19325
		}
	case 9:
		switch x.Waterlogged {
		case true:
			return 19326
		case false:
			return 19327
		}
	case 10:
		switch x.Waterlogged {
		case true:
			return 19328
		case false:
			return 19329
		}
	case 11:
		switch x.Waterlogged {
		case true:
			return 19330
		case false:
			return 19331
		}
	case 12:
		switch x.Waterlogged {
		case true:
			return 19332
		case false:
			return 19333
		}
	case 13:
		switch x.Waterlogged {
		case true:
			return 19334
		case false:
			return 19335
		}
	case 14:
		switch x.Waterlogged {
		case true:
			return 19336
		case false:
			return 19337
		}
	case 15:
		switch x.Waterlogged {
		case true:
			return 19338
		case false:
			return 19339
		}
	}
	return 19309 // default state
}

type CrimsonWallSignFacing string

const (
	CrimsonWallSignFacingNorth CrimsonWallSignFacing = "north"
	CrimsonWallSignFacingSouth CrimsonWallSignFacing = "south"
	CrimsonWallSignFacingWest  CrimsonWallSignFacing = "west"
	CrimsonWallSignFacingEast  CrimsonWallSignFacing = "east"
)

type CrimsonWallSign struct {
	Waterlogged bool
	Facing      CrimsonWallSignFacing
}

func (x CrimsonWallSign) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CrimsonWallSignFacingNorth:
			return 19340
		case CrimsonWallSignFacingSouth:
			return 19342
		case CrimsonWallSignFacingWest:
			return 19344
		case CrimsonWallSignFacingEast:
			return 19346
		}
	case false:
		switch x.Facing {
		case CrimsonWallSignFacingNorth:
			return 19341
		case CrimsonWallSignFacingSouth:
			return 19343
		case CrimsonWallSignFacingWest:
			return 19345
		case CrimsonWallSignFacingEast:
			return 19347
		}
	}
	return 19341 // default state
}

type WarpedWallSignFacing string

const (
	WarpedWallSignFacingNorth WarpedWallSignFacing = "north"
	WarpedWallSignFacingSouth WarpedWallSignFacing = "south"
	WarpedWallSignFacingWest  WarpedWallSignFacing = "west"
	WarpedWallSignFacingEast  WarpedWallSignFacing = "east"
)

type WarpedWallSign struct {
	Waterlogged bool
	Facing      WarpedWallSignFacing
}

func (x WarpedWallSign) Id() uint16 {
	switch x.Facing {
	case WarpedWallSignFacingNorth:
		switch x.Waterlogged {
		case true:
			return 19348
		case false:
			return 19349
		}
	case WarpedWallSignFacingSouth:
		switch x.Waterlogged {
		case true:
			return 19350
		case false:
			return 19351
		}
	case WarpedWallSignFacingWest:
		switch x.Waterlogged {
		case true:
			return 19352
		case false:
			return 19353
		}
	case WarpedWallSignFacingEast:
		switch x.Waterlogged {
		case true:
			return 19354
		case false:
			return 19355
		}
	}
	return 19349 // default state
}

type StructureBlockMode string

const (
	StructureBlockModeSave   StructureBlockMode = "save"
	StructureBlockModeLoad   StructureBlockMode = "load"
	StructureBlockModeCorner StructureBlockMode = "corner"
	StructureBlockModeData   StructureBlockMode = "data"
)

type StructureBlock struct {
	Mode StructureBlockMode
}

func (x StructureBlock) Id() uint16 {
	switch x.Mode {
	case StructureBlockModeSave:
		return 19356
	case StructureBlockModeLoad:
		return 19357
	case StructureBlockModeCorner:
		return 19358
	case StructureBlockModeData:
		return 19359
	}
	return 19357 // default state
}

type JigsawOrientation string

const (
	JigsawOrientationDownEast  JigsawOrientation = "down_east"
	JigsawOrientationDownNorth JigsawOrientation = "down_north"
	JigsawOrientationDownSouth JigsawOrientation = "down_south"
	JigsawOrientationDownWest  JigsawOrientation = "down_west"
	JigsawOrientationUpEast    JigsawOrientation = "up_east"
	JigsawOrientationUpNorth   JigsawOrientation = "up_north"
	JigsawOrientationUpSouth   JigsawOrientation = "up_south"
	JigsawOrientationUpWest    JigsawOrientation = "up_west"
	JigsawOrientationWestUp    JigsawOrientation = "west_up"
	JigsawOrientationEastUp    JigsawOrientation = "east_up"
	JigsawOrientationNorthUp   JigsawOrientation = "north_up"
	JigsawOrientationSouthUp   JigsawOrientation = "south_up"
)

type Jigsaw struct {
	Orientation JigsawOrientation
}

func (x Jigsaw) Id() uint16 {
	switch x.Orientation {
	case JigsawOrientationDownEast:
		return 19360
	case JigsawOrientationDownNorth:
		return 19361
	case JigsawOrientationDownSouth:
		return 19362
	case JigsawOrientationDownWest:
		return 19363
	case JigsawOrientationUpEast:
		return 19364
	case JigsawOrientationUpNorth:
		return 19365
	case JigsawOrientationUpSouth:
		return 19366
	case JigsawOrientationUpWest:
		return 19367
	case JigsawOrientationWestUp:
		return 19368
	case JigsawOrientationEastUp:
		return 19369
	case JigsawOrientationNorthUp:
		return 19370
	case JigsawOrientationSouthUp:
		return 19371
	}
	return 19370 // default state
}

type Composter struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8
	Level int
}

func (x Composter) Id() uint16 {
	switch x.Level {
	case 0:
		return 19372
	case 1:
		return 19373
	case 2:
		return 19374
	case 3:
		return 19375
	case 4:
		return 19376
	case 5:
		return 19377
	case 6:
		return 19378
	case 7:
		return 19379
	case 8:
		return 19380
	}
	return 19372 // default state
}

type Target struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power int
}

func (x Target) Id() uint16 {
	switch x.Power {
	case 0:
		return 19381
	case 1:
		return 19382
	case 2:
		return 19383
	case 3:
		return 19384
	case 4:
		return 19385
	case 5:
		return 19386
	case 6:
		return 19387
	case 7:
		return 19388
	case 8:
		return 19389
	case 9:
		return 19390
	case 10:
		return 19391
	case 11:
		return 19392
	case 12:
		return 19393
	case 13:
		return 19394
	case 14:
		return 19395
	case 15:
		return 19396
	}
	return 19381 // default state
}

type BeeNestFacing string

const (
	BeeNestFacingNorth BeeNestFacing = "north"
	BeeNestFacingSouth BeeNestFacing = "south"
	BeeNestFacingWest  BeeNestFacing = "west"
	BeeNestFacingEast  BeeNestFacing = "east"
)

type BeeNest struct {
	Facing BeeNestFacing
	// Valid values: 0, 1, 2, 3, 4, 5
	HoneyLevel int
}

func (x BeeNest) Id() uint16 {
	switch x.Facing {
	case BeeNestFacingNorth:
		switch x.HoneyLevel {
		case 0:
			return 19397
		case 1:
			return 19398
		case 2:
			return 19399
		case 3:
			return 19400
		case 4:
			return 19401
		case 5:
			return 19402
		}
	case BeeNestFacingSouth:
		switch x.HoneyLevel {
		case 0:
			return 19403
		case 1:
			return 19404
		case 2:
			return 19405
		case 3:
			return 19406
		case 4:
			return 19407
		case 5:
			return 19408
		}
	case BeeNestFacingWest:
		switch x.HoneyLevel {
		case 0:
			return 19409
		case 1:
			return 19410
		case 2:
			return 19411
		case 3:
			return 19412
		case 4:
			return 19413
		case 5:
			return 19414
		}
	case BeeNestFacingEast:
		switch x.HoneyLevel {
		case 0:
			return 19415
		case 1:
			return 19416
		case 2:
			return 19417
		case 3:
			return 19418
		case 4:
			return 19419
		case 5:
			return 19420
		}
	}
	return 19397 // default state
}

type BeehiveFacing string

const (
	BeehiveFacingNorth BeehiveFacing = "north"
	BeehiveFacingSouth BeehiveFacing = "south"
	BeehiveFacingWest  BeehiveFacing = "west"
	BeehiveFacingEast  BeehiveFacing = "east"
)

type Beehive struct {
	Facing BeehiveFacing
	// Valid values: 0, 1, 2, 3, 4, 5
	HoneyLevel int
}

func (x Beehive) Id() uint16 {
	switch x.Facing {
	case BeehiveFacingNorth:
		switch x.HoneyLevel {
		case 0:
			return 19421
		case 1:
			return 19422
		case 2:
			return 19423
		case 3:
			return 19424
		case 4:
			return 19425
		case 5:
			return 19426
		}
	case BeehiveFacingSouth:
		switch x.HoneyLevel {
		case 0:
			return 19427
		case 1:
			return 19428
		case 2:
			return 19429
		case 3:
			return 19430
		case 4:
			return 19431
		case 5:
			return 19432
		}
	case BeehiveFacingWest:
		switch x.HoneyLevel {
		case 0:
			return 19433
		case 1:
			return 19434
		case 2:
			return 19435
		case 3:
			return 19436
		case 4:
			return 19437
		case 5:
			return 19438
		}
	case BeehiveFacingEast:
		switch x.HoneyLevel {
		case 0:
			return 19439
		case 1:
			return 19440
		case 2:
			return 19441
		case 3:
			return 19442
		case 4:
			return 19443
		case 5:
			return 19444
		}
	}
	return 19421 // default state
}

type HoneyBlock struct{}

func (x HoneyBlock) Id() uint16 {
	return 19445
}

type HoneycombBlock struct{}

func (x HoneycombBlock) Id() uint16 {
	return 19446
}

type NetheriteBlock struct{}

func (x NetheriteBlock) Id() uint16 {
	return 19447
}

type AncientDebris struct{}

func (x AncientDebris) Id() uint16 {
	return 19448
}

type CryingObsidian struct{}

func (x CryingObsidian) Id() uint16 {
	return 19449
}

type RespawnAnchor struct {
	// Valid values: 0, 1, 2, 3, 4
	Charges int
}

func (x RespawnAnchor) Id() uint16 {
	switch x.Charges {
	case 0:
		return 19450
	case 1:
		return 19451
	case 2:
		return 19452
	case 3:
		return 19453
	case 4:
		return 19454
	}
	return 19450 // default state
}

type PottedCrimsonFungus struct{}

func (x PottedCrimsonFungus) Id() uint16 {
	return 19455
}

type PottedWarpedFungus struct{}

func (x PottedWarpedFungus) Id() uint16 {
	return 19456
}

type PottedCrimsonRoots struct{}

func (x PottedCrimsonRoots) Id() uint16 {
	return 19457
}

type PottedWarpedRoots struct{}

func (x PottedWarpedRoots) Id() uint16 {
	return 19458
}

type Lodestone struct{}

func (x Lodestone) Id() uint16 {
	return 19459
}

type Blackstone struct{}

func (x Blackstone) Id() uint16 {
	return 19460
}

type BlackstoneStairsFacing string

const (
	BlackstoneStairsFacingNorth BlackstoneStairsFacing = "north"
	BlackstoneStairsFacingSouth BlackstoneStairsFacing = "south"
	BlackstoneStairsFacingWest  BlackstoneStairsFacing = "west"
	BlackstoneStairsFacingEast  BlackstoneStairsFacing = "east"
)

type BlackstoneStairsHalf string

const (
	BlackstoneStairsHalfTop    BlackstoneStairsHalf = "top"
	BlackstoneStairsHalfBottom BlackstoneStairsHalf = "bottom"
)

type BlackstoneStairsShape string

const (
	BlackstoneStairsShapeStraight   BlackstoneStairsShape = "straight"
	BlackstoneStairsShapeInnerLeft  BlackstoneStairsShape = "inner_left"
	BlackstoneStairsShapeInnerRight BlackstoneStairsShape = "inner_right"
	BlackstoneStairsShapeOuterLeft  BlackstoneStairsShape = "outer_left"
	BlackstoneStairsShapeOuterRight BlackstoneStairsShape = "outer_right"
)

type BlackstoneStairs struct {
	Waterlogged bool
	Facing      BlackstoneStairsFacing
	Half        BlackstoneStairsHalf
	Shape       BlackstoneStairsShape
}

func (x BlackstoneStairs) Id() uint16 {
	switch x.Facing {
	case BlackstoneStairsFacingNorth:
		switch x.Half {
		case BlackstoneStairsHalfTop:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19461
				case false:
					return 19462
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19463
				case false:
					return 19464
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19465
				case false:
					return 19466
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19467
				case false:
					return 19468
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19469
				case false:
					return 19470
				}
			}
		case BlackstoneStairsHalfBottom:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19471
				case false:
					return 19472
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19473
				case false:
					return 19474
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19475
				case false:
					return 19476
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19477
				case false:
					return 19478
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19479
				case false:
					return 19480
				}
			}
		}
	case BlackstoneStairsFacingSouth:
		switch x.Half {
		case BlackstoneStairsHalfTop:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19481
				case false:
					return 19482
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19483
				case false:
					return 19484
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19485
				case false:
					return 19486
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19487
				case false:
					return 19488
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19489
				case false:
					return 19490
				}
			}
		case BlackstoneStairsHalfBottom:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19491
				case false:
					return 19492
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19493
				case false:
					return 19494
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19495
				case false:
					return 19496
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19497
				case false:
					return 19498
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19499
				case false:
					return 19500
				}
			}
		}
	case BlackstoneStairsFacingWest:
		switch x.Half {
		case BlackstoneStairsHalfTop:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19501
				case false:
					return 19502
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19503
				case false:
					return 19504
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19505
				case false:
					return 19506
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19507
				case false:
					return 19508
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19509
				case false:
					return 19510
				}
			}
		case BlackstoneStairsHalfBottom:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19511
				case false:
					return 19512
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19513
				case false:
					return 19514
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19515
				case false:
					return 19516
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19517
				case false:
					return 19518
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19519
				case false:
					return 19520
				}
			}
		}
	case BlackstoneStairsFacingEast:
		switch x.Half {
		case BlackstoneStairsHalfTop:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19521
				case false:
					return 19522
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19523
				case false:
					return 19524
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19525
				case false:
					return 19526
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19527
				case false:
					return 19528
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19529
				case false:
					return 19530
				}
			}
		case BlackstoneStairsHalfBottom:
			switch x.Shape {
			case BlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 19531
				case false:
					return 19532
				}
			case BlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 19533
				case false:
					return 19534
				}
			case BlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 19535
				case false:
					return 19536
				}
			case BlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 19537
				case false:
					return 19538
				}
			case BlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 19539
				case false:
					return 19540
				}
			}
		}
	}
	return 19472 // default state
}

type BlackstoneWallWest string

const (
	BlackstoneWallWestNone BlackstoneWallWest = "none"
	BlackstoneWallWestLow  BlackstoneWallWest = "low"
	BlackstoneWallWestTall BlackstoneWallWest = "tall"
)

type BlackstoneWallEast string

const (
	BlackstoneWallEastNone BlackstoneWallEast = "none"
	BlackstoneWallEastLow  BlackstoneWallEast = "low"
	BlackstoneWallEastTall BlackstoneWallEast = "tall"
)

type BlackstoneWallNorth string

const (
	BlackstoneWallNorthNone BlackstoneWallNorth = "none"
	BlackstoneWallNorthLow  BlackstoneWallNorth = "low"
	BlackstoneWallNorthTall BlackstoneWallNorth = "tall"
)

type BlackstoneWallSouth string

const (
	BlackstoneWallSouthNone BlackstoneWallSouth = "none"
	BlackstoneWallSouthLow  BlackstoneWallSouth = "low"
	BlackstoneWallSouthTall BlackstoneWallSouth = "tall"
)

type BlackstoneWall struct {
	Waterlogged bool
	West        BlackstoneWallWest
	East        BlackstoneWallEast
	North       BlackstoneWallNorth
	South       BlackstoneWallSouth
	Up          bool
}

func (x BlackstoneWall) Id() uint16 {
	switch x.South {
	case BlackstoneWallSouthNone:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19541
						case BlackstoneWallNorthLow:
							return 19577
						case BlackstoneWallNorthTall:
							return 19613
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19649
						case BlackstoneWallNorthLow:
							return 19685
						case BlackstoneWallNorthTall:
							return 19721
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19757
						case BlackstoneWallNorthLow:
							return 19793
						case BlackstoneWallNorthTall:
							return 19829
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19542
						case BlackstoneWallNorthLow:
							return 19578
						case BlackstoneWallNorthTall:
							return 19614
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19650
						case BlackstoneWallNorthLow:
							return 19686
						case BlackstoneWallNorthTall:
							return 19722
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19758
						case BlackstoneWallNorthLow:
							return 19794
						case BlackstoneWallNorthTall:
							return 19830
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19543
						case BlackstoneWallNorthLow:
							return 19579
						case BlackstoneWallNorthTall:
							return 19615
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19651
						case BlackstoneWallNorthLow:
							return 19687
						case BlackstoneWallNorthTall:
							return 19723
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19759
						case BlackstoneWallNorthLow:
							return 19795
						case BlackstoneWallNorthTall:
							return 19831
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19544
						case BlackstoneWallNorthLow:
							return 19580
						case BlackstoneWallNorthTall:
							return 19616
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19652
						case BlackstoneWallNorthLow:
							return 19688
						case BlackstoneWallNorthTall:
							return 19724
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19760
						case BlackstoneWallNorthLow:
							return 19796
						case BlackstoneWallNorthTall:
							return 19832
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19545
						case BlackstoneWallNorthLow:
							return 19581
						case BlackstoneWallNorthTall:
							return 19617
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19653
						case BlackstoneWallNorthLow:
							return 19689
						case BlackstoneWallNorthTall:
							return 19725
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19761
						case BlackstoneWallNorthLow:
							return 19797
						case BlackstoneWallNorthTall:
							return 19833
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19546
						case BlackstoneWallNorthLow:
							return 19582
						case BlackstoneWallNorthTall:
							return 19618
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19654
						case BlackstoneWallNorthLow:
							return 19690
						case BlackstoneWallNorthTall:
							return 19726
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19762
						case BlackstoneWallNorthLow:
							return 19798
						case BlackstoneWallNorthTall:
							return 19834
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19547
						case BlackstoneWallNorthLow:
							return 19583
						case BlackstoneWallNorthTall:
							return 19619
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19655
						case BlackstoneWallNorthLow:
							return 19691
						case BlackstoneWallNorthTall:
							return 19727
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19763
						case BlackstoneWallNorthLow:
							return 19799
						case BlackstoneWallNorthTall:
							return 19835
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19548
						case BlackstoneWallNorthLow:
							return 19584
						case BlackstoneWallNorthTall:
							return 19620
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19656
						case BlackstoneWallNorthLow:
							return 19692
						case BlackstoneWallNorthTall:
							return 19728
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19764
						case BlackstoneWallNorthLow:
							return 19800
						case BlackstoneWallNorthTall:
							return 19836
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19549
						case BlackstoneWallNorthLow:
							return 19585
						case BlackstoneWallNorthTall:
							return 19621
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19657
						case BlackstoneWallNorthLow:
							return 19693
						case BlackstoneWallNorthTall:
							return 19729
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19765
						case BlackstoneWallNorthLow:
							return 19801
						case BlackstoneWallNorthTall:
							return 19837
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19550
						case BlackstoneWallNorthLow:
							return 19586
						case BlackstoneWallNorthTall:
							return 19622
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19658
						case BlackstoneWallNorthLow:
							return 19694
						case BlackstoneWallNorthTall:
							return 19730
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19766
						case BlackstoneWallNorthLow:
							return 19802
						case BlackstoneWallNorthTall:
							return 19838
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19551
						case BlackstoneWallNorthLow:
							return 19587
						case BlackstoneWallNorthTall:
							return 19623
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19659
						case BlackstoneWallNorthLow:
							return 19695
						case BlackstoneWallNorthTall:
							return 19731
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19767
						case BlackstoneWallNorthLow:
							return 19803
						case BlackstoneWallNorthTall:
							return 19839
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19552
						case BlackstoneWallNorthLow:
							return 19588
						case BlackstoneWallNorthTall:
							return 19624
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19660
						case BlackstoneWallNorthLow:
							return 19696
						case BlackstoneWallNorthTall:
							return 19732
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19768
						case BlackstoneWallNorthLow:
							return 19804
						case BlackstoneWallNorthTall:
							return 19840
						}
					}
				}
			}
		}
	case BlackstoneWallSouthLow:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19553
						case BlackstoneWallNorthLow:
							return 19589
						case BlackstoneWallNorthTall:
							return 19625
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19661
						case BlackstoneWallNorthLow:
							return 19697
						case BlackstoneWallNorthTall:
							return 19733
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19769
						case BlackstoneWallNorthLow:
							return 19805
						case BlackstoneWallNorthTall:
							return 19841
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19554
						case BlackstoneWallNorthLow:
							return 19590
						case BlackstoneWallNorthTall:
							return 19626
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19662
						case BlackstoneWallNorthLow:
							return 19698
						case BlackstoneWallNorthTall:
							return 19734
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19770
						case BlackstoneWallNorthLow:
							return 19806
						case BlackstoneWallNorthTall:
							return 19842
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19555
						case BlackstoneWallNorthLow:
							return 19591
						case BlackstoneWallNorthTall:
							return 19627
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19663
						case BlackstoneWallNorthLow:
							return 19699
						case BlackstoneWallNorthTall:
							return 19735
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19771
						case BlackstoneWallNorthLow:
							return 19807
						case BlackstoneWallNorthTall:
							return 19843
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19556
						case BlackstoneWallNorthLow:
							return 19592
						case BlackstoneWallNorthTall:
							return 19628
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19664
						case BlackstoneWallNorthLow:
							return 19700
						case BlackstoneWallNorthTall:
							return 19736
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19772
						case BlackstoneWallNorthLow:
							return 19808
						case BlackstoneWallNorthTall:
							return 19844
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19557
						case BlackstoneWallNorthLow:
							return 19593
						case BlackstoneWallNorthTall:
							return 19629
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19665
						case BlackstoneWallNorthLow:
							return 19701
						case BlackstoneWallNorthTall:
							return 19737
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19773
						case BlackstoneWallNorthLow:
							return 19809
						case BlackstoneWallNorthTall:
							return 19845
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19558
						case BlackstoneWallNorthLow:
							return 19594
						case BlackstoneWallNorthTall:
							return 19630
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19666
						case BlackstoneWallNorthLow:
							return 19702
						case BlackstoneWallNorthTall:
							return 19738
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19774
						case BlackstoneWallNorthLow:
							return 19810
						case BlackstoneWallNorthTall:
							return 19846
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19559
						case BlackstoneWallNorthLow:
							return 19595
						case BlackstoneWallNorthTall:
							return 19631
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19667
						case BlackstoneWallNorthLow:
							return 19703
						case BlackstoneWallNorthTall:
							return 19739
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19775
						case BlackstoneWallNorthLow:
							return 19811
						case BlackstoneWallNorthTall:
							return 19847
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19560
						case BlackstoneWallNorthLow:
							return 19596
						case BlackstoneWallNorthTall:
							return 19632
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19668
						case BlackstoneWallNorthLow:
							return 19704
						case BlackstoneWallNorthTall:
							return 19740
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19776
						case BlackstoneWallNorthLow:
							return 19812
						case BlackstoneWallNorthTall:
							return 19848
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19561
						case BlackstoneWallNorthLow:
							return 19597
						case BlackstoneWallNorthTall:
							return 19633
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19669
						case BlackstoneWallNorthLow:
							return 19705
						case BlackstoneWallNorthTall:
							return 19741
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19777
						case BlackstoneWallNorthLow:
							return 19813
						case BlackstoneWallNorthTall:
							return 19849
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19562
						case BlackstoneWallNorthLow:
							return 19598
						case BlackstoneWallNorthTall:
							return 19634
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19670
						case BlackstoneWallNorthLow:
							return 19706
						case BlackstoneWallNorthTall:
							return 19742
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19778
						case BlackstoneWallNorthLow:
							return 19814
						case BlackstoneWallNorthTall:
							return 19850
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19563
						case BlackstoneWallNorthLow:
							return 19599
						case BlackstoneWallNorthTall:
							return 19635
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19671
						case BlackstoneWallNorthLow:
							return 19707
						case BlackstoneWallNorthTall:
							return 19743
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19779
						case BlackstoneWallNorthLow:
							return 19815
						case BlackstoneWallNorthTall:
							return 19851
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19564
						case BlackstoneWallNorthLow:
							return 19600
						case BlackstoneWallNorthTall:
							return 19636
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19672
						case BlackstoneWallNorthLow:
							return 19708
						case BlackstoneWallNorthTall:
							return 19744
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19780
						case BlackstoneWallNorthLow:
							return 19816
						case BlackstoneWallNorthTall:
							return 19852
						}
					}
				}
			}
		}
	case BlackstoneWallSouthTall:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19565
						case BlackstoneWallNorthLow:
							return 19601
						case BlackstoneWallNorthTall:
							return 19637
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19673
						case BlackstoneWallNorthLow:
							return 19709
						case BlackstoneWallNorthTall:
							return 19745
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19781
						case BlackstoneWallNorthLow:
							return 19817
						case BlackstoneWallNorthTall:
							return 19853
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19566
						case BlackstoneWallNorthLow:
							return 19602
						case BlackstoneWallNorthTall:
							return 19638
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19674
						case BlackstoneWallNorthLow:
							return 19710
						case BlackstoneWallNorthTall:
							return 19746
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19782
						case BlackstoneWallNorthLow:
							return 19818
						case BlackstoneWallNorthTall:
							return 19854
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19567
						case BlackstoneWallNorthLow:
							return 19603
						case BlackstoneWallNorthTall:
							return 19639
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19675
						case BlackstoneWallNorthLow:
							return 19711
						case BlackstoneWallNorthTall:
							return 19747
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19783
						case BlackstoneWallNorthLow:
							return 19819
						case BlackstoneWallNorthTall:
							return 19855
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19568
						case BlackstoneWallNorthLow:
							return 19604
						case BlackstoneWallNorthTall:
							return 19640
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19676
						case BlackstoneWallNorthLow:
							return 19712
						case BlackstoneWallNorthTall:
							return 19748
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19784
						case BlackstoneWallNorthLow:
							return 19820
						case BlackstoneWallNorthTall:
							return 19856
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19569
						case BlackstoneWallNorthLow:
							return 19605
						case BlackstoneWallNorthTall:
							return 19641
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19677
						case BlackstoneWallNorthLow:
							return 19713
						case BlackstoneWallNorthTall:
							return 19749
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19785
						case BlackstoneWallNorthLow:
							return 19821
						case BlackstoneWallNorthTall:
							return 19857
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19570
						case BlackstoneWallNorthLow:
							return 19606
						case BlackstoneWallNorthTall:
							return 19642
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19678
						case BlackstoneWallNorthLow:
							return 19714
						case BlackstoneWallNorthTall:
							return 19750
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19786
						case BlackstoneWallNorthLow:
							return 19822
						case BlackstoneWallNorthTall:
							return 19858
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19571
						case BlackstoneWallNorthLow:
							return 19607
						case BlackstoneWallNorthTall:
							return 19643
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19679
						case BlackstoneWallNorthLow:
							return 19715
						case BlackstoneWallNorthTall:
							return 19751
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19787
						case BlackstoneWallNorthLow:
							return 19823
						case BlackstoneWallNorthTall:
							return 19859
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19572
						case BlackstoneWallNorthLow:
							return 19608
						case BlackstoneWallNorthTall:
							return 19644
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19680
						case BlackstoneWallNorthLow:
							return 19716
						case BlackstoneWallNorthTall:
							return 19752
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19788
						case BlackstoneWallNorthLow:
							return 19824
						case BlackstoneWallNorthTall:
							return 19860
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19573
						case BlackstoneWallNorthLow:
							return 19609
						case BlackstoneWallNorthTall:
							return 19645
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19681
						case BlackstoneWallNorthLow:
							return 19717
						case BlackstoneWallNorthTall:
							return 19753
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19789
						case BlackstoneWallNorthLow:
							return 19825
						case BlackstoneWallNorthTall:
							return 19861
						}
					}
				}
			case false:
				switch x.West {
				case BlackstoneWallWestNone:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19574
						case BlackstoneWallNorthLow:
							return 19610
						case BlackstoneWallNorthTall:
							return 19646
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19682
						case BlackstoneWallNorthLow:
							return 19718
						case BlackstoneWallNorthTall:
							return 19754
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19790
						case BlackstoneWallNorthLow:
							return 19826
						case BlackstoneWallNorthTall:
							return 19862
						}
					}
				case BlackstoneWallWestLow:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19575
						case BlackstoneWallNorthLow:
							return 19611
						case BlackstoneWallNorthTall:
							return 19647
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19683
						case BlackstoneWallNorthLow:
							return 19719
						case BlackstoneWallNorthTall:
							return 19755
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19791
						case BlackstoneWallNorthLow:
							return 19827
						case BlackstoneWallNorthTall:
							return 19863
						}
					}
				case BlackstoneWallWestTall:
					switch x.East {
					case BlackstoneWallEastNone:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19576
						case BlackstoneWallNorthLow:
							return 19612
						case BlackstoneWallNorthTall:
							return 19648
						}
					case BlackstoneWallEastLow:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19684
						case BlackstoneWallNorthLow:
							return 19720
						case BlackstoneWallNorthTall:
							return 19756
						}
					case BlackstoneWallEastTall:
						switch x.North {
						case BlackstoneWallNorthNone:
							return 19792
						case BlackstoneWallNorthLow:
							return 19828
						case BlackstoneWallNorthTall:
							return 19864
						}
					}
				}
			}
		}
	}
	return 19544 // default state
}

type BlackstoneSlabType string

const (
	BlackstoneSlabTypeTop    BlackstoneSlabType = "top"
	BlackstoneSlabTypeBottom BlackstoneSlabType = "bottom"
	BlackstoneSlabTypeDouble BlackstoneSlabType = "double"
)

type BlackstoneSlab struct {
	Type        BlackstoneSlabType
	Waterlogged bool
}

func (x BlackstoneSlab) Id() uint16 {
	switch x.Type {
	case BlackstoneSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 19865
		case false:
			return 19866
		}
	case BlackstoneSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 19867
		case false:
			return 19868
		}
	case BlackstoneSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 19869
		case false:
			return 19870
		}
	}
	return 19868 // default state
}

type PolishedBlackstone struct{}

func (x PolishedBlackstone) Id() uint16 {
	return 19871
}

type PolishedBlackstoneBricks struct{}

func (x PolishedBlackstoneBricks) Id() uint16 {
	return 19872
}

type CrackedPolishedBlackstoneBricks struct{}

func (x CrackedPolishedBlackstoneBricks) Id() uint16 {
	return 19873
}

type ChiseledPolishedBlackstone struct{}

func (x ChiseledPolishedBlackstone) Id() uint16 {
	return 19874
}

type PolishedBlackstoneBrickSlabType string

const (
	PolishedBlackstoneBrickSlabTypeTop    PolishedBlackstoneBrickSlabType = "top"
	PolishedBlackstoneBrickSlabTypeBottom PolishedBlackstoneBrickSlabType = "bottom"
	PolishedBlackstoneBrickSlabTypeDouble PolishedBlackstoneBrickSlabType = "double"
)

type PolishedBlackstoneBrickSlab struct {
	Type        PolishedBlackstoneBrickSlabType
	Waterlogged bool
}

func (x PolishedBlackstoneBrickSlab) Id() uint16 {
	switch x.Type {
	case PolishedBlackstoneBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 19875
		case false:
			return 19876
		}
	case PolishedBlackstoneBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 19877
		case false:
			return 19878
		}
	case PolishedBlackstoneBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 19879
		case false:
			return 19880
		}
	}
	return 19878 // default state
}

type PolishedBlackstoneBrickStairsFacing string

const (
	PolishedBlackstoneBrickStairsFacingNorth PolishedBlackstoneBrickStairsFacing = "north"
	PolishedBlackstoneBrickStairsFacingSouth PolishedBlackstoneBrickStairsFacing = "south"
	PolishedBlackstoneBrickStairsFacingWest  PolishedBlackstoneBrickStairsFacing = "west"
	PolishedBlackstoneBrickStairsFacingEast  PolishedBlackstoneBrickStairsFacing = "east"
)

type PolishedBlackstoneBrickStairsHalf string

const (
	PolishedBlackstoneBrickStairsHalfTop    PolishedBlackstoneBrickStairsHalf = "top"
	PolishedBlackstoneBrickStairsHalfBottom PolishedBlackstoneBrickStairsHalf = "bottom"
)

type PolishedBlackstoneBrickStairsShape string

const (
	PolishedBlackstoneBrickStairsShapeStraight   PolishedBlackstoneBrickStairsShape = "straight"
	PolishedBlackstoneBrickStairsShapeInnerLeft  PolishedBlackstoneBrickStairsShape = "inner_left"
	PolishedBlackstoneBrickStairsShapeInnerRight PolishedBlackstoneBrickStairsShape = "inner_right"
	PolishedBlackstoneBrickStairsShapeOuterLeft  PolishedBlackstoneBrickStairsShape = "outer_left"
	PolishedBlackstoneBrickStairsShapeOuterRight PolishedBlackstoneBrickStairsShape = "outer_right"
)

type PolishedBlackstoneBrickStairs struct {
	Facing      PolishedBlackstoneBrickStairsFacing
	Half        PolishedBlackstoneBrickStairsHalf
	Shape       PolishedBlackstoneBrickStairsShape
	Waterlogged bool
}

func (x PolishedBlackstoneBrickStairs) Id() uint16 {
	switch x.Half {
	case PolishedBlackstoneBrickStairsHalfTop:
		switch x.Shape {
		case PolishedBlackstoneBrickStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19881
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19901
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19921
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19941
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19882
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19902
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19922
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19942
				}
			}
		case PolishedBlackstoneBrickStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19883
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19903
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19923
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19943
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19884
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19904
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19924
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19944
				}
			}
		case PolishedBlackstoneBrickStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19885
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19905
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19925
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19945
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19886
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19906
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19926
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19946
				}
			}
		case PolishedBlackstoneBrickStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19887
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19907
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19927
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19947
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19888
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19908
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19928
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19948
				}
			}
		case PolishedBlackstoneBrickStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19889
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19909
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19929
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19949
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19890
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19910
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19930
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19950
				}
			}
		}
	case PolishedBlackstoneBrickStairsHalfBottom:
		switch x.Shape {
		case PolishedBlackstoneBrickStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19891
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19911
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19931
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19951
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19892
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19912
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19932
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19952
				}
			}
		case PolishedBlackstoneBrickStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19893
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19913
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19933
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19953
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19894
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19914
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19934
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19954
				}
			}
		case PolishedBlackstoneBrickStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19895
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19915
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19935
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19955
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19896
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19916
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19936
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19956
				}
			}
		case PolishedBlackstoneBrickStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19897
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19917
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19937
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19957
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19898
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19918
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19938
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19958
				}
			}
		case PolishedBlackstoneBrickStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19899
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19919
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19939
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19959
				}
			case false:
				switch x.Facing {
				case PolishedBlackstoneBrickStairsFacingNorth:
					return 19900
				case PolishedBlackstoneBrickStairsFacingSouth:
					return 19920
				case PolishedBlackstoneBrickStairsFacingWest:
					return 19940
				case PolishedBlackstoneBrickStairsFacingEast:
					return 19960
				}
			}
		}
	}
	return 19892 // default state
}

type PolishedBlackstoneBrickWallWest string

const (
	PolishedBlackstoneBrickWallWestNone PolishedBlackstoneBrickWallWest = "none"
	PolishedBlackstoneBrickWallWestLow  PolishedBlackstoneBrickWallWest = "low"
	PolishedBlackstoneBrickWallWestTall PolishedBlackstoneBrickWallWest = "tall"
)

type PolishedBlackstoneBrickWallEast string

const (
	PolishedBlackstoneBrickWallEastNone PolishedBlackstoneBrickWallEast = "none"
	PolishedBlackstoneBrickWallEastLow  PolishedBlackstoneBrickWallEast = "low"
	PolishedBlackstoneBrickWallEastTall PolishedBlackstoneBrickWallEast = "tall"
)

type PolishedBlackstoneBrickWallNorth string

const (
	PolishedBlackstoneBrickWallNorthNone PolishedBlackstoneBrickWallNorth = "none"
	PolishedBlackstoneBrickWallNorthLow  PolishedBlackstoneBrickWallNorth = "low"
	PolishedBlackstoneBrickWallNorthTall PolishedBlackstoneBrickWallNorth = "tall"
)

type PolishedBlackstoneBrickWallSouth string

const (
	PolishedBlackstoneBrickWallSouthNone PolishedBlackstoneBrickWallSouth = "none"
	PolishedBlackstoneBrickWallSouthLow  PolishedBlackstoneBrickWallSouth = "low"
	PolishedBlackstoneBrickWallSouthTall PolishedBlackstoneBrickWallSouth = "tall"
)

type PolishedBlackstoneBrickWall struct {
	West        PolishedBlackstoneBrickWallWest
	East        PolishedBlackstoneBrickWallEast
	North       PolishedBlackstoneBrickWallNorth
	South       PolishedBlackstoneBrickWallSouth
	Up          bool
	Waterlogged bool
}

func (x PolishedBlackstoneBrickWall) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case PolishedBlackstoneBrickWallWestNone:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19961
						case false:
							return 19967
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19973
						case false:
							return 19979
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19985
						case false:
							return 19991
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19997
						case false:
							return 20003
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20009
						case false:
							return 20015
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20021
						case false:
							return 20027
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20033
						case false:
							return 20039
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20045
						case false:
							return 20051
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20057
						case false:
							return 20063
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20069
						case false:
							return 20075
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20081
						case false:
							return 20087
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20093
						case false:
							return 20099
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20105
						case false:
							return 20111
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20117
						case false:
							return 20123
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20129
						case false:
							return 20135
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20141
						case false:
							return 20147
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20153
						case false:
							return 20159
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20165
						case false:
							return 20171
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20177
						case false:
							return 20183
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20189
						case false:
							return 20195
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20201
						case false:
							return 20207
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20213
						case false:
							return 20219
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20225
						case false:
							return 20231
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20237
						case false:
							return 20243
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20249
						case false:
							return 20255
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20261
						case false:
							return 20267
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20273
						case false:
							return 20279
						}
					}
				}
			}
		case PolishedBlackstoneBrickWallWestLow:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19962
						case false:
							return 19968
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19974
						case false:
							return 19980
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19986
						case false:
							return 19992
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19998
						case false:
							return 20004
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20010
						case false:
							return 20016
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20022
						case false:
							return 20028
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20034
						case false:
							return 20040
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20046
						case false:
							return 20052
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20058
						case false:
							return 20064
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20070
						case false:
							return 20076
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20082
						case false:
							return 20088
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20094
						case false:
							return 20100
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20106
						case false:
							return 20112
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20118
						case false:
							return 20124
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20130
						case false:
							return 20136
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20142
						case false:
							return 20148
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20154
						case false:
							return 20160
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20166
						case false:
							return 20172
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20178
						case false:
							return 20184
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20190
						case false:
							return 20196
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20202
						case false:
							return 20208
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20214
						case false:
							return 20220
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20226
						case false:
							return 20232
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20238
						case false:
							return 20244
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20250
						case false:
							return 20256
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20262
						case false:
							return 20268
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20274
						case false:
							return 20280
						}
					}
				}
			}
		case PolishedBlackstoneBrickWallWestTall:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19963
						case false:
							return 19969
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19975
						case false:
							return 19981
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19987
						case false:
							return 19993
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19999
						case false:
							return 20005
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20011
						case false:
							return 20017
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20023
						case false:
							return 20029
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20035
						case false:
							return 20041
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20047
						case false:
							return 20053
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20059
						case false:
							return 20065
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20071
						case false:
							return 20077
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20083
						case false:
							return 20089
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20095
						case false:
							return 20101
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20107
						case false:
							return 20113
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20119
						case false:
							return 20125
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20131
						case false:
							return 20137
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20143
						case false:
							return 20149
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20155
						case false:
							return 20161
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20167
						case false:
							return 20173
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20179
						case false:
							return 20185
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20191
						case false:
							return 20197
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20203
						case false:
							return 20209
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20215
						case false:
							return 20221
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20227
						case false:
							return 20233
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20239
						case false:
							return 20245
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20251
						case false:
							return 20257
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20263
						case false:
							return 20269
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20275
						case false:
							return 20281
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case PolishedBlackstoneBrickWallWestNone:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19964
						case false:
							return 19970
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19976
						case false:
							return 19982
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19988
						case false:
							return 19994
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20000
						case false:
							return 20006
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20012
						case false:
							return 20018
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20024
						case false:
							return 20030
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20036
						case false:
							return 20042
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20048
						case false:
							return 20054
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20060
						case false:
							return 20066
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20072
						case false:
							return 20078
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20084
						case false:
							return 20090
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20096
						case false:
							return 20102
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20108
						case false:
							return 20114
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20120
						case false:
							return 20126
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20132
						case false:
							return 20138
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20144
						case false:
							return 20150
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20156
						case false:
							return 20162
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20168
						case false:
							return 20174
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20180
						case false:
							return 20186
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20192
						case false:
							return 20198
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20204
						case false:
							return 20210
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20216
						case false:
							return 20222
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20228
						case false:
							return 20234
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20240
						case false:
							return 20246
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20252
						case false:
							return 20258
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20264
						case false:
							return 20270
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20276
						case false:
							return 20282
						}
					}
				}
			}
		case PolishedBlackstoneBrickWallWestLow:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19965
						case false:
							return 19971
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19977
						case false:
							return 19983
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19989
						case false:
							return 19995
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20001
						case false:
							return 20007
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20013
						case false:
							return 20019
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20025
						case false:
							return 20031
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20037
						case false:
							return 20043
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20049
						case false:
							return 20055
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20061
						case false:
							return 20067
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20073
						case false:
							return 20079
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20085
						case false:
							return 20091
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20097
						case false:
							return 20103
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20109
						case false:
							return 20115
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20121
						case false:
							return 20127
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20133
						case false:
							return 20139
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20145
						case false:
							return 20151
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20157
						case false:
							return 20163
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20169
						case false:
							return 20175
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20181
						case false:
							return 20187
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20193
						case false:
							return 20199
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20205
						case false:
							return 20211
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20217
						case false:
							return 20223
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20229
						case false:
							return 20235
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20241
						case false:
							return 20247
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20253
						case false:
							return 20259
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20265
						case false:
							return 20271
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20277
						case false:
							return 20283
						}
					}
				}
			}
		case PolishedBlackstoneBrickWallWestTall:
			switch x.East {
			case PolishedBlackstoneBrickWallEastNone:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 19966
						case false:
							return 19972
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 19978
						case false:
							return 19984
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 19990
						case false:
							return 19996
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20002
						case false:
							return 20008
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20014
						case false:
							return 20020
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20026
						case false:
							return 20032
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20038
						case false:
							return 20044
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20050
						case false:
							return 20056
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20062
						case false:
							return 20068
						}
					}
				}
			case PolishedBlackstoneBrickWallEastLow:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20074
						case false:
							return 20080
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20086
						case false:
							return 20092
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20098
						case false:
							return 20104
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20110
						case false:
							return 20116
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20122
						case false:
							return 20128
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20134
						case false:
							return 20140
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20146
						case false:
							return 20152
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20158
						case false:
							return 20164
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20170
						case false:
							return 20176
						}
					}
				}
			case PolishedBlackstoneBrickWallEastTall:
				switch x.North {
				case PolishedBlackstoneBrickWallNorthNone:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20182
						case false:
							return 20188
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20194
						case false:
							return 20200
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20206
						case false:
							return 20212
						}
					}
				case PolishedBlackstoneBrickWallNorthLow:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20218
						case false:
							return 20224
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20230
						case false:
							return 20236
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20242
						case false:
							return 20248
						}
					}
				case PolishedBlackstoneBrickWallNorthTall:
					switch x.South {
					case PolishedBlackstoneBrickWallSouthNone:
						switch x.Up {
						case true:
							return 20254
						case false:
							return 20260
						}
					case PolishedBlackstoneBrickWallSouthLow:
						switch x.Up {
						case true:
							return 20266
						case false:
							return 20272
						}
					case PolishedBlackstoneBrickWallSouthTall:
						switch x.Up {
						case true:
							return 20278
						case false:
							return 20284
						}
					}
				}
			}
		}
	}
	return 19964 // default state
}

type GildedBlackstone struct{}

func (x GildedBlackstone) Id() uint16 {
	return 20285
}

type PolishedBlackstoneStairsFacing string

const (
	PolishedBlackstoneStairsFacingNorth PolishedBlackstoneStairsFacing = "north"
	PolishedBlackstoneStairsFacingSouth PolishedBlackstoneStairsFacing = "south"
	PolishedBlackstoneStairsFacingWest  PolishedBlackstoneStairsFacing = "west"
	PolishedBlackstoneStairsFacingEast  PolishedBlackstoneStairsFacing = "east"
)

type PolishedBlackstoneStairsHalf string

const (
	PolishedBlackstoneStairsHalfTop    PolishedBlackstoneStairsHalf = "top"
	PolishedBlackstoneStairsHalfBottom PolishedBlackstoneStairsHalf = "bottom"
)

type PolishedBlackstoneStairsShape string

const (
	PolishedBlackstoneStairsShapeStraight   PolishedBlackstoneStairsShape = "straight"
	PolishedBlackstoneStairsShapeInnerLeft  PolishedBlackstoneStairsShape = "inner_left"
	PolishedBlackstoneStairsShapeInnerRight PolishedBlackstoneStairsShape = "inner_right"
	PolishedBlackstoneStairsShapeOuterLeft  PolishedBlackstoneStairsShape = "outer_left"
	PolishedBlackstoneStairsShapeOuterRight PolishedBlackstoneStairsShape = "outer_right"
)

type PolishedBlackstoneStairs struct {
	Facing      PolishedBlackstoneStairsFacing
	Half        PolishedBlackstoneStairsHalf
	Shape       PolishedBlackstoneStairsShape
	Waterlogged bool
}

func (x PolishedBlackstoneStairs) Id() uint16 {
	switch x.Facing {
	case PolishedBlackstoneStairsFacingNorth:
		switch x.Half {
		case PolishedBlackstoneStairsHalfTop:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20286
				case false:
					return 20287
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20288
				case false:
					return 20289
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20290
				case false:
					return 20291
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20292
				case false:
					return 20293
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20294
				case false:
					return 20295
				}
			}
		case PolishedBlackstoneStairsHalfBottom:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20296
				case false:
					return 20297
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20298
				case false:
					return 20299
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20300
				case false:
					return 20301
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20302
				case false:
					return 20303
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20304
				case false:
					return 20305
				}
			}
		}
	case PolishedBlackstoneStairsFacingSouth:
		switch x.Half {
		case PolishedBlackstoneStairsHalfTop:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20306
				case false:
					return 20307
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20308
				case false:
					return 20309
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20310
				case false:
					return 20311
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20312
				case false:
					return 20313
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20314
				case false:
					return 20315
				}
			}
		case PolishedBlackstoneStairsHalfBottom:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20316
				case false:
					return 20317
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20318
				case false:
					return 20319
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20320
				case false:
					return 20321
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20322
				case false:
					return 20323
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20324
				case false:
					return 20325
				}
			}
		}
	case PolishedBlackstoneStairsFacingWest:
		switch x.Half {
		case PolishedBlackstoneStairsHalfTop:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20326
				case false:
					return 20327
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20328
				case false:
					return 20329
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20330
				case false:
					return 20331
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20332
				case false:
					return 20333
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20334
				case false:
					return 20335
				}
			}
		case PolishedBlackstoneStairsHalfBottom:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20336
				case false:
					return 20337
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20338
				case false:
					return 20339
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20340
				case false:
					return 20341
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20342
				case false:
					return 20343
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20344
				case false:
					return 20345
				}
			}
		}
	case PolishedBlackstoneStairsFacingEast:
		switch x.Half {
		case PolishedBlackstoneStairsHalfTop:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20346
				case false:
					return 20347
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20348
				case false:
					return 20349
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20350
				case false:
					return 20351
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20352
				case false:
					return 20353
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20354
				case false:
					return 20355
				}
			}
		case PolishedBlackstoneStairsHalfBottom:
			switch x.Shape {
			case PolishedBlackstoneStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 20356
				case false:
					return 20357
				}
			case PolishedBlackstoneStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 20358
				case false:
					return 20359
				}
			case PolishedBlackstoneStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 20360
				case false:
					return 20361
				}
			case PolishedBlackstoneStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 20362
				case false:
					return 20363
				}
			case PolishedBlackstoneStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 20364
				case false:
					return 20365
				}
			}
		}
	}
	return 20297 // default state
}

type PolishedBlackstoneSlabType string

const (
	PolishedBlackstoneSlabTypeTop    PolishedBlackstoneSlabType = "top"
	PolishedBlackstoneSlabTypeBottom PolishedBlackstoneSlabType = "bottom"
	PolishedBlackstoneSlabTypeDouble PolishedBlackstoneSlabType = "double"
)

type PolishedBlackstoneSlab struct {
	Waterlogged bool
	Type        PolishedBlackstoneSlabType
}

func (x PolishedBlackstoneSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case PolishedBlackstoneSlabTypeTop:
			return 20366
		case PolishedBlackstoneSlabTypeBottom:
			return 20368
		case PolishedBlackstoneSlabTypeDouble:
			return 20370
		}
	case false:
		switch x.Type {
		case PolishedBlackstoneSlabTypeTop:
			return 20367
		case PolishedBlackstoneSlabTypeBottom:
			return 20369
		case PolishedBlackstoneSlabTypeDouble:
			return 20371
		}
	}
	return 20369 // default state
}

type PolishedBlackstonePressurePlate struct {
	Powered bool
}

func (x PolishedBlackstonePressurePlate) Id() uint16 {
	switch x.Powered {
	case true:
		return 20372
	case false:
		return 20373
	}
	return 20373 // default state
}

type PolishedBlackstoneButtonFacing string

const (
	PolishedBlackstoneButtonFacingNorth PolishedBlackstoneButtonFacing = "north"
	PolishedBlackstoneButtonFacingSouth PolishedBlackstoneButtonFacing = "south"
	PolishedBlackstoneButtonFacingWest  PolishedBlackstoneButtonFacing = "west"
	PolishedBlackstoneButtonFacingEast  PolishedBlackstoneButtonFacing = "east"
)

type PolishedBlackstoneButtonFace string

const (
	PolishedBlackstoneButtonFaceFloor   PolishedBlackstoneButtonFace = "floor"
	PolishedBlackstoneButtonFaceWall    PolishedBlackstoneButtonFace = "wall"
	PolishedBlackstoneButtonFaceCeiling PolishedBlackstoneButtonFace = "ceiling"
)

type PolishedBlackstoneButton struct {
	Facing  PolishedBlackstoneButtonFacing
	Powered bool
	Face    PolishedBlackstoneButtonFace
}

func (x PolishedBlackstoneButton) Id() uint16 {
	switch x.Face {
	case PolishedBlackstoneButtonFaceFloor:
		switch x.Facing {
		case PolishedBlackstoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 20374
			case false:
				return 20375
			}
		case PolishedBlackstoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 20376
			case false:
				return 20377
			}
		case PolishedBlackstoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 20378
			case false:
				return 20379
			}
		case PolishedBlackstoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 20380
			case false:
				return 20381
			}
		}
	case PolishedBlackstoneButtonFaceWall:
		switch x.Facing {
		case PolishedBlackstoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 20382
			case false:
				return 20383
			}
		case PolishedBlackstoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 20384
			case false:
				return 20385
			}
		case PolishedBlackstoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 20386
			case false:
				return 20387
			}
		case PolishedBlackstoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 20388
			case false:
				return 20389
			}
		}
	case PolishedBlackstoneButtonFaceCeiling:
		switch x.Facing {
		case PolishedBlackstoneButtonFacingNorth:
			switch x.Powered {
			case true:
				return 20390
			case false:
				return 20391
			}
		case PolishedBlackstoneButtonFacingSouth:
			switch x.Powered {
			case true:
				return 20392
			case false:
				return 20393
			}
		case PolishedBlackstoneButtonFacingWest:
			switch x.Powered {
			case true:
				return 20394
			case false:
				return 20395
			}
		case PolishedBlackstoneButtonFacingEast:
			switch x.Powered {
			case true:
				return 20396
			case false:
				return 20397
			}
		}
	}
	return 20383 // default state
}

type PolishedBlackstoneWallNorth string

const (
	PolishedBlackstoneWallNorthNone PolishedBlackstoneWallNorth = "none"
	PolishedBlackstoneWallNorthLow  PolishedBlackstoneWallNorth = "low"
	PolishedBlackstoneWallNorthTall PolishedBlackstoneWallNorth = "tall"
)

type PolishedBlackstoneWallSouth string

const (
	PolishedBlackstoneWallSouthNone PolishedBlackstoneWallSouth = "none"
	PolishedBlackstoneWallSouthLow  PolishedBlackstoneWallSouth = "low"
	PolishedBlackstoneWallSouthTall PolishedBlackstoneWallSouth = "tall"
)

type PolishedBlackstoneWallWest string

const (
	PolishedBlackstoneWallWestNone PolishedBlackstoneWallWest = "none"
	PolishedBlackstoneWallWestLow  PolishedBlackstoneWallWest = "low"
	PolishedBlackstoneWallWestTall PolishedBlackstoneWallWest = "tall"
)

type PolishedBlackstoneWallEast string

const (
	PolishedBlackstoneWallEastNone PolishedBlackstoneWallEast = "none"
	PolishedBlackstoneWallEastLow  PolishedBlackstoneWallEast = "low"
	PolishedBlackstoneWallEastTall PolishedBlackstoneWallEast = "tall"
)

type PolishedBlackstoneWall struct {
	North       PolishedBlackstoneWallNorth
	South       PolishedBlackstoneWallSouth
	Up          bool
	Waterlogged bool
	West        PolishedBlackstoneWallWest
	East        PolishedBlackstoneWallEast
}

func (x PolishedBlackstoneWall) Id() uint16 {
	switch x.East {
	case PolishedBlackstoneWallEastNone:
		switch x.North {
		case PolishedBlackstoneWallNorthNone:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20398
						case PolishedBlackstoneWallWestLow:
							return 20399
						case PolishedBlackstoneWallWestTall:
							return 20400
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20401
						case PolishedBlackstoneWallWestLow:
							return 20402
						case PolishedBlackstoneWallWestTall:
							return 20403
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20404
						case PolishedBlackstoneWallWestLow:
							return 20405
						case PolishedBlackstoneWallWestTall:
							return 20406
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20407
						case PolishedBlackstoneWallWestLow:
							return 20408
						case PolishedBlackstoneWallWestTall:
							return 20409
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20410
						case PolishedBlackstoneWallWestLow:
							return 20411
						case PolishedBlackstoneWallWestTall:
							return 20412
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20413
						case PolishedBlackstoneWallWestLow:
							return 20414
						case PolishedBlackstoneWallWestTall:
							return 20415
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20416
						case PolishedBlackstoneWallWestLow:
							return 20417
						case PolishedBlackstoneWallWestTall:
							return 20418
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20419
						case PolishedBlackstoneWallWestLow:
							return 20420
						case PolishedBlackstoneWallWestTall:
							return 20421
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20422
						case PolishedBlackstoneWallWestLow:
							return 20423
						case PolishedBlackstoneWallWestTall:
							return 20424
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20425
						case PolishedBlackstoneWallWestLow:
							return 20426
						case PolishedBlackstoneWallWestTall:
							return 20427
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20428
						case PolishedBlackstoneWallWestLow:
							return 20429
						case PolishedBlackstoneWallWestTall:
							return 20430
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20431
						case PolishedBlackstoneWallWestLow:
							return 20432
						case PolishedBlackstoneWallWestTall:
							return 20433
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthLow:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20434
						case PolishedBlackstoneWallWestLow:
							return 20435
						case PolishedBlackstoneWallWestTall:
							return 20436
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20437
						case PolishedBlackstoneWallWestLow:
							return 20438
						case PolishedBlackstoneWallWestTall:
							return 20439
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20440
						case PolishedBlackstoneWallWestLow:
							return 20441
						case PolishedBlackstoneWallWestTall:
							return 20442
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20443
						case PolishedBlackstoneWallWestLow:
							return 20444
						case PolishedBlackstoneWallWestTall:
							return 20445
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20446
						case PolishedBlackstoneWallWestLow:
							return 20447
						case PolishedBlackstoneWallWestTall:
							return 20448
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20449
						case PolishedBlackstoneWallWestLow:
							return 20450
						case PolishedBlackstoneWallWestTall:
							return 20451
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20452
						case PolishedBlackstoneWallWestLow:
							return 20453
						case PolishedBlackstoneWallWestTall:
							return 20454
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20455
						case PolishedBlackstoneWallWestLow:
							return 20456
						case PolishedBlackstoneWallWestTall:
							return 20457
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20458
						case PolishedBlackstoneWallWestLow:
							return 20459
						case PolishedBlackstoneWallWestTall:
							return 20460
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20461
						case PolishedBlackstoneWallWestLow:
							return 20462
						case PolishedBlackstoneWallWestTall:
							return 20463
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20464
						case PolishedBlackstoneWallWestLow:
							return 20465
						case PolishedBlackstoneWallWestTall:
							return 20466
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20467
						case PolishedBlackstoneWallWestLow:
							return 20468
						case PolishedBlackstoneWallWestTall:
							return 20469
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthTall:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20470
						case PolishedBlackstoneWallWestLow:
							return 20471
						case PolishedBlackstoneWallWestTall:
							return 20472
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20473
						case PolishedBlackstoneWallWestLow:
							return 20474
						case PolishedBlackstoneWallWestTall:
							return 20475
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20476
						case PolishedBlackstoneWallWestLow:
							return 20477
						case PolishedBlackstoneWallWestTall:
							return 20478
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20479
						case PolishedBlackstoneWallWestLow:
							return 20480
						case PolishedBlackstoneWallWestTall:
							return 20481
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20482
						case PolishedBlackstoneWallWestLow:
							return 20483
						case PolishedBlackstoneWallWestTall:
							return 20484
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20485
						case PolishedBlackstoneWallWestLow:
							return 20486
						case PolishedBlackstoneWallWestTall:
							return 20487
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20488
						case PolishedBlackstoneWallWestLow:
							return 20489
						case PolishedBlackstoneWallWestTall:
							return 20490
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20491
						case PolishedBlackstoneWallWestLow:
							return 20492
						case PolishedBlackstoneWallWestTall:
							return 20493
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20494
						case PolishedBlackstoneWallWestLow:
							return 20495
						case PolishedBlackstoneWallWestTall:
							return 20496
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20497
						case PolishedBlackstoneWallWestLow:
							return 20498
						case PolishedBlackstoneWallWestTall:
							return 20499
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20500
						case PolishedBlackstoneWallWestLow:
							return 20501
						case PolishedBlackstoneWallWestTall:
							return 20502
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20503
						case PolishedBlackstoneWallWestLow:
							return 20504
						case PolishedBlackstoneWallWestTall:
							return 20505
						}
					}
				}
			}
		}
	case PolishedBlackstoneWallEastLow:
		switch x.North {
		case PolishedBlackstoneWallNorthNone:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20506
						case PolishedBlackstoneWallWestLow:
							return 20507
						case PolishedBlackstoneWallWestTall:
							return 20508
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20509
						case PolishedBlackstoneWallWestLow:
							return 20510
						case PolishedBlackstoneWallWestTall:
							return 20511
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20512
						case PolishedBlackstoneWallWestLow:
							return 20513
						case PolishedBlackstoneWallWestTall:
							return 20514
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20515
						case PolishedBlackstoneWallWestLow:
							return 20516
						case PolishedBlackstoneWallWestTall:
							return 20517
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20518
						case PolishedBlackstoneWallWestLow:
							return 20519
						case PolishedBlackstoneWallWestTall:
							return 20520
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20521
						case PolishedBlackstoneWallWestLow:
							return 20522
						case PolishedBlackstoneWallWestTall:
							return 20523
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20524
						case PolishedBlackstoneWallWestLow:
							return 20525
						case PolishedBlackstoneWallWestTall:
							return 20526
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20527
						case PolishedBlackstoneWallWestLow:
							return 20528
						case PolishedBlackstoneWallWestTall:
							return 20529
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20530
						case PolishedBlackstoneWallWestLow:
							return 20531
						case PolishedBlackstoneWallWestTall:
							return 20532
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20533
						case PolishedBlackstoneWallWestLow:
							return 20534
						case PolishedBlackstoneWallWestTall:
							return 20535
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20536
						case PolishedBlackstoneWallWestLow:
							return 20537
						case PolishedBlackstoneWallWestTall:
							return 20538
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20539
						case PolishedBlackstoneWallWestLow:
							return 20540
						case PolishedBlackstoneWallWestTall:
							return 20541
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthLow:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20542
						case PolishedBlackstoneWallWestLow:
							return 20543
						case PolishedBlackstoneWallWestTall:
							return 20544
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20545
						case PolishedBlackstoneWallWestLow:
							return 20546
						case PolishedBlackstoneWallWestTall:
							return 20547
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20548
						case PolishedBlackstoneWallWestLow:
							return 20549
						case PolishedBlackstoneWallWestTall:
							return 20550
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20551
						case PolishedBlackstoneWallWestLow:
							return 20552
						case PolishedBlackstoneWallWestTall:
							return 20553
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20554
						case PolishedBlackstoneWallWestLow:
							return 20555
						case PolishedBlackstoneWallWestTall:
							return 20556
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20557
						case PolishedBlackstoneWallWestLow:
							return 20558
						case PolishedBlackstoneWallWestTall:
							return 20559
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20560
						case PolishedBlackstoneWallWestLow:
							return 20561
						case PolishedBlackstoneWallWestTall:
							return 20562
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20563
						case PolishedBlackstoneWallWestLow:
							return 20564
						case PolishedBlackstoneWallWestTall:
							return 20565
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20566
						case PolishedBlackstoneWallWestLow:
							return 20567
						case PolishedBlackstoneWallWestTall:
							return 20568
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20569
						case PolishedBlackstoneWallWestLow:
							return 20570
						case PolishedBlackstoneWallWestTall:
							return 20571
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20572
						case PolishedBlackstoneWallWestLow:
							return 20573
						case PolishedBlackstoneWallWestTall:
							return 20574
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20575
						case PolishedBlackstoneWallWestLow:
							return 20576
						case PolishedBlackstoneWallWestTall:
							return 20577
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthTall:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20578
						case PolishedBlackstoneWallWestLow:
							return 20579
						case PolishedBlackstoneWallWestTall:
							return 20580
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20581
						case PolishedBlackstoneWallWestLow:
							return 20582
						case PolishedBlackstoneWallWestTall:
							return 20583
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20584
						case PolishedBlackstoneWallWestLow:
							return 20585
						case PolishedBlackstoneWallWestTall:
							return 20586
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20587
						case PolishedBlackstoneWallWestLow:
							return 20588
						case PolishedBlackstoneWallWestTall:
							return 20589
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20590
						case PolishedBlackstoneWallWestLow:
							return 20591
						case PolishedBlackstoneWallWestTall:
							return 20592
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20593
						case PolishedBlackstoneWallWestLow:
							return 20594
						case PolishedBlackstoneWallWestTall:
							return 20595
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20596
						case PolishedBlackstoneWallWestLow:
							return 20597
						case PolishedBlackstoneWallWestTall:
							return 20598
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20599
						case PolishedBlackstoneWallWestLow:
							return 20600
						case PolishedBlackstoneWallWestTall:
							return 20601
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20602
						case PolishedBlackstoneWallWestLow:
							return 20603
						case PolishedBlackstoneWallWestTall:
							return 20604
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20605
						case PolishedBlackstoneWallWestLow:
							return 20606
						case PolishedBlackstoneWallWestTall:
							return 20607
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20608
						case PolishedBlackstoneWallWestLow:
							return 20609
						case PolishedBlackstoneWallWestTall:
							return 20610
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20611
						case PolishedBlackstoneWallWestLow:
							return 20612
						case PolishedBlackstoneWallWestTall:
							return 20613
						}
					}
				}
			}
		}
	case PolishedBlackstoneWallEastTall:
		switch x.North {
		case PolishedBlackstoneWallNorthNone:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20614
						case PolishedBlackstoneWallWestLow:
							return 20615
						case PolishedBlackstoneWallWestTall:
							return 20616
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20617
						case PolishedBlackstoneWallWestLow:
							return 20618
						case PolishedBlackstoneWallWestTall:
							return 20619
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20620
						case PolishedBlackstoneWallWestLow:
							return 20621
						case PolishedBlackstoneWallWestTall:
							return 20622
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20623
						case PolishedBlackstoneWallWestLow:
							return 20624
						case PolishedBlackstoneWallWestTall:
							return 20625
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20626
						case PolishedBlackstoneWallWestLow:
							return 20627
						case PolishedBlackstoneWallWestTall:
							return 20628
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20629
						case PolishedBlackstoneWallWestLow:
							return 20630
						case PolishedBlackstoneWallWestTall:
							return 20631
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20632
						case PolishedBlackstoneWallWestLow:
							return 20633
						case PolishedBlackstoneWallWestTall:
							return 20634
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20635
						case PolishedBlackstoneWallWestLow:
							return 20636
						case PolishedBlackstoneWallWestTall:
							return 20637
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20638
						case PolishedBlackstoneWallWestLow:
							return 20639
						case PolishedBlackstoneWallWestTall:
							return 20640
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20641
						case PolishedBlackstoneWallWestLow:
							return 20642
						case PolishedBlackstoneWallWestTall:
							return 20643
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20644
						case PolishedBlackstoneWallWestLow:
							return 20645
						case PolishedBlackstoneWallWestTall:
							return 20646
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20647
						case PolishedBlackstoneWallWestLow:
							return 20648
						case PolishedBlackstoneWallWestTall:
							return 20649
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthLow:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20650
						case PolishedBlackstoneWallWestLow:
							return 20651
						case PolishedBlackstoneWallWestTall:
							return 20652
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20653
						case PolishedBlackstoneWallWestLow:
							return 20654
						case PolishedBlackstoneWallWestTall:
							return 20655
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20656
						case PolishedBlackstoneWallWestLow:
							return 20657
						case PolishedBlackstoneWallWestTall:
							return 20658
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20659
						case PolishedBlackstoneWallWestLow:
							return 20660
						case PolishedBlackstoneWallWestTall:
							return 20661
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20662
						case PolishedBlackstoneWallWestLow:
							return 20663
						case PolishedBlackstoneWallWestTall:
							return 20664
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20665
						case PolishedBlackstoneWallWestLow:
							return 20666
						case PolishedBlackstoneWallWestTall:
							return 20667
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20668
						case PolishedBlackstoneWallWestLow:
							return 20669
						case PolishedBlackstoneWallWestTall:
							return 20670
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20671
						case PolishedBlackstoneWallWestLow:
							return 20672
						case PolishedBlackstoneWallWestTall:
							return 20673
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20674
						case PolishedBlackstoneWallWestLow:
							return 20675
						case PolishedBlackstoneWallWestTall:
							return 20676
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20677
						case PolishedBlackstoneWallWestLow:
							return 20678
						case PolishedBlackstoneWallWestTall:
							return 20679
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20680
						case PolishedBlackstoneWallWestLow:
							return 20681
						case PolishedBlackstoneWallWestTall:
							return 20682
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20683
						case PolishedBlackstoneWallWestLow:
							return 20684
						case PolishedBlackstoneWallWestTall:
							return 20685
						}
					}
				}
			}
		case PolishedBlackstoneWallNorthTall:
			switch x.South {
			case PolishedBlackstoneWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20686
						case PolishedBlackstoneWallWestLow:
							return 20687
						case PolishedBlackstoneWallWestTall:
							return 20688
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20689
						case PolishedBlackstoneWallWestLow:
							return 20690
						case PolishedBlackstoneWallWestTall:
							return 20691
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20692
						case PolishedBlackstoneWallWestLow:
							return 20693
						case PolishedBlackstoneWallWestTall:
							return 20694
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20695
						case PolishedBlackstoneWallWestLow:
							return 20696
						case PolishedBlackstoneWallWestTall:
							return 20697
						}
					}
				}
			case PolishedBlackstoneWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20698
						case PolishedBlackstoneWallWestLow:
							return 20699
						case PolishedBlackstoneWallWestTall:
							return 20700
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20701
						case PolishedBlackstoneWallWestLow:
							return 20702
						case PolishedBlackstoneWallWestTall:
							return 20703
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20704
						case PolishedBlackstoneWallWestLow:
							return 20705
						case PolishedBlackstoneWallWestTall:
							return 20706
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20707
						case PolishedBlackstoneWallWestLow:
							return 20708
						case PolishedBlackstoneWallWestTall:
							return 20709
						}
					}
				}
			case PolishedBlackstoneWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20710
						case PolishedBlackstoneWallWestLow:
							return 20711
						case PolishedBlackstoneWallWestTall:
							return 20712
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20713
						case PolishedBlackstoneWallWestLow:
							return 20714
						case PolishedBlackstoneWallWestTall:
							return 20715
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20716
						case PolishedBlackstoneWallWestLow:
							return 20717
						case PolishedBlackstoneWallWestTall:
							return 20718
						}
					case false:
						switch x.West {
						case PolishedBlackstoneWallWestNone:
							return 20719
						case PolishedBlackstoneWallWestLow:
							return 20720
						case PolishedBlackstoneWallWestTall:
							return 20721
						}
					}
				}
			}
		}
	}
	return 20401 // default state
}

type ChiseledNetherBricks struct{}

func (x ChiseledNetherBricks) Id() uint16 {
	return 20722
}

type CrackedNetherBricks struct{}

func (x CrackedNetherBricks) Id() uint16 {
	return 20723
}

type QuartzBricks struct{}

func (x QuartzBricks) Id() uint16 {
	return 20724
}

type Candle struct {
	Lit         bool
	Waterlogged bool
	// Valid values: 1, 2, 3, 4
	Candles int
}

func (x Candle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20725
			case false:
				return 20726
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20727
			case false:
				return 20728
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20729
			case false:
				return 20730
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20731
			case false:
				return 20732
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20733
			case false:
				return 20734
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20735
			case false:
				return 20736
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20737
			case false:
				return 20738
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20739
			case false:
				return 20740
			}
		}
	}
	return 20728 // default state
}

type WhiteCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x WhiteCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20741
			case false:
				return 20742
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20743
			case false:
				return 20744
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20745
			case false:
				return 20746
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20747
			case false:
				return 20748
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20749
			case false:
				return 20750
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20751
			case false:
				return 20752
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20753
			case false:
				return 20754
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20755
			case false:
				return 20756
			}
		}
	}
	return 20744 // default state
}

type OrangeCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x OrangeCandle) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20757
			case false:
				return 20759
			}
		case 2:
			switch x.Lit {
			case true:
				return 20761
			case false:
				return 20763
			}
		case 3:
			switch x.Lit {
			case true:
				return 20765
			case false:
				return 20767
			}
		case 4:
			switch x.Lit {
			case true:
				return 20769
			case false:
				return 20771
			}
		}
	case false:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20758
			case false:
				return 20760
			}
		case 2:
			switch x.Lit {
			case true:
				return 20762
			case false:
				return 20764
			}
		case 3:
			switch x.Lit {
			case true:
				return 20766
			case false:
				return 20768
			}
		case 4:
			switch x.Lit {
			case true:
				return 20770
			case false:
				return 20772
			}
		}
	}
	return 20760 // default state
}

type MagentaCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x MagentaCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20773
			case false:
				return 20774
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20775
			case false:
				return 20776
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20777
			case false:
				return 20778
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20779
			case false:
				return 20780
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20781
			case false:
				return 20782
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20783
			case false:
				return 20784
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20785
			case false:
				return 20786
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20787
			case false:
				return 20788
			}
		}
	}
	return 20776 // default state
}

type LightBlueCandle struct {
	Lit         bool
	Waterlogged bool
	// Valid values: 1, 2, 3, 4
	Candles int
}

func (x LightBlueCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20789
			case false:
				return 20790
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20791
			case false:
				return 20792
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20793
			case false:
				return 20794
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20795
			case false:
				return 20796
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20797
			case false:
				return 20798
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20799
			case false:
				return 20800
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20801
			case false:
				return 20802
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20803
			case false:
				return 20804
			}
		}
	}
	return 20792 // default state
}

type YellowCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x YellowCandle) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20805
			case false:
				return 20807
			}
		case 2:
			switch x.Lit {
			case true:
				return 20809
			case false:
				return 20811
			}
		case 3:
			switch x.Lit {
			case true:
				return 20813
			case false:
				return 20815
			}
		case 4:
			switch x.Lit {
			case true:
				return 20817
			case false:
				return 20819
			}
		}
	case false:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20806
			case false:
				return 20808
			}
		case 2:
			switch x.Lit {
			case true:
				return 20810
			case false:
				return 20812
			}
		case 3:
			switch x.Lit {
			case true:
				return 20814
			case false:
				return 20816
			}
		case 4:
			switch x.Lit {
			case true:
				return 20818
			case false:
				return 20820
			}
		}
	}
	return 20808 // default state
}

type LimeCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x LimeCandle) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Candles {
			case 1:
				return 20821
			case 2:
				return 20825
			case 3:
				return 20829
			case 4:
				return 20833
			}
		case false:
			switch x.Candles {
			case 1:
				return 20822
			case 2:
				return 20826
			case 3:
				return 20830
			case 4:
				return 20834
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Candles {
			case 1:
				return 20823
			case 2:
				return 20827
			case 3:
				return 20831
			case 4:
				return 20835
			}
		case false:
			switch x.Candles {
			case 1:
				return 20824
			case 2:
				return 20828
			case 3:
				return 20832
			case 4:
				return 20836
			}
		}
	}
	return 20824 // default state
}

type PinkCandle struct {
	Lit         bool
	Waterlogged bool
	// Valid values: 1, 2, 3, 4
	Candles int
}

func (x PinkCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20837
			case false:
				return 20838
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20839
			case false:
				return 20840
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20841
			case false:
				return 20842
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20843
			case false:
				return 20844
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20845
			case false:
				return 20846
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20847
			case false:
				return 20848
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20849
			case false:
				return 20850
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20851
			case false:
				return 20852
			}
		}
	}
	return 20840 // default state
}

type GrayCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x GrayCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20853
			case false:
				return 20854
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20855
			case false:
				return 20856
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20857
			case false:
				return 20858
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20859
			case false:
				return 20860
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20861
			case false:
				return 20862
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20863
			case false:
				return 20864
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20865
			case false:
				return 20866
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20867
			case false:
				return 20868
			}
		}
	}
	return 20856 // default state
}

type LightGrayCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x LightGrayCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20869
			case false:
				return 20870
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20871
			case false:
				return 20872
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20873
			case false:
				return 20874
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20875
			case false:
				return 20876
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20877
			case false:
				return 20878
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20879
			case false:
				return 20880
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20881
			case false:
				return 20882
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20883
			case false:
				return 20884
			}
		}
	}
	return 20872 // default state
}

type CyanCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x CyanCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20885
			case false:
				return 20886
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20887
			case false:
				return 20888
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20889
			case false:
				return 20890
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20891
			case false:
				return 20892
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20893
			case false:
				return 20894
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20895
			case false:
				return 20896
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20897
			case false:
				return 20898
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20899
			case false:
				return 20900
			}
		}
	}
	return 20888 // default state
}

type PurpleCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x PurpleCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20901
			case false:
				return 20902
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20903
			case false:
				return 20904
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20905
			case false:
				return 20906
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20907
			case false:
				return 20908
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20909
			case false:
				return 20910
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20911
			case false:
				return 20912
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20913
			case false:
				return 20914
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20915
			case false:
				return 20916
			}
		}
	}
	return 20904 // default state
}

type BlueCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x BlueCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20917
			case false:
				return 20918
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20919
			case false:
				return 20920
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20921
			case false:
				return 20922
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20923
			case false:
				return 20924
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20925
			case false:
				return 20926
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20927
			case false:
				return 20928
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20929
			case false:
				return 20930
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20931
			case false:
				return 20932
			}
		}
	}
	return 20920 // default state
}

type BrownCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x BrownCandle) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Candles {
			case 1:
				return 20933
			case 2:
				return 20937
			case 3:
				return 20941
			case 4:
				return 20945
			}
		case false:
			switch x.Candles {
			case 1:
				return 20934
			case 2:
				return 20938
			case 3:
				return 20942
			case 4:
				return 20946
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Candles {
			case 1:
				return 20935
			case 2:
				return 20939
			case 3:
				return 20943
			case 4:
				return 20947
			}
		case false:
			switch x.Candles {
			case 1:
				return 20936
			case 2:
				return 20940
			case 3:
				return 20944
			case 4:
				return 20948
			}
		}
	}
	return 20936 // default state
}

type GreenCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x GreenCandle) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20949
			case false:
				return 20951
			}
		case 2:
			switch x.Lit {
			case true:
				return 20953
			case false:
				return 20955
			}
		case 3:
			switch x.Lit {
			case true:
				return 20957
			case false:
				return 20959
			}
		case 4:
			switch x.Lit {
			case true:
				return 20961
			case false:
				return 20963
			}
		}
	case false:
		switch x.Candles {
		case 1:
			switch x.Lit {
			case true:
				return 20950
			case false:
				return 20952
			}
		case 2:
			switch x.Lit {
			case true:
				return 20954
			case false:
				return 20956
			}
		case 3:
			switch x.Lit {
			case true:
				return 20958
			case false:
				return 20960
			}
		case 4:
			switch x.Lit {
			case true:
				return 20962
			case false:
				return 20964
			}
		}
	}
	return 20952 // default state
}

type RedCandle struct {
	// Valid values: 1, 2, 3, 4
	Candles     int
	Lit         bool
	Waterlogged bool
}

func (x RedCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20965
			case false:
				return 20966
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20967
			case false:
				return 20968
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20969
			case false:
				return 20970
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20971
			case false:
				return 20972
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20973
			case false:
				return 20974
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20975
			case false:
				return 20976
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20977
			case false:
				return 20978
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20979
			case false:
				return 20980
			}
		}
	}
	return 20968 // default state
}

type BlackCandle struct {
	Lit         bool
	Waterlogged bool
	// Valid values: 1, 2, 3, 4
	Candles int
}

func (x BlackCandle) Id() uint16 {
	switch x.Candles {
	case 1:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20981
			case false:
				return 20982
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20983
			case false:
				return 20984
			}
		}
	case 2:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20985
			case false:
				return 20986
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20987
			case false:
				return 20988
			}
		}
	case 3:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20989
			case false:
				return 20990
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20991
			case false:
				return 20992
			}
		}
	case 4:
		switch x.Lit {
		case true:
			switch x.Waterlogged {
			case true:
				return 20993
			case false:
				return 20994
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 20995
			case false:
				return 20996
			}
		}
	}
	return 20984 // default state
}

type CandleCake struct {
	Lit bool
}

func (x CandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 20997
	case false:
		return 20998
	}
	return 20998 // default state
}

type WhiteCandleCake struct {
	Lit bool
}

func (x WhiteCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 20999
	case false:
		return 21000
	}
	return 21000 // default state
}

type OrangeCandleCake struct {
	Lit bool
}

func (x OrangeCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21001
	case false:
		return 21002
	}
	return 21002 // default state
}

type MagentaCandleCake struct {
	Lit bool
}

func (x MagentaCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21003
	case false:
		return 21004
	}
	return 21004 // default state
}

type LightBlueCandleCake struct {
	Lit bool
}

func (x LightBlueCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21005
	case false:
		return 21006
	}
	return 21006 // default state
}

type YellowCandleCake struct {
	Lit bool
}

func (x YellowCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21007
	case false:
		return 21008
	}
	return 21008 // default state
}

type LimeCandleCake struct {
	Lit bool
}

func (x LimeCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21009
	case false:
		return 21010
	}
	return 21010 // default state
}

type PinkCandleCake struct {
	Lit bool
}

func (x PinkCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21011
	case false:
		return 21012
	}
	return 21012 // default state
}

type GrayCandleCake struct {
	Lit bool
}

func (x GrayCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21013
	case false:
		return 21014
	}
	return 21014 // default state
}

type LightGrayCandleCake struct {
	Lit bool
}

func (x LightGrayCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21015
	case false:
		return 21016
	}
	return 21016 // default state
}

type CyanCandleCake struct {
	Lit bool
}

func (x CyanCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21017
	case false:
		return 21018
	}
	return 21018 // default state
}

type PurpleCandleCake struct {
	Lit bool
}

func (x PurpleCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21019
	case false:
		return 21020
	}
	return 21020 // default state
}

type BlueCandleCake struct {
	Lit bool
}

func (x BlueCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21021
	case false:
		return 21022
	}
	return 21022 // default state
}

type BrownCandleCake struct {
	Lit bool
}

func (x BrownCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21023
	case false:
		return 21024
	}
	return 21024 // default state
}

type GreenCandleCake struct {
	Lit bool
}

func (x GreenCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21025
	case false:
		return 21026
	}
	return 21026 // default state
}

type RedCandleCake struct {
	Lit bool
}

func (x RedCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21027
	case false:
		return 21028
	}
	return 21028 // default state
}

type BlackCandleCake struct {
	Lit bool
}

func (x BlackCandleCake) Id() uint16 {
	switch x.Lit {
	case true:
		return 21029
	case false:
		return 21030
	}
	return 21030 // default state
}

type AmethystBlock struct{}

func (x AmethystBlock) Id() uint16 {
	return 21031
}

type BuddingAmethyst struct{}

func (x BuddingAmethyst) Id() uint16 {
	return 21032
}

type AmethystClusterFacing string

const (
	AmethystClusterFacingNorth AmethystClusterFacing = "north"
	AmethystClusterFacingEast  AmethystClusterFacing = "east"
	AmethystClusterFacingSouth AmethystClusterFacing = "south"
	AmethystClusterFacingWest  AmethystClusterFacing = "west"
	AmethystClusterFacingUp    AmethystClusterFacing = "up"
	AmethystClusterFacingDown  AmethystClusterFacing = "down"
)

type AmethystCluster struct {
	Facing      AmethystClusterFacing
	Waterlogged bool
}

func (x AmethystCluster) Id() uint16 {
	switch x.Facing {
	case AmethystClusterFacingNorth:
		switch x.Waterlogged {
		case true:
			return 21033
		case false:
			return 21034
		}
	case AmethystClusterFacingEast:
		switch x.Waterlogged {
		case true:
			return 21035
		case false:
			return 21036
		}
	case AmethystClusterFacingSouth:
		switch x.Waterlogged {
		case true:
			return 21037
		case false:
			return 21038
		}
	case AmethystClusterFacingWest:
		switch x.Waterlogged {
		case true:
			return 21039
		case false:
			return 21040
		}
	case AmethystClusterFacingUp:
		switch x.Waterlogged {
		case true:
			return 21041
		case false:
			return 21042
		}
	case AmethystClusterFacingDown:
		switch x.Waterlogged {
		case true:
			return 21043
		case false:
			return 21044
		}
	}
	return 21042 // default state
}

type LargeAmethystBudFacing string

const (
	LargeAmethystBudFacingNorth LargeAmethystBudFacing = "north"
	LargeAmethystBudFacingEast  LargeAmethystBudFacing = "east"
	LargeAmethystBudFacingSouth LargeAmethystBudFacing = "south"
	LargeAmethystBudFacingWest  LargeAmethystBudFacing = "west"
	LargeAmethystBudFacingUp    LargeAmethystBudFacing = "up"
	LargeAmethystBudFacingDown  LargeAmethystBudFacing = "down"
)

type LargeAmethystBud struct {
	Facing      LargeAmethystBudFacing
	Waterlogged bool
}

func (x LargeAmethystBud) Id() uint16 {
	switch x.Facing {
	case LargeAmethystBudFacingNorth:
		switch x.Waterlogged {
		case true:
			return 21045
		case false:
			return 21046
		}
	case LargeAmethystBudFacingEast:
		switch x.Waterlogged {
		case true:
			return 21047
		case false:
			return 21048
		}
	case LargeAmethystBudFacingSouth:
		switch x.Waterlogged {
		case true:
			return 21049
		case false:
			return 21050
		}
	case LargeAmethystBudFacingWest:
		switch x.Waterlogged {
		case true:
			return 21051
		case false:
			return 21052
		}
	case LargeAmethystBudFacingUp:
		switch x.Waterlogged {
		case true:
			return 21053
		case false:
			return 21054
		}
	case LargeAmethystBudFacingDown:
		switch x.Waterlogged {
		case true:
			return 21055
		case false:
			return 21056
		}
	}
	return 21054 // default state
}

type MediumAmethystBudFacing string

const (
	MediumAmethystBudFacingNorth MediumAmethystBudFacing = "north"
	MediumAmethystBudFacingEast  MediumAmethystBudFacing = "east"
	MediumAmethystBudFacingSouth MediumAmethystBudFacing = "south"
	MediumAmethystBudFacingWest  MediumAmethystBudFacing = "west"
	MediumAmethystBudFacingUp    MediumAmethystBudFacing = "up"
	MediumAmethystBudFacingDown  MediumAmethystBudFacing = "down"
)

type MediumAmethystBud struct {
	Facing      MediumAmethystBudFacing
	Waterlogged bool
}

func (x MediumAmethystBud) Id() uint16 {
	switch x.Facing {
	case MediumAmethystBudFacingNorth:
		switch x.Waterlogged {
		case true:
			return 21057
		case false:
			return 21058
		}
	case MediumAmethystBudFacingEast:
		switch x.Waterlogged {
		case true:
			return 21059
		case false:
			return 21060
		}
	case MediumAmethystBudFacingSouth:
		switch x.Waterlogged {
		case true:
			return 21061
		case false:
			return 21062
		}
	case MediumAmethystBudFacingWest:
		switch x.Waterlogged {
		case true:
			return 21063
		case false:
			return 21064
		}
	case MediumAmethystBudFacingUp:
		switch x.Waterlogged {
		case true:
			return 21065
		case false:
			return 21066
		}
	case MediumAmethystBudFacingDown:
		switch x.Waterlogged {
		case true:
			return 21067
		case false:
			return 21068
		}
	}
	return 21066 // default state
}

type SmallAmethystBudFacing string

const (
	SmallAmethystBudFacingNorth SmallAmethystBudFacing = "north"
	SmallAmethystBudFacingEast  SmallAmethystBudFacing = "east"
	SmallAmethystBudFacingSouth SmallAmethystBudFacing = "south"
	SmallAmethystBudFacingWest  SmallAmethystBudFacing = "west"
	SmallAmethystBudFacingUp    SmallAmethystBudFacing = "up"
	SmallAmethystBudFacingDown  SmallAmethystBudFacing = "down"
)

type SmallAmethystBud struct {
	Waterlogged bool
	Facing      SmallAmethystBudFacing
}

func (x SmallAmethystBud) Id() uint16 {
	switch x.Facing {
	case SmallAmethystBudFacingNorth:
		switch x.Waterlogged {
		case true:
			return 21069
		case false:
			return 21070
		}
	case SmallAmethystBudFacingEast:
		switch x.Waterlogged {
		case true:
			return 21071
		case false:
			return 21072
		}
	case SmallAmethystBudFacingSouth:
		switch x.Waterlogged {
		case true:
			return 21073
		case false:
			return 21074
		}
	case SmallAmethystBudFacingWest:
		switch x.Waterlogged {
		case true:
			return 21075
		case false:
			return 21076
		}
	case SmallAmethystBudFacingUp:
		switch x.Waterlogged {
		case true:
			return 21077
		case false:
			return 21078
		}
	case SmallAmethystBudFacingDown:
		switch x.Waterlogged {
		case true:
			return 21079
		case false:
			return 21080
		}
	}
	return 21078 // default state
}

type Tuff struct{}

func (x Tuff) Id() uint16 {
	return 21081
}

type TuffSlabType string

const (
	TuffSlabTypeTop    TuffSlabType = "top"
	TuffSlabTypeBottom TuffSlabType = "bottom"
	TuffSlabTypeDouble TuffSlabType = "double"
)

type TuffSlab struct {
	Type        TuffSlabType
	Waterlogged bool
}

func (x TuffSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case TuffSlabTypeTop:
			return 21082
		case TuffSlabTypeBottom:
			return 21084
		case TuffSlabTypeDouble:
			return 21086
		}
	case false:
		switch x.Type {
		case TuffSlabTypeTop:
			return 21083
		case TuffSlabTypeBottom:
			return 21085
		case TuffSlabTypeDouble:
			return 21087
		}
	}
	return 21085 // default state
}

type TuffStairsFacing string

const (
	TuffStairsFacingNorth TuffStairsFacing = "north"
	TuffStairsFacingSouth TuffStairsFacing = "south"
	TuffStairsFacingWest  TuffStairsFacing = "west"
	TuffStairsFacingEast  TuffStairsFacing = "east"
)

type TuffStairsHalf string

const (
	TuffStairsHalfTop    TuffStairsHalf = "top"
	TuffStairsHalfBottom TuffStairsHalf = "bottom"
)

type TuffStairsShape string

const (
	TuffStairsShapeStraight   TuffStairsShape = "straight"
	TuffStairsShapeInnerLeft  TuffStairsShape = "inner_left"
	TuffStairsShapeInnerRight TuffStairsShape = "inner_right"
	TuffStairsShapeOuterLeft  TuffStairsShape = "outer_left"
	TuffStairsShapeOuterRight TuffStairsShape = "outer_right"
)

type TuffStairs struct {
	Facing      TuffStairsFacing
	Half        TuffStairsHalf
	Shape       TuffStairsShape
	Waterlogged bool
}

func (x TuffStairs) Id() uint16 {
	switch x.Facing {
	case TuffStairsFacingNorth:
		switch x.Half {
		case TuffStairsHalfTop:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21088
				case false:
					return 21089
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21090
				case false:
					return 21091
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21092
				case false:
					return 21093
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21094
				case false:
					return 21095
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21096
				case false:
					return 21097
				}
			}
		case TuffStairsHalfBottom:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21098
				case false:
					return 21099
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21100
				case false:
					return 21101
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21102
				case false:
					return 21103
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21104
				case false:
					return 21105
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21106
				case false:
					return 21107
				}
			}
		}
	case TuffStairsFacingSouth:
		switch x.Half {
		case TuffStairsHalfTop:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21108
				case false:
					return 21109
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21110
				case false:
					return 21111
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21112
				case false:
					return 21113
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21114
				case false:
					return 21115
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21116
				case false:
					return 21117
				}
			}
		case TuffStairsHalfBottom:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21118
				case false:
					return 21119
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21120
				case false:
					return 21121
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21122
				case false:
					return 21123
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21124
				case false:
					return 21125
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21126
				case false:
					return 21127
				}
			}
		}
	case TuffStairsFacingWest:
		switch x.Half {
		case TuffStairsHalfTop:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21128
				case false:
					return 21129
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21130
				case false:
					return 21131
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21132
				case false:
					return 21133
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21134
				case false:
					return 21135
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21136
				case false:
					return 21137
				}
			}
		case TuffStairsHalfBottom:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21138
				case false:
					return 21139
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21140
				case false:
					return 21141
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21142
				case false:
					return 21143
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21144
				case false:
					return 21145
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21146
				case false:
					return 21147
				}
			}
		}
	case TuffStairsFacingEast:
		switch x.Half {
		case TuffStairsHalfTop:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21148
				case false:
					return 21149
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21150
				case false:
					return 21151
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21152
				case false:
					return 21153
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21154
				case false:
					return 21155
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21156
				case false:
					return 21157
				}
			}
		case TuffStairsHalfBottom:
			switch x.Shape {
			case TuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21158
				case false:
					return 21159
				}
			case TuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21160
				case false:
					return 21161
				}
			case TuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21162
				case false:
					return 21163
				}
			case TuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21164
				case false:
					return 21165
				}
			case TuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21166
				case false:
					return 21167
				}
			}
		}
	}
	return 21099 // default state
}

type TuffWallEast string

const (
	TuffWallEastNone TuffWallEast = "none"
	TuffWallEastLow  TuffWallEast = "low"
	TuffWallEastTall TuffWallEast = "tall"
)

type TuffWallNorth string

const (
	TuffWallNorthNone TuffWallNorth = "none"
	TuffWallNorthLow  TuffWallNorth = "low"
	TuffWallNorthTall TuffWallNorth = "tall"
)

type TuffWallSouth string

const (
	TuffWallSouthNone TuffWallSouth = "none"
	TuffWallSouthLow  TuffWallSouth = "low"
	TuffWallSouthTall TuffWallSouth = "tall"
)

type TuffWallWest string

const (
	TuffWallWestNone TuffWallWest = "none"
	TuffWallWestLow  TuffWallWest = "low"
	TuffWallWestTall TuffWallWest = "tall"
)

type TuffWall struct {
	East        TuffWallEast
	North       TuffWallNorth
	South       TuffWallSouth
	Up          bool
	Waterlogged bool
	West        TuffWallWest
}

func (x TuffWall) Id() uint16 {
	switch x.North {
	case TuffWallNorthNone:
		switch x.South {
		case TuffWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21168
						case TuffWallEastLow:
							return 21276
						case TuffWallEastTall:
							return 21384
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21169
						case TuffWallEastLow:
							return 21277
						case TuffWallEastTall:
							return 21385
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21170
						case TuffWallEastLow:
							return 21278
						case TuffWallEastTall:
							return 21386
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21171
						case TuffWallEastLow:
							return 21279
						case TuffWallEastTall:
							return 21387
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21172
						case TuffWallEastLow:
							return 21280
						case TuffWallEastTall:
							return 21388
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21173
						case TuffWallEastLow:
							return 21281
						case TuffWallEastTall:
							return 21389
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21174
						case TuffWallEastLow:
							return 21282
						case TuffWallEastTall:
							return 21390
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21175
						case TuffWallEastLow:
							return 21283
						case TuffWallEastTall:
							return 21391
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21176
						case TuffWallEastLow:
							return 21284
						case TuffWallEastTall:
							return 21392
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21177
						case TuffWallEastLow:
							return 21285
						case TuffWallEastTall:
							return 21393
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21178
						case TuffWallEastLow:
							return 21286
						case TuffWallEastTall:
							return 21394
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21179
						case TuffWallEastLow:
							return 21287
						case TuffWallEastTall:
							return 21395
						}
					}
				}
			}
		case TuffWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21180
						case TuffWallEastLow:
							return 21288
						case TuffWallEastTall:
							return 21396
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21181
						case TuffWallEastLow:
							return 21289
						case TuffWallEastTall:
							return 21397
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21182
						case TuffWallEastLow:
							return 21290
						case TuffWallEastTall:
							return 21398
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21183
						case TuffWallEastLow:
							return 21291
						case TuffWallEastTall:
							return 21399
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21184
						case TuffWallEastLow:
							return 21292
						case TuffWallEastTall:
							return 21400
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21185
						case TuffWallEastLow:
							return 21293
						case TuffWallEastTall:
							return 21401
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21186
						case TuffWallEastLow:
							return 21294
						case TuffWallEastTall:
							return 21402
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21187
						case TuffWallEastLow:
							return 21295
						case TuffWallEastTall:
							return 21403
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21188
						case TuffWallEastLow:
							return 21296
						case TuffWallEastTall:
							return 21404
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21189
						case TuffWallEastLow:
							return 21297
						case TuffWallEastTall:
							return 21405
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21190
						case TuffWallEastLow:
							return 21298
						case TuffWallEastTall:
							return 21406
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21191
						case TuffWallEastLow:
							return 21299
						case TuffWallEastTall:
							return 21407
						}
					}
				}
			}
		case TuffWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21192
						case TuffWallEastLow:
							return 21300
						case TuffWallEastTall:
							return 21408
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21193
						case TuffWallEastLow:
							return 21301
						case TuffWallEastTall:
							return 21409
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21194
						case TuffWallEastLow:
							return 21302
						case TuffWallEastTall:
							return 21410
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21195
						case TuffWallEastLow:
							return 21303
						case TuffWallEastTall:
							return 21411
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21196
						case TuffWallEastLow:
							return 21304
						case TuffWallEastTall:
							return 21412
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21197
						case TuffWallEastLow:
							return 21305
						case TuffWallEastTall:
							return 21413
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21198
						case TuffWallEastLow:
							return 21306
						case TuffWallEastTall:
							return 21414
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21199
						case TuffWallEastLow:
							return 21307
						case TuffWallEastTall:
							return 21415
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21200
						case TuffWallEastLow:
							return 21308
						case TuffWallEastTall:
							return 21416
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21201
						case TuffWallEastLow:
							return 21309
						case TuffWallEastTall:
							return 21417
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21202
						case TuffWallEastLow:
							return 21310
						case TuffWallEastTall:
							return 21418
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21203
						case TuffWallEastLow:
							return 21311
						case TuffWallEastTall:
							return 21419
						}
					}
				}
			}
		}
	case TuffWallNorthLow:
		switch x.South {
		case TuffWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21204
						case TuffWallEastLow:
							return 21312
						case TuffWallEastTall:
							return 21420
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21205
						case TuffWallEastLow:
							return 21313
						case TuffWallEastTall:
							return 21421
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21206
						case TuffWallEastLow:
							return 21314
						case TuffWallEastTall:
							return 21422
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21207
						case TuffWallEastLow:
							return 21315
						case TuffWallEastTall:
							return 21423
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21208
						case TuffWallEastLow:
							return 21316
						case TuffWallEastTall:
							return 21424
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21209
						case TuffWallEastLow:
							return 21317
						case TuffWallEastTall:
							return 21425
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21210
						case TuffWallEastLow:
							return 21318
						case TuffWallEastTall:
							return 21426
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21211
						case TuffWallEastLow:
							return 21319
						case TuffWallEastTall:
							return 21427
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21212
						case TuffWallEastLow:
							return 21320
						case TuffWallEastTall:
							return 21428
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21213
						case TuffWallEastLow:
							return 21321
						case TuffWallEastTall:
							return 21429
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21214
						case TuffWallEastLow:
							return 21322
						case TuffWallEastTall:
							return 21430
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21215
						case TuffWallEastLow:
							return 21323
						case TuffWallEastTall:
							return 21431
						}
					}
				}
			}
		case TuffWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21216
						case TuffWallEastLow:
							return 21324
						case TuffWallEastTall:
							return 21432
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21217
						case TuffWallEastLow:
							return 21325
						case TuffWallEastTall:
							return 21433
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21218
						case TuffWallEastLow:
							return 21326
						case TuffWallEastTall:
							return 21434
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21219
						case TuffWallEastLow:
							return 21327
						case TuffWallEastTall:
							return 21435
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21220
						case TuffWallEastLow:
							return 21328
						case TuffWallEastTall:
							return 21436
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21221
						case TuffWallEastLow:
							return 21329
						case TuffWallEastTall:
							return 21437
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21222
						case TuffWallEastLow:
							return 21330
						case TuffWallEastTall:
							return 21438
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21223
						case TuffWallEastLow:
							return 21331
						case TuffWallEastTall:
							return 21439
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21224
						case TuffWallEastLow:
							return 21332
						case TuffWallEastTall:
							return 21440
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21225
						case TuffWallEastLow:
							return 21333
						case TuffWallEastTall:
							return 21441
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21226
						case TuffWallEastLow:
							return 21334
						case TuffWallEastTall:
							return 21442
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21227
						case TuffWallEastLow:
							return 21335
						case TuffWallEastTall:
							return 21443
						}
					}
				}
			}
		case TuffWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21228
						case TuffWallEastLow:
							return 21336
						case TuffWallEastTall:
							return 21444
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21229
						case TuffWallEastLow:
							return 21337
						case TuffWallEastTall:
							return 21445
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21230
						case TuffWallEastLow:
							return 21338
						case TuffWallEastTall:
							return 21446
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21231
						case TuffWallEastLow:
							return 21339
						case TuffWallEastTall:
							return 21447
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21232
						case TuffWallEastLow:
							return 21340
						case TuffWallEastTall:
							return 21448
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21233
						case TuffWallEastLow:
							return 21341
						case TuffWallEastTall:
							return 21449
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21234
						case TuffWallEastLow:
							return 21342
						case TuffWallEastTall:
							return 21450
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21235
						case TuffWallEastLow:
							return 21343
						case TuffWallEastTall:
							return 21451
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21236
						case TuffWallEastLow:
							return 21344
						case TuffWallEastTall:
							return 21452
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21237
						case TuffWallEastLow:
							return 21345
						case TuffWallEastTall:
							return 21453
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21238
						case TuffWallEastLow:
							return 21346
						case TuffWallEastTall:
							return 21454
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21239
						case TuffWallEastLow:
							return 21347
						case TuffWallEastTall:
							return 21455
						}
					}
				}
			}
		}
	case TuffWallNorthTall:
		switch x.South {
		case TuffWallSouthNone:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21240
						case TuffWallEastLow:
							return 21348
						case TuffWallEastTall:
							return 21456
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21241
						case TuffWallEastLow:
							return 21349
						case TuffWallEastTall:
							return 21457
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21242
						case TuffWallEastLow:
							return 21350
						case TuffWallEastTall:
							return 21458
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21243
						case TuffWallEastLow:
							return 21351
						case TuffWallEastTall:
							return 21459
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21244
						case TuffWallEastLow:
							return 21352
						case TuffWallEastTall:
							return 21460
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21245
						case TuffWallEastLow:
							return 21353
						case TuffWallEastTall:
							return 21461
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21246
						case TuffWallEastLow:
							return 21354
						case TuffWallEastTall:
							return 21462
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21247
						case TuffWallEastLow:
							return 21355
						case TuffWallEastTall:
							return 21463
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21248
						case TuffWallEastLow:
							return 21356
						case TuffWallEastTall:
							return 21464
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21249
						case TuffWallEastLow:
							return 21357
						case TuffWallEastTall:
							return 21465
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21250
						case TuffWallEastLow:
							return 21358
						case TuffWallEastTall:
							return 21466
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21251
						case TuffWallEastLow:
							return 21359
						case TuffWallEastTall:
							return 21467
						}
					}
				}
			}
		case TuffWallSouthLow:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21252
						case TuffWallEastLow:
							return 21360
						case TuffWallEastTall:
							return 21468
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21253
						case TuffWallEastLow:
							return 21361
						case TuffWallEastTall:
							return 21469
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21254
						case TuffWallEastLow:
							return 21362
						case TuffWallEastTall:
							return 21470
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21255
						case TuffWallEastLow:
							return 21363
						case TuffWallEastTall:
							return 21471
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21256
						case TuffWallEastLow:
							return 21364
						case TuffWallEastTall:
							return 21472
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21257
						case TuffWallEastLow:
							return 21365
						case TuffWallEastTall:
							return 21473
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21258
						case TuffWallEastLow:
							return 21366
						case TuffWallEastTall:
							return 21474
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21259
						case TuffWallEastLow:
							return 21367
						case TuffWallEastTall:
							return 21475
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21260
						case TuffWallEastLow:
							return 21368
						case TuffWallEastTall:
							return 21476
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21261
						case TuffWallEastLow:
							return 21369
						case TuffWallEastTall:
							return 21477
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21262
						case TuffWallEastLow:
							return 21370
						case TuffWallEastTall:
							return 21478
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21263
						case TuffWallEastLow:
							return 21371
						case TuffWallEastTall:
							return 21479
						}
					}
				}
			}
		case TuffWallSouthTall:
			switch x.Up {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21264
						case TuffWallEastLow:
							return 21372
						case TuffWallEastTall:
							return 21480
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21265
						case TuffWallEastLow:
							return 21373
						case TuffWallEastTall:
							return 21481
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21266
						case TuffWallEastLow:
							return 21374
						case TuffWallEastTall:
							return 21482
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21267
						case TuffWallEastLow:
							return 21375
						case TuffWallEastTall:
							return 21483
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21268
						case TuffWallEastLow:
							return 21376
						case TuffWallEastTall:
							return 21484
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21269
						case TuffWallEastLow:
							return 21377
						case TuffWallEastTall:
							return 21485
						}
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21270
						case TuffWallEastLow:
							return 21378
						case TuffWallEastTall:
							return 21486
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21271
						case TuffWallEastLow:
							return 21379
						case TuffWallEastTall:
							return 21487
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21272
						case TuffWallEastLow:
							return 21380
						case TuffWallEastTall:
							return 21488
						}
					}
				case false:
					switch x.West {
					case TuffWallWestNone:
						switch x.East {
						case TuffWallEastNone:
							return 21273
						case TuffWallEastLow:
							return 21381
						case TuffWallEastTall:
							return 21489
						}
					case TuffWallWestLow:
						switch x.East {
						case TuffWallEastNone:
							return 21274
						case TuffWallEastLow:
							return 21382
						case TuffWallEastTall:
							return 21490
						}
					case TuffWallWestTall:
						switch x.East {
						case TuffWallEastNone:
							return 21275
						case TuffWallEastLow:
							return 21383
						case TuffWallEastTall:
							return 21491
						}
					}
				}
			}
		}
	}
	return 21171 // default state
}

type PolishedTuff struct{}

func (x PolishedTuff) Id() uint16 {
	return 21492
}

type PolishedTuffSlabType string

const (
	PolishedTuffSlabTypeTop    PolishedTuffSlabType = "top"
	PolishedTuffSlabTypeBottom PolishedTuffSlabType = "bottom"
	PolishedTuffSlabTypeDouble PolishedTuffSlabType = "double"
)

type PolishedTuffSlab struct {
	Type        PolishedTuffSlabType
	Waterlogged bool
}

func (x PolishedTuffSlab) Id() uint16 {
	switch x.Type {
	case PolishedTuffSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 21493
		case false:
			return 21494
		}
	case PolishedTuffSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 21495
		case false:
			return 21496
		}
	case PolishedTuffSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 21497
		case false:
			return 21498
		}
	}
	return 21496 // default state
}

type PolishedTuffStairsFacing string

const (
	PolishedTuffStairsFacingNorth PolishedTuffStairsFacing = "north"
	PolishedTuffStairsFacingSouth PolishedTuffStairsFacing = "south"
	PolishedTuffStairsFacingWest  PolishedTuffStairsFacing = "west"
	PolishedTuffStairsFacingEast  PolishedTuffStairsFacing = "east"
)

type PolishedTuffStairsHalf string

const (
	PolishedTuffStairsHalfTop    PolishedTuffStairsHalf = "top"
	PolishedTuffStairsHalfBottom PolishedTuffStairsHalf = "bottom"
)

type PolishedTuffStairsShape string

const (
	PolishedTuffStairsShapeStraight   PolishedTuffStairsShape = "straight"
	PolishedTuffStairsShapeInnerLeft  PolishedTuffStairsShape = "inner_left"
	PolishedTuffStairsShapeInnerRight PolishedTuffStairsShape = "inner_right"
	PolishedTuffStairsShapeOuterLeft  PolishedTuffStairsShape = "outer_left"
	PolishedTuffStairsShapeOuterRight PolishedTuffStairsShape = "outer_right"
)

type PolishedTuffStairs struct {
	Facing      PolishedTuffStairsFacing
	Half        PolishedTuffStairsHalf
	Shape       PolishedTuffStairsShape
	Waterlogged bool
}

func (x PolishedTuffStairs) Id() uint16 {
	switch x.Facing {
	case PolishedTuffStairsFacingNorth:
		switch x.Half {
		case PolishedTuffStairsHalfTop:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21499
				case false:
					return 21500
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21501
				case false:
					return 21502
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21503
				case false:
					return 21504
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21505
				case false:
					return 21506
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21507
				case false:
					return 21508
				}
			}
		case PolishedTuffStairsHalfBottom:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21509
				case false:
					return 21510
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21511
				case false:
					return 21512
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21513
				case false:
					return 21514
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21515
				case false:
					return 21516
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21517
				case false:
					return 21518
				}
			}
		}
	case PolishedTuffStairsFacingSouth:
		switch x.Half {
		case PolishedTuffStairsHalfTop:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21519
				case false:
					return 21520
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21521
				case false:
					return 21522
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21523
				case false:
					return 21524
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21525
				case false:
					return 21526
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21527
				case false:
					return 21528
				}
			}
		case PolishedTuffStairsHalfBottom:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21529
				case false:
					return 21530
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21531
				case false:
					return 21532
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21533
				case false:
					return 21534
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21535
				case false:
					return 21536
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21537
				case false:
					return 21538
				}
			}
		}
	case PolishedTuffStairsFacingWest:
		switch x.Half {
		case PolishedTuffStairsHalfTop:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21539
				case false:
					return 21540
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21541
				case false:
					return 21542
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21543
				case false:
					return 21544
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21545
				case false:
					return 21546
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21547
				case false:
					return 21548
				}
			}
		case PolishedTuffStairsHalfBottom:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21549
				case false:
					return 21550
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21551
				case false:
					return 21552
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21553
				case false:
					return 21554
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21555
				case false:
					return 21556
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21557
				case false:
					return 21558
				}
			}
		}
	case PolishedTuffStairsFacingEast:
		switch x.Half {
		case PolishedTuffStairsHalfTop:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21559
				case false:
					return 21560
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21561
				case false:
					return 21562
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21563
				case false:
					return 21564
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21565
				case false:
					return 21566
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21567
				case false:
					return 21568
				}
			}
		case PolishedTuffStairsHalfBottom:
			switch x.Shape {
			case PolishedTuffStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21569
				case false:
					return 21570
				}
			case PolishedTuffStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21571
				case false:
					return 21572
				}
			case PolishedTuffStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21573
				case false:
					return 21574
				}
			case PolishedTuffStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21575
				case false:
					return 21576
				}
			case PolishedTuffStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21577
				case false:
					return 21578
				}
			}
		}
	}
	return 21510 // default state
}

type PolishedTuffWallWest string

const (
	PolishedTuffWallWestNone PolishedTuffWallWest = "none"
	PolishedTuffWallWestLow  PolishedTuffWallWest = "low"
	PolishedTuffWallWestTall PolishedTuffWallWest = "tall"
)

type PolishedTuffWallEast string

const (
	PolishedTuffWallEastNone PolishedTuffWallEast = "none"
	PolishedTuffWallEastLow  PolishedTuffWallEast = "low"
	PolishedTuffWallEastTall PolishedTuffWallEast = "tall"
)

type PolishedTuffWallNorth string

const (
	PolishedTuffWallNorthNone PolishedTuffWallNorth = "none"
	PolishedTuffWallNorthLow  PolishedTuffWallNorth = "low"
	PolishedTuffWallNorthTall PolishedTuffWallNorth = "tall"
)

type PolishedTuffWallSouth string

const (
	PolishedTuffWallSouthNone PolishedTuffWallSouth = "none"
	PolishedTuffWallSouthLow  PolishedTuffWallSouth = "low"
	PolishedTuffWallSouthTall PolishedTuffWallSouth = "tall"
)

type PolishedTuffWall struct {
	Up          bool
	Waterlogged bool
	West        PolishedTuffWallWest
	East        PolishedTuffWallEast
	North       PolishedTuffWallNorth
	South       PolishedTuffWallSouth
}

func (x PolishedTuffWall) Id() uint16 {
	switch x.Up {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case PolishedTuffWallWestNone:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21579
						case PolishedTuffWallSouthLow:
							return 21591
						case PolishedTuffWallSouthTall:
							return 21603
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21615
						case PolishedTuffWallSouthLow:
							return 21627
						case PolishedTuffWallSouthTall:
							return 21639
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21651
						case PolishedTuffWallSouthLow:
							return 21663
						case PolishedTuffWallSouthTall:
							return 21675
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21687
						case PolishedTuffWallSouthLow:
							return 21699
						case PolishedTuffWallSouthTall:
							return 21711
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21723
						case PolishedTuffWallSouthLow:
							return 21735
						case PolishedTuffWallSouthTall:
							return 21747
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21759
						case PolishedTuffWallSouthLow:
							return 21771
						case PolishedTuffWallSouthTall:
							return 21783
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21795
						case PolishedTuffWallSouthLow:
							return 21807
						case PolishedTuffWallSouthTall:
							return 21819
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21831
						case PolishedTuffWallSouthLow:
							return 21843
						case PolishedTuffWallSouthTall:
							return 21855
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21867
						case PolishedTuffWallSouthLow:
							return 21879
						case PolishedTuffWallSouthTall:
							return 21891
						}
					}
				}
			case PolishedTuffWallWestLow:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21580
						case PolishedTuffWallSouthLow:
							return 21592
						case PolishedTuffWallSouthTall:
							return 21604
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21616
						case PolishedTuffWallSouthLow:
							return 21628
						case PolishedTuffWallSouthTall:
							return 21640
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21652
						case PolishedTuffWallSouthLow:
							return 21664
						case PolishedTuffWallSouthTall:
							return 21676
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21688
						case PolishedTuffWallSouthLow:
							return 21700
						case PolishedTuffWallSouthTall:
							return 21712
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21724
						case PolishedTuffWallSouthLow:
							return 21736
						case PolishedTuffWallSouthTall:
							return 21748
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21760
						case PolishedTuffWallSouthLow:
							return 21772
						case PolishedTuffWallSouthTall:
							return 21784
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21796
						case PolishedTuffWallSouthLow:
							return 21808
						case PolishedTuffWallSouthTall:
							return 21820
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21832
						case PolishedTuffWallSouthLow:
							return 21844
						case PolishedTuffWallSouthTall:
							return 21856
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21868
						case PolishedTuffWallSouthLow:
							return 21880
						case PolishedTuffWallSouthTall:
							return 21892
						}
					}
				}
			case PolishedTuffWallWestTall:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21581
						case PolishedTuffWallSouthLow:
							return 21593
						case PolishedTuffWallSouthTall:
							return 21605
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21617
						case PolishedTuffWallSouthLow:
							return 21629
						case PolishedTuffWallSouthTall:
							return 21641
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21653
						case PolishedTuffWallSouthLow:
							return 21665
						case PolishedTuffWallSouthTall:
							return 21677
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21689
						case PolishedTuffWallSouthLow:
							return 21701
						case PolishedTuffWallSouthTall:
							return 21713
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21725
						case PolishedTuffWallSouthLow:
							return 21737
						case PolishedTuffWallSouthTall:
							return 21749
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21761
						case PolishedTuffWallSouthLow:
							return 21773
						case PolishedTuffWallSouthTall:
							return 21785
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21797
						case PolishedTuffWallSouthLow:
							return 21809
						case PolishedTuffWallSouthTall:
							return 21821
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21833
						case PolishedTuffWallSouthLow:
							return 21845
						case PolishedTuffWallSouthTall:
							return 21857
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21869
						case PolishedTuffWallSouthLow:
							return 21881
						case PolishedTuffWallSouthTall:
							return 21893
						}
					}
				}
			}
		case false:
			switch x.West {
			case PolishedTuffWallWestNone:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21582
						case PolishedTuffWallSouthLow:
							return 21594
						case PolishedTuffWallSouthTall:
							return 21606
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21618
						case PolishedTuffWallSouthLow:
							return 21630
						case PolishedTuffWallSouthTall:
							return 21642
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21654
						case PolishedTuffWallSouthLow:
							return 21666
						case PolishedTuffWallSouthTall:
							return 21678
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21690
						case PolishedTuffWallSouthLow:
							return 21702
						case PolishedTuffWallSouthTall:
							return 21714
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21726
						case PolishedTuffWallSouthLow:
							return 21738
						case PolishedTuffWallSouthTall:
							return 21750
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21762
						case PolishedTuffWallSouthLow:
							return 21774
						case PolishedTuffWallSouthTall:
							return 21786
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21798
						case PolishedTuffWallSouthLow:
							return 21810
						case PolishedTuffWallSouthTall:
							return 21822
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21834
						case PolishedTuffWallSouthLow:
							return 21846
						case PolishedTuffWallSouthTall:
							return 21858
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21870
						case PolishedTuffWallSouthLow:
							return 21882
						case PolishedTuffWallSouthTall:
							return 21894
						}
					}
				}
			case PolishedTuffWallWestLow:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21583
						case PolishedTuffWallSouthLow:
							return 21595
						case PolishedTuffWallSouthTall:
							return 21607
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21619
						case PolishedTuffWallSouthLow:
							return 21631
						case PolishedTuffWallSouthTall:
							return 21643
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21655
						case PolishedTuffWallSouthLow:
							return 21667
						case PolishedTuffWallSouthTall:
							return 21679
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21691
						case PolishedTuffWallSouthLow:
							return 21703
						case PolishedTuffWallSouthTall:
							return 21715
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21727
						case PolishedTuffWallSouthLow:
							return 21739
						case PolishedTuffWallSouthTall:
							return 21751
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21763
						case PolishedTuffWallSouthLow:
							return 21775
						case PolishedTuffWallSouthTall:
							return 21787
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21799
						case PolishedTuffWallSouthLow:
							return 21811
						case PolishedTuffWallSouthTall:
							return 21823
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21835
						case PolishedTuffWallSouthLow:
							return 21847
						case PolishedTuffWallSouthTall:
							return 21859
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21871
						case PolishedTuffWallSouthLow:
							return 21883
						case PolishedTuffWallSouthTall:
							return 21895
						}
					}
				}
			case PolishedTuffWallWestTall:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21584
						case PolishedTuffWallSouthLow:
							return 21596
						case PolishedTuffWallSouthTall:
							return 21608
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21620
						case PolishedTuffWallSouthLow:
							return 21632
						case PolishedTuffWallSouthTall:
							return 21644
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21656
						case PolishedTuffWallSouthLow:
							return 21668
						case PolishedTuffWallSouthTall:
							return 21680
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21692
						case PolishedTuffWallSouthLow:
							return 21704
						case PolishedTuffWallSouthTall:
							return 21716
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21728
						case PolishedTuffWallSouthLow:
							return 21740
						case PolishedTuffWallSouthTall:
							return 21752
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21764
						case PolishedTuffWallSouthLow:
							return 21776
						case PolishedTuffWallSouthTall:
							return 21788
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21800
						case PolishedTuffWallSouthLow:
							return 21812
						case PolishedTuffWallSouthTall:
							return 21824
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21836
						case PolishedTuffWallSouthLow:
							return 21848
						case PolishedTuffWallSouthTall:
							return 21860
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21872
						case PolishedTuffWallSouthLow:
							return 21884
						case PolishedTuffWallSouthTall:
							return 21896
						}
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case PolishedTuffWallWestNone:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21585
						case PolishedTuffWallSouthLow:
							return 21597
						case PolishedTuffWallSouthTall:
							return 21609
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21621
						case PolishedTuffWallSouthLow:
							return 21633
						case PolishedTuffWallSouthTall:
							return 21645
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21657
						case PolishedTuffWallSouthLow:
							return 21669
						case PolishedTuffWallSouthTall:
							return 21681
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21693
						case PolishedTuffWallSouthLow:
							return 21705
						case PolishedTuffWallSouthTall:
							return 21717
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21729
						case PolishedTuffWallSouthLow:
							return 21741
						case PolishedTuffWallSouthTall:
							return 21753
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21765
						case PolishedTuffWallSouthLow:
							return 21777
						case PolishedTuffWallSouthTall:
							return 21789
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21801
						case PolishedTuffWallSouthLow:
							return 21813
						case PolishedTuffWallSouthTall:
							return 21825
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21837
						case PolishedTuffWallSouthLow:
							return 21849
						case PolishedTuffWallSouthTall:
							return 21861
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21873
						case PolishedTuffWallSouthLow:
							return 21885
						case PolishedTuffWallSouthTall:
							return 21897
						}
					}
				}
			case PolishedTuffWallWestLow:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21586
						case PolishedTuffWallSouthLow:
							return 21598
						case PolishedTuffWallSouthTall:
							return 21610
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21622
						case PolishedTuffWallSouthLow:
							return 21634
						case PolishedTuffWallSouthTall:
							return 21646
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21658
						case PolishedTuffWallSouthLow:
							return 21670
						case PolishedTuffWallSouthTall:
							return 21682
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21694
						case PolishedTuffWallSouthLow:
							return 21706
						case PolishedTuffWallSouthTall:
							return 21718
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21730
						case PolishedTuffWallSouthLow:
							return 21742
						case PolishedTuffWallSouthTall:
							return 21754
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21766
						case PolishedTuffWallSouthLow:
							return 21778
						case PolishedTuffWallSouthTall:
							return 21790
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21802
						case PolishedTuffWallSouthLow:
							return 21814
						case PolishedTuffWallSouthTall:
							return 21826
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21838
						case PolishedTuffWallSouthLow:
							return 21850
						case PolishedTuffWallSouthTall:
							return 21862
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21874
						case PolishedTuffWallSouthLow:
							return 21886
						case PolishedTuffWallSouthTall:
							return 21898
						}
					}
				}
			case PolishedTuffWallWestTall:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21587
						case PolishedTuffWallSouthLow:
							return 21599
						case PolishedTuffWallSouthTall:
							return 21611
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21623
						case PolishedTuffWallSouthLow:
							return 21635
						case PolishedTuffWallSouthTall:
							return 21647
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21659
						case PolishedTuffWallSouthLow:
							return 21671
						case PolishedTuffWallSouthTall:
							return 21683
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21695
						case PolishedTuffWallSouthLow:
							return 21707
						case PolishedTuffWallSouthTall:
							return 21719
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21731
						case PolishedTuffWallSouthLow:
							return 21743
						case PolishedTuffWallSouthTall:
							return 21755
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21767
						case PolishedTuffWallSouthLow:
							return 21779
						case PolishedTuffWallSouthTall:
							return 21791
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21803
						case PolishedTuffWallSouthLow:
							return 21815
						case PolishedTuffWallSouthTall:
							return 21827
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21839
						case PolishedTuffWallSouthLow:
							return 21851
						case PolishedTuffWallSouthTall:
							return 21863
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21875
						case PolishedTuffWallSouthLow:
							return 21887
						case PolishedTuffWallSouthTall:
							return 21899
						}
					}
				}
			}
		case false:
			switch x.West {
			case PolishedTuffWallWestNone:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21588
						case PolishedTuffWallSouthLow:
							return 21600
						case PolishedTuffWallSouthTall:
							return 21612
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21624
						case PolishedTuffWallSouthLow:
							return 21636
						case PolishedTuffWallSouthTall:
							return 21648
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21660
						case PolishedTuffWallSouthLow:
							return 21672
						case PolishedTuffWallSouthTall:
							return 21684
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21696
						case PolishedTuffWallSouthLow:
							return 21708
						case PolishedTuffWallSouthTall:
							return 21720
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21732
						case PolishedTuffWallSouthLow:
							return 21744
						case PolishedTuffWallSouthTall:
							return 21756
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21768
						case PolishedTuffWallSouthLow:
							return 21780
						case PolishedTuffWallSouthTall:
							return 21792
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21804
						case PolishedTuffWallSouthLow:
							return 21816
						case PolishedTuffWallSouthTall:
							return 21828
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21840
						case PolishedTuffWallSouthLow:
							return 21852
						case PolishedTuffWallSouthTall:
							return 21864
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21876
						case PolishedTuffWallSouthLow:
							return 21888
						case PolishedTuffWallSouthTall:
							return 21900
						}
					}
				}
			case PolishedTuffWallWestLow:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21589
						case PolishedTuffWallSouthLow:
							return 21601
						case PolishedTuffWallSouthTall:
							return 21613
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21625
						case PolishedTuffWallSouthLow:
							return 21637
						case PolishedTuffWallSouthTall:
							return 21649
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21661
						case PolishedTuffWallSouthLow:
							return 21673
						case PolishedTuffWallSouthTall:
							return 21685
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21697
						case PolishedTuffWallSouthLow:
							return 21709
						case PolishedTuffWallSouthTall:
							return 21721
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21733
						case PolishedTuffWallSouthLow:
							return 21745
						case PolishedTuffWallSouthTall:
							return 21757
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21769
						case PolishedTuffWallSouthLow:
							return 21781
						case PolishedTuffWallSouthTall:
							return 21793
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21805
						case PolishedTuffWallSouthLow:
							return 21817
						case PolishedTuffWallSouthTall:
							return 21829
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21841
						case PolishedTuffWallSouthLow:
							return 21853
						case PolishedTuffWallSouthTall:
							return 21865
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21877
						case PolishedTuffWallSouthLow:
							return 21889
						case PolishedTuffWallSouthTall:
							return 21901
						}
					}
				}
			case PolishedTuffWallWestTall:
				switch x.East {
				case PolishedTuffWallEastNone:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21590
						case PolishedTuffWallSouthLow:
							return 21602
						case PolishedTuffWallSouthTall:
							return 21614
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21626
						case PolishedTuffWallSouthLow:
							return 21638
						case PolishedTuffWallSouthTall:
							return 21650
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21662
						case PolishedTuffWallSouthLow:
							return 21674
						case PolishedTuffWallSouthTall:
							return 21686
						}
					}
				case PolishedTuffWallEastLow:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21698
						case PolishedTuffWallSouthLow:
							return 21710
						case PolishedTuffWallSouthTall:
							return 21722
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21734
						case PolishedTuffWallSouthLow:
							return 21746
						case PolishedTuffWallSouthTall:
							return 21758
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21770
						case PolishedTuffWallSouthLow:
							return 21782
						case PolishedTuffWallSouthTall:
							return 21794
						}
					}
				case PolishedTuffWallEastTall:
					switch x.North {
					case PolishedTuffWallNorthNone:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21806
						case PolishedTuffWallSouthLow:
							return 21818
						case PolishedTuffWallSouthTall:
							return 21830
						}
					case PolishedTuffWallNorthLow:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21842
						case PolishedTuffWallSouthLow:
							return 21854
						case PolishedTuffWallSouthTall:
							return 21866
						}
					case PolishedTuffWallNorthTall:
						switch x.South {
						case PolishedTuffWallSouthNone:
							return 21878
						case PolishedTuffWallSouthLow:
							return 21890
						case PolishedTuffWallSouthTall:
							return 21902
						}
					}
				}
			}
		}
	}
	return 21582 // default state
}

type ChiseledTuff struct{}

func (x ChiseledTuff) Id() uint16 {
	return 21903
}

type TuffBricks struct{}

func (x TuffBricks) Id() uint16 {
	return 21904
}

type TuffBrickSlabType string

const (
	TuffBrickSlabTypeTop    TuffBrickSlabType = "top"
	TuffBrickSlabTypeBottom TuffBrickSlabType = "bottom"
	TuffBrickSlabTypeDouble TuffBrickSlabType = "double"
)

type TuffBrickSlab struct {
	Type        TuffBrickSlabType
	Waterlogged bool
}

func (x TuffBrickSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case TuffBrickSlabTypeTop:
			return 21905
		case TuffBrickSlabTypeBottom:
			return 21907
		case TuffBrickSlabTypeDouble:
			return 21909
		}
	case false:
		switch x.Type {
		case TuffBrickSlabTypeTop:
			return 21906
		case TuffBrickSlabTypeBottom:
			return 21908
		case TuffBrickSlabTypeDouble:
			return 21910
		}
	}
	return 21908 // default state
}

type TuffBrickStairsFacing string

const (
	TuffBrickStairsFacingNorth TuffBrickStairsFacing = "north"
	TuffBrickStairsFacingSouth TuffBrickStairsFacing = "south"
	TuffBrickStairsFacingWest  TuffBrickStairsFacing = "west"
	TuffBrickStairsFacingEast  TuffBrickStairsFacing = "east"
)

type TuffBrickStairsHalf string

const (
	TuffBrickStairsHalfTop    TuffBrickStairsHalf = "top"
	TuffBrickStairsHalfBottom TuffBrickStairsHalf = "bottom"
)

type TuffBrickStairsShape string

const (
	TuffBrickStairsShapeStraight   TuffBrickStairsShape = "straight"
	TuffBrickStairsShapeInnerLeft  TuffBrickStairsShape = "inner_left"
	TuffBrickStairsShapeInnerRight TuffBrickStairsShape = "inner_right"
	TuffBrickStairsShapeOuterLeft  TuffBrickStairsShape = "outer_left"
	TuffBrickStairsShapeOuterRight TuffBrickStairsShape = "outer_right"
)

type TuffBrickStairs struct {
	Facing      TuffBrickStairsFacing
	Half        TuffBrickStairsHalf
	Shape       TuffBrickStairsShape
	Waterlogged bool
}

func (x TuffBrickStairs) Id() uint16 {
	switch x.Facing {
	case TuffBrickStairsFacingNorth:
		switch x.Half {
		case TuffBrickStairsHalfTop:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21911
				case false:
					return 21912
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21913
				case false:
					return 21914
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21915
				case false:
					return 21916
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21917
				case false:
					return 21918
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21919
				case false:
					return 21920
				}
			}
		case TuffBrickStairsHalfBottom:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21921
				case false:
					return 21922
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21923
				case false:
					return 21924
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21925
				case false:
					return 21926
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21927
				case false:
					return 21928
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21929
				case false:
					return 21930
				}
			}
		}
	case TuffBrickStairsFacingSouth:
		switch x.Half {
		case TuffBrickStairsHalfTop:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21931
				case false:
					return 21932
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21933
				case false:
					return 21934
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21935
				case false:
					return 21936
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21937
				case false:
					return 21938
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21939
				case false:
					return 21940
				}
			}
		case TuffBrickStairsHalfBottom:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21941
				case false:
					return 21942
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21943
				case false:
					return 21944
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21945
				case false:
					return 21946
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21947
				case false:
					return 21948
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21949
				case false:
					return 21950
				}
			}
		}
	case TuffBrickStairsFacingWest:
		switch x.Half {
		case TuffBrickStairsHalfTop:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21951
				case false:
					return 21952
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21953
				case false:
					return 21954
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21955
				case false:
					return 21956
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21957
				case false:
					return 21958
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21959
				case false:
					return 21960
				}
			}
		case TuffBrickStairsHalfBottom:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21961
				case false:
					return 21962
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21963
				case false:
					return 21964
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21965
				case false:
					return 21966
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21967
				case false:
					return 21968
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21969
				case false:
					return 21970
				}
			}
		}
	case TuffBrickStairsFacingEast:
		switch x.Half {
		case TuffBrickStairsHalfTop:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21971
				case false:
					return 21972
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21973
				case false:
					return 21974
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21975
				case false:
					return 21976
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21977
				case false:
					return 21978
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21979
				case false:
					return 21980
				}
			}
		case TuffBrickStairsHalfBottom:
			switch x.Shape {
			case TuffBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 21981
				case false:
					return 21982
				}
			case TuffBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 21983
				case false:
					return 21984
				}
			case TuffBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 21985
				case false:
					return 21986
				}
			case TuffBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 21987
				case false:
					return 21988
				}
			case TuffBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 21989
				case false:
					return 21990
				}
			}
		}
	}
	return 21922 // default state
}

type TuffBrickWallNorth string

const (
	TuffBrickWallNorthNone TuffBrickWallNorth = "none"
	TuffBrickWallNorthLow  TuffBrickWallNorth = "low"
	TuffBrickWallNorthTall TuffBrickWallNorth = "tall"
)

type TuffBrickWallSouth string

const (
	TuffBrickWallSouthNone TuffBrickWallSouth = "none"
	TuffBrickWallSouthLow  TuffBrickWallSouth = "low"
	TuffBrickWallSouthTall TuffBrickWallSouth = "tall"
)

type TuffBrickWallWest string

const (
	TuffBrickWallWestNone TuffBrickWallWest = "none"
	TuffBrickWallWestLow  TuffBrickWallWest = "low"
	TuffBrickWallWestTall TuffBrickWallWest = "tall"
)

type TuffBrickWallEast string

const (
	TuffBrickWallEastNone TuffBrickWallEast = "none"
	TuffBrickWallEastLow  TuffBrickWallEast = "low"
	TuffBrickWallEastTall TuffBrickWallEast = "tall"
)

type TuffBrickWall struct {
	North       TuffBrickWallNorth
	South       TuffBrickWallSouth
	Up          bool
	Waterlogged bool
	West        TuffBrickWallWest
	East        TuffBrickWallEast
}

func (x TuffBrickWall) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.West {
		case TuffBrickWallWestNone:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21991
						case false:
							return 21997
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22003
						case false:
							return 22009
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22015
						case false:
							return 22021
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22027
						case false:
							return 22033
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22039
						case false:
							return 22045
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22051
						case false:
							return 22057
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22063
						case false:
							return 22069
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22075
						case false:
							return 22081
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22087
						case false:
							return 22093
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22099
						case false:
							return 22105
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22111
						case false:
							return 22117
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22123
						case false:
							return 22129
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22135
						case false:
							return 22141
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22147
						case false:
							return 22153
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22159
						case false:
							return 22165
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22171
						case false:
							return 22177
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22183
						case false:
							return 22189
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22195
						case false:
							return 22201
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22207
						case false:
							return 22213
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22219
						case false:
							return 22225
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22231
						case false:
							return 22237
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22243
						case false:
							return 22249
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22255
						case false:
							return 22261
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22267
						case false:
							return 22273
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22279
						case false:
							return 22285
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22291
						case false:
							return 22297
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22303
						case false:
							return 22309
						}
					}
				}
			}
		case TuffBrickWallWestLow:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21992
						case false:
							return 21998
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22004
						case false:
							return 22010
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22016
						case false:
							return 22022
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22028
						case false:
							return 22034
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22040
						case false:
							return 22046
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22052
						case false:
							return 22058
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22064
						case false:
							return 22070
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22076
						case false:
							return 22082
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22088
						case false:
							return 22094
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22100
						case false:
							return 22106
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22112
						case false:
							return 22118
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22124
						case false:
							return 22130
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22136
						case false:
							return 22142
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22148
						case false:
							return 22154
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22160
						case false:
							return 22166
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22172
						case false:
							return 22178
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22184
						case false:
							return 22190
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22196
						case false:
							return 22202
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22208
						case false:
							return 22214
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22220
						case false:
							return 22226
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22232
						case false:
							return 22238
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22244
						case false:
							return 22250
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22256
						case false:
							return 22262
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22268
						case false:
							return 22274
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22280
						case false:
							return 22286
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22292
						case false:
							return 22298
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22304
						case false:
							return 22310
						}
					}
				}
			}
		case TuffBrickWallWestTall:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21993
						case false:
							return 21999
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22005
						case false:
							return 22011
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22017
						case false:
							return 22023
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22029
						case false:
							return 22035
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22041
						case false:
							return 22047
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22053
						case false:
							return 22059
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22065
						case false:
							return 22071
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22077
						case false:
							return 22083
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22089
						case false:
							return 22095
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22101
						case false:
							return 22107
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22113
						case false:
							return 22119
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22125
						case false:
							return 22131
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22137
						case false:
							return 22143
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22149
						case false:
							return 22155
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22161
						case false:
							return 22167
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22173
						case false:
							return 22179
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22185
						case false:
							return 22191
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22197
						case false:
							return 22203
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22209
						case false:
							return 22215
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22221
						case false:
							return 22227
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22233
						case false:
							return 22239
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22245
						case false:
							return 22251
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22257
						case false:
							return 22263
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22269
						case false:
							return 22275
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22281
						case false:
							return 22287
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22293
						case false:
							return 22299
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22305
						case false:
							return 22311
						}
					}
				}
			}
		}
	case false:
		switch x.West {
		case TuffBrickWallWestNone:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21994
						case false:
							return 22000
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22006
						case false:
							return 22012
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22018
						case false:
							return 22024
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22030
						case false:
							return 22036
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22042
						case false:
							return 22048
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22054
						case false:
							return 22060
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22066
						case false:
							return 22072
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22078
						case false:
							return 22084
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22090
						case false:
							return 22096
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22102
						case false:
							return 22108
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22114
						case false:
							return 22120
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22126
						case false:
							return 22132
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22138
						case false:
							return 22144
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22150
						case false:
							return 22156
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22162
						case false:
							return 22168
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22174
						case false:
							return 22180
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22186
						case false:
							return 22192
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22198
						case false:
							return 22204
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22210
						case false:
							return 22216
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22222
						case false:
							return 22228
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22234
						case false:
							return 22240
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22246
						case false:
							return 22252
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22258
						case false:
							return 22264
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22270
						case false:
							return 22276
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22282
						case false:
							return 22288
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22294
						case false:
							return 22300
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22306
						case false:
							return 22312
						}
					}
				}
			}
		case TuffBrickWallWestLow:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21995
						case false:
							return 22001
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22007
						case false:
							return 22013
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22019
						case false:
							return 22025
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22031
						case false:
							return 22037
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22043
						case false:
							return 22049
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22055
						case false:
							return 22061
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22067
						case false:
							return 22073
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22079
						case false:
							return 22085
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22091
						case false:
							return 22097
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22103
						case false:
							return 22109
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22115
						case false:
							return 22121
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22127
						case false:
							return 22133
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22139
						case false:
							return 22145
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22151
						case false:
							return 22157
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22163
						case false:
							return 22169
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22175
						case false:
							return 22181
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22187
						case false:
							return 22193
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22199
						case false:
							return 22205
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22211
						case false:
							return 22217
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22223
						case false:
							return 22229
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22235
						case false:
							return 22241
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22247
						case false:
							return 22253
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22259
						case false:
							return 22265
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22271
						case false:
							return 22277
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22283
						case false:
							return 22289
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22295
						case false:
							return 22301
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22307
						case false:
							return 22313
						}
					}
				}
			}
		case TuffBrickWallWestTall:
			switch x.East {
			case TuffBrickWallEastNone:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 21996
						case false:
							return 22002
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22008
						case false:
							return 22014
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22020
						case false:
							return 22026
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22032
						case false:
							return 22038
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22044
						case false:
							return 22050
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22056
						case false:
							return 22062
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22068
						case false:
							return 22074
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22080
						case false:
							return 22086
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22092
						case false:
							return 22098
						}
					}
				}
			case TuffBrickWallEastLow:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22104
						case false:
							return 22110
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22116
						case false:
							return 22122
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22128
						case false:
							return 22134
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22140
						case false:
							return 22146
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22152
						case false:
							return 22158
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22164
						case false:
							return 22170
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22176
						case false:
							return 22182
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22188
						case false:
							return 22194
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22200
						case false:
							return 22206
						}
					}
				}
			case TuffBrickWallEastTall:
				switch x.North {
				case TuffBrickWallNorthNone:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22212
						case false:
							return 22218
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22224
						case false:
							return 22230
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22236
						case false:
							return 22242
						}
					}
				case TuffBrickWallNorthLow:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22248
						case false:
							return 22254
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22260
						case false:
							return 22266
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22272
						case false:
							return 22278
						}
					}
				case TuffBrickWallNorthTall:
					switch x.South {
					case TuffBrickWallSouthNone:
						switch x.Up {
						case true:
							return 22284
						case false:
							return 22290
						}
					case TuffBrickWallSouthLow:
						switch x.Up {
						case true:
							return 22296
						case false:
							return 22302
						}
					case TuffBrickWallSouthTall:
						switch x.Up {
						case true:
							return 22308
						case false:
							return 22314
						}
					}
				}
			}
		}
	}
	return 21994 // default state
}

type ChiseledTuffBricks struct{}

func (x ChiseledTuffBricks) Id() uint16 {
	return 22315
}

type Calcite struct{}

func (x Calcite) Id() uint16 {
	return 22316
}

type TintedGlass struct{}

func (x TintedGlass) Id() uint16 {
	return 22317
}

type PowderSnow struct{}

func (x PowderSnow) Id() uint16 {
	return 22318
}

type SculkSensorSculkSensorPhase string

const (
	SculkSensorSculkSensorPhaseInactive SculkSensorSculkSensorPhase = "inactive"
	SculkSensorSculkSensorPhaseActive   SculkSensorSculkSensorPhase = "active"
	SculkSensorSculkSensorPhaseCooldown SculkSensorSculkSensorPhase = "cooldown"
)

type SculkSensor struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power            int
	SculkSensorPhase SculkSensorSculkSensorPhase
	Waterlogged      bool
}

func (x SculkSensor) Id() uint16 {
	switch x.Power {
	case 0:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22319
			case false:
				return 22320
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22321
			case false:
				return 22322
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22323
			case false:
				return 22324
			}
		}
	case 1:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22325
			case false:
				return 22326
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22327
			case false:
				return 22328
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22329
			case false:
				return 22330
			}
		}
	case 2:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22331
			case false:
				return 22332
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22333
			case false:
				return 22334
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22335
			case false:
				return 22336
			}
		}
	case 3:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22337
			case false:
				return 22338
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22339
			case false:
				return 22340
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22341
			case false:
				return 22342
			}
		}
	case 4:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22343
			case false:
				return 22344
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22345
			case false:
				return 22346
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22347
			case false:
				return 22348
			}
		}
	case 5:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22349
			case false:
				return 22350
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22351
			case false:
				return 22352
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22353
			case false:
				return 22354
			}
		}
	case 6:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22355
			case false:
				return 22356
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22357
			case false:
				return 22358
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22359
			case false:
				return 22360
			}
		}
	case 7:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22361
			case false:
				return 22362
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22363
			case false:
				return 22364
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22365
			case false:
				return 22366
			}
		}
	case 8:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22367
			case false:
				return 22368
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22369
			case false:
				return 22370
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22371
			case false:
				return 22372
			}
		}
	case 9:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22373
			case false:
				return 22374
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22375
			case false:
				return 22376
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22377
			case false:
				return 22378
			}
		}
	case 10:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22379
			case false:
				return 22380
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22381
			case false:
				return 22382
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22383
			case false:
				return 22384
			}
		}
	case 11:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22385
			case false:
				return 22386
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22387
			case false:
				return 22388
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22389
			case false:
				return 22390
			}
		}
	case 12:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22391
			case false:
				return 22392
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22393
			case false:
				return 22394
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22395
			case false:
				return 22396
			}
		}
	case 13:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22397
			case false:
				return 22398
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22399
			case false:
				return 22400
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22401
			case false:
				return 22402
			}
		}
	case 14:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22403
			case false:
				return 22404
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22405
			case false:
				return 22406
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22407
			case false:
				return 22408
			}
		}
	case 15:
		switch x.SculkSensorPhase {
		case SculkSensorSculkSensorPhaseInactive:
			switch x.Waterlogged {
			case true:
				return 22409
			case false:
				return 22410
			}
		case SculkSensorSculkSensorPhaseActive:
			switch x.Waterlogged {
			case true:
				return 22411
			case false:
				return 22412
			}
		case SculkSensorSculkSensorPhaseCooldown:
			switch x.Waterlogged {
			case true:
				return 22413
			case false:
				return 22414
			}
		}
	}
	return 22320 // default state
}

type CalibratedSculkSensorFacing string

const (
	CalibratedSculkSensorFacingNorth CalibratedSculkSensorFacing = "north"
	CalibratedSculkSensorFacingSouth CalibratedSculkSensorFacing = "south"
	CalibratedSculkSensorFacingWest  CalibratedSculkSensorFacing = "west"
	CalibratedSculkSensorFacingEast  CalibratedSculkSensorFacing = "east"
)

type CalibratedSculkSensorSculkSensorPhase string

const (
	CalibratedSculkSensorSculkSensorPhaseInactive CalibratedSculkSensorSculkSensorPhase = "inactive"
	CalibratedSculkSensorSculkSensorPhaseActive   CalibratedSculkSensorSculkSensorPhase = "active"
	CalibratedSculkSensorSculkSensorPhaseCooldown CalibratedSculkSensorSculkSensorPhase = "cooldown"
)

type CalibratedSculkSensor struct {
	Facing CalibratedSculkSensorFacing
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15
	Power            int
	SculkSensorPhase CalibratedSculkSensorSculkSensorPhase
	Waterlogged      bool
}

func (x CalibratedSculkSensor) Id() uint16 {
	switch x.Facing {
	case CalibratedSculkSensorFacingNorth:
		switch x.Power {
		case 0:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22415
				case false:
					return 22416
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22417
				case false:
					return 22418
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22419
				case false:
					return 22420
				}
			}
		case 1:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22421
				case false:
					return 22422
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22423
				case false:
					return 22424
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22425
				case false:
					return 22426
				}
			}
		case 2:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22427
				case false:
					return 22428
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22429
				case false:
					return 22430
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22431
				case false:
					return 22432
				}
			}
		case 3:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22433
				case false:
					return 22434
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22435
				case false:
					return 22436
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22437
				case false:
					return 22438
				}
			}
		case 4:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22439
				case false:
					return 22440
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22441
				case false:
					return 22442
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22443
				case false:
					return 22444
				}
			}
		case 5:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22445
				case false:
					return 22446
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22447
				case false:
					return 22448
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22449
				case false:
					return 22450
				}
			}
		case 6:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22451
				case false:
					return 22452
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22453
				case false:
					return 22454
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22455
				case false:
					return 22456
				}
			}
		case 7:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22457
				case false:
					return 22458
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22459
				case false:
					return 22460
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22461
				case false:
					return 22462
				}
			}
		case 8:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22463
				case false:
					return 22464
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22465
				case false:
					return 22466
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22467
				case false:
					return 22468
				}
			}
		case 9:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22469
				case false:
					return 22470
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22471
				case false:
					return 22472
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22473
				case false:
					return 22474
				}
			}
		case 10:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22475
				case false:
					return 22476
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22477
				case false:
					return 22478
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22479
				case false:
					return 22480
				}
			}
		case 11:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22481
				case false:
					return 22482
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22483
				case false:
					return 22484
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22485
				case false:
					return 22486
				}
			}
		case 12:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22487
				case false:
					return 22488
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22489
				case false:
					return 22490
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22491
				case false:
					return 22492
				}
			}
		case 13:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22493
				case false:
					return 22494
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22495
				case false:
					return 22496
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22497
				case false:
					return 22498
				}
			}
		case 14:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22499
				case false:
					return 22500
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22501
				case false:
					return 22502
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22503
				case false:
					return 22504
				}
			}
		case 15:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22505
				case false:
					return 22506
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22507
				case false:
					return 22508
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22509
				case false:
					return 22510
				}
			}
		}
	case CalibratedSculkSensorFacingSouth:
		switch x.Power {
		case 0:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22511
				case false:
					return 22512
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22513
				case false:
					return 22514
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22515
				case false:
					return 22516
				}
			}
		case 1:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22517
				case false:
					return 22518
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22519
				case false:
					return 22520
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22521
				case false:
					return 22522
				}
			}
		case 2:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22523
				case false:
					return 22524
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22525
				case false:
					return 22526
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22527
				case false:
					return 22528
				}
			}
		case 3:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22529
				case false:
					return 22530
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22531
				case false:
					return 22532
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22533
				case false:
					return 22534
				}
			}
		case 4:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22535
				case false:
					return 22536
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22537
				case false:
					return 22538
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22539
				case false:
					return 22540
				}
			}
		case 5:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22541
				case false:
					return 22542
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22543
				case false:
					return 22544
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22545
				case false:
					return 22546
				}
			}
		case 6:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22547
				case false:
					return 22548
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22549
				case false:
					return 22550
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22551
				case false:
					return 22552
				}
			}
		case 7:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22553
				case false:
					return 22554
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22555
				case false:
					return 22556
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22557
				case false:
					return 22558
				}
			}
		case 8:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22559
				case false:
					return 22560
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22561
				case false:
					return 22562
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22563
				case false:
					return 22564
				}
			}
		case 9:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22565
				case false:
					return 22566
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22567
				case false:
					return 22568
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22569
				case false:
					return 22570
				}
			}
		case 10:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22571
				case false:
					return 22572
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22573
				case false:
					return 22574
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22575
				case false:
					return 22576
				}
			}
		case 11:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22577
				case false:
					return 22578
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22579
				case false:
					return 22580
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22581
				case false:
					return 22582
				}
			}
		case 12:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22583
				case false:
					return 22584
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22585
				case false:
					return 22586
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22587
				case false:
					return 22588
				}
			}
		case 13:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22589
				case false:
					return 22590
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22591
				case false:
					return 22592
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22593
				case false:
					return 22594
				}
			}
		case 14:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22595
				case false:
					return 22596
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22597
				case false:
					return 22598
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22599
				case false:
					return 22600
				}
			}
		case 15:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22601
				case false:
					return 22602
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22603
				case false:
					return 22604
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22605
				case false:
					return 22606
				}
			}
		}
	case CalibratedSculkSensorFacingWest:
		switch x.Power {
		case 0:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22607
				case false:
					return 22608
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22609
				case false:
					return 22610
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22611
				case false:
					return 22612
				}
			}
		case 1:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22613
				case false:
					return 22614
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22615
				case false:
					return 22616
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22617
				case false:
					return 22618
				}
			}
		case 2:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22619
				case false:
					return 22620
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22621
				case false:
					return 22622
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22623
				case false:
					return 22624
				}
			}
		case 3:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22625
				case false:
					return 22626
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22627
				case false:
					return 22628
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22629
				case false:
					return 22630
				}
			}
		case 4:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22631
				case false:
					return 22632
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22633
				case false:
					return 22634
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22635
				case false:
					return 22636
				}
			}
		case 5:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22637
				case false:
					return 22638
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22639
				case false:
					return 22640
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22641
				case false:
					return 22642
				}
			}
		case 6:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22643
				case false:
					return 22644
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22645
				case false:
					return 22646
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22647
				case false:
					return 22648
				}
			}
		case 7:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22649
				case false:
					return 22650
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22651
				case false:
					return 22652
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22653
				case false:
					return 22654
				}
			}
		case 8:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22655
				case false:
					return 22656
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22657
				case false:
					return 22658
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22659
				case false:
					return 22660
				}
			}
		case 9:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22661
				case false:
					return 22662
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22663
				case false:
					return 22664
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22665
				case false:
					return 22666
				}
			}
		case 10:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22667
				case false:
					return 22668
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22669
				case false:
					return 22670
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22671
				case false:
					return 22672
				}
			}
		case 11:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22673
				case false:
					return 22674
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22675
				case false:
					return 22676
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22677
				case false:
					return 22678
				}
			}
		case 12:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22679
				case false:
					return 22680
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22681
				case false:
					return 22682
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22683
				case false:
					return 22684
				}
			}
		case 13:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22685
				case false:
					return 22686
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22687
				case false:
					return 22688
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22689
				case false:
					return 22690
				}
			}
		case 14:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22691
				case false:
					return 22692
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22693
				case false:
					return 22694
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22695
				case false:
					return 22696
				}
			}
		case 15:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22697
				case false:
					return 22698
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22699
				case false:
					return 22700
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22701
				case false:
					return 22702
				}
			}
		}
	case CalibratedSculkSensorFacingEast:
		switch x.Power {
		case 0:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22703
				case false:
					return 22704
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22705
				case false:
					return 22706
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22707
				case false:
					return 22708
				}
			}
		case 1:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22709
				case false:
					return 22710
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22711
				case false:
					return 22712
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22713
				case false:
					return 22714
				}
			}
		case 2:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22715
				case false:
					return 22716
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22717
				case false:
					return 22718
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22719
				case false:
					return 22720
				}
			}
		case 3:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22721
				case false:
					return 22722
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22723
				case false:
					return 22724
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22725
				case false:
					return 22726
				}
			}
		case 4:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22727
				case false:
					return 22728
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22729
				case false:
					return 22730
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22731
				case false:
					return 22732
				}
			}
		case 5:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22733
				case false:
					return 22734
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22735
				case false:
					return 22736
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22737
				case false:
					return 22738
				}
			}
		case 6:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22739
				case false:
					return 22740
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22741
				case false:
					return 22742
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22743
				case false:
					return 22744
				}
			}
		case 7:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22745
				case false:
					return 22746
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22747
				case false:
					return 22748
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22749
				case false:
					return 22750
				}
			}
		case 8:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22751
				case false:
					return 22752
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22753
				case false:
					return 22754
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22755
				case false:
					return 22756
				}
			}
		case 9:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22757
				case false:
					return 22758
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22759
				case false:
					return 22760
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22761
				case false:
					return 22762
				}
			}
		case 10:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22763
				case false:
					return 22764
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22765
				case false:
					return 22766
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22767
				case false:
					return 22768
				}
			}
		case 11:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22769
				case false:
					return 22770
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22771
				case false:
					return 22772
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22773
				case false:
					return 22774
				}
			}
		case 12:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22775
				case false:
					return 22776
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22777
				case false:
					return 22778
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22779
				case false:
					return 22780
				}
			}
		case 13:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22781
				case false:
					return 22782
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22783
				case false:
					return 22784
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22785
				case false:
					return 22786
				}
			}
		case 14:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22787
				case false:
					return 22788
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22789
				case false:
					return 22790
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22791
				case false:
					return 22792
				}
			}
		case 15:
			switch x.SculkSensorPhase {
			case CalibratedSculkSensorSculkSensorPhaseInactive:
				switch x.Waterlogged {
				case true:
					return 22793
				case false:
					return 22794
				}
			case CalibratedSculkSensorSculkSensorPhaseActive:
				switch x.Waterlogged {
				case true:
					return 22795
				case false:
					return 22796
				}
			case CalibratedSculkSensorSculkSensorPhaseCooldown:
				switch x.Waterlogged {
				case true:
					return 22797
				case false:
					return 22798
				}
			}
		}
	}
	return 22416 // default state
}

type Sculk struct{}

func (x Sculk) Id() uint16 {
	return 22799
}

type SculkVein struct {
	East        bool
	North       bool
	South       bool
	Up          bool
	Waterlogged bool
	West        bool
	Down        bool
}

func (x SculkVein) Id() uint16 {
	switch x.Up {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22800
							case false:
								return 22808
							}
						case false:
							switch x.South {
							case true:
								return 22816
							case false:
								return 22824
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22832
							case false:
								return 22840
							}
						case false:
							switch x.South {
							case true:
								return 22848
							case false:
								return 22856
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22864
							case false:
								return 22872
							}
						case false:
							switch x.South {
							case true:
								return 22880
							case false:
								return 22888
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22896
							case false:
								return 22904
							}
						case false:
							switch x.South {
							case true:
								return 22912
							case false:
								return 22920
							}
						}
					}
				}
			case false:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22801
							case false:
								return 22809
							}
						case false:
							switch x.South {
							case true:
								return 22817
							case false:
								return 22825
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22833
							case false:
								return 22841
							}
						case false:
							switch x.South {
							case true:
								return 22849
							case false:
								return 22857
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22865
							case false:
								return 22873
							}
						case false:
							switch x.South {
							case true:
								return 22881
							case false:
								return 22889
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22897
							case false:
								return 22905
							}
						case false:
							switch x.South {
							case true:
								return 22913
							case false:
								return 22921
							}
						}
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22802
							case false:
								return 22810
							}
						case false:
							switch x.South {
							case true:
								return 22818
							case false:
								return 22826
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22834
							case false:
								return 22842
							}
						case false:
							switch x.South {
							case true:
								return 22850
							case false:
								return 22858
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22866
							case false:
								return 22874
							}
						case false:
							switch x.South {
							case true:
								return 22882
							case false:
								return 22890
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22898
							case false:
								return 22906
							}
						case false:
							switch x.South {
							case true:
								return 22914
							case false:
								return 22922
							}
						}
					}
				}
			case false:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22803
							case false:
								return 22811
							}
						case false:
							switch x.South {
							case true:
								return 22819
							case false:
								return 22827
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22835
							case false:
								return 22843
							}
						case false:
							switch x.South {
							case true:
								return 22851
							case false:
								return 22859
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22867
							case false:
								return 22875
							}
						case false:
							switch x.South {
							case true:
								return 22883
							case false:
								return 22891
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22899
							case false:
								return 22907
							}
						case false:
							switch x.South {
							case true:
								return 22915
							case false:
								return 22923
							}
						}
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.West {
			case true:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22804
							case false:
								return 22812
							}
						case false:
							switch x.South {
							case true:
								return 22820
							case false:
								return 22828
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22836
							case false:
								return 22844
							}
						case false:
							switch x.South {
							case true:
								return 22852
							case false:
								return 22860
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22868
							case false:
								return 22876
							}
						case false:
							switch x.South {
							case true:
								return 22884
							case false:
								return 22892
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22900
							case false:
								return 22908
							}
						case false:
							switch x.South {
							case true:
								return 22916
							case false:
								return 22924
							}
						}
					}
				}
			case false:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22805
							case false:
								return 22813
							}
						case false:
							switch x.South {
							case true:
								return 22821
							case false:
								return 22829
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22837
							case false:
								return 22845
							}
						case false:
							switch x.South {
							case true:
								return 22853
							case false:
								return 22861
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22869
							case false:
								return 22877
							}
						case false:
							switch x.South {
							case true:
								return 22885
							case false:
								return 22893
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22901
							case false:
								return 22909
							}
						case false:
							switch x.South {
							case true:
								return 22917
							case false:
								return 22925
							}
						}
					}
				}
			}
		case false:
			switch x.West {
			case true:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22806
							case false:
								return 22814
							}
						case false:
							switch x.South {
							case true:
								return 22822
							case false:
								return 22830
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22838
							case false:
								return 22846
							}
						case false:
							switch x.South {
							case true:
								return 22854
							case false:
								return 22862
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22870
							case false:
								return 22878
							}
						case false:
							switch x.South {
							case true:
								return 22886
							case false:
								return 22894
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22902
							case false:
								return 22910
							}
						case false:
							switch x.South {
							case true:
								return 22918
							case false:
								return 22926
							}
						}
					}
				}
			case false:
				switch x.Down {
				case true:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22807
							case false:
								return 22815
							}
						case false:
							switch x.South {
							case true:
								return 22823
							case false:
								return 22831
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22839
							case false:
								return 22847
							}
						case false:
							switch x.South {
							case true:
								return 22855
							case false:
								return 22863
							}
						}
					}
				case false:
					switch x.East {
					case true:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22871
							case false:
								return 22879
							}
						case false:
							switch x.South {
							case true:
								return 22887
							case false:
								return 22895
							}
						}
					case false:
						switch x.North {
						case true:
							switch x.South {
							case true:
								return 22903
							case false:
								return 22911
							}
						case false:
							switch x.South {
							case true:
								return 22919
							case false:
								return 22927
							}
						}
					}
				}
			}
		}
	}
	return 22927 // default state
}

type SculkCatalyst struct {
	Bloom bool
}

func (x SculkCatalyst) Id() uint16 {
	switch x.Bloom {
	case true:
		return 22928
	case false:
		return 22929
	}
	return 22929 // default state
}

type SculkShrieker struct {
	CanSummon   bool
	Shrieking   bool
	Waterlogged bool
}

func (x SculkShrieker) Id() uint16 {
	switch x.Shrieking {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.CanSummon {
			case true:
				return 22930
			case false:
				return 22934
			}
		case false:
			switch x.CanSummon {
			case true:
				return 22931
			case false:
				return 22935
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.CanSummon {
			case true:
				return 22932
			case false:
				return 22936
			}
		case false:
			switch x.CanSummon {
			case true:
				return 22933
			case false:
				return 22937
			}
		}
	}
	return 22937 // default state
}

type CopperBlock struct{}

func (x CopperBlock) Id() uint16 {
	return 22938
}

type ExposedCopper struct{}

func (x ExposedCopper) Id() uint16 {
	return 22939
}

type WeatheredCopper struct{}

func (x WeatheredCopper) Id() uint16 {
	return 22940
}

type OxidizedCopper struct{}

func (x OxidizedCopper) Id() uint16 {
	return 22941
}

type CopperOre struct{}

func (x CopperOre) Id() uint16 {
	return 22942
}

type DeepslateCopperOre struct{}

func (x DeepslateCopperOre) Id() uint16 {
	return 22943
}

type OxidizedCutCopper struct{}

func (x OxidizedCutCopper) Id() uint16 {
	return 22944
}

type WeatheredCutCopper struct{}

func (x WeatheredCutCopper) Id() uint16 {
	return 22945
}

type ExposedCutCopper struct{}

func (x ExposedCutCopper) Id() uint16 {
	return 22946
}

type CutCopper struct{}

func (x CutCopper) Id() uint16 {
	return 22947
}

type OxidizedChiseledCopper struct{}

func (x OxidizedChiseledCopper) Id() uint16 {
	return 22948
}

type WeatheredChiseledCopper struct{}

func (x WeatheredChiseledCopper) Id() uint16 {
	return 22949
}

type ExposedChiseledCopper struct{}

func (x ExposedChiseledCopper) Id() uint16 {
	return 22950
}

type ChiseledCopper struct{}

func (x ChiseledCopper) Id() uint16 {
	return 22951
}

type WaxedOxidizedChiseledCopper struct{}

func (x WaxedOxidizedChiseledCopper) Id() uint16 {
	return 22952
}

type WaxedWeatheredChiseledCopper struct{}

func (x WaxedWeatheredChiseledCopper) Id() uint16 {
	return 22953
}

type WaxedExposedChiseledCopper struct{}

func (x WaxedExposedChiseledCopper) Id() uint16 {
	return 22954
}

type WaxedChiseledCopper struct{}

func (x WaxedChiseledCopper) Id() uint16 {
	return 22955
}

type OxidizedCutCopperStairsFacing string

const (
	OxidizedCutCopperStairsFacingNorth OxidizedCutCopperStairsFacing = "north"
	OxidizedCutCopperStairsFacingSouth OxidizedCutCopperStairsFacing = "south"
	OxidizedCutCopperStairsFacingWest  OxidizedCutCopperStairsFacing = "west"
	OxidizedCutCopperStairsFacingEast  OxidizedCutCopperStairsFacing = "east"
)

type OxidizedCutCopperStairsHalf string

const (
	OxidizedCutCopperStairsHalfTop    OxidizedCutCopperStairsHalf = "top"
	OxidizedCutCopperStairsHalfBottom OxidizedCutCopperStairsHalf = "bottom"
)

type OxidizedCutCopperStairsShape string

const (
	OxidizedCutCopperStairsShapeStraight   OxidizedCutCopperStairsShape = "straight"
	OxidizedCutCopperStairsShapeInnerLeft  OxidizedCutCopperStairsShape = "inner_left"
	OxidizedCutCopperStairsShapeInnerRight OxidizedCutCopperStairsShape = "inner_right"
	OxidizedCutCopperStairsShapeOuterLeft  OxidizedCutCopperStairsShape = "outer_left"
	OxidizedCutCopperStairsShapeOuterRight OxidizedCutCopperStairsShape = "outer_right"
)

type OxidizedCutCopperStairs struct {
	Facing      OxidizedCutCopperStairsFacing
	Half        OxidizedCutCopperStairsHalf
	Shape       OxidizedCutCopperStairsShape
	Waterlogged bool
}

func (x OxidizedCutCopperStairs) Id() uint16 {
	switch x.Facing {
	case OxidizedCutCopperStairsFacingNorth:
		switch x.Half {
		case OxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 22956
				case false:
					return 22957
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 22958
				case false:
					return 22959
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 22960
				case false:
					return 22961
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 22962
				case false:
					return 22963
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 22964
				case false:
					return 22965
				}
			}
		case OxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 22966
				case false:
					return 22967
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 22968
				case false:
					return 22969
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 22970
				case false:
					return 22971
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 22972
				case false:
					return 22973
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 22974
				case false:
					return 22975
				}
			}
		}
	case OxidizedCutCopperStairsFacingSouth:
		switch x.Half {
		case OxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 22976
				case false:
					return 22977
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 22978
				case false:
					return 22979
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 22980
				case false:
					return 22981
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 22982
				case false:
					return 22983
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 22984
				case false:
					return 22985
				}
			}
		case OxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 22986
				case false:
					return 22987
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 22988
				case false:
					return 22989
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 22990
				case false:
					return 22991
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 22992
				case false:
					return 22993
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 22994
				case false:
					return 22995
				}
			}
		}
	case OxidizedCutCopperStairsFacingWest:
		switch x.Half {
		case OxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 22996
				case false:
					return 22997
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 22998
				case false:
					return 22999
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23000
				case false:
					return 23001
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23002
				case false:
					return 23003
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23004
				case false:
					return 23005
				}
			}
		case OxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23006
				case false:
					return 23007
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23008
				case false:
					return 23009
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23010
				case false:
					return 23011
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23012
				case false:
					return 23013
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23014
				case false:
					return 23015
				}
			}
		}
	case OxidizedCutCopperStairsFacingEast:
		switch x.Half {
		case OxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23016
				case false:
					return 23017
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23018
				case false:
					return 23019
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23020
				case false:
					return 23021
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23022
				case false:
					return 23023
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23024
				case false:
					return 23025
				}
			}
		case OxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case OxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23026
				case false:
					return 23027
				}
			case OxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23028
				case false:
					return 23029
				}
			case OxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23030
				case false:
					return 23031
				}
			case OxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23032
				case false:
					return 23033
				}
			case OxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23034
				case false:
					return 23035
				}
			}
		}
	}
	return 22967 // default state
}

type WeatheredCutCopperStairsFacing string

const (
	WeatheredCutCopperStairsFacingNorth WeatheredCutCopperStairsFacing = "north"
	WeatheredCutCopperStairsFacingSouth WeatheredCutCopperStairsFacing = "south"
	WeatheredCutCopperStairsFacingWest  WeatheredCutCopperStairsFacing = "west"
	WeatheredCutCopperStairsFacingEast  WeatheredCutCopperStairsFacing = "east"
)

type WeatheredCutCopperStairsHalf string

const (
	WeatheredCutCopperStairsHalfTop    WeatheredCutCopperStairsHalf = "top"
	WeatheredCutCopperStairsHalfBottom WeatheredCutCopperStairsHalf = "bottom"
)

type WeatheredCutCopperStairsShape string

const (
	WeatheredCutCopperStairsShapeStraight   WeatheredCutCopperStairsShape = "straight"
	WeatheredCutCopperStairsShapeInnerLeft  WeatheredCutCopperStairsShape = "inner_left"
	WeatheredCutCopperStairsShapeInnerRight WeatheredCutCopperStairsShape = "inner_right"
	WeatheredCutCopperStairsShapeOuterLeft  WeatheredCutCopperStairsShape = "outer_left"
	WeatheredCutCopperStairsShapeOuterRight WeatheredCutCopperStairsShape = "outer_right"
)

type WeatheredCutCopperStairs struct {
	Facing      WeatheredCutCopperStairsFacing
	Half        WeatheredCutCopperStairsHalf
	Shape       WeatheredCutCopperStairsShape
	Waterlogged bool
}

func (x WeatheredCutCopperStairs) Id() uint16 {
	switch x.Shape {
	case WeatheredCutCopperStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23036
				case WeatheredCutCopperStairsHalfBottom:
					return 23046
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23056
				case WeatheredCutCopperStairsHalfBottom:
					return 23066
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23076
				case WeatheredCutCopperStairsHalfBottom:
					return 23086
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23096
				case WeatheredCutCopperStairsHalfBottom:
					return 23106
				}
			}
		case false:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23037
				case WeatheredCutCopperStairsHalfBottom:
					return 23047
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23057
				case WeatheredCutCopperStairsHalfBottom:
					return 23067
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23077
				case WeatheredCutCopperStairsHalfBottom:
					return 23087
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23097
				case WeatheredCutCopperStairsHalfBottom:
					return 23107
				}
			}
		}
	case WeatheredCutCopperStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23038
				case WeatheredCutCopperStairsHalfBottom:
					return 23048
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23058
				case WeatheredCutCopperStairsHalfBottom:
					return 23068
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23078
				case WeatheredCutCopperStairsHalfBottom:
					return 23088
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23098
				case WeatheredCutCopperStairsHalfBottom:
					return 23108
				}
			}
		case false:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23039
				case WeatheredCutCopperStairsHalfBottom:
					return 23049
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23059
				case WeatheredCutCopperStairsHalfBottom:
					return 23069
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23079
				case WeatheredCutCopperStairsHalfBottom:
					return 23089
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23099
				case WeatheredCutCopperStairsHalfBottom:
					return 23109
				}
			}
		}
	case WeatheredCutCopperStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23040
				case WeatheredCutCopperStairsHalfBottom:
					return 23050
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23060
				case WeatheredCutCopperStairsHalfBottom:
					return 23070
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23080
				case WeatheredCutCopperStairsHalfBottom:
					return 23090
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23100
				case WeatheredCutCopperStairsHalfBottom:
					return 23110
				}
			}
		case false:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23041
				case WeatheredCutCopperStairsHalfBottom:
					return 23051
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23061
				case WeatheredCutCopperStairsHalfBottom:
					return 23071
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23081
				case WeatheredCutCopperStairsHalfBottom:
					return 23091
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23101
				case WeatheredCutCopperStairsHalfBottom:
					return 23111
				}
			}
		}
	case WeatheredCutCopperStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23042
				case WeatheredCutCopperStairsHalfBottom:
					return 23052
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23062
				case WeatheredCutCopperStairsHalfBottom:
					return 23072
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23082
				case WeatheredCutCopperStairsHalfBottom:
					return 23092
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23102
				case WeatheredCutCopperStairsHalfBottom:
					return 23112
				}
			}
		case false:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23043
				case WeatheredCutCopperStairsHalfBottom:
					return 23053
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23063
				case WeatheredCutCopperStairsHalfBottom:
					return 23073
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23083
				case WeatheredCutCopperStairsHalfBottom:
					return 23093
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23103
				case WeatheredCutCopperStairsHalfBottom:
					return 23113
				}
			}
		}
	case WeatheredCutCopperStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23044
				case WeatheredCutCopperStairsHalfBottom:
					return 23054
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23064
				case WeatheredCutCopperStairsHalfBottom:
					return 23074
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23084
				case WeatheredCutCopperStairsHalfBottom:
					return 23094
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23104
				case WeatheredCutCopperStairsHalfBottom:
					return 23114
				}
			}
		case false:
			switch x.Facing {
			case WeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23045
				case WeatheredCutCopperStairsHalfBottom:
					return 23055
				}
			case WeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23065
				case WeatheredCutCopperStairsHalfBottom:
					return 23075
				}
			case WeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23085
				case WeatheredCutCopperStairsHalfBottom:
					return 23095
				}
			case WeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WeatheredCutCopperStairsHalfTop:
					return 23105
				case WeatheredCutCopperStairsHalfBottom:
					return 23115
				}
			}
		}
	}
	return 23047 // default state
}

type ExposedCutCopperStairsFacing string

const (
	ExposedCutCopperStairsFacingNorth ExposedCutCopperStairsFacing = "north"
	ExposedCutCopperStairsFacingSouth ExposedCutCopperStairsFacing = "south"
	ExposedCutCopperStairsFacingWest  ExposedCutCopperStairsFacing = "west"
	ExposedCutCopperStairsFacingEast  ExposedCutCopperStairsFacing = "east"
)

type ExposedCutCopperStairsHalf string

const (
	ExposedCutCopperStairsHalfTop    ExposedCutCopperStairsHalf = "top"
	ExposedCutCopperStairsHalfBottom ExposedCutCopperStairsHalf = "bottom"
)

type ExposedCutCopperStairsShape string

const (
	ExposedCutCopperStairsShapeStraight   ExposedCutCopperStairsShape = "straight"
	ExposedCutCopperStairsShapeInnerLeft  ExposedCutCopperStairsShape = "inner_left"
	ExposedCutCopperStairsShapeInnerRight ExposedCutCopperStairsShape = "inner_right"
	ExposedCutCopperStairsShapeOuterLeft  ExposedCutCopperStairsShape = "outer_left"
	ExposedCutCopperStairsShapeOuterRight ExposedCutCopperStairsShape = "outer_right"
)

type ExposedCutCopperStairs struct {
	Waterlogged bool
	Facing      ExposedCutCopperStairsFacing
	Half        ExposedCutCopperStairsHalf
	Shape       ExposedCutCopperStairsShape
}

func (x ExposedCutCopperStairs) Id() uint16 {
	switch x.Half {
	case ExposedCutCopperStairsHalfTop:
		switch x.Shape {
		case ExposedCutCopperStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23116
				case ExposedCutCopperStairsFacingSouth:
					return 23136
				case ExposedCutCopperStairsFacingWest:
					return 23156
				case ExposedCutCopperStairsFacingEast:
					return 23176
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23117
				case ExposedCutCopperStairsFacingSouth:
					return 23137
				case ExposedCutCopperStairsFacingWest:
					return 23157
				case ExposedCutCopperStairsFacingEast:
					return 23177
				}
			}
		case ExposedCutCopperStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23118
				case ExposedCutCopperStairsFacingSouth:
					return 23138
				case ExposedCutCopperStairsFacingWest:
					return 23158
				case ExposedCutCopperStairsFacingEast:
					return 23178
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23119
				case ExposedCutCopperStairsFacingSouth:
					return 23139
				case ExposedCutCopperStairsFacingWest:
					return 23159
				case ExposedCutCopperStairsFacingEast:
					return 23179
				}
			}
		case ExposedCutCopperStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23120
				case ExposedCutCopperStairsFacingSouth:
					return 23140
				case ExposedCutCopperStairsFacingWest:
					return 23160
				case ExposedCutCopperStairsFacingEast:
					return 23180
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23121
				case ExposedCutCopperStairsFacingSouth:
					return 23141
				case ExposedCutCopperStairsFacingWest:
					return 23161
				case ExposedCutCopperStairsFacingEast:
					return 23181
				}
			}
		case ExposedCutCopperStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23122
				case ExposedCutCopperStairsFacingSouth:
					return 23142
				case ExposedCutCopperStairsFacingWest:
					return 23162
				case ExposedCutCopperStairsFacingEast:
					return 23182
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23123
				case ExposedCutCopperStairsFacingSouth:
					return 23143
				case ExposedCutCopperStairsFacingWest:
					return 23163
				case ExposedCutCopperStairsFacingEast:
					return 23183
				}
			}
		case ExposedCutCopperStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23124
				case ExposedCutCopperStairsFacingSouth:
					return 23144
				case ExposedCutCopperStairsFacingWest:
					return 23164
				case ExposedCutCopperStairsFacingEast:
					return 23184
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23125
				case ExposedCutCopperStairsFacingSouth:
					return 23145
				case ExposedCutCopperStairsFacingWest:
					return 23165
				case ExposedCutCopperStairsFacingEast:
					return 23185
				}
			}
		}
	case ExposedCutCopperStairsHalfBottom:
		switch x.Shape {
		case ExposedCutCopperStairsShapeStraight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23126
				case ExposedCutCopperStairsFacingSouth:
					return 23146
				case ExposedCutCopperStairsFacingWest:
					return 23166
				case ExposedCutCopperStairsFacingEast:
					return 23186
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23127
				case ExposedCutCopperStairsFacingSouth:
					return 23147
				case ExposedCutCopperStairsFacingWest:
					return 23167
				case ExposedCutCopperStairsFacingEast:
					return 23187
				}
			}
		case ExposedCutCopperStairsShapeInnerLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23128
				case ExposedCutCopperStairsFacingSouth:
					return 23148
				case ExposedCutCopperStairsFacingWest:
					return 23168
				case ExposedCutCopperStairsFacingEast:
					return 23188
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23129
				case ExposedCutCopperStairsFacingSouth:
					return 23149
				case ExposedCutCopperStairsFacingWest:
					return 23169
				case ExposedCutCopperStairsFacingEast:
					return 23189
				}
			}
		case ExposedCutCopperStairsShapeInnerRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23130
				case ExposedCutCopperStairsFacingSouth:
					return 23150
				case ExposedCutCopperStairsFacingWest:
					return 23170
				case ExposedCutCopperStairsFacingEast:
					return 23190
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23131
				case ExposedCutCopperStairsFacingSouth:
					return 23151
				case ExposedCutCopperStairsFacingWest:
					return 23171
				case ExposedCutCopperStairsFacingEast:
					return 23191
				}
			}
		case ExposedCutCopperStairsShapeOuterLeft:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23132
				case ExposedCutCopperStairsFacingSouth:
					return 23152
				case ExposedCutCopperStairsFacingWest:
					return 23172
				case ExposedCutCopperStairsFacingEast:
					return 23192
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23133
				case ExposedCutCopperStairsFacingSouth:
					return 23153
				case ExposedCutCopperStairsFacingWest:
					return 23173
				case ExposedCutCopperStairsFacingEast:
					return 23193
				}
			}
		case ExposedCutCopperStairsShapeOuterRight:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23134
				case ExposedCutCopperStairsFacingSouth:
					return 23154
				case ExposedCutCopperStairsFacingWest:
					return 23174
				case ExposedCutCopperStairsFacingEast:
					return 23194
				}
			case false:
				switch x.Facing {
				case ExposedCutCopperStairsFacingNorth:
					return 23135
				case ExposedCutCopperStairsFacingSouth:
					return 23155
				case ExposedCutCopperStairsFacingWest:
					return 23175
				case ExposedCutCopperStairsFacingEast:
					return 23195
				}
			}
		}
	}
	return 23127 // default state
}

type CutCopperStairsFacing string

const (
	CutCopperStairsFacingNorth CutCopperStairsFacing = "north"
	CutCopperStairsFacingSouth CutCopperStairsFacing = "south"
	CutCopperStairsFacingWest  CutCopperStairsFacing = "west"
	CutCopperStairsFacingEast  CutCopperStairsFacing = "east"
)

type CutCopperStairsHalf string

const (
	CutCopperStairsHalfTop    CutCopperStairsHalf = "top"
	CutCopperStairsHalfBottom CutCopperStairsHalf = "bottom"
)

type CutCopperStairsShape string

const (
	CutCopperStairsShapeStraight   CutCopperStairsShape = "straight"
	CutCopperStairsShapeInnerLeft  CutCopperStairsShape = "inner_left"
	CutCopperStairsShapeInnerRight CutCopperStairsShape = "inner_right"
	CutCopperStairsShapeOuterLeft  CutCopperStairsShape = "outer_left"
	CutCopperStairsShapeOuterRight CutCopperStairsShape = "outer_right"
)

type CutCopperStairs struct {
	Facing      CutCopperStairsFacing
	Half        CutCopperStairsHalf
	Shape       CutCopperStairsShape
	Waterlogged bool
}

func (x CutCopperStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CutCopperStairsFacingNorth:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23196
				case CutCopperStairsShapeInnerLeft:
					return 23198
				case CutCopperStairsShapeInnerRight:
					return 23200
				case CutCopperStairsShapeOuterLeft:
					return 23202
				case CutCopperStairsShapeOuterRight:
					return 23204
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23206
				case CutCopperStairsShapeInnerLeft:
					return 23208
				case CutCopperStairsShapeInnerRight:
					return 23210
				case CutCopperStairsShapeOuterLeft:
					return 23212
				case CutCopperStairsShapeOuterRight:
					return 23214
				}
			}
		case CutCopperStairsFacingSouth:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23216
				case CutCopperStairsShapeInnerLeft:
					return 23218
				case CutCopperStairsShapeInnerRight:
					return 23220
				case CutCopperStairsShapeOuterLeft:
					return 23222
				case CutCopperStairsShapeOuterRight:
					return 23224
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23226
				case CutCopperStairsShapeInnerLeft:
					return 23228
				case CutCopperStairsShapeInnerRight:
					return 23230
				case CutCopperStairsShapeOuterLeft:
					return 23232
				case CutCopperStairsShapeOuterRight:
					return 23234
				}
			}
		case CutCopperStairsFacingWest:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23236
				case CutCopperStairsShapeInnerLeft:
					return 23238
				case CutCopperStairsShapeInnerRight:
					return 23240
				case CutCopperStairsShapeOuterLeft:
					return 23242
				case CutCopperStairsShapeOuterRight:
					return 23244
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23246
				case CutCopperStairsShapeInnerLeft:
					return 23248
				case CutCopperStairsShapeInnerRight:
					return 23250
				case CutCopperStairsShapeOuterLeft:
					return 23252
				case CutCopperStairsShapeOuterRight:
					return 23254
				}
			}
		case CutCopperStairsFacingEast:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23256
				case CutCopperStairsShapeInnerLeft:
					return 23258
				case CutCopperStairsShapeInnerRight:
					return 23260
				case CutCopperStairsShapeOuterLeft:
					return 23262
				case CutCopperStairsShapeOuterRight:
					return 23264
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23266
				case CutCopperStairsShapeInnerLeft:
					return 23268
				case CutCopperStairsShapeInnerRight:
					return 23270
				case CutCopperStairsShapeOuterLeft:
					return 23272
				case CutCopperStairsShapeOuterRight:
					return 23274
				}
			}
		}
	case false:
		switch x.Facing {
		case CutCopperStairsFacingNorth:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23197
				case CutCopperStairsShapeInnerLeft:
					return 23199
				case CutCopperStairsShapeInnerRight:
					return 23201
				case CutCopperStairsShapeOuterLeft:
					return 23203
				case CutCopperStairsShapeOuterRight:
					return 23205
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23207
				case CutCopperStairsShapeInnerLeft:
					return 23209
				case CutCopperStairsShapeInnerRight:
					return 23211
				case CutCopperStairsShapeOuterLeft:
					return 23213
				case CutCopperStairsShapeOuterRight:
					return 23215
				}
			}
		case CutCopperStairsFacingSouth:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23217
				case CutCopperStairsShapeInnerLeft:
					return 23219
				case CutCopperStairsShapeInnerRight:
					return 23221
				case CutCopperStairsShapeOuterLeft:
					return 23223
				case CutCopperStairsShapeOuterRight:
					return 23225
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23227
				case CutCopperStairsShapeInnerLeft:
					return 23229
				case CutCopperStairsShapeInnerRight:
					return 23231
				case CutCopperStairsShapeOuterLeft:
					return 23233
				case CutCopperStairsShapeOuterRight:
					return 23235
				}
			}
		case CutCopperStairsFacingWest:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23237
				case CutCopperStairsShapeInnerLeft:
					return 23239
				case CutCopperStairsShapeInnerRight:
					return 23241
				case CutCopperStairsShapeOuterLeft:
					return 23243
				case CutCopperStairsShapeOuterRight:
					return 23245
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23247
				case CutCopperStairsShapeInnerLeft:
					return 23249
				case CutCopperStairsShapeInnerRight:
					return 23251
				case CutCopperStairsShapeOuterLeft:
					return 23253
				case CutCopperStairsShapeOuterRight:
					return 23255
				}
			}
		case CutCopperStairsFacingEast:
			switch x.Half {
			case CutCopperStairsHalfTop:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23257
				case CutCopperStairsShapeInnerLeft:
					return 23259
				case CutCopperStairsShapeInnerRight:
					return 23261
				case CutCopperStairsShapeOuterLeft:
					return 23263
				case CutCopperStairsShapeOuterRight:
					return 23265
				}
			case CutCopperStairsHalfBottom:
				switch x.Shape {
				case CutCopperStairsShapeStraight:
					return 23267
				case CutCopperStairsShapeInnerLeft:
					return 23269
				case CutCopperStairsShapeInnerRight:
					return 23271
				case CutCopperStairsShapeOuterLeft:
					return 23273
				case CutCopperStairsShapeOuterRight:
					return 23275
				}
			}
		}
	}
	return 23207 // default state
}

type OxidizedCutCopperSlabType string

const (
	OxidizedCutCopperSlabTypeTop    OxidizedCutCopperSlabType = "top"
	OxidizedCutCopperSlabTypeBottom OxidizedCutCopperSlabType = "bottom"
	OxidizedCutCopperSlabTypeDouble OxidizedCutCopperSlabType = "double"
)

type OxidizedCutCopperSlab struct {
	Type        OxidizedCutCopperSlabType
	Waterlogged bool
}

func (x OxidizedCutCopperSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case OxidizedCutCopperSlabTypeTop:
			return 23276
		case OxidizedCutCopperSlabTypeBottom:
			return 23278
		case OxidizedCutCopperSlabTypeDouble:
			return 23280
		}
	case false:
		switch x.Type {
		case OxidizedCutCopperSlabTypeTop:
			return 23277
		case OxidizedCutCopperSlabTypeBottom:
			return 23279
		case OxidizedCutCopperSlabTypeDouble:
			return 23281
		}
	}
	return 23279 // default state
}

type WeatheredCutCopperSlabType string

const (
	WeatheredCutCopperSlabTypeTop    WeatheredCutCopperSlabType = "top"
	WeatheredCutCopperSlabTypeBottom WeatheredCutCopperSlabType = "bottom"
	WeatheredCutCopperSlabTypeDouble WeatheredCutCopperSlabType = "double"
)

type WeatheredCutCopperSlab struct {
	Type        WeatheredCutCopperSlabType
	Waterlogged bool
}

func (x WeatheredCutCopperSlab) Id() uint16 {
	switch x.Type {
	case WeatheredCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23282
		case false:
			return 23283
		}
	case WeatheredCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23284
		case false:
			return 23285
		}
	case WeatheredCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23286
		case false:
			return 23287
		}
	}
	return 23285 // default state
}

type ExposedCutCopperSlabType string

const (
	ExposedCutCopperSlabTypeTop    ExposedCutCopperSlabType = "top"
	ExposedCutCopperSlabTypeBottom ExposedCutCopperSlabType = "bottom"
	ExposedCutCopperSlabTypeDouble ExposedCutCopperSlabType = "double"
)

type ExposedCutCopperSlab struct {
	Type        ExposedCutCopperSlabType
	Waterlogged bool
}

func (x ExposedCutCopperSlab) Id() uint16 {
	switch x.Type {
	case ExposedCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23288
		case false:
			return 23289
		}
	case ExposedCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23290
		case false:
			return 23291
		}
	case ExposedCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23292
		case false:
			return 23293
		}
	}
	return 23291 // default state
}

type CutCopperSlabType string

const (
	CutCopperSlabTypeTop    CutCopperSlabType = "top"
	CutCopperSlabTypeBottom CutCopperSlabType = "bottom"
	CutCopperSlabTypeDouble CutCopperSlabType = "double"
)

type CutCopperSlab struct {
	Type        CutCopperSlabType
	Waterlogged bool
}

func (x CutCopperSlab) Id() uint16 {
	switch x.Type {
	case CutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23294
		case false:
			return 23295
		}
	case CutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23296
		case false:
			return 23297
		}
	case CutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23298
		case false:
			return 23299
		}
	}
	return 23297 // default state
}

type WaxedCopperBlock struct{}

func (x WaxedCopperBlock) Id() uint16 {
	return 23300
}

type WaxedWeatheredCopper struct{}

func (x WaxedWeatheredCopper) Id() uint16 {
	return 23301
}

type WaxedExposedCopper struct{}

func (x WaxedExposedCopper) Id() uint16 {
	return 23302
}

type WaxedOxidizedCopper struct{}

func (x WaxedOxidizedCopper) Id() uint16 {
	return 23303
}

type WaxedOxidizedCutCopper struct{}

func (x WaxedOxidizedCutCopper) Id() uint16 {
	return 23304
}

type WaxedWeatheredCutCopper struct{}

func (x WaxedWeatheredCutCopper) Id() uint16 {
	return 23305
}

type WaxedExposedCutCopper struct{}

func (x WaxedExposedCutCopper) Id() uint16 {
	return 23306
}

type WaxedCutCopper struct{}

func (x WaxedCutCopper) Id() uint16 {
	return 23307
}

type WaxedOxidizedCutCopperStairsFacing string

const (
	WaxedOxidizedCutCopperStairsFacingNorth WaxedOxidizedCutCopperStairsFacing = "north"
	WaxedOxidizedCutCopperStairsFacingSouth WaxedOxidizedCutCopperStairsFacing = "south"
	WaxedOxidizedCutCopperStairsFacingWest  WaxedOxidizedCutCopperStairsFacing = "west"
	WaxedOxidizedCutCopperStairsFacingEast  WaxedOxidizedCutCopperStairsFacing = "east"
)

type WaxedOxidizedCutCopperStairsHalf string

const (
	WaxedOxidizedCutCopperStairsHalfTop    WaxedOxidizedCutCopperStairsHalf = "top"
	WaxedOxidizedCutCopperStairsHalfBottom WaxedOxidizedCutCopperStairsHalf = "bottom"
)

type WaxedOxidizedCutCopperStairsShape string

const (
	WaxedOxidizedCutCopperStairsShapeStraight   WaxedOxidizedCutCopperStairsShape = "straight"
	WaxedOxidizedCutCopperStairsShapeInnerLeft  WaxedOxidizedCutCopperStairsShape = "inner_left"
	WaxedOxidizedCutCopperStairsShapeInnerRight WaxedOxidizedCutCopperStairsShape = "inner_right"
	WaxedOxidizedCutCopperStairsShapeOuterLeft  WaxedOxidizedCutCopperStairsShape = "outer_left"
	WaxedOxidizedCutCopperStairsShapeOuterRight WaxedOxidizedCutCopperStairsShape = "outer_right"
)

type WaxedOxidizedCutCopperStairs struct {
	Facing      WaxedOxidizedCutCopperStairsFacing
	Half        WaxedOxidizedCutCopperStairsHalf
	Shape       WaxedOxidizedCutCopperStairsShape
	Waterlogged bool
}

func (x WaxedOxidizedCutCopperStairs) Id() uint16 {
	switch x.Facing {
	case WaxedOxidizedCutCopperStairsFacingNorth:
		switch x.Half {
		case WaxedOxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23308
				case false:
					return 23309
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23310
				case false:
					return 23311
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23312
				case false:
					return 23313
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23314
				case false:
					return 23315
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23316
				case false:
					return 23317
				}
			}
		case WaxedOxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23318
				case false:
					return 23319
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23320
				case false:
					return 23321
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23322
				case false:
					return 23323
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23324
				case false:
					return 23325
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23326
				case false:
					return 23327
				}
			}
		}
	case WaxedOxidizedCutCopperStairsFacingSouth:
		switch x.Half {
		case WaxedOxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23328
				case false:
					return 23329
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23330
				case false:
					return 23331
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23332
				case false:
					return 23333
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23334
				case false:
					return 23335
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23336
				case false:
					return 23337
				}
			}
		case WaxedOxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23338
				case false:
					return 23339
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23340
				case false:
					return 23341
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23342
				case false:
					return 23343
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23344
				case false:
					return 23345
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23346
				case false:
					return 23347
				}
			}
		}
	case WaxedOxidizedCutCopperStairsFacingWest:
		switch x.Half {
		case WaxedOxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23348
				case false:
					return 23349
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23350
				case false:
					return 23351
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23352
				case false:
					return 23353
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23354
				case false:
					return 23355
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23356
				case false:
					return 23357
				}
			}
		case WaxedOxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23358
				case false:
					return 23359
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23360
				case false:
					return 23361
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23362
				case false:
					return 23363
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23364
				case false:
					return 23365
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23366
				case false:
					return 23367
				}
			}
		}
	case WaxedOxidizedCutCopperStairsFacingEast:
		switch x.Half {
		case WaxedOxidizedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23368
				case false:
					return 23369
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23370
				case false:
					return 23371
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23372
				case false:
					return 23373
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23374
				case false:
					return 23375
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23376
				case false:
					return 23377
				}
			}
		case WaxedOxidizedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedOxidizedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23378
				case false:
					return 23379
				}
			case WaxedOxidizedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23380
				case false:
					return 23381
				}
			case WaxedOxidizedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23382
				case false:
					return 23383
				}
			case WaxedOxidizedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23384
				case false:
					return 23385
				}
			case WaxedOxidizedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23386
				case false:
					return 23387
				}
			}
		}
	}
	return 23319 // default state
}

type WaxedWeatheredCutCopperStairsFacing string

const (
	WaxedWeatheredCutCopperStairsFacingNorth WaxedWeatheredCutCopperStairsFacing = "north"
	WaxedWeatheredCutCopperStairsFacingSouth WaxedWeatheredCutCopperStairsFacing = "south"
	WaxedWeatheredCutCopperStairsFacingWest  WaxedWeatheredCutCopperStairsFacing = "west"
	WaxedWeatheredCutCopperStairsFacingEast  WaxedWeatheredCutCopperStairsFacing = "east"
)

type WaxedWeatheredCutCopperStairsHalf string

const (
	WaxedWeatheredCutCopperStairsHalfTop    WaxedWeatheredCutCopperStairsHalf = "top"
	WaxedWeatheredCutCopperStairsHalfBottom WaxedWeatheredCutCopperStairsHalf = "bottom"
)

type WaxedWeatheredCutCopperStairsShape string

const (
	WaxedWeatheredCutCopperStairsShapeStraight   WaxedWeatheredCutCopperStairsShape = "straight"
	WaxedWeatheredCutCopperStairsShapeInnerLeft  WaxedWeatheredCutCopperStairsShape = "inner_left"
	WaxedWeatheredCutCopperStairsShapeInnerRight WaxedWeatheredCutCopperStairsShape = "inner_right"
	WaxedWeatheredCutCopperStairsShapeOuterLeft  WaxedWeatheredCutCopperStairsShape = "outer_left"
	WaxedWeatheredCutCopperStairsShapeOuterRight WaxedWeatheredCutCopperStairsShape = "outer_right"
)

type WaxedWeatheredCutCopperStairs struct {
	Facing      WaxedWeatheredCutCopperStairsFacing
	Half        WaxedWeatheredCutCopperStairsHalf
	Shape       WaxedWeatheredCutCopperStairsShape
	Waterlogged bool
}

func (x WaxedWeatheredCutCopperStairs) Id() uint16 {
	switch x.Shape {
	case WaxedWeatheredCutCopperStairsShapeStraight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23388
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23398
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23408
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23418
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23428
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23438
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23448
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23458
				}
			}
		case false:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23389
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23399
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23409
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23419
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23429
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23439
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23449
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23459
				}
			}
		}
	case WaxedWeatheredCutCopperStairsShapeInnerLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23390
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23400
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23410
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23420
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23430
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23440
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23450
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23460
				}
			}
		case false:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23391
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23401
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23411
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23421
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23431
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23441
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23451
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23461
				}
			}
		}
	case WaxedWeatheredCutCopperStairsShapeInnerRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23392
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23402
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23412
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23422
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23432
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23442
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23452
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23462
				}
			}
		case false:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23393
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23403
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23413
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23423
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23433
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23443
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23453
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23463
				}
			}
		}
	case WaxedWeatheredCutCopperStairsShapeOuterLeft:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23394
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23404
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23414
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23424
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23434
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23444
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23454
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23464
				}
			}
		case false:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23395
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23405
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23415
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23425
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23435
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23445
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23455
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23465
				}
			}
		}
	case WaxedWeatheredCutCopperStairsShapeOuterRight:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23396
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23406
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23416
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23426
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23436
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23446
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23456
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23466
				}
			}
		case false:
			switch x.Facing {
			case WaxedWeatheredCutCopperStairsFacingNorth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23397
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23407
				}
			case WaxedWeatheredCutCopperStairsFacingSouth:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23417
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23427
				}
			case WaxedWeatheredCutCopperStairsFacingWest:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23437
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23447
				}
			case WaxedWeatheredCutCopperStairsFacingEast:
				switch x.Half {
				case WaxedWeatheredCutCopperStairsHalfTop:
					return 23457
				case WaxedWeatheredCutCopperStairsHalfBottom:
					return 23467
				}
			}
		}
	}
	return 23399 // default state
}

type WaxedExposedCutCopperStairsFacing string

const (
	WaxedExposedCutCopperStairsFacingNorth WaxedExposedCutCopperStairsFacing = "north"
	WaxedExposedCutCopperStairsFacingSouth WaxedExposedCutCopperStairsFacing = "south"
	WaxedExposedCutCopperStairsFacingWest  WaxedExposedCutCopperStairsFacing = "west"
	WaxedExposedCutCopperStairsFacingEast  WaxedExposedCutCopperStairsFacing = "east"
)

type WaxedExposedCutCopperStairsHalf string

const (
	WaxedExposedCutCopperStairsHalfTop    WaxedExposedCutCopperStairsHalf = "top"
	WaxedExposedCutCopperStairsHalfBottom WaxedExposedCutCopperStairsHalf = "bottom"
)

type WaxedExposedCutCopperStairsShape string

const (
	WaxedExposedCutCopperStairsShapeStraight   WaxedExposedCutCopperStairsShape = "straight"
	WaxedExposedCutCopperStairsShapeInnerLeft  WaxedExposedCutCopperStairsShape = "inner_left"
	WaxedExposedCutCopperStairsShapeInnerRight WaxedExposedCutCopperStairsShape = "inner_right"
	WaxedExposedCutCopperStairsShapeOuterLeft  WaxedExposedCutCopperStairsShape = "outer_left"
	WaxedExposedCutCopperStairsShapeOuterRight WaxedExposedCutCopperStairsShape = "outer_right"
)

type WaxedExposedCutCopperStairs struct {
	Facing      WaxedExposedCutCopperStairsFacing
	Half        WaxedExposedCutCopperStairsHalf
	Shape       WaxedExposedCutCopperStairsShape
	Waterlogged bool
}

func (x WaxedExposedCutCopperStairs) Id() uint16 {
	switch x.Facing {
	case WaxedExposedCutCopperStairsFacingNorth:
		switch x.Half {
		case WaxedExposedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23468
				case false:
					return 23469
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23470
				case false:
					return 23471
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23472
				case false:
					return 23473
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23474
				case false:
					return 23475
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23476
				case false:
					return 23477
				}
			}
		case WaxedExposedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23478
				case false:
					return 23479
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23480
				case false:
					return 23481
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23482
				case false:
					return 23483
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23484
				case false:
					return 23485
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23486
				case false:
					return 23487
				}
			}
		}
	case WaxedExposedCutCopperStairsFacingSouth:
		switch x.Half {
		case WaxedExposedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23488
				case false:
					return 23489
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23490
				case false:
					return 23491
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23492
				case false:
					return 23493
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23494
				case false:
					return 23495
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23496
				case false:
					return 23497
				}
			}
		case WaxedExposedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23498
				case false:
					return 23499
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23500
				case false:
					return 23501
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23502
				case false:
					return 23503
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23504
				case false:
					return 23505
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23506
				case false:
					return 23507
				}
			}
		}
	case WaxedExposedCutCopperStairsFacingWest:
		switch x.Half {
		case WaxedExposedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23508
				case false:
					return 23509
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23510
				case false:
					return 23511
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23512
				case false:
					return 23513
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23514
				case false:
					return 23515
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23516
				case false:
					return 23517
				}
			}
		case WaxedExposedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23518
				case false:
					return 23519
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23520
				case false:
					return 23521
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23522
				case false:
					return 23523
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23524
				case false:
					return 23525
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23526
				case false:
					return 23527
				}
			}
		}
	case WaxedExposedCutCopperStairsFacingEast:
		switch x.Half {
		case WaxedExposedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23528
				case false:
					return 23529
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23530
				case false:
					return 23531
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23532
				case false:
					return 23533
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23534
				case false:
					return 23535
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23536
				case false:
					return 23537
				}
			}
		case WaxedExposedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedExposedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23538
				case false:
					return 23539
				}
			case WaxedExposedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23540
				case false:
					return 23541
				}
			case WaxedExposedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23542
				case false:
					return 23543
				}
			case WaxedExposedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23544
				case false:
					return 23545
				}
			case WaxedExposedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23546
				case false:
					return 23547
				}
			}
		}
	}
	return 23479 // default state
}

type WaxedCutCopperStairsFacing string

const (
	WaxedCutCopperStairsFacingNorth WaxedCutCopperStairsFacing = "north"
	WaxedCutCopperStairsFacingSouth WaxedCutCopperStairsFacing = "south"
	WaxedCutCopperStairsFacingWest  WaxedCutCopperStairsFacing = "west"
	WaxedCutCopperStairsFacingEast  WaxedCutCopperStairsFacing = "east"
)

type WaxedCutCopperStairsHalf string

const (
	WaxedCutCopperStairsHalfTop    WaxedCutCopperStairsHalf = "top"
	WaxedCutCopperStairsHalfBottom WaxedCutCopperStairsHalf = "bottom"
)

type WaxedCutCopperStairsShape string

const (
	WaxedCutCopperStairsShapeStraight   WaxedCutCopperStairsShape = "straight"
	WaxedCutCopperStairsShapeInnerLeft  WaxedCutCopperStairsShape = "inner_left"
	WaxedCutCopperStairsShapeInnerRight WaxedCutCopperStairsShape = "inner_right"
	WaxedCutCopperStairsShapeOuterLeft  WaxedCutCopperStairsShape = "outer_left"
	WaxedCutCopperStairsShapeOuterRight WaxedCutCopperStairsShape = "outer_right"
)

type WaxedCutCopperStairs struct {
	Waterlogged bool
	Facing      WaxedCutCopperStairsFacing
	Half        WaxedCutCopperStairsHalf
	Shape       WaxedCutCopperStairsShape
}

func (x WaxedCutCopperStairs) Id() uint16 {
	switch x.Facing {
	case WaxedCutCopperStairsFacingNorth:
		switch x.Half {
		case WaxedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23548
				case false:
					return 23549
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23550
				case false:
					return 23551
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23552
				case false:
					return 23553
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23554
				case false:
					return 23555
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23556
				case false:
					return 23557
				}
			}
		case WaxedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23558
				case false:
					return 23559
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23560
				case false:
					return 23561
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23562
				case false:
					return 23563
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23564
				case false:
					return 23565
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23566
				case false:
					return 23567
				}
			}
		}
	case WaxedCutCopperStairsFacingSouth:
		switch x.Half {
		case WaxedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23568
				case false:
					return 23569
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23570
				case false:
					return 23571
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23572
				case false:
					return 23573
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23574
				case false:
					return 23575
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23576
				case false:
					return 23577
				}
			}
		case WaxedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23578
				case false:
					return 23579
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23580
				case false:
					return 23581
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23582
				case false:
					return 23583
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23584
				case false:
					return 23585
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23586
				case false:
					return 23587
				}
			}
		}
	case WaxedCutCopperStairsFacingWest:
		switch x.Half {
		case WaxedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23588
				case false:
					return 23589
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23590
				case false:
					return 23591
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23592
				case false:
					return 23593
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23594
				case false:
					return 23595
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23596
				case false:
					return 23597
				}
			}
		case WaxedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23598
				case false:
					return 23599
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23600
				case false:
					return 23601
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23602
				case false:
					return 23603
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23604
				case false:
					return 23605
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23606
				case false:
					return 23607
				}
			}
		}
	case WaxedCutCopperStairsFacingEast:
		switch x.Half {
		case WaxedCutCopperStairsHalfTop:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23608
				case false:
					return 23609
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23610
				case false:
					return 23611
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23612
				case false:
					return 23613
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23614
				case false:
					return 23615
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23616
				case false:
					return 23617
				}
			}
		case WaxedCutCopperStairsHalfBottom:
			switch x.Shape {
			case WaxedCutCopperStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 23618
				case false:
					return 23619
				}
			case WaxedCutCopperStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 23620
				case false:
					return 23621
				}
			case WaxedCutCopperStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 23622
				case false:
					return 23623
				}
			case WaxedCutCopperStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 23624
				case false:
					return 23625
				}
			case WaxedCutCopperStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 23626
				case false:
					return 23627
				}
			}
		}
	}
	return 23559 // default state
}

type WaxedOxidizedCutCopperSlabType string

const (
	WaxedOxidizedCutCopperSlabTypeTop    WaxedOxidizedCutCopperSlabType = "top"
	WaxedOxidizedCutCopperSlabTypeBottom WaxedOxidizedCutCopperSlabType = "bottom"
	WaxedOxidizedCutCopperSlabTypeDouble WaxedOxidizedCutCopperSlabType = "double"
)

type WaxedOxidizedCutCopperSlab struct {
	Type        WaxedOxidizedCutCopperSlabType
	Waterlogged bool
}

func (x WaxedOxidizedCutCopperSlab) Id() uint16 {
	switch x.Type {
	case WaxedOxidizedCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23628
		case false:
			return 23629
		}
	case WaxedOxidizedCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23630
		case false:
			return 23631
		}
	case WaxedOxidizedCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23632
		case false:
			return 23633
		}
	}
	return 23631 // default state
}

type WaxedWeatheredCutCopperSlabType string

const (
	WaxedWeatheredCutCopperSlabTypeTop    WaxedWeatheredCutCopperSlabType = "top"
	WaxedWeatheredCutCopperSlabTypeBottom WaxedWeatheredCutCopperSlabType = "bottom"
	WaxedWeatheredCutCopperSlabTypeDouble WaxedWeatheredCutCopperSlabType = "double"
)

type WaxedWeatheredCutCopperSlab struct {
	Type        WaxedWeatheredCutCopperSlabType
	Waterlogged bool
}

func (x WaxedWeatheredCutCopperSlab) Id() uint16 {
	switch x.Type {
	case WaxedWeatheredCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23634
		case false:
			return 23635
		}
	case WaxedWeatheredCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23636
		case false:
			return 23637
		}
	case WaxedWeatheredCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23638
		case false:
			return 23639
		}
	}
	return 23637 // default state
}

type WaxedExposedCutCopperSlabType string

const (
	WaxedExposedCutCopperSlabTypeTop    WaxedExposedCutCopperSlabType = "top"
	WaxedExposedCutCopperSlabTypeBottom WaxedExposedCutCopperSlabType = "bottom"
	WaxedExposedCutCopperSlabTypeDouble WaxedExposedCutCopperSlabType = "double"
)

type WaxedExposedCutCopperSlab struct {
	Type        WaxedExposedCutCopperSlabType
	Waterlogged bool
}

func (x WaxedExposedCutCopperSlab) Id() uint16 {
	switch x.Type {
	case WaxedExposedCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23640
		case false:
			return 23641
		}
	case WaxedExposedCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23642
		case false:
			return 23643
		}
	case WaxedExposedCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23644
		case false:
			return 23645
		}
	}
	return 23643 // default state
}

type WaxedCutCopperSlabType string

const (
	WaxedCutCopperSlabTypeTop    WaxedCutCopperSlabType = "top"
	WaxedCutCopperSlabTypeBottom WaxedCutCopperSlabType = "bottom"
	WaxedCutCopperSlabTypeDouble WaxedCutCopperSlabType = "double"
)

type WaxedCutCopperSlab struct {
	Type        WaxedCutCopperSlabType
	Waterlogged bool
}

func (x WaxedCutCopperSlab) Id() uint16 {
	switch x.Type {
	case WaxedCutCopperSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 23646
		case false:
			return 23647
		}
	case WaxedCutCopperSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 23648
		case false:
			return 23649
		}
	case WaxedCutCopperSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 23650
		case false:
			return 23651
		}
	}
	return 23649 // default state
}

type CopperDoorFacing string

const (
	CopperDoorFacingNorth CopperDoorFacing = "north"
	CopperDoorFacingSouth CopperDoorFacing = "south"
	CopperDoorFacingWest  CopperDoorFacing = "west"
	CopperDoorFacingEast  CopperDoorFacing = "east"
)

type CopperDoorHalf string

const (
	CopperDoorHalfUpper CopperDoorHalf = "upper"
	CopperDoorHalfLower CopperDoorHalf = "lower"
)

type CopperDoorHinge string

const (
	CopperDoorHingeLeft  CopperDoorHinge = "left"
	CopperDoorHingeRight CopperDoorHinge = "right"
)

type CopperDoor struct {
	Powered bool
	Facing  CopperDoorFacing
	Half    CopperDoorHalf
	Hinge   CopperDoorHinge
	Open    bool
}

func (x CopperDoor) Id() uint16 {
	switch x.Facing {
	case CopperDoorFacingNorth:
		switch x.Half {
		case CopperDoorHalfUpper:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23652
					case false:
						return 23653
					}
				case false:
					switch x.Powered {
					case true:
						return 23654
					case false:
						return 23655
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23656
					case false:
						return 23657
					}
				case false:
					switch x.Powered {
					case true:
						return 23658
					case false:
						return 23659
					}
				}
			}
		case CopperDoorHalfLower:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23660
					case false:
						return 23661
					}
				case false:
					switch x.Powered {
					case true:
						return 23662
					case false:
						return 23663
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23664
					case false:
						return 23665
					}
				case false:
					switch x.Powered {
					case true:
						return 23666
					case false:
						return 23667
					}
				}
			}
		}
	case CopperDoorFacingSouth:
		switch x.Half {
		case CopperDoorHalfUpper:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23668
					case false:
						return 23669
					}
				case false:
					switch x.Powered {
					case true:
						return 23670
					case false:
						return 23671
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23672
					case false:
						return 23673
					}
				case false:
					switch x.Powered {
					case true:
						return 23674
					case false:
						return 23675
					}
				}
			}
		case CopperDoorHalfLower:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23676
					case false:
						return 23677
					}
				case false:
					switch x.Powered {
					case true:
						return 23678
					case false:
						return 23679
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23680
					case false:
						return 23681
					}
				case false:
					switch x.Powered {
					case true:
						return 23682
					case false:
						return 23683
					}
				}
			}
		}
	case CopperDoorFacingWest:
		switch x.Half {
		case CopperDoorHalfUpper:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23684
					case false:
						return 23685
					}
				case false:
					switch x.Powered {
					case true:
						return 23686
					case false:
						return 23687
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23688
					case false:
						return 23689
					}
				case false:
					switch x.Powered {
					case true:
						return 23690
					case false:
						return 23691
					}
				}
			}
		case CopperDoorHalfLower:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23692
					case false:
						return 23693
					}
				case false:
					switch x.Powered {
					case true:
						return 23694
					case false:
						return 23695
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23696
					case false:
						return 23697
					}
				case false:
					switch x.Powered {
					case true:
						return 23698
					case false:
						return 23699
					}
				}
			}
		}
	case CopperDoorFacingEast:
		switch x.Half {
		case CopperDoorHalfUpper:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23700
					case false:
						return 23701
					}
				case false:
					switch x.Powered {
					case true:
						return 23702
					case false:
						return 23703
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23704
					case false:
						return 23705
					}
				case false:
					switch x.Powered {
					case true:
						return 23706
					case false:
						return 23707
					}
				}
			}
		case CopperDoorHalfLower:
			switch x.Hinge {
			case CopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23708
					case false:
						return 23709
					}
				case false:
					switch x.Powered {
					case true:
						return 23710
					case false:
						return 23711
					}
				}
			case CopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23712
					case false:
						return 23713
					}
				case false:
					switch x.Powered {
					case true:
						return 23714
					case false:
						return 23715
					}
				}
			}
		}
	}
	return 23663 // default state
}

type ExposedCopperDoorHalf string

const (
	ExposedCopperDoorHalfUpper ExposedCopperDoorHalf = "upper"
	ExposedCopperDoorHalfLower ExposedCopperDoorHalf = "lower"
)

type ExposedCopperDoorHinge string

const (
	ExposedCopperDoorHingeLeft  ExposedCopperDoorHinge = "left"
	ExposedCopperDoorHingeRight ExposedCopperDoorHinge = "right"
)

type ExposedCopperDoorFacing string

const (
	ExposedCopperDoorFacingNorth ExposedCopperDoorFacing = "north"
	ExposedCopperDoorFacingSouth ExposedCopperDoorFacing = "south"
	ExposedCopperDoorFacingWest  ExposedCopperDoorFacing = "west"
	ExposedCopperDoorFacingEast  ExposedCopperDoorFacing = "east"
)

type ExposedCopperDoor struct {
	Half    ExposedCopperDoorHalf
	Hinge   ExposedCopperDoorHinge
	Open    bool
	Powered bool
	Facing  ExposedCopperDoorFacing
}

func (x ExposedCopperDoor) Id() uint16 {
	switch x.Half {
	case ExposedCopperDoorHalfUpper:
		switch x.Hinge {
		case ExposedCopperDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23716
					case ExposedCopperDoorFacingSouth:
						return 23732
					case ExposedCopperDoorFacingWest:
						return 23748
					case ExposedCopperDoorFacingEast:
						return 23764
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23717
					case ExposedCopperDoorFacingSouth:
						return 23733
					case ExposedCopperDoorFacingWest:
						return 23749
					case ExposedCopperDoorFacingEast:
						return 23765
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23718
					case ExposedCopperDoorFacingSouth:
						return 23734
					case ExposedCopperDoorFacingWest:
						return 23750
					case ExposedCopperDoorFacingEast:
						return 23766
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23719
					case ExposedCopperDoorFacingSouth:
						return 23735
					case ExposedCopperDoorFacingWest:
						return 23751
					case ExposedCopperDoorFacingEast:
						return 23767
					}
				}
			}
		case ExposedCopperDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23720
					case ExposedCopperDoorFacingSouth:
						return 23736
					case ExposedCopperDoorFacingWest:
						return 23752
					case ExposedCopperDoorFacingEast:
						return 23768
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23721
					case ExposedCopperDoorFacingSouth:
						return 23737
					case ExposedCopperDoorFacingWest:
						return 23753
					case ExposedCopperDoorFacingEast:
						return 23769
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23722
					case ExposedCopperDoorFacingSouth:
						return 23738
					case ExposedCopperDoorFacingWest:
						return 23754
					case ExposedCopperDoorFacingEast:
						return 23770
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23723
					case ExposedCopperDoorFacingSouth:
						return 23739
					case ExposedCopperDoorFacingWest:
						return 23755
					case ExposedCopperDoorFacingEast:
						return 23771
					}
				}
			}
		}
	case ExposedCopperDoorHalfLower:
		switch x.Hinge {
		case ExposedCopperDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23724
					case ExposedCopperDoorFacingSouth:
						return 23740
					case ExposedCopperDoorFacingWest:
						return 23756
					case ExposedCopperDoorFacingEast:
						return 23772
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23725
					case ExposedCopperDoorFacingSouth:
						return 23741
					case ExposedCopperDoorFacingWest:
						return 23757
					case ExposedCopperDoorFacingEast:
						return 23773
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23726
					case ExposedCopperDoorFacingSouth:
						return 23742
					case ExposedCopperDoorFacingWest:
						return 23758
					case ExposedCopperDoorFacingEast:
						return 23774
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23727
					case ExposedCopperDoorFacingSouth:
						return 23743
					case ExposedCopperDoorFacingWest:
						return 23759
					case ExposedCopperDoorFacingEast:
						return 23775
					}
				}
			}
		case ExposedCopperDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23728
					case ExposedCopperDoorFacingSouth:
						return 23744
					case ExposedCopperDoorFacingWest:
						return 23760
					case ExposedCopperDoorFacingEast:
						return 23776
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23729
					case ExposedCopperDoorFacingSouth:
						return 23745
					case ExposedCopperDoorFacingWest:
						return 23761
					case ExposedCopperDoorFacingEast:
						return 23777
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23730
					case ExposedCopperDoorFacingSouth:
						return 23746
					case ExposedCopperDoorFacingWest:
						return 23762
					case ExposedCopperDoorFacingEast:
						return 23778
					}
				case false:
					switch x.Facing {
					case ExposedCopperDoorFacingNorth:
						return 23731
					case ExposedCopperDoorFacingSouth:
						return 23747
					case ExposedCopperDoorFacingWest:
						return 23763
					case ExposedCopperDoorFacingEast:
						return 23779
					}
				}
			}
		}
	}
	return 23727 // default state
}

type OxidizedCopperDoorFacing string

const (
	OxidizedCopperDoorFacingNorth OxidizedCopperDoorFacing = "north"
	OxidizedCopperDoorFacingSouth OxidizedCopperDoorFacing = "south"
	OxidizedCopperDoorFacingWest  OxidizedCopperDoorFacing = "west"
	OxidizedCopperDoorFacingEast  OxidizedCopperDoorFacing = "east"
)

type OxidizedCopperDoorHalf string

const (
	OxidizedCopperDoorHalfUpper OxidizedCopperDoorHalf = "upper"
	OxidizedCopperDoorHalfLower OxidizedCopperDoorHalf = "lower"
)

type OxidizedCopperDoorHinge string

const (
	OxidizedCopperDoorHingeLeft  OxidizedCopperDoorHinge = "left"
	OxidizedCopperDoorHingeRight OxidizedCopperDoorHinge = "right"
)

type OxidizedCopperDoor struct {
	Facing  OxidizedCopperDoorFacing
	Half    OxidizedCopperDoorHalf
	Hinge   OxidizedCopperDoorHinge
	Open    bool
	Powered bool
}

func (x OxidizedCopperDoor) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Facing {
		case OxidizedCopperDoorFacingNorth:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23780
					case false:
						return 23782
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23784
					case false:
						return 23786
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23788
					case false:
						return 23790
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23792
					case false:
						return 23794
					}
				}
			}
		case OxidizedCopperDoorFacingSouth:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23796
					case false:
						return 23798
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23800
					case false:
						return 23802
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23804
					case false:
						return 23806
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23808
					case false:
						return 23810
					}
				}
			}
		case OxidizedCopperDoorFacingWest:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23812
					case false:
						return 23814
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23816
					case false:
						return 23818
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23820
					case false:
						return 23822
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23824
					case false:
						return 23826
					}
				}
			}
		case OxidizedCopperDoorFacingEast:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23828
					case false:
						return 23830
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23832
					case false:
						return 23834
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23836
					case false:
						return 23838
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23840
					case false:
						return 23842
					}
				}
			}
		}
	case false:
		switch x.Facing {
		case OxidizedCopperDoorFacingNorth:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23781
					case false:
						return 23783
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23785
					case false:
						return 23787
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23789
					case false:
						return 23791
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23793
					case false:
						return 23795
					}
				}
			}
		case OxidizedCopperDoorFacingSouth:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23797
					case false:
						return 23799
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23801
					case false:
						return 23803
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23805
					case false:
						return 23807
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23809
					case false:
						return 23811
					}
				}
			}
		case OxidizedCopperDoorFacingWest:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23813
					case false:
						return 23815
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23817
					case false:
						return 23819
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23821
					case false:
						return 23823
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23825
					case false:
						return 23827
					}
				}
			}
		case OxidizedCopperDoorFacingEast:
			switch x.Half {
			case OxidizedCopperDoorHalfUpper:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23829
					case false:
						return 23831
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23833
					case false:
						return 23835
					}
				}
			case OxidizedCopperDoorHalfLower:
				switch x.Hinge {
				case OxidizedCopperDoorHingeLeft:
					switch x.Open {
					case true:
						return 23837
					case false:
						return 23839
					}
				case OxidizedCopperDoorHingeRight:
					switch x.Open {
					case true:
						return 23841
					case false:
						return 23843
					}
				}
			}
		}
	}
	return 23791 // default state
}

type WeatheredCopperDoorFacing string

const (
	WeatheredCopperDoorFacingNorth WeatheredCopperDoorFacing = "north"
	WeatheredCopperDoorFacingSouth WeatheredCopperDoorFacing = "south"
	WeatheredCopperDoorFacingWest  WeatheredCopperDoorFacing = "west"
	WeatheredCopperDoorFacingEast  WeatheredCopperDoorFacing = "east"
)

type WeatheredCopperDoorHalf string

const (
	WeatheredCopperDoorHalfUpper WeatheredCopperDoorHalf = "upper"
	WeatheredCopperDoorHalfLower WeatheredCopperDoorHalf = "lower"
)

type WeatheredCopperDoorHinge string

const (
	WeatheredCopperDoorHingeLeft  WeatheredCopperDoorHinge = "left"
	WeatheredCopperDoorHingeRight WeatheredCopperDoorHinge = "right"
)

type WeatheredCopperDoor struct {
	Facing  WeatheredCopperDoorFacing
	Half    WeatheredCopperDoorHalf
	Hinge   WeatheredCopperDoorHinge
	Open    bool
	Powered bool
}

func (x WeatheredCopperDoor) Id() uint16 {
	switch x.Half {
	case WeatheredCopperDoorHalfUpper:
		switch x.Hinge {
		case WeatheredCopperDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23844
					case WeatheredCopperDoorFacingSouth:
						return 23860
					case WeatheredCopperDoorFacingWest:
						return 23876
					case WeatheredCopperDoorFacingEast:
						return 23892
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23845
					case WeatheredCopperDoorFacingSouth:
						return 23861
					case WeatheredCopperDoorFacingWest:
						return 23877
					case WeatheredCopperDoorFacingEast:
						return 23893
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23846
					case WeatheredCopperDoorFacingSouth:
						return 23862
					case WeatheredCopperDoorFacingWest:
						return 23878
					case WeatheredCopperDoorFacingEast:
						return 23894
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23847
					case WeatheredCopperDoorFacingSouth:
						return 23863
					case WeatheredCopperDoorFacingWest:
						return 23879
					case WeatheredCopperDoorFacingEast:
						return 23895
					}
				}
			}
		case WeatheredCopperDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23848
					case WeatheredCopperDoorFacingSouth:
						return 23864
					case WeatheredCopperDoorFacingWest:
						return 23880
					case WeatheredCopperDoorFacingEast:
						return 23896
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23849
					case WeatheredCopperDoorFacingSouth:
						return 23865
					case WeatheredCopperDoorFacingWest:
						return 23881
					case WeatheredCopperDoorFacingEast:
						return 23897
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23850
					case WeatheredCopperDoorFacingSouth:
						return 23866
					case WeatheredCopperDoorFacingWest:
						return 23882
					case WeatheredCopperDoorFacingEast:
						return 23898
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23851
					case WeatheredCopperDoorFacingSouth:
						return 23867
					case WeatheredCopperDoorFacingWest:
						return 23883
					case WeatheredCopperDoorFacingEast:
						return 23899
					}
				}
			}
		}
	case WeatheredCopperDoorHalfLower:
		switch x.Hinge {
		case WeatheredCopperDoorHingeLeft:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23852
					case WeatheredCopperDoorFacingSouth:
						return 23868
					case WeatheredCopperDoorFacingWest:
						return 23884
					case WeatheredCopperDoorFacingEast:
						return 23900
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23853
					case WeatheredCopperDoorFacingSouth:
						return 23869
					case WeatheredCopperDoorFacingWest:
						return 23885
					case WeatheredCopperDoorFacingEast:
						return 23901
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23854
					case WeatheredCopperDoorFacingSouth:
						return 23870
					case WeatheredCopperDoorFacingWest:
						return 23886
					case WeatheredCopperDoorFacingEast:
						return 23902
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23855
					case WeatheredCopperDoorFacingSouth:
						return 23871
					case WeatheredCopperDoorFacingWest:
						return 23887
					case WeatheredCopperDoorFacingEast:
						return 23903
					}
				}
			}
		case WeatheredCopperDoorHingeRight:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23856
					case WeatheredCopperDoorFacingSouth:
						return 23872
					case WeatheredCopperDoorFacingWest:
						return 23888
					case WeatheredCopperDoorFacingEast:
						return 23904
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23857
					case WeatheredCopperDoorFacingSouth:
						return 23873
					case WeatheredCopperDoorFacingWest:
						return 23889
					case WeatheredCopperDoorFacingEast:
						return 23905
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23858
					case WeatheredCopperDoorFacingSouth:
						return 23874
					case WeatheredCopperDoorFacingWest:
						return 23890
					case WeatheredCopperDoorFacingEast:
						return 23906
					}
				case false:
					switch x.Facing {
					case WeatheredCopperDoorFacingNorth:
						return 23859
					case WeatheredCopperDoorFacingSouth:
						return 23875
					case WeatheredCopperDoorFacingWest:
						return 23891
					case WeatheredCopperDoorFacingEast:
						return 23907
					}
				}
			}
		}
	}
	return 23855 // default state
}

type WaxedCopperDoorFacing string

const (
	WaxedCopperDoorFacingNorth WaxedCopperDoorFacing = "north"
	WaxedCopperDoorFacingSouth WaxedCopperDoorFacing = "south"
	WaxedCopperDoorFacingWest  WaxedCopperDoorFacing = "west"
	WaxedCopperDoorFacingEast  WaxedCopperDoorFacing = "east"
)

type WaxedCopperDoorHalf string

const (
	WaxedCopperDoorHalfUpper WaxedCopperDoorHalf = "upper"
	WaxedCopperDoorHalfLower WaxedCopperDoorHalf = "lower"
)

type WaxedCopperDoorHinge string

const (
	WaxedCopperDoorHingeLeft  WaxedCopperDoorHinge = "left"
	WaxedCopperDoorHingeRight WaxedCopperDoorHinge = "right"
)

type WaxedCopperDoor struct {
	Facing  WaxedCopperDoorFacing
	Half    WaxedCopperDoorHalf
	Hinge   WaxedCopperDoorHinge
	Open    bool
	Powered bool
}

func (x WaxedCopperDoor) Id() uint16 {
	switch x.Facing {
	case WaxedCopperDoorFacingNorth:
		switch x.Half {
		case WaxedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23908
					case false:
						return 23909
					}
				case false:
					switch x.Powered {
					case true:
						return 23910
					case false:
						return 23911
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23912
					case false:
						return 23913
					}
				case false:
					switch x.Powered {
					case true:
						return 23914
					case false:
						return 23915
					}
				}
			}
		case WaxedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23916
					case false:
						return 23917
					}
				case false:
					switch x.Powered {
					case true:
						return 23918
					case false:
						return 23919
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23920
					case false:
						return 23921
					}
				case false:
					switch x.Powered {
					case true:
						return 23922
					case false:
						return 23923
					}
				}
			}
		}
	case WaxedCopperDoorFacingSouth:
		switch x.Half {
		case WaxedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23924
					case false:
						return 23925
					}
				case false:
					switch x.Powered {
					case true:
						return 23926
					case false:
						return 23927
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23928
					case false:
						return 23929
					}
				case false:
					switch x.Powered {
					case true:
						return 23930
					case false:
						return 23931
					}
				}
			}
		case WaxedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23932
					case false:
						return 23933
					}
				case false:
					switch x.Powered {
					case true:
						return 23934
					case false:
						return 23935
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23936
					case false:
						return 23937
					}
				case false:
					switch x.Powered {
					case true:
						return 23938
					case false:
						return 23939
					}
				}
			}
		}
	case WaxedCopperDoorFacingWest:
		switch x.Half {
		case WaxedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23940
					case false:
						return 23941
					}
				case false:
					switch x.Powered {
					case true:
						return 23942
					case false:
						return 23943
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23944
					case false:
						return 23945
					}
				case false:
					switch x.Powered {
					case true:
						return 23946
					case false:
						return 23947
					}
				}
			}
		case WaxedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23948
					case false:
						return 23949
					}
				case false:
					switch x.Powered {
					case true:
						return 23950
					case false:
						return 23951
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23952
					case false:
						return 23953
					}
				case false:
					switch x.Powered {
					case true:
						return 23954
					case false:
						return 23955
					}
				}
			}
		}
	case WaxedCopperDoorFacingEast:
		switch x.Half {
		case WaxedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23956
					case false:
						return 23957
					}
				case false:
					switch x.Powered {
					case true:
						return 23958
					case false:
						return 23959
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23960
					case false:
						return 23961
					}
				case false:
					switch x.Powered {
					case true:
						return 23962
					case false:
						return 23963
					}
				}
			}
		case WaxedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23964
					case false:
						return 23965
					}
				case false:
					switch x.Powered {
					case true:
						return 23966
					case false:
						return 23967
					}
				}
			case WaxedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23968
					case false:
						return 23969
					}
				case false:
					switch x.Powered {
					case true:
						return 23970
					case false:
						return 23971
					}
				}
			}
		}
	}
	return 23919 // default state
}

type WaxedExposedCopperDoorHalf string

const (
	WaxedExposedCopperDoorHalfUpper WaxedExposedCopperDoorHalf = "upper"
	WaxedExposedCopperDoorHalfLower WaxedExposedCopperDoorHalf = "lower"
)

type WaxedExposedCopperDoorHinge string

const (
	WaxedExposedCopperDoorHingeLeft  WaxedExposedCopperDoorHinge = "left"
	WaxedExposedCopperDoorHingeRight WaxedExposedCopperDoorHinge = "right"
)

type WaxedExposedCopperDoorFacing string

const (
	WaxedExposedCopperDoorFacingNorth WaxedExposedCopperDoorFacing = "north"
	WaxedExposedCopperDoorFacingSouth WaxedExposedCopperDoorFacing = "south"
	WaxedExposedCopperDoorFacingWest  WaxedExposedCopperDoorFacing = "west"
	WaxedExposedCopperDoorFacingEast  WaxedExposedCopperDoorFacing = "east"
)

type WaxedExposedCopperDoor struct {
	Half    WaxedExposedCopperDoorHalf
	Hinge   WaxedExposedCopperDoorHinge
	Open    bool
	Powered bool
	Facing  WaxedExposedCopperDoorFacing
}

func (x WaxedExposedCopperDoor) Id() uint16 {
	switch x.Facing {
	case WaxedExposedCopperDoorFacingNorth:
		switch x.Half {
		case WaxedExposedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23972
					case false:
						return 23973
					}
				case false:
					switch x.Powered {
					case true:
						return 23974
					case false:
						return 23975
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23976
					case false:
						return 23977
					}
				case false:
					switch x.Powered {
					case true:
						return 23978
					case false:
						return 23979
					}
				}
			}
		case WaxedExposedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23980
					case false:
						return 23981
					}
				case false:
					switch x.Powered {
					case true:
						return 23982
					case false:
						return 23983
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23984
					case false:
						return 23985
					}
				case false:
					switch x.Powered {
					case true:
						return 23986
					case false:
						return 23987
					}
				}
			}
		}
	case WaxedExposedCopperDoorFacingSouth:
		switch x.Half {
		case WaxedExposedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23988
					case false:
						return 23989
					}
				case false:
					switch x.Powered {
					case true:
						return 23990
					case false:
						return 23991
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23992
					case false:
						return 23993
					}
				case false:
					switch x.Powered {
					case true:
						return 23994
					case false:
						return 23995
					}
				}
			}
		case WaxedExposedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 23996
					case false:
						return 23997
					}
				case false:
					switch x.Powered {
					case true:
						return 23998
					case false:
						return 23999
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24000
					case false:
						return 24001
					}
				case false:
					switch x.Powered {
					case true:
						return 24002
					case false:
						return 24003
					}
				}
			}
		}
	case WaxedExposedCopperDoorFacingWest:
		switch x.Half {
		case WaxedExposedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24004
					case false:
						return 24005
					}
				case false:
					switch x.Powered {
					case true:
						return 24006
					case false:
						return 24007
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24008
					case false:
						return 24009
					}
				case false:
					switch x.Powered {
					case true:
						return 24010
					case false:
						return 24011
					}
				}
			}
		case WaxedExposedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24012
					case false:
						return 24013
					}
				case false:
					switch x.Powered {
					case true:
						return 24014
					case false:
						return 24015
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24016
					case false:
						return 24017
					}
				case false:
					switch x.Powered {
					case true:
						return 24018
					case false:
						return 24019
					}
				}
			}
		}
	case WaxedExposedCopperDoorFacingEast:
		switch x.Half {
		case WaxedExposedCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24020
					case false:
						return 24021
					}
				case false:
					switch x.Powered {
					case true:
						return 24022
					case false:
						return 24023
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24024
					case false:
						return 24025
					}
				case false:
					switch x.Powered {
					case true:
						return 24026
					case false:
						return 24027
					}
				}
			}
		case WaxedExposedCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedExposedCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24028
					case false:
						return 24029
					}
				case false:
					switch x.Powered {
					case true:
						return 24030
					case false:
						return 24031
					}
				}
			case WaxedExposedCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24032
					case false:
						return 24033
					}
				case false:
					switch x.Powered {
					case true:
						return 24034
					case false:
						return 24035
					}
				}
			}
		}
	}
	return 23983 // default state
}

type WaxedOxidizedCopperDoorFacing string

const (
	WaxedOxidizedCopperDoorFacingNorth WaxedOxidizedCopperDoorFacing = "north"
	WaxedOxidizedCopperDoorFacingSouth WaxedOxidizedCopperDoorFacing = "south"
	WaxedOxidizedCopperDoorFacingWest  WaxedOxidizedCopperDoorFacing = "west"
	WaxedOxidizedCopperDoorFacingEast  WaxedOxidizedCopperDoorFacing = "east"
)

type WaxedOxidizedCopperDoorHalf string

const (
	WaxedOxidizedCopperDoorHalfUpper WaxedOxidizedCopperDoorHalf = "upper"
	WaxedOxidizedCopperDoorHalfLower WaxedOxidizedCopperDoorHalf = "lower"
)

type WaxedOxidizedCopperDoorHinge string

const (
	WaxedOxidizedCopperDoorHingeLeft  WaxedOxidizedCopperDoorHinge = "left"
	WaxedOxidizedCopperDoorHingeRight WaxedOxidizedCopperDoorHinge = "right"
)

type WaxedOxidizedCopperDoor struct {
	Open    bool
	Powered bool
	Facing  WaxedOxidizedCopperDoorFacing
	Half    WaxedOxidizedCopperDoorHalf
	Hinge   WaxedOxidizedCopperDoorHinge
}

func (x WaxedOxidizedCopperDoor) Id() uint16 {
	switch x.Hinge {
	case WaxedOxidizedCopperDoorHingeLeft:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24036
					case WaxedOxidizedCopperDoorHalfLower:
						return 24044
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24052
					case WaxedOxidizedCopperDoorHalfLower:
						return 24060
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24068
					case WaxedOxidizedCopperDoorHalfLower:
						return 24076
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24084
					case WaxedOxidizedCopperDoorHalfLower:
						return 24092
					}
				}
			case false:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24037
					case WaxedOxidizedCopperDoorHalfLower:
						return 24045
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24053
					case WaxedOxidizedCopperDoorHalfLower:
						return 24061
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24069
					case WaxedOxidizedCopperDoorHalfLower:
						return 24077
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24085
					case WaxedOxidizedCopperDoorHalfLower:
						return 24093
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24038
					case WaxedOxidizedCopperDoorHalfLower:
						return 24046
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24054
					case WaxedOxidizedCopperDoorHalfLower:
						return 24062
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24070
					case WaxedOxidizedCopperDoorHalfLower:
						return 24078
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24086
					case WaxedOxidizedCopperDoorHalfLower:
						return 24094
					}
				}
			case false:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24039
					case WaxedOxidizedCopperDoorHalfLower:
						return 24047
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24055
					case WaxedOxidizedCopperDoorHalfLower:
						return 24063
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24071
					case WaxedOxidizedCopperDoorHalfLower:
						return 24079
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24087
					case WaxedOxidizedCopperDoorHalfLower:
						return 24095
					}
				}
			}
		}
	case WaxedOxidizedCopperDoorHingeRight:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24040
					case WaxedOxidizedCopperDoorHalfLower:
						return 24048
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24056
					case WaxedOxidizedCopperDoorHalfLower:
						return 24064
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24072
					case WaxedOxidizedCopperDoorHalfLower:
						return 24080
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24088
					case WaxedOxidizedCopperDoorHalfLower:
						return 24096
					}
				}
			case false:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24041
					case WaxedOxidizedCopperDoorHalfLower:
						return 24049
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24057
					case WaxedOxidizedCopperDoorHalfLower:
						return 24065
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24073
					case WaxedOxidizedCopperDoorHalfLower:
						return 24081
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24089
					case WaxedOxidizedCopperDoorHalfLower:
						return 24097
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24042
					case WaxedOxidizedCopperDoorHalfLower:
						return 24050
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24058
					case WaxedOxidizedCopperDoorHalfLower:
						return 24066
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24074
					case WaxedOxidizedCopperDoorHalfLower:
						return 24082
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24090
					case WaxedOxidizedCopperDoorHalfLower:
						return 24098
					}
				}
			case false:
				switch x.Facing {
				case WaxedOxidizedCopperDoorFacingNorth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24043
					case WaxedOxidizedCopperDoorHalfLower:
						return 24051
					}
				case WaxedOxidizedCopperDoorFacingSouth:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24059
					case WaxedOxidizedCopperDoorHalfLower:
						return 24067
					}
				case WaxedOxidizedCopperDoorFacingWest:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24075
					case WaxedOxidizedCopperDoorHalfLower:
						return 24083
					}
				case WaxedOxidizedCopperDoorFacingEast:
					switch x.Half {
					case WaxedOxidizedCopperDoorHalfUpper:
						return 24091
					case WaxedOxidizedCopperDoorHalfLower:
						return 24099
					}
				}
			}
		}
	}
	return 24047 // default state
}

type WaxedWeatheredCopperDoorHalf string

const (
	WaxedWeatheredCopperDoorHalfUpper WaxedWeatheredCopperDoorHalf = "upper"
	WaxedWeatheredCopperDoorHalfLower WaxedWeatheredCopperDoorHalf = "lower"
)

type WaxedWeatheredCopperDoorHinge string

const (
	WaxedWeatheredCopperDoorHingeLeft  WaxedWeatheredCopperDoorHinge = "left"
	WaxedWeatheredCopperDoorHingeRight WaxedWeatheredCopperDoorHinge = "right"
)

type WaxedWeatheredCopperDoorFacing string

const (
	WaxedWeatheredCopperDoorFacingNorth WaxedWeatheredCopperDoorFacing = "north"
	WaxedWeatheredCopperDoorFacingSouth WaxedWeatheredCopperDoorFacing = "south"
	WaxedWeatheredCopperDoorFacingWest  WaxedWeatheredCopperDoorFacing = "west"
	WaxedWeatheredCopperDoorFacingEast  WaxedWeatheredCopperDoorFacing = "east"
)

type WaxedWeatheredCopperDoor struct {
	Half    WaxedWeatheredCopperDoorHalf
	Hinge   WaxedWeatheredCopperDoorHinge
	Open    bool
	Powered bool
	Facing  WaxedWeatheredCopperDoorFacing
}

func (x WaxedWeatheredCopperDoor) Id() uint16 {
	switch x.Facing {
	case WaxedWeatheredCopperDoorFacingNorth:
		switch x.Half {
		case WaxedWeatheredCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24100
					case false:
						return 24101
					}
				case false:
					switch x.Powered {
					case true:
						return 24102
					case false:
						return 24103
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24104
					case false:
						return 24105
					}
				case false:
					switch x.Powered {
					case true:
						return 24106
					case false:
						return 24107
					}
				}
			}
		case WaxedWeatheredCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24108
					case false:
						return 24109
					}
				case false:
					switch x.Powered {
					case true:
						return 24110
					case false:
						return 24111
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24112
					case false:
						return 24113
					}
				case false:
					switch x.Powered {
					case true:
						return 24114
					case false:
						return 24115
					}
				}
			}
		}
	case WaxedWeatheredCopperDoorFacingSouth:
		switch x.Half {
		case WaxedWeatheredCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24116
					case false:
						return 24117
					}
				case false:
					switch x.Powered {
					case true:
						return 24118
					case false:
						return 24119
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24120
					case false:
						return 24121
					}
				case false:
					switch x.Powered {
					case true:
						return 24122
					case false:
						return 24123
					}
				}
			}
		case WaxedWeatheredCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24124
					case false:
						return 24125
					}
				case false:
					switch x.Powered {
					case true:
						return 24126
					case false:
						return 24127
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24128
					case false:
						return 24129
					}
				case false:
					switch x.Powered {
					case true:
						return 24130
					case false:
						return 24131
					}
				}
			}
		}
	case WaxedWeatheredCopperDoorFacingWest:
		switch x.Half {
		case WaxedWeatheredCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24132
					case false:
						return 24133
					}
				case false:
					switch x.Powered {
					case true:
						return 24134
					case false:
						return 24135
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24136
					case false:
						return 24137
					}
				case false:
					switch x.Powered {
					case true:
						return 24138
					case false:
						return 24139
					}
				}
			}
		case WaxedWeatheredCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24140
					case false:
						return 24141
					}
				case false:
					switch x.Powered {
					case true:
						return 24142
					case false:
						return 24143
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24144
					case false:
						return 24145
					}
				case false:
					switch x.Powered {
					case true:
						return 24146
					case false:
						return 24147
					}
				}
			}
		}
	case WaxedWeatheredCopperDoorFacingEast:
		switch x.Half {
		case WaxedWeatheredCopperDoorHalfUpper:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24148
					case false:
						return 24149
					}
				case false:
					switch x.Powered {
					case true:
						return 24150
					case false:
						return 24151
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24152
					case false:
						return 24153
					}
				case false:
					switch x.Powered {
					case true:
						return 24154
					case false:
						return 24155
					}
				}
			}
		case WaxedWeatheredCopperDoorHalfLower:
			switch x.Hinge {
			case WaxedWeatheredCopperDoorHingeLeft:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24156
					case false:
						return 24157
					}
				case false:
					switch x.Powered {
					case true:
						return 24158
					case false:
						return 24159
					}
				}
			case WaxedWeatheredCopperDoorHingeRight:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24160
					case false:
						return 24161
					}
				case false:
					switch x.Powered {
					case true:
						return 24162
					case false:
						return 24163
					}
				}
			}
		}
	}
	return 24111 // default state
}

type CopperTrapdoorFacing string

const (
	CopperTrapdoorFacingNorth CopperTrapdoorFacing = "north"
	CopperTrapdoorFacingSouth CopperTrapdoorFacing = "south"
	CopperTrapdoorFacingWest  CopperTrapdoorFacing = "west"
	CopperTrapdoorFacingEast  CopperTrapdoorFacing = "east"
)

type CopperTrapdoorHalf string

const (
	CopperTrapdoorHalfTop    CopperTrapdoorHalf = "top"
	CopperTrapdoorHalfBottom CopperTrapdoorHalf = "bottom"
)

type CopperTrapdoor struct {
	Facing      CopperTrapdoorFacing
	Half        CopperTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x CopperTrapdoor) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CopperTrapdoorFacingNorth:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24164
					case false:
						return 24166
					}
				case false:
					switch x.Powered {
					case true:
						return 24168
					case false:
						return 24170
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24172
					case false:
						return 24174
					}
				case false:
					switch x.Powered {
					case true:
						return 24176
					case false:
						return 24178
					}
				}
			}
		case CopperTrapdoorFacingSouth:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24180
					case false:
						return 24182
					}
				case false:
					switch x.Powered {
					case true:
						return 24184
					case false:
						return 24186
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24188
					case false:
						return 24190
					}
				case false:
					switch x.Powered {
					case true:
						return 24192
					case false:
						return 24194
					}
				}
			}
		case CopperTrapdoorFacingWest:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24196
					case false:
						return 24198
					}
				case false:
					switch x.Powered {
					case true:
						return 24200
					case false:
						return 24202
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24204
					case false:
						return 24206
					}
				case false:
					switch x.Powered {
					case true:
						return 24208
					case false:
						return 24210
					}
				}
			}
		case CopperTrapdoorFacingEast:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24212
					case false:
						return 24214
					}
				case false:
					switch x.Powered {
					case true:
						return 24216
					case false:
						return 24218
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24220
					case false:
						return 24222
					}
				case false:
					switch x.Powered {
					case true:
						return 24224
					case false:
						return 24226
					}
				}
			}
		}
	case false:
		switch x.Facing {
		case CopperTrapdoorFacingNorth:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24165
					case false:
						return 24167
					}
				case false:
					switch x.Powered {
					case true:
						return 24169
					case false:
						return 24171
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24173
					case false:
						return 24175
					}
				case false:
					switch x.Powered {
					case true:
						return 24177
					case false:
						return 24179
					}
				}
			}
		case CopperTrapdoorFacingSouth:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24181
					case false:
						return 24183
					}
				case false:
					switch x.Powered {
					case true:
						return 24185
					case false:
						return 24187
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24189
					case false:
						return 24191
					}
				case false:
					switch x.Powered {
					case true:
						return 24193
					case false:
						return 24195
					}
				}
			}
		case CopperTrapdoorFacingWest:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24197
					case false:
						return 24199
					}
				case false:
					switch x.Powered {
					case true:
						return 24201
					case false:
						return 24203
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24205
					case false:
						return 24207
					}
				case false:
					switch x.Powered {
					case true:
						return 24209
					case false:
						return 24211
					}
				}
			}
		case CopperTrapdoorFacingEast:
			switch x.Half {
			case CopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24213
					case false:
						return 24215
					}
				case false:
					switch x.Powered {
					case true:
						return 24217
					case false:
						return 24219
					}
				}
			case CopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24221
					case false:
						return 24223
					}
				case false:
					switch x.Powered {
					case true:
						return 24225
					case false:
						return 24227
					}
				}
			}
		}
	}
	return 24179 // default state
}

type ExposedCopperTrapdoorFacing string

const (
	ExposedCopperTrapdoorFacingNorth ExposedCopperTrapdoorFacing = "north"
	ExposedCopperTrapdoorFacingSouth ExposedCopperTrapdoorFacing = "south"
	ExposedCopperTrapdoorFacingWest  ExposedCopperTrapdoorFacing = "west"
	ExposedCopperTrapdoorFacingEast  ExposedCopperTrapdoorFacing = "east"
)

type ExposedCopperTrapdoorHalf string

const (
	ExposedCopperTrapdoorHalfTop    ExposedCopperTrapdoorHalf = "top"
	ExposedCopperTrapdoorHalfBottom ExposedCopperTrapdoorHalf = "bottom"
)

type ExposedCopperTrapdoor struct {
	Waterlogged bool
	Facing      ExposedCopperTrapdoorFacing
	Half        ExposedCopperTrapdoorHalf
	Open        bool
	Powered     bool
}

func (x ExposedCopperTrapdoor) Id() uint16 {
	switch x.Half {
	case ExposedCopperTrapdoorHalfTop:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24228
					case ExposedCopperTrapdoorFacingSouth:
						return 24244
					case ExposedCopperTrapdoorFacingWest:
						return 24260
					case ExposedCopperTrapdoorFacingEast:
						return 24276
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24229
					case ExposedCopperTrapdoorFacingSouth:
						return 24245
					case ExposedCopperTrapdoorFacingWest:
						return 24261
					case ExposedCopperTrapdoorFacingEast:
						return 24277
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24230
					case ExposedCopperTrapdoorFacingSouth:
						return 24246
					case ExposedCopperTrapdoorFacingWest:
						return 24262
					case ExposedCopperTrapdoorFacingEast:
						return 24278
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24231
					case ExposedCopperTrapdoorFacingSouth:
						return 24247
					case ExposedCopperTrapdoorFacingWest:
						return 24263
					case ExposedCopperTrapdoorFacingEast:
						return 24279
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24232
					case ExposedCopperTrapdoorFacingSouth:
						return 24248
					case ExposedCopperTrapdoorFacingWest:
						return 24264
					case ExposedCopperTrapdoorFacingEast:
						return 24280
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24233
					case ExposedCopperTrapdoorFacingSouth:
						return 24249
					case ExposedCopperTrapdoorFacingWest:
						return 24265
					case ExposedCopperTrapdoorFacingEast:
						return 24281
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24234
					case ExposedCopperTrapdoorFacingSouth:
						return 24250
					case ExposedCopperTrapdoorFacingWest:
						return 24266
					case ExposedCopperTrapdoorFacingEast:
						return 24282
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24235
					case ExposedCopperTrapdoorFacingSouth:
						return 24251
					case ExposedCopperTrapdoorFacingWest:
						return 24267
					case ExposedCopperTrapdoorFacingEast:
						return 24283
					}
				}
			}
		}
	case ExposedCopperTrapdoorHalfBottom:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24236
					case ExposedCopperTrapdoorFacingSouth:
						return 24252
					case ExposedCopperTrapdoorFacingWest:
						return 24268
					case ExposedCopperTrapdoorFacingEast:
						return 24284
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24237
					case ExposedCopperTrapdoorFacingSouth:
						return 24253
					case ExposedCopperTrapdoorFacingWest:
						return 24269
					case ExposedCopperTrapdoorFacingEast:
						return 24285
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24238
					case ExposedCopperTrapdoorFacingSouth:
						return 24254
					case ExposedCopperTrapdoorFacingWest:
						return 24270
					case ExposedCopperTrapdoorFacingEast:
						return 24286
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24239
					case ExposedCopperTrapdoorFacingSouth:
						return 24255
					case ExposedCopperTrapdoorFacingWest:
						return 24271
					case ExposedCopperTrapdoorFacingEast:
						return 24287
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24240
					case ExposedCopperTrapdoorFacingSouth:
						return 24256
					case ExposedCopperTrapdoorFacingWest:
						return 24272
					case ExposedCopperTrapdoorFacingEast:
						return 24288
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24241
					case ExposedCopperTrapdoorFacingSouth:
						return 24257
					case ExposedCopperTrapdoorFacingWest:
						return 24273
					case ExposedCopperTrapdoorFacingEast:
						return 24289
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24242
					case ExposedCopperTrapdoorFacingSouth:
						return 24258
					case ExposedCopperTrapdoorFacingWest:
						return 24274
					case ExposedCopperTrapdoorFacingEast:
						return 24290
					}
				case false:
					switch x.Facing {
					case ExposedCopperTrapdoorFacingNorth:
						return 24243
					case ExposedCopperTrapdoorFacingSouth:
						return 24259
					case ExposedCopperTrapdoorFacingWest:
						return 24275
					case ExposedCopperTrapdoorFacingEast:
						return 24291
					}
				}
			}
		}
	}
	return 24243 // default state
}

type OxidizedCopperTrapdoorFacing string

const (
	OxidizedCopperTrapdoorFacingNorth OxidizedCopperTrapdoorFacing = "north"
	OxidizedCopperTrapdoorFacingSouth OxidizedCopperTrapdoorFacing = "south"
	OxidizedCopperTrapdoorFacingWest  OxidizedCopperTrapdoorFacing = "west"
	OxidizedCopperTrapdoorFacingEast  OxidizedCopperTrapdoorFacing = "east"
)

type OxidizedCopperTrapdoorHalf string

const (
	OxidizedCopperTrapdoorHalfTop    OxidizedCopperTrapdoorHalf = "top"
	OxidizedCopperTrapdoorHalfBottom OxidizedCopperTrapdoorHalf = "bottom"
)

type OxidizedCopperTrapdoor struct {
	Powered     bool
	Waterlogged bool
	Facing      OxidizedCopperTrapdoorFacing
	Half        OxidizedCopperTrapdoorHalf
	Open        bool
}

func (x OxidizedCopperTrapdoor) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case OxidizedCopperTrapdoorFacingNorth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24292
					case false:
						return 24296
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24300
					case false:
						return 24304
					}
				}
			case OxidizedCopperTrapdoorFacingSouth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24308
					case false:
						return 24312
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24316
					case false:
						return 24320
					}
				}
			case OxidizedCopperTrapdoorFacingWest:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24324
					case false:
						return 24328
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24332
					case false:
						return 24336
					}
				}
			case OxidizedCopperTrapdoorFacingEast:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24340
					case false:
						return 24344
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24348
					case false:
						return 24352
					}
				}
			}
		case false:
			switch x.Facing {
			case OxidizedCopperTrapdoorFacingNorth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24293
					case false:
						return 24297
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24301
					case false:
						return 24305
					}
				}
			case OxidizedCopperTrapdoorFacingSouth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24309
					case false:
						return 24313
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24317
					case false:
						return 24321
					}
				}
			case OxidizedCopperTrapdoorFacingWest:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24325
					case false:
						return 24329
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24333
					case false:
						return 24337
					}
				}
			case OxidizedCopperTrapdoorFacingEast:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24341
					case false:
						return 24345
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24349
					case false:
						return 24353
					}
				}
			}
		}
	case false:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case OxidizedCopperTrapdoorFacingNorth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24294
					case false:
						return 24298
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24302
					case false:
						return 24306
					}
				}
			case OxidizedCopperTrapdoorFacingSouth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24310
					case false:
						return 24314
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24318
					case false:
						return 24322
					}
				}
			case OxidizedCopperTrapdoorFacingWest:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24326
					case false:
						return 24330
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24334
					case false:
						return 24338
					}
				}
			case OxidizedCopperTrapdoorFacingEast:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24342
					case false:
						return 24346
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24350
					case false:
						return 24354
					}
				}
			}
		case false:
			switch x.Facing {
			case OxidizedCopperTrapdoorFacingNorth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24295
					case false:
						return 24299
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24303
					case false:
						return 24307
					}
				}
			case OxidizedCopperTrapdoorFacingSouth:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24311
					case false:
						return 24315
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24319
					case false:
						return 24323
					}
				}
			case OxidizedCopperTrapdoorFacingWest:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24327
					case false:
						return 24331
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24335
					case false:
						return 24339
					}
				}
			case OxidizedCopperTrapdoorFacingEast:
				switch x.Half {
				case OxidizedCopperTrapdoorHalfTop:
					switch x.Open {
					case true:
						return 24343
					case false:
						return 24347
					}
				case OxidizedCopperTrapdoorHalfBottom:
					switch x.Open {
					case true:
						return 24351
					case false:
						return 24355
					}
				}
			}
		}
	}
	return 24307 // default state
}

type WeatheredCopperTrapdoorHalf string

const (
	WeatheredCopperTrapdoorHalfTop    WeatheredCopperTrapdoorHalf = "top"
	WeatheredCopperTrapdoorHalfBottom WeatheredCopperTrapdoorHalf = "bottom"
)

type WeatheredCopperTrapdoorFacing string

const (
	WeatheredCopperTrapdoorFacingNorth WeatheredCopperTrapdoorFacing = "north"
	WeatheredCopperTrapdoorFacingSouth WeatheredCopperTrapdoorFacing = "south"
	WeatheredCopperTrapdoorFacingWest  WeatheredCopperTrapdoorFacing = "west"
	WeatheredCopperTrapdoorFacingEast  WeatheredCopperTrapdoorFacing = "east"
)

type WeatheredCopperTrapdoor struct {
	Half        WeatheredCopperTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
	Facing      WeatheredCopperTrapdoorFacing
}

func (x WeatheredCopperTrapdoor) Id() uint16 {
	switch x.Facing {
	case WeatheredCopperTrapdoorFacingNorth:
		switch x.Half {
		case WeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24356
					case false:
						return 24357
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24358
					case false:
						return 24359
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24360
					case false:
						return 24361
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24362
					case false:
						return 24363
					}
				}
			}
		case WeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24364
					case false:
						return 24365
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24366
					case false:
						return 24367
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24368
					case false:
						return 24369
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24370
					case false:
						return 24371
					}
				}
			}
		}
	case WeatheredCopperTrapdoorFacingSouth:
		switch x.Half {
		case WeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24372
					case false:
						return 24373
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24374
					case false:
						return 24375
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24376
					case false:
						return 24377
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24378
					case false:
						return 24379
					}
				}
			}
		case WeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24380
					case false:
						return 24381
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24382
					case false:
						return 24383
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24384
					case false:
						return 24385
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24386
					case false:
						return 24387
					}
				}
			}
		}
	case WeatheredCopperTrapdoorFacingWest:
		switch x.Half {
		case WeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24388
					case false:
						return 24389
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24390
					case false:
						return 24391
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24392
					case false:
						return 24393
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24394
					case false:
						return 24395
					}
				}
			}
		case WeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24396
					case false:
						return 24397
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24398
					case false:
						return 24399
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24400
					case false:
						return 24401
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24402
					case false:
						return 24403
					}
				}
			}
		}
	case WeatheredCopperTrapdoorFacingEast:
		switch x.Half {
		case WeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24404
					case false:
						return 24405
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24406
					case false:
						return 24407
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24408
					case false:
						return 24409
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24410
					case false:
						return 24411
					}
				}
			}
		case WeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24412
					case false:
						return 24413
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24414
					case false:
						return 24415
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24416
					case false:
						return 24417
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24418
					case false:
						return 24419
					}
				}
			}
		}
	}
	return 24371 // default state
}

type WaxedCopperTrapdoorFacing string

const (
	WaxedCopperTrapdoorFacingNorth WaxedCopperTrapdoorFacing = "north"
	WaxedCopperTrapdoorFacingSouth WaxedCopperTrapdoorFacing = "south"
	WaxedCopperTrapdoorFacingWest  WaxedCopperTrapdoorFacing = "west"
	WaxedCopperTrapdoorFacingEast  WaxedCopperTrapdoorFacing = "east"
)

type WaxedCopperTrapdoorHalf string

const (
	WaxedCopperTrapdoorHalfTop    WaxedCopperTrapdoorHalf = "top"
	WaxedCopperTrapdoorHalfBottom WaxedCopperTrapdoorHalf = "bottom"
)

type WaxedCopperTrapdoor struct {
	Waterlogged bool
	Facing      WaxedCopperTrapdoorFacing
	Half        WaxedCopperTrapdoorHalf
	Open        bool
	Powered     bool
}

func (x WaxedCopperTrapdoor) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case WaxedCopperTrapdoorFacingNorth:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24420
					case false:
						return 24422
					}
				case false:
					switch x.Powered {
					case true:
						return 24424
					case false:
						return 24426
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24428
					case false:
						return 24430
					}
				case false:
					switch x.Powered {
					case true:
						return 24432
					case false:
						return 24434
					}
				}
			}
		case WaxedCopperTrapdoorFacingSouth:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24436
					case false:
						return 24438
					}
				case false:
					switch x.Powered {
					case true:
						return 24440
					case false:
						return 24442
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24444
					case false:
						return 24446
					}
				case false:
					switch x.Powered {
					case true:
						return 24448
					case false:
						return 24450
					}
				}
			}
		case WaxedCopperTrapdoorFacingWest:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24452
					case false:
						return 24454
					}
				case false:
					switch x.Powered {
					case true:
						return 24456
					case false:
						return 24458
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24460
					case false:
						return 24462
					}
				case false:
					switch x.Powered {
					case true:
						return 24464
					case false:
						return 24466
					}
				}
			}
		case WaxedCopperTrapdoorFacingEast:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24468
					case false:
						return 24470
					}
				case false:
					switch x.Powered {
					case true:
						return 24472
					case false:
						return 24474
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24476
					case false:
						return 24478
					}
				case false:
					switch x.Powered {
					case true:
						return 24480
					case false:
						return 24482
					}
				}
			}
		}
	case false:
		switch x.Facing {
		case WaxedCopperTrapdoorFacingNorth:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24421
					case false:
						return 24423
					}
				case false:
					switch x.Powered {
					case true:
						return 24425
					case false:
						return 24427
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24429
					case false:
						return 24431
					}
				case false:
					switch x.Powered {
					case true:
						return 24433
					case false:
						return 24435
					}
				}
			}
		case WaxedCopperTrapdoorFacingSouth:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24437
					case false:
						return 24439
					}
				case false:
					switch x.Powered {
					case true:
						return 24441
					case false:
						return 24443
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24445
					case false:
						return 24447
					}
				case false:
					switch x.Powered {
					case true:
						return 24449
					case false:
						return 24451
					}
				}
			}
		case WaxedCopperTrapdoorFacingWest:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24453
					case false:
						return 24455
					}
				case false:
					switch x.Powered {
					case true:
						return 24457
					case false:
						return 24459
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24461
					case false:
						return 24463
					}
				case false:
					switch x.Powered {
					case true:
						return 24465
					case false:
						return 24467
					}
				}
			}
		case WaxedCopperTrapdoorFacingEast:
			switch x.Half {
			case WaxedCopperTrapdoorHalfTop:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24469
					case false:
						return 24471
					}
				case false:
					switch x.Powered {
					case true:
						return 24473
					case false:
						return 24475
					}
				}
			case WaxedCopperTrapdoorHalfBottom:
				switch x.Open {
				case true:
					switch x.Powered {
					case true:
						return 24477
					case false:
						return 24479
					}
				case false:
					switch x.Powered {
					case true:
						return 24481
					case false:
						return 24483
					}
				}
			}
		}
	}
	return 24435 // default state
}

type WaxedExposedCopperTrapdoorFacing string

const (
	WaxedExposedCopperTrapdoorFacingNorth WaxedExposedCopperTrapdoorFacing = "north"
	WaxedExposedCopperTrapdoorFacingSouth WaxedExposedCopperTrapdoorFacing = "south"
	WaxedExposedCopperTrapdoorFacingWest  WaxedExposedCopperTrapdoorFacing = "west"
	WaxedExposedCopperTrapdoorFacingEast  WaxedExposedCopperTrapdoorFacing = "east"
)

type WaxedExposedCopperTrapdoorHalf string

const (
	WaxedExposedCopperTrapdoorHalfTop    WaxedExposedCopperTrapdoorHalf = "top"
	WaxedExposedCopperTrapdoorHalfBottom WaxedExposedCopperTrapdoorHalf = "bottom"
)

type WaxedExposedCopperTrapdoor struct {
	Facing      WaxedExposedCopperTrapdoorFacing
	Half        WaxedExposedCopperTrapdoorHalf
	Open        bool
	Powered     bool
	Waterlogged bool
}

func (x WaxedExposedCopperTrapdoor) Id() uint16 {
	switch x.Open {
	case true:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24484
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24492
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24500
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24508
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24516
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24524
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24532
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24540
					}
				}
			case false:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24485
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24493
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24501
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24509
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24517
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24525
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24533
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24541
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24486
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24494
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24502
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24510
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24518
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24526
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24534
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24542
					}
				}
			case false:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24487
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24495
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24503
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24511
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24519
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24527
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24535
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24543
					}
				}
			}
		}
	case false:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24488
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24496
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24504
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24512
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24520
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24528
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24536
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24544
					}
				}
			case false:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24489
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24497
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24505
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24513
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24521
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24529
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24537
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24545
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24490
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24498
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24506
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24514
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24522
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24530
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24538
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24546
					}
				}
			case false:
				switch x.Facing {
				case WaxedExposedCopperTrapdoorFacingNorth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24491
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24499
					}
				case WaxedExposedCopperTrapdoorFacingSouth:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24507
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24515
					}
				case WaxedExposedCopperTrapdoorFacingWest:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24523
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24531
					}
				case WaxedExposedCopperTrapdoorFacingEast:
					switch x.Half {
					case WaxedExposedCopperTrapdoorHalfTop:
						return 24539
					case WaxedExposedCopperTrapdoorHalfBottom:
						return 24547
					}
				}
			}
		}
	}
	return 24499 // default state
}

type WaxedOxidizedCopperTrapdoorFacing string

const (
	WaxedOxidizedCopperTrapdoorFacingNorth WaxedOxidizedCopperTrapdoorFacing = "north"
	WaxedOxidizedCopperTrapdoorFacingSouth WaxedOxidizedCopperTrapdoorFacing = "south"
	WaxedOxidizedCopperTrapdoorFacingWest  WaxedOxidizedCopperTrapdoorFacing = "west"
	WaxedOxidizedCopperTrapdoorFacingEast  WaxedOxidizedCopperTrapdoorFacing = "east"
)

type WaxedOxidizedCopperTrapdoorHalf string

const (
	WaxedOxidizedCopperTrapdoorHalfTop    WaxedOxidizedCopperTrapdoorHalf = "top"
	WaxedOxidizedCopperTrapdoorHalfBottom WaxedOxidizedCopperTrapdoorHalf = "bottom"
)

type WaxedOxidizedCopperTrapdoor struct {
	Powered     bool
	Waterlogged bool
	Facing      WaxedOxidizedCopperTrapdoorFacing
	Half        WaxedOxidizedCopperTrapdoorHalf
	Open        bool
}

func (x WaxedOxidizedCopperTrapdoor) Id() uint16 {
	switch x.Half {
	case WaxedOxidizedCopperTrapdoorHalfTop:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24548
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24564
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24580
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24596
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24549
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24565
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24581
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24597
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24550
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24566
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24582
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24598
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24551
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24567
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24583
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24599
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24552
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24568
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24584
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24600
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24553
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24569
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24585
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24601
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24554
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24570
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24586
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24602
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24555
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24571
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24587
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24603
					}
				}
			}
		}
	case WaxedOxidizedCopperTrapdoorHalfBottom:
		switch x.Open {
		case true:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24556
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24572
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24588
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24604
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24557
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24573
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24589
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24605
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24558
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24574
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24590
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24606
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24559
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24575
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24591
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24607
					}
				}
			}
		case false:
			switch x.Powered {
			case true:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24560
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24576
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24592
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24608
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24561
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24577
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24593
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24609
					}
				}
			case false:
				switch x.Waterlogged {
				case true:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24562
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24578
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24594
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24610
					}
				case false:
					switch x.Facing {
					case WaxedOxidizedCopperTrapdoorFacingNorth:
						return 24563
					case WaxedOxidizedCopperTrapdoorFacingSouth:
						return 24579
					case WaxedOxidizedCopperTrapdoorFacingWest:
						return 24595
					case WaxedOxidizedCopperTrapdoorFacingEast:
						return 24611
					}
				}
			}
		}
	}
	return 24563 // default state
}

type WaxedWeatheredCopperTrapdoorFacing string

const (
	WaxedWeatheredCopperTrapdoorFacingNorth WaxedWeatheredCopperTrapdoorFacing = "north"
	WaxedWeatheredCopperTrapdoorFacingSouth WaxedWeatheredCopperTrapdoorFacing = "south"
	WaxedWeatheredCopperTrapdoorFacingWest  WaxedWeatheredCopperTrapdoorFacing = "west"
	WaxedWeatheredCopperTrapdoorFacingEast  WaxedWeatheredCopperTrapdoorFacing = "east"
)

type WaxedWeatheredCopperTrapdoorHalf string

const (
	WaxedWeatheredCopperTrapdoorHalfTop    WaxedWeatheredCopperTrapdoorHalf = "top"
	WaxedWeatheredCopperTrapdoorHalfBottom WaxedWeatheredCopperTrapdoorHalf = "bottom"
)

type WaxedWeatheredCopperTrapdoor struct {
	Waterlogged bool
	Facing      WaxedWeatheredCopperTrapdoorFacing
	Half        WaxedWeatheredCopperTrapdoorHalf
	Open        bool
	Powered     bool
}

func (x WaxedWeatheredCopperTrapdoor) Id() uint16 {
	switch x.Facing {
	case WaxedWeatheredCopperTrapdoorFacingNorth:
		switch x.Half {
		case WaxedWeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24612
					case false:
						return 24613
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24614
					case false:
						return 24615
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24616
					case false:
						return 24617
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24618
					case false:
						return 24619
					}
				}
			}
		case WaxedWeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24620
					case false:
						return 24621
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24622
					case false:
						return 24623
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24624
					case false:
						return 24625
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24626
					case false:
						return 24627
					}
				}
			}
		}
	case WaxedWeatheredCopperTrapdoorFacingSouth:
		switch x.Half {
		case WaxedWeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24628
					case false:
						return 24629
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24630
					case false:
						return 24631
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24632
					case false:
						return 24633
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24634
					case false:
						return 24635
					}
				}
			}
		case WaxedWeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24636
					case false:
						return 24637
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24638
					case false:
						return 24639
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24640
					case false:
						return 24641
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24642
					case false:
						return 24643
					}
				}
			}
		}
	case WaxedWeatheredCopperTrapdoorFacingWest:
		switch x.Half {
		case WaxedWeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24644
					case false:
						return 24645
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24646
					case false:
						return 24647
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24648
					case false:
						return 24649
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24650
					case false:
						return 24651
					}
				}
			}
		case WaxedWeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24652
					case false:
						return 24653
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24654
					case false:
						return 24655
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24656
					case false:
						return 24657
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24658
					case false:
						return 24659
					}
				}
			}
		}
	case WaxedWeatheredCopperTrapdoorFacingEast:
		switch x.Half {
		case WaxedWeatheredCopperTrapdoorHalfTop:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24660
					case false:
						return 24661
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24662
					case false:
						return 24663
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24664
					case false:
						return 24665
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24666
					case false:
						return 24667
					}
				}
			}
		case WaxedWeatheredCopperTrapdoorHalfBottom:
			switch x.Open {
			case true:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24668
					case false:
						return 24669
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24670
					case false:
						return 24671
					}
				}
			case false:
				switch x.Powered {
				case true:
					switch x.Waterlogged {
					case true:
						return 24672
					case false:
						return 24673
					}
				case false:
					switch x.Waterlogged {
					case true:
						return 24674
					case false:
						return 24675
					}
				}
			}
		}
	}
	return 24627 // default state
}

type CopperGrate struct {
	Waterlogged bool
}

func (x CopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24676
	case false:
		return 24677
	}
	return 24677 // default state
}

type ExposedCopperGrate struct {
	Waterlogged bool
}

func (x ExposedCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24678
	case false:
		return 24679
	}
	return 24679 // default state
}

type WeatheredCopperGrate struct {
	Waterlogged bool
}

func (x WeatheredCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24680
	case false:
		return 24681
	}
	return 24681 // default state
}

type OxidizedCopperGrate struct {
	Waterlogged bool
}

func (x OxidizedCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24682
	case false:
		return 24683
	}
	return 24683 // default state
}

type WaxedCopperGrate struct {
	Waterlogged bool
}

func (x WaxedCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24684
	case false:
		return 24685
	}
	return 24685 // default state
}

type WaxedExposedCopperGrate struct {
	Waterlogged bool
}

func (x WaxedExposedCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24686
	case false:
		return 24687
	}
	return 24687 // default state
}

type WaxedWeatheredCopperGrate struct {
	Waterlogged bool
}

func (x WaxedWeatheredCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24688
	case false:
		return 24689
	}
	return 24689 // default state
}

type WaxedOxidizedCopperGrate struct {
	Waterlogged bool
}

func (x WaxedOxidizedCopperGrate) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24690
	case false:
		return 24691
	}
	return 24691 // default state
}

type CopperBulb struct {
	Lit     bool
	Powered bool
}

func (x CopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24692
		case false:
			return 24693
		}
	case false:
		switch x.Powered {
		case true:
			return 24694
		case false:
			return 24695
		}
	}
	return 24695 // default state
}

type ExposedCopperBulb struct {
	Powered bool
	Lit     bool
}

func (x ExposedCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24696
		case false:
			return 24697
		}
	case false:
		switch x.Powered {
		case true:
			return 24698
		case false:
			return 24699
		}
	}
	return 24699 // default state
}

type WeatheredCopperBulb struct {
	Lit     bool
	Powered bool
}

func (x WeatheredCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24700
		case false:
			return 24701
		}
	case false:
		switch x.Powered {
		case true:
			return 24702
		case false:
			return 24703
		}
	}
	return 24703 // default state
}

type OxidizedCopperBulb struct {
	Lit     bool
	Powered bool
}

func (x OxidizedCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24704
		case false:
			return 24705
		}
	case false:
		switch x.Powered {
		case true:
			return 24706
		case false:
			return 24707
		}
	}
	return 24707 // default state
}

type WaxedCopperBulb struct {
	Powered bool
	Lit     bool
}

func (x WaxedCopperBulb) Id() uint16 {
	switch x.Powered {
	case true:
		switch x.Lit {
		case true:
			return 24708
		case false:
			return 24710
		}
	case false:
		switch x.Lit {
		case true:
			return 24709
		case false:
			return 24711
		}
	}
	return 24711 // default state
}

type WaxedExposedCopperBulb struct {
	Powered bool
	Lit     bool
}

func (x WaxedExposedCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24712
		case false:
			return 24713
		}
	case false:
		switch x.Powered {
		case true:
			return 24714
		case false:
			return 24715
		}
	}
	return 24715 // default state
}

type WaxedWeatheredCopperBulb struct {
	Lit     bool
	Powered bool
}

func (x WaxedWeatheredCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24716
		case false:
			return 24717
		}
	case false:
		switch x.Powered {
		case true:
			return 24718
		case false:
			return 24719
		}
	}
	return 24719 // default state
}

type WaxedOxidizedCopperBulb struct {
	Lit     bool
	Powered bool
}

func (x WaxedOxidizedCopperBulb) Id() uint16 {
	switch x.Lit {
	case true:
		switch x.Powered {
		case true:
			return 24720
		case false:
			return 24721
		}
	case false:
		switch x.Powered {
		case true:
			return 24722
		case false:
			return 24723
		}
	}
	return 24723 // default state
}

type LightningRodFacing string

const (
	LightningRodFacingNorth LightningRodFacing = "north"
	LightningRodFacingEast  LightningRodFacing = "east"
	LightningRodFacingSouth LightningRodFacing = "south"
	LightningRodFacingWest  LightningRodFacing = "west"
	LightningRodFacingUp    LightningRodFacing = "up"
	LightningRodFacingDown  LightningRodFacing = "down"
)

type LightningRod struct {
	Facing      LightningRodFacing
	Powered     bool
	Waterlogged bool
}

func (x LightningRod) Id() uint16 {
	switch x.Facing {
	case LightningRodFacingNorth:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24724
			case false:
				return 24725
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24726
			case false:
				return 24727
			}
		}
	case LightningRodFacingEast:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24728
			case false:
				return 24729
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24730
			case false:
				return 24731
			}
		}
	case LightningRodFacingSouth:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24732
			case false:
				return 24733
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24734
			case false:
				return 24735
			}
		}
	case LightningRodFacingWest:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24736
			case false:
				return 24737
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24738
			case false:
				return 24739
			}
		}
	case LightningRodFacingUp:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24740
			case false:
				return 24741
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24742
			case false:
				return 24743
			}
		}
	case LightningRodFacingDown:
		switch x.Powered {
		case true:
			switch x.Waterlogged {
			case true:
				return 24744
			case false:
				return 24745
			}
		case false:
			switch x.Waterlogged {
			case true:
				return 24746
			case false:
				return 24747
			}
		}
	}
	return 24743 // default state
}

type PointedDripstoneThickness string

const (
	PointedDripstoneThicknessTipMerge PointedDripstoneThickness = "tip_merge"
	PointedDripstoneThicknessTip      PointedDripstoneThickness = "tip"
	PointedDripstoneThicknessFrustum  PointedDripstoneThickness = "frustum"
	PointedDripstoneThicknessMiddle   PointedDripstoneThickness = "middle"
	PointedDripstoneThicknessBase     PointedDripstoneThickness = "base"
)

type PointedDripstoneVerticalDirection string

const (
	PointedDripstoneVerticalDirectionUp   PointedDripstoneVerticalDirection = "up"
	PointedDripstoneVerticalDirectionDown PointedDripstoneVerticalDirection = "down"
)

type PointedDripstone struct {
	Thickness         PointedDripstoneThickness
	VerticalDirection PointedDripstoneVerticalDirection
	Waterlogged       bool
}

func (x PointedDripstone) Id() uint16 {
	switch x.Thickness {
	case PointedDripstoneThicknessTipMerge:
		switch x.VerticalDirection {
		case PointedDripstoneVerticalDirectionUp:
			switch x.Waterlogged {
			case true:
				return 24748
			case false:
				return 24749
			}
		case PointedDripstoneVerticalDirectionDown:
			switch x.Waterlogged {
			case true:
				return 24750
			case false:
				return 24751
			}
		}
	case PointedDripstoneThicknessTip:
		switch x.VerticalDirection {
		case PointedDripstoneVerticalDirectionUp:
			switch x.Waterlogged {
			case true:
				return 24752
			case false:
				return 24753
			}
		case PointedDripstoneVerticalDirectionDown:
			switch x.Waterlogged {
			case true:
				return 24754
			case false:
				return 24755
			}
		}
	case PointedDripstoneThicknessFrustum:
		switch x.VerticalDirection {
		case PointedDripstoneVerticalDirectionUp:
			switch x.Waterlogged {
			case true:
				return 24756
			case false:
				return 24757
			}
		case PointedDripstoneVerticalDirectionDown:
			switch x.Waterlogged {
			case true:
				return 24758
			case false:
				return 24759
			}
		}
	case PointedDripstoneThicknessMiddle:
		switch x.VerticalDirection {
		case PointedDripstoneVerticalDirectionUp:
			switch x.Waterlogged {
			case true:
				return 24760
			case false:
				return 24761
			}
		case PointedDripstoneVerticalDirectionDown:
			switch x.Waterlogged {
			case true:
				return 24762
			case false:
				return 24763
			}
		}
	case PointedDripstoneThicknessBase:
		switch x.VerticalDirection {
		case PointedDripstoneVerticalDirectionUp:
			switch x.Waterlogged {
			case true:
				return 24764
			case false:
				return 24765
			}
		case PointedDripstoneVerticalDirectionDown:
			switch x.Waterlogged {
			case true:
				return 24766
			case false:
				return 24767
			}
		}
	}
	return 24753 // default state
}

type DripstoneBlock struct{}

func (x DripstoneBlock) Id() uint16 {
	return 24768
}

type CaveVines struct {
	// Valid values: 0, 1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 17, 18, 19, 20, 21, 22, 23, 24, 25
	Age     int
	Berries bool
}

func (x CaveVines) Id() uint16 {
	switch x.Age {
	case 0:
		switch x.Berries {
		case true:
			return 24769
		case false:
			return 24770
		}
	case 1:
		switch x.Berries {
		case true:
			return 24771
		case false:
			return 24772
		}
	case 2:
		switch x.Berries {
		case true:
			return 24773
		case false:
			return 24774
		}
	case 3:
		switch x.Berries {
		case true:
			return 24775
		case false:
			return 24776
		}
	case 4:
		switch x.Berries {
		case true:
			return 24777
		case false:
			return 24778
		}
	case 5:
		switch x.Berries {
		case true:
			return 24779
		case false:
			return 24780
		}
	case 6:
		switch x.Berries {
		case true:
			return 24781
		case false:
			return 24782
		}
	case 7:
		switch x.Berries {
		case true:
			return 24783
		case false:
			return 24784
		}
	case 8:
		switch x.Berries {
		case true:
			return 24785
		case false:
			return 24786
		}
	case 9:
		switch x.Berries {
		case true:
			return 24787
		case false:
			return 24788
		}
	case 10:
		switch x.Berries {
		case true:
			return 24789
		case false:
			return 24790
		}
	case 11:
		switch x.Berries {
		case true:
			return 24791
		case false:
			return 24792
		}
	case 12:
		switch x.Berries {
		case true:
			return 24793
		case false:
			return 24794
		}
	case 13:
		switch x.Berries {
		case true:
			return 24795
		case false:
			return 24796
		}
	case 14:
		switch x.Berries {
		case true:
			return 24797
		case false:
			return 24798
		}
	case 15:
		switch x.Berries {
		case true:
			return 24799
		case false:
			return 24800
		}
	case 16:
		switch x.Berries {
		case true:
			return 24801
		case false:
			return 24802
		}
	case 17:
		switch x.Berries {
		case true:
			return 24803
		case false:
			return 24804
		}
	case 18:
		switch x.Berries {
		case true:
			return 24805
		case false:
			return 24806
		}
	case 19:
		switch x.Berries {
		case true:
			return 24807
		case false:
			return 24808
		}
	case 20:
		switch x.Berries {
		case true:
			return 24809
		case false:
			return 24810
		}
	case 21:
		switch x.Berries {
		case true:
			return 24811
		case false:
			return 24812
		}
	case 22:
		switch x.Berries {
		case true:
			return 24813
		case false:
			return 24814
		}
	case 23:
		switch x.Berries {
		case true:
			return 24815
		case false:
			return 24816
		}
	case 24:
		switch x.Berries {
		case true:
			return 24817
		case false:
			return 24818
		}
	case 25:
		switch x.Berries {
		case true:
			return 24819
		case false:
			return 24820
		}
	}
	return 24770 // default state
}

type CaveVinesPlant struct {
	Berries bool
}

func (x CaveVinesPlant) Id() uint16 {
	switch x.Berries {
	case true:
		return 24821
	case false:
		return 24822
	}
	return 24822 // default state
}

type SporeBlossom struct{}

func (x SporeBlossom) Id() uint16 {
	return 24823
}

type Azalea struct{}

func (x Azalea) Id() uint16 {
	return 24824
}

type FloweringAzalea struct{}

func (x FloweringAzalea) Id() uint16 {
	return 24825
}

type MossCarpet struct{}

func (x MossCarpet) Id() uint16 {
	return 24826
}

type PinkPetalsFacing string

const (
	PinkPetalsFacingNorth PinkPetalsFacing = "north"
	PinkPetalsFacingSouth PinkPetalsFacing = "south"
	PinkPetalsFacingWest  PinkPetalsFacing = "west"
	PinkPetalsFacingEast  PinkPetalsFacing = "east"
)

type PinkPetals struct {
	Facing PinkPetalsFacing
	// Valid values: 1, 2, 3, 4
	FlowerAmount int
}

func (x PinkPetals) Id() uint16 {
	switch x.Facing {
	case PinkPetalsFacingNorth:
		switch x.FlowerAmount {
		case 1:
			return 24827
		case 2:
			return 24828
		case 3:
			return 24829
		case 4:
			return 24830
		}
	case PinkPetalsFacingSouth:
		switch x.FlowerAmount {
		case 1:
			return 24831
		case 2:
			return 24832
		case 3:
			return 24833
		case 4:
			return 24834
		}
	case PinkPetalsFacingWest:
		switch x.FlowerAmount {
		case 1:
			return 24835
		case 2:
			return 24836
		case 3:
			return 24837
		case 4:
			return 24838
		}
	case PinkPetalsFacingEast:
		switch x.FlowerAmount {
		case 1:
			return 24839
		case 2:
			return 24840
		case 3:
			return 24841
		case 4:
			return 24842
		}
	}
	return 24827 // default state
}

type MossBlock struct{}

func (x MossBlock) Id() uint16 {
	return 24843
}

type BigDripleafFacing string

const (
	BigDripleafFacingNorth BigDripleafFacing = "north"
	BigDripleafFacingSouth BigDripleafFacing = "south"
	BigDripleafFacingWest  BigDripleafFacing = "west"
	BigDripleafFacingEast  BigDripleafFacing = "east"
)

type BigDripleafTilt string

const (
	BigDripleafTiltNone     BigDripleafTilt = "none"
	BigDripleafTiltUnstable BigDripleafTilt = "unstable"
	BigDripleafTiltPartial  BigDripleafTilt = "partial"
	BigDripleafTiltFull     BigDripleafTilt = "full"
)

type BigDripleaf struct {
	Facing      BigDripleafFacing
	Tilt        BigDripleafTilt
	Waterlogged bool
}

func (x BigDripleaf) Id() uint16 {
	switch x.Tilt {
	case BigDripleafTiltNone:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24844
			case BigDripleafFacingSouth:
				return 24852
			case BigDripleafFacingWest:
				return 24860
			case BigDripleafFacingEast:
				return 24868
			}
		case false:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24845
			case BigDripleafFacingSouth:
				return 24853
			case BigDripleafFacingWest:
				return 24861
			case BigDripleafFacingEast:
				return 24869
			}
		}
	case BigDripleafTiltUnstable:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24846
			case BigDripleafFacingSouth:
				return 24854
			case BigDripleafFacingWest:
				return 24862
			case BigDripleafFacingEast:
				return 24870
			}
		case false:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24847
			case BigDripleafFacingSouth:
				return 24855
			case BigDripleafFacingWest:
				return 24863
			case BigDripleafFacingEast:
				return 24871
			}
		}
	case BigDripleafTiltPartial:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24848
			case BigDripleafFacingSouth:
				return 24856
			case BigDripleafFacingWest:
				return 24864
			case BigDripleafFacingEast:
				return 24872
			}
		case false:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24849
			case BigDripleafFacingSouth:
				return 24857
			case BigDripleafFacingWest:
				return 24865
			case BigDripleafFacingEast:
				return 24873
			}
		}
	case BigDripleafTiltFull:
		switch x.Waterlogged {
		case true:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24850
			case BigDripleafFacingSouth:
				return 24858
			case BigDripleafFacingWest:
				return 24866
			case BigDripleafFacingEast:
				return 24874
			}
		case false:
			switch x.Facing {
			case BigDripleafFacingNorth:
				return 24851
			case BigDripleafFacingSouth:
				return 24859
			case BigDripleafFacingWest:
				return 24867
			case BigDripleafFacingEast:
				return 24875
			}
		}
	}
	return 24845 // default state
}

type BigDripleafStemFacing string

const (
	BigDripleafStemFacingNorth BigDripleafStemFacing = "north"
	BigDripleafStemFacingSouth BigDripleafStemFacing = "south"
	BigDripleafStemFacingWest  BigDripleafStemFacing = "west"
	BigDripleafStemFacingEast  BigDripleafStemFacing = "east"
)

type BigDripleafStem struct {
	Facing      BigDripleafStemFacing
	Waterlogged bool
}

func (x BigDripleafStem) Id() uint16 {
	switch x.Facing {
	case BigDripleafStemFacingNorth:
		switch x.Waterlogged {
		case true:
			return 24876
		case false:
			return 24877
		}
	case BigDripleafStemFacingSouth:
		switch x.Waterlogged {
		case true:
			return 24878
		case false:
			return 24879
		}
	case BigDripleafStemFacingWest:
		switch x.Waterlogged {
		case true:
			return 24880
		case false:
			return 24881
		}
	case BigDripleafStemFacingEast:
		switch x.Waterlogged {
		case true:
			return 24882
		case false:
			return 24883
		}
	}
	return 24877 // default state
}

type SmallDripleafFacing string

const (
	SmallDripleafFacingNorth SmallDripleafFacing = "north"
	SmallDripleafFacingSouth SmallDripleafFacing = "south"
	SmallDripleafFacingWest  SmallDripleafFacing = "west"
	SmallDripleafFacingEast  SmallDripleafFacing = "east"
)

type SmallDripleafHalf string

const (
	SmallDripleafHalfUpper SmallDripleafHalf = "upper"
	SmallDripleafHalfLower SmallDripleafHalf = "lower"
)

type SmallDripleaf struct {
	Facing      SmallDripleafFacing
	Half        SmallDripleafHalf
	Waterlogged bool
}

func (x SmallDripleaf) Id() uint16 {
	switch x.Facing {
	case SmallDripleafFacingNorth:
		switch x.Half {
		case SmallDripleafHalfUpper:
			switch x.Waterlogged {
			case true:
				return 24884
			case false:
				return 24885
			}
		case SmallDripleafHalfLower:
			switch x.Waterlogged {
			case true:
				return 24886
			case false:
				return 24887
			}
		}
	case SmallDripleafFacingSouth:
		switch x.Half {
		case SmallDripleafHalfUpper:
			switch x.Waterlogged {
			case true:
				return 24888
			case false:
				return 24889
			}
		case SmallDripleafHalfLower:
			switch x.Waterlogged {
			case true:
				return 24890
			case false:
				return 24891
			}
		}
	case SmallDripleafFacingWest:
		switch x.Half {
		case SmallDripleafHalfUpper:
			switch x.Waterlogged {
			case true:
				return 24892
			case false:
				return 24893
			}
		case SmallDripleafHalfLower:
			switch x.Waterlogged {
			case true:
				return 24894
			case false:
				return 24895
			}
		}
	case SmallDripleafFacingEast:
		switch x.Half {
		case SmallDripleafHalfUpper:
			switch x.Waterlogged {
			case true:
				return 24896
			case false:
				return 24897
			}
		case SmallDripleafHalfLower:
			switch x.Waterlogged {
			case true:
				return 24898
			case false:
				return 24899
			}
		}
	}
	return 24887 // default state
}

type HangingRoots struct {
	Waterlogged bool
}

func (x HangingRoots) Id() uint16 {
	switch x.Waterlogged {
	case true:
		return 24900
	case false:
		return 24901
	}
	return 24901 // default state
}

type RootedDirt struct{}

func (x RootedDirt) Id() uint16 {
	return 24902
}

type Mud struct{}

func (x Mud) Id() uint16 {
	return 24903
}

type DeepslateAxis string

const (
	DeepslateAxisX DeepslateAxis = "x"
	DeepslateAxisY DeepslateAxis = "y"
	DeepslateAxisZ DeepslateAxis = "z"
)

type Deepslate struct {
	Axis DeepslateAxis
}

func (x Deepslate) Id() uint16 {
	switch x.Axis {
	case DeepslateAxisX:
		return 24904
	case DeepslateAxisY:
		return 24905
	case DeepslateAxisZ:
		return 24906
	}
	return 24905 // default state
}

type CobbledDeepslate struct{}

func (x CobbledDeepslate) Id() uint16 {
	return 24907
}

type CobbledDeepslateStairsFacing string

const (
	CobbledDeepslateStairsFacingNorth CobbledDeepslateStairsFacing = "north"
	CobbledDeepslateStairsFacingSouth CobbledDeepslateStairsFacing = "south"
	CobbledDeepslateStairsFacingWest  CobbledDeepslateStairsFacing = "west"
	CobbledDeepslateStairsFacingEast  CobbledDeepslateStairsFacing = "east"
)

type CobbledDeepslateStairsHalf string

const (
	CobbledDeepslateStairsHalfTop    CobbledDeepslateStairsHalf = "top"
	CobbledDeepslateStairsHalfBottom CobbledDeepslateStairsHalf = "bottom"
)

type CobbledDeepslateStairsShape string

const (
	CobbledDeepslateStairsShapeStraight   CobbledDeepslateStairsShape = "straight"
	CobbledDeepslateStairsShapeInnerLeft  CobbledDeepslateStairsShape = "inner_left"
	CobbledDeepslateStairsShapeInnerRight CobbledDeepslateStairsShape = "inner_right"
	CobbledDeepslateStairsShapeOuterLeft  CobbledDeepslateStairsShape = "outer_left"
	CobbledDeepslateStairsShapeOuterRight CobbledDeepslateStairsShape = "outer_right"
)

type CobbledDeepslateStairs struct {
	Waterlogged bool
	Facing      CobbledDeepslateStairsFacing
	Half        CobbledDeepslateStairsHalf
	Shape       CobbledDeepslateStairsShape
}

func (x CobbledDeepslateStairs) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Facing {
		case CobbledDeepslateStairsFacingNorth:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24908
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24910
				case CobbledDeepslateStairsShapeInnerRight:
					return 24912
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24914
				case CobbledDeepslateStairsShapeOuterRight:
					return 24916
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24918
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24920
				case CobbledDeepslateStairsShapeInnerRight:
					return 24922
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24924
				case CobbledDeepslateStairsShapeOuterRight:
					return 24926
				}
			}
		case CobbledDeepslateStairsFacingSouth:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24928
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24930
				case CobbledDeepslateStairsShapeInnerRight:
					return 24932
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24934
				case CobbledDeepslateStairsShapeOuterRight:
					return 24936
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24938
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24940
				case CobbledDeepslateStairsShapeInnerRight:
					return 24942
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24944
				case CobbledDeepslateStairsShapeOuterRight:
					return 24946
				}
			}
		case CobbledDeepslateStairsFacingWest:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24948
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24950
				case CobbledDeepslateStairsShapeInnerRight:
					return 24952
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24954
				case CobbledDeepslateStairsShapeOuterRight:
					return 24956
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24958
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24960
				case CobbledDeepslateStairsShapeInnerRight:
					return 24962
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24964
				case CobbledDeepslateStairsShapeOuterRight:
					return 24966
				}
			}
		case CobbledDeepslateStairsFacingEast:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24968
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24970
				case CobbledDeepslateStairsShapeInnerRight:
					return 24972
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24974
				case CobbledDeepslateStairsShapeOuterRight:
					return 24976
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24978
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24980
				case CobbledDeepslateStairsShapeInnerRight:
					return 24982
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24984
				case CobbledDeepslateStairsShapeOuterRight:
					return 24986
				}
			}
		}
	case false:
		switch x.Facing {
		case CobbledDeepslateStairsFacingNorth:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24909
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24911
				case CobbledDeepslateStairsShapeInnerRight:
					return 24913
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24915
				case CobbledDeepslateStairsShapeOuterRight:
					return 24917
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24919
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24921
				case CobbledDeepslateStairsShapeInnerRight:
					return 24923
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24925
				case CobbledDeepslateStairsShapeOuterRight:
					return 24927
				}
			}
		case CobbledDeepslateStairsFacingSouth:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24929
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24931
				case CobbledDeepslateStairsShapeInnerRight:
					return 24933
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24935
				case CobbledDeepslateStairsShapeOuterRight:
					return 24937
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24939
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24941
				case CobbledDeepslateStairsShapeInnerRight:
					return 24943
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24945
				case CobbledDeepslateStairsShapeOuterRight:
					return 24947
				}
			}
		case CobbledDeepslateStairsFacingWest:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24949
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24951
				case CobbledDeepslateStairsShapeInnerRight:
					return 24953
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24955
				case CobbledDeepslateStairsShapeOuterRight:
					return 24957
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24959
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24961
				case CobbledDeepslateStairsShapeInnerRight:
					return 24963
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24965
				case CobbledDeepslateStairsShapeOuterRight:
					return 24967
				}
			}
		case CobbledDeepslateStairsFacingEast:
			switch x.Half {
			case CobbledDeepslateStairsHalfTop:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24969
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24971
				case CobbledDeepslateStairsShapeInnerRight:
					return 24973
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24975
				case CobbledDeepslateStairsShapeOuterRight:
					return 24977
				}
			case CobbledDeepslateStairsHalfBottom:
				switch x.Shape {
				case CobbledDeepslateStairsShapeStraight:
					return 24979
				case CobbledDeepslateStairsShapeInnerLeft:
					return 24981
				case CobbledDeepslateStairsShapeInnerRight:
					return 24983
				case CobbledDeepslateStairsShapeOuterLeft:
					return 24985
				case CobbledDeepslateStairsShapeOuterRight:
					return 24987
				}
			}
		}
	}
	return 24919 // default state
}

type CobbledDeepslateSlabType string

const (
	CobbledDeepslateSlabTypeTop    CobbledDeepslateSlabType = "top"
	CobbledDeepslateSlabTypeBottom CobbledDeepslateSlabType = "bottom"
	CobbledDeepslateSlabTypeDouble CobbledDeepslateSlabType = "double"
)

type CobbledDeepslateSlab struct {
	Waterlogged bool
	Type        CobbledDeepslateSlabType
}

func (x CobbledDeepslateSlab) Id() uint16 {
	switch x.Waterlogged {
	case true:
		switch x.Type {
		case CobbledDeepslateSlabTypeTop:
			return 24988
		case CobbledDeepslateSlabTypeBottom:
			return 24990
		case CobbledDeepslateSlabTypeDouble:
			return 24992
		}
	case false:
		switch x.Type {
		case CobbledDeepslateSlabTypeTop:
			return 24989
		case CobbledDeepslateSlabTypeBottom:
			return 24991
		case CobbledDeepslateSlabTypeDouble:
			return 24993
		}
	}
	return 24991 // default state
}

type CobbledDeepslateWallWest string

const (
	CobbledDeepslateWallWestNone CobbledDeepslateWallWest = "none"
	CobbledDeepslateWallWestLow  CobbledDeepslateWallWest = "low"
	CobbledDeepslateWallWestTall CobbledDeepslateWallWest = "tall"
)

type CobbledDeepslateWallEast string

const (
	CobbledDeepslateWallEastNone CobbledDeepslateWallEast = "none"
	CobbledDeepslateWallEastLow  CobbledDeepslateWallEast = "low"
	CobbledDeepslateWallEastTall CobbledDeepslateWallEast = "tall"
)

type CobbledDeepslateWallNorth string

const (
	CobbledDeepslateWallNorthNone CobbledDeepslateWallNorth = "none"
	CobbledDeepslateWallNorthLow  CobbledDeepslateWallNorth = "low"
	CobbledDeepslateWallNorthTall CobbledDeepslateWallNorth = "tall"
)

type CobbledDeepslateWallSouth string

const (
	CobbledDeepslateWallSouthNone CobbledDeepslateWallSouth = "none"
	CobbledDeepslateWallSouthLow  CobbledDeepslateWallSouth = "low"
	CobbledDeepslateWallSouthTall CobbledDeepslateWallSouth = "tall"
)

type CobbledDeepslateWall struct {
	Up          bool
	Waterlogged bool
	West        CobbledDeepslateWallWest
	East        CobbledDeepslateWallEast
	North       CobbledDeepslateWallNorth
	South       CobbledDeepslateWallSouth
}

func (x CobbledDeepslateWall) Id() uint16 {
	switch x.West {
	case CobbledDeepslateWallWestNone:
		switch x.East {
		case CobbledDeepslateWallEastNone:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 24994
						case false:
							return 24997
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25000
						case false:
							return 25003
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25006
						case false:
							return 25009
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25012
						case false:
							return 25015
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25018
						case false:
							return 25021
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25024
						case false:
							return 25027
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25030
						case false:
							return 25033
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25036
						case false:
							return 25039
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25042
						case false:
							return 25045
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25048
						case false:
							return 25051
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25054
						case false:
							return 25057
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25060
						case false:
							return 25063
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25066
						case false:
							return 25069
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25072
						case false:
							return 25075
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25078
						case false:
							return 25081
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25084
						case false:
							return 25087
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25090
						case false:
							return 25093
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25096
						case false:
							return 25099
						}
					}
				}
			}
		case CobbledDeepslateWallEastLow:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25102
						case false:
							return 25105
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25108
						case false:
							return 25111
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25114
						case false:
							return 25117
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25120
						case false:
							return 25123
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25126
						case false:
							return 25129
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25132
						case false:
							return 25135
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25138
						case false:
							return 25141
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25144
						case false:
							return 25147
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25150
						case false:
							return 25153
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25156
						case false:
							return 25159
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25162
						case false:
							return 25165
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25168
						case false:
							return 25171
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25174
						case false:
							return 25177
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25180
						case false:
							return 25183
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25186
						case false:
							return 25189
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25192
						case false:
							return 25195
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25198
						case false:
							return 25201
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25204
						case false:
							return 25207
						}
					}
				}
			}
		case CobbledDeepslateWallEastTall:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25210
						case false:
							return 25213
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25216
						case false:
							return 25219
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25222
						case false:
							return 25225
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25228
						case false:
							return 25231
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25234
						case false:
							return 25237
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25240
						case false:
							return 25243
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25246
						case false:
							return 25249
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25252
						case false:
							return 25255
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25258
						case false:
							return 25261
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25264
						case false:
							return 25267
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25270
						case false:
							return 25273
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25276
						case false:
							return 25279
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25282
						case false:
							return 25285
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25288
						case false:
							return 25291
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25294
						case false:
							return 25297
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25300
						case false:
							return 25303
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25306
						case false:
							return 25309
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25312
						case false:
							return 25315
						}
					}
				}
			}
		}
	case CobbledDeepslateWallWestLow:
		switch x.East {
		case CobbledDeepslateWallEastNone:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 24995
						case false:
							return 24998
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25001
						case false:
							return 25004
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25007
						case false:
							return 25010
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25013
						case false:
							return 25016
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25019
						case false:
							return 25022
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25025
						case false:
							return 25028
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25031
						case false:
							return 25034
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25037
						case false:
							return 25040
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25043
						case false:
							return 25046
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25049
						case false:
							return 25052
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25055
						case false:
							return 25058
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25061
						case false:
							return 25064
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25067
						case false:
							return 25070
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25073
						case false:
							return 25076
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25079
						case false:
							return 25082
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25085
						case false:
							return 25088
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25091
						case false:
							return 25094
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25097
						case false:
							return 25100
						}
					}
				}
			}
		case CobbledDeepslateWallEastLow:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25103
						case false:
							return 25106
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25109
						case false:
							return 25112
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25115
						case false:
							return 25118
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25121
						case false:
							return 25124
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25127
						case false:
							return 25130
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25133
						case false:
							return 25136
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25139
						case false:
							return 25142
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25145
						case false:
							return 25148
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25151
						case false:
							return 25154
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25157
						case false:
							return 25160
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25163
						case false:
							return 25166
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25169
						case false:
							return 25172
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25175
						case false:
							return 25178
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25181
						case false:
							return 25184
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25187
						case false:
							return 25190
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25193
						case false:
							return 25196
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25199
						case false:
							return 25202
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25205
						case false:
							return 25208
						}
					}
				}
			}
		case CobbledDeepslateWallEastTall:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25211
						case false:
							return 25214
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25217
						case false:
							return 25220
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25223
						case false:
							return 25226
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25229
						case false:
							return 25232
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25235
						case false:
							return 25238
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25241
						case false:
							return 25244
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25247
						case false:
							return 25250
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25253
						case false:
							return 25256
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25259
						case false:
							return 25262
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25265
						case false:
							return 25268
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25271
						case false:
							return 25274
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25277
						case false:
							return 25280
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25283
						case false:
							return 25286
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25289
						case false:
							return 25292
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25295
						case false:
							return 25298
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25301
						case false:
							return 25304
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25307
						case false:
							return 25310
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25313
						case false:
							return 25316
						}
					}
				}
			}
		}
	case CobbledDeepslateWallWestTall:
		switch x.East {
		case CobbledDeepslateWallEastNone:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 24996
						case false:
							return 24999
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25002
						case false:
							return 25005
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25008
						case false:
							return 25011
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25014
						case false:
							return 25017
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25020
						case false:
							return 25023
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25026
						case false:
							return 25029
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25032
						case false:
							return 25035
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25038
						case false:
							return 25041
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25044
						case false:
							return 25047
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25050
						case false:
							return 25053
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25056
						case false:
							return 25059
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25062
						case false:
							return 25065
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25068
						case false:
							return 25071
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25074
						case false:
							return 25077
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25080
						case false:
							return 25083
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25086
						case false:
							return 25089
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25092
						case false:
							return 25095
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25098
						case false:
							return 25101
						}
					}
				}
			}
		case CobbledDeepslateWallEastLow:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25104
						case false:
							return 25107
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25110
						case false:
							return 25113
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25116
						case false:
							return 25119
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25122
						case false:
							return 25125
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25128
						case false:
							return 25131
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25134
						case false:
							return 25137
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25140
						case false:
							return 25143
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25146
						case false:
							return 25149
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25152
						case false:
							return 25155
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25158
						case false:
							return 25161
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25164
						case false:
							return 25167
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25170
						case false:
							return 25173
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25176
						case false:
							return 25179
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25182
						case false:
							return 25185
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25188
						case false:
							return 25191
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25194
						case false:
							return 25197
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25200
						case false:
							return 25203
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25206
						case false:
							return 25209
						}
					}
				}
			}
		case CobbledDeepslateWallEastTall:
			switch x.North {
			case CobbledDeepslateWallNorthNone:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25212
						case false:
							return 25215
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25218
						case false:
							return 25221
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25224
						case false:
							return 25227
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25230
						case false:
							return 25233
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25236
						case false:
							return 25239
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25242
						case false:
							return 25245
						}
					}
				}
			case CobbledDeepslateWallNorthLow:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25248
						case false:
							return 25251
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25254
						case false:
							return 25257
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25260
						case false:
							return 25263
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25266
						case false:
							return 25269
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25272
						case false:
							return 25275
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25278
						case false:
							return 25281
						}
					}
				}
			case CobbledDeepslateWallNorthTall:
				switch x.South {
				case CobbledDeepslateWallSouthNone:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25284
						case false:
							return 25287
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25290
						case false:
							return 25293
						}
					}
				case CobbledDeepslateWallSouthLow:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25296
						case false:
							return 25299
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25302
						case false:
							return 25305
						}
					}
				case CobbledDeepslateWallSouthTall:
					switch x.Up {
					case true:
						switch x.Waterlogged {
						case true:
							return 25308
						case false:
							return 25311
						}
					case false:
						switch x.Waterlogged {
						case true:
							return 25314
						case false:
							return 25317
						}
					}
				}
			}
		}
	}
	return 24997 // default state
}

type PolishedDeepslate struct{}

func (x PolishedDeepslate) Id() uint16 {
	return 25318
}

type PolishedDeepslateStairsFacing string

const (
	PolishedDeepslateStairsFacingNorth PolishedDeepslateStairsFacing = "north"
	PolishedDeepslateStairsFacingSouth PolishedDeepslateStairsFacing = "south"
	PolishedDeepslateStairsFacingWest  PolishedDeepslateStairsFacing = "west"
	PolishedDeepslateStairsFacingEast  PolishedDeepslateStairsFacing = "east"
)

type PolishedDeepslateStairsHalf string

const (
	PolishedDeepslateStairsHalfTop    PolishedDeepslateStairsHalf = "top"
	PolishedDeepslateStairsHalfBottom PolishedDeepslateStairsHalf = "bottom"
)

type PolishedDeepslateStairsShape string

const (
	PolishedDeepslateStairsShapeStraight   PolishedDeepslateStairsShape = "straight"
	PolishedDeepslateStairsShapeInnerLeft  PolishedDeepslateStairsShape = "inner_left"
	PolishedDeepslateStairsShapeInnerRight PolishedDeepslateStairsShape = "inner_right"
	PolishedDeepslateStairsShapeOuterLeft  PolishedDeepslateStairsShape = "outer_left"
	PolishedDeepslateStairsShapeOuterRight PolishedDeepslateStairsShape = "outer_right"
)

type PolishedDeepslateStairs struct {
	Waterlogged bool
	Facing      PolishedDeepslateStairsFacing
	Half        PolishedDeepslateStairsHalf
	Shape       PolishedDeepslateStairsShape
}

func (x PolishedDeepslateStairs) Id() uint16 {
	switch x.Facing {
	case PolishedDeepslateStairsFacingNorth:
		switch x.Half {
		case PolishedDeepslateStairsHalfTop:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25319
				case false:
					return 25320
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25321
				case false:
					return 25322
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25323
				case false:
					return 25324
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25325
				case false:
					return 25326
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25327
				case false:
					return 25328
				}
			}
		case PolishedDeepslateStairsHalfBottom:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25329
				case false:
					return 25330
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25331
				case false:
					return 25332
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25333
				case false:
					return 25334
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25335
				case false:
					return 25336
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25337
				case false:
					return 25338
				}
			}
		}
	case PolishedDeepslateStairsFacingSouth:
		switch x.Half {
		case PolishedDeepslateStairsHalfTop:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25339
				case false:
					return 25340
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25341
				case false:
					return 25342
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25343
				case false:
					return 25344
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25345
				case false:
					return 25346
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25347
				case false:
					return 25348
				}
			}
		case PolishedDeepslateStairsHalfBottom:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25349
				case false:
					return 25350
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25351
				case false:
					return 25352
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25353
				case false:
					return 25354
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25355
				case false:
					return 25356
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25357
				case false:
					return 25358
				}
			}
		}
	case PolishedDeepslateStairsFacingWest:
		switch x.Half {
		case PolishedDeepslateStairsHalfTop:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25359
				case false:
					return 25360
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25361
				case false:
					return 25362
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25363
				case false:
					return 25364
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25365
				case false:
					return 25366
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25367
				case false:
					return 25368
				}
			}
		case PolishedDeepslateStairsHalfBottom:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25369
				case false:
					return 25370
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25371
				case false:
					return 25372
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25373
				case false:
					return 25374
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25375
				case false:
					return 25376
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25377
				case false:
					return 25378
				}
			}
		}
	case PolishedDeepslateStairsFacingEast:
		switch x.Half {
		case PolishedDeepslateStairsHalfTop:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25379
				case false:
					return 25380
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25381
				case false:
					return 25382
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25383
				case false:
					return 25384
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25385
				case false:
					return 25386
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25387
				case false:
					return 25388
				}
			}
		case PolishedDeepslateStairsHalfBottom:
			switch x.Shape {
			case PolishedDeepslateStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25389
				case false:
					return 25390
				}
			case PolishedDeepslateStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25391
				case false:
					return 25392
				}
			case PolishedDeepslateStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25393
				case false:
					return 25394
				}
			case PolishedDeepslateStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25395
				case false:
					return 25396
				}
			case PolishedDeepslateStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25397
				case false:
					return 25398
				}
			}
		}
	}
	return 25330 // default state
}

type PolishedDeepslateSlabType string

const (
	PolishedDeepslateSlabTypeTop    PolishedDeepslateSlabType = "top"
	PolishedDeepslateSlabTypeBottom PolishedDeepslateSlabType = "bottom"
	PolishedDeepslateSlabTypeDouble PolishedDeepslateSlabType = "double"
)

type PolishedDeepslateSlab struct {
	Type        PolishedDeepslateSlabType
	Waterlogged bool
}

func (x PolishedDeepslateSlab) Id() uint16 {
	switch x.Type {
	case PolishedDeepslateSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 25399
		case false:
			return 25400
		}
	case PolishedDeepslateSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 25401
		case false:
			return 25402
		}
	case PolishedDeepslateSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 25403
		case false:
			return 25404
		}
	}
	return 25402 // default state
}

type PolishedDeepslateWallWest string

const (
	PolishedDeepslateWallWestNone PolishedDeepslateWallWest = "none"
	PolishedDeepslateWallWestLow  PolishedDeepslateWallWest = "low"
	PolishedDeepslateWallWestTall PolishedDeepslateWallWest = "tall"
)

type PolishedDeepslateWallEast string

const (
	PolishedDeepslateWallEastNone PolishedDeepslateWallEast = "none"
	PolishedDeepslateWallEastLow  PolishedDeepslateWallEast = "low"
	PolishedDeepslateWallEastTall PolishedDeepslateWallEast = "tall"
)

type PolishedDeepslateWallNorth string

const (
	PolishedDeepslateWallNorthNone PolishedDeepslateWallNorth = "none"
	PolishedDeepslateWallNorthLow  PolishedDeepslateWallNorth = "low"
	PolishedDeepslateWallNorthTall PolishedDeepslateWallNorth = "tall"
)

type PolishedDeepslateWallSouth string

const (
	PolishedDeepslateWallSouthNone PolishedDeepslateWallSouth = "none"
	PolishedDeepslateWallSouthLow  PolishedDeepslateWallSouth = "low"
	PolishedDeepslateWallSouthTall PolishedDeepslateWallSouth = "tall"
)

type PolishedDeepslateWall struct {
	Up          bool
	Waterlogged bool
	West        PolishedDeepslateWallWest
	East        PolishedDeepslateWallEast
	North       PolishedDeepslateWallNorth
	South       PolishedDeepslateWallSouth
}

func (x PolishedDeepslateWall) Id() uint16 {
	switch x.East {
	case PolishedDeepslateWallEastNone:
		switch x.North {
		case PolishedDeepslateWallNorthNone:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25405
						case PolishedDeepslateWallWestLow:
							return 25406
						case PolishedDeepslateWallWestTall:
							return 25407
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25408
						case PolishedDeepslateWallWestLow:
							return 25409
						case PolishedDeepslateWallWestTall:
							return 25410
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25411
						case PolishedDeepslateWallWestLow:
							return 25412
						case PolishedDeepslateWallWestTall:
							return 25413
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25414
						case PolishedDeepslateWallWestLow:
							return 25415
						case PolishedDeepslateWallWestTall:
							return 25416
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25417
						case PolishedDeepslateWallWestLow:
							return 25418
						case PolishedDeepslateWallWestTall:
							return 25419
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25420
						case PolishedDeepslateWallWestLow:
							return 25421
						case PolishedDeepslateWallWestTall:
							return 25422
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25423
						case PolishedDeepslateWallWestLow:
							return 25424
						case PolishedDeepslateWallWestTall:
							return 25425
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25426
						case PolishedDeepslateWallWestLow:
							return 25427
						case PolishedDeepslateWallWestTall:
							return 25428
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25429
						case PolishedDeepslateWallWestLow:
							return 25430
						case PolishedDeepslateWallWestTall:
							return 25431
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25432
						case PolishedDeepslateWallWestLow:
							return 25433
						case PolishedDeepslateWallWestTall:
							return 25434
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25435
						case PolishedDeepslateWallWestLow:
							return 25436
						case PolishedDeepslateWallWestTall:
							return 25437
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25438
						case PolishedDeepslateWallWestLow:
							return 25439
						case PolishedDeepslateWallWestTall:
							return 25440
						}
					}
				}
			}
		case PolishedDeepslateWallNorthLow:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25441
						case PolishedDeepslateWallWestLow:
							return 25442
						case PolishedDeepslateWallWestTall:
							return 25443
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25444
						case PolishedDeepslateWallWestLow:
							return 25445
						case PolishedDeepslateWallWestTall:
							return 25446
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25447
						case PolishedDeepslateWallWestLow:
							return 25448
						case PolishedDeepslateWallWestTall:
							return 25449
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25450
						case PolishedDeepslateWallWestLow:
							return 25451
						case PolishedDeepslateWallWestTall:
							return 25452
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25453
						case PolishedDeepslateWallWestLow:
							return 25454
						case PolishedDeepslateWallWestTall:
							return 25455
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25456
						case PolishedDeepslateWallWestLow:
							return 25457
						case PolishedDeepslateWallWestTall:
							return 25458
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25459
						case PolishedDeepslateWallWestLow:
							return 25460
						case PolishedDeepslateWallWestTall:
							return 25461
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25462
						case PolishedDeepslateWallWestLow:
							return 25463
						case PolishedDeepslateWallWestTall:
							return 25464
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25465
						case PolishedDeepslateWallWestLow:
							return 25466
						case PolishedDeepslateWallWestTall:
							return 25467
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25468
						case PolishedDeepslateWallWestLow:
							return 25469
						case PolishedDeepslateWallWestTall:
							return 25470
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25471
						case PolishedDeepslateWallWestLow:
							return 25472
						case PolishedDeepslateWallWestTall:
							return 25473
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25474
						case PolishedDeepslateWallWestLow:
							return 25475
						case PolishedDeepslateWallWestTall:
							return 25476
						}
					}
				}
			}
		case PolishedDeepslateWallNorthTall:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25477
						case PolishedDeepslateWallWestLow:
							return 25478
						case PolishedDeepslateWallWestTall:
							return 25479
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25480
						case PolishedDeepslateWallWestLow:
							return 25481
						case PolishedDeepslateWallWestTall:
							return 25482
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25483
						case PolishedDeepslateWallWestLow:
							return 25484
						case PolishedDeepslateWallWestTall:
							return 25485
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25486
						case PolishedDeepslateWallWestLow:
							return 25487
						case PolishedDeepslateWallWestTall:
							return 25488
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25489
						case PolishedDeepslateWallWestLow:
							return 25490
						case PolishedDeepslateWallWestTall:
							return 25491
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25492
						case PolishedDeepslateWallWestLow:
							return 25493
						case PolishedDeepslateWallWestTall:
							return 25494
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25495
						case PolishedDeepslateWallWestLow:
							return 25496
						case PolishedDeepslateWallWestTall:
							return 25497
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25498
						case PolishedDeepslateWallWestLow:
							return 25499
						case PolishedDeepslateWallWestTall:
							return 25500
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25501
						case PolishedDeepslateWallWestLow:
							return 25502
						case PolishedDeepslateWallWestTall:
							return 25503
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25504
						case PolishedDeepslateWallWestLow:
							return 25505
						case PolishedDeepslateWallWestTall:
							return 25506
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25507
						case PolishedDeepslateWallWestLow:
							return 25508
						case PolishedDeepslateWallWestTall:
							return 25509
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25510
						case PolishedDeepslateWallWestLow:
							return 25511
						case PolishedDeepslateWallWestTall:
							return 25512
						}
					}
				}
			}
		}
	case PolishedDeepslateWallEastLow:
		switch x.North {
		case PolishedDeepslateWallNorthNone:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25513
						case PolishedDeepslateWallWestLow:
							return 25514
						case PolishedDeepslateWallWestTall:
							return 25515
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25516
						case PolishedDeepslateWallWestLow:
							return 25517
						case PolishedDeepslateWallWestTall:
							return 25518
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25519
						case PolishedDeepslateWallWestLow:
							return 25520
						case PolishedDeepslateWallWestTall:
							return 25521
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25522
						case PolishedDeepslateWallWestLow:
							return 25523
						case PolishedDeepslateWallWestTall:
							return 25524
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25525
						case PolishedDeepslateWallWestLow:
							return 25526
						case PolishedDeepslateWallWestTall:
							return 25527
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25528
						case PolishedDeepslateWallWestLow:
							return 25529
						case PolishedDeepslateWallWestTall:
							return 25530
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25531
						case PolishedDeepslateWallWestLow:
							return 25532
						case PolishedDeepslateWallWestTall:
							return 25533
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25534
						case PolishedDeepslateWallWestLow:
							return 25535
						case PolishedDeepslateWallWestTall:
							return 25536
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25537
						case PolishedDeepslateWallWestLow:
							return 25538
						case PolishedDeepslateWallWestTall:
							return 25539
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25540
						case PolishedDeepslateWallWestLow:
							return 25541
						case PolishedDeepslateWallWestTall:
							return 25542
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25543
						case PolishedDeepslateWallWestLow:
							return 25544
						case PolishedDeepslateWallWestTall:
							return 25545
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25546
						case PolishedDeepslateWallWestLow:
							return 25547
						case PolishedDeepslateWallWestTall:
							return 25548
						}
					}
				}
			}
		case PolishedDeepslateWallNorthLow:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25549
						case PolishedDeepslateWallWestLow:
							return 25550
						case PolishedDeepslateWallWestTall:
							return 25551
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25552
						case PolishedDeepslateWallWestLow:
							return 25553
						case PolishedDeepslateWallWestTall:
							return 25554
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25555
						case PolishedDeepslateWallWestLow:
							return 25556
						case PolishedDeepslateWallWestTall:
							return 25557
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25558
						case PolishedDeepslateWallWestLow:
							return 25559
						case PolishedDeepslateWallWestTall:
							return 25560
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25561
						case PolishedDeepslateWallWestLow:
							return 25562
						case PolishedDeepslateWallWestTall:
							return 25563
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25564
						case PolishedDeepslateWallWestLow:
							return 25565
						case PolishedDeepslateWallWestTall:
							return 25566
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25567
						case PolishedDeepslateWallWestLow:
							return 25568
						case PolishedDeepslateWallWestTall:
							return 25569
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25570
						case PolishedDeepslateWallWestLow:
							return 25571
						case PolishedDeepslateWallWestTall:
							return 25572
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25573
						case PolishedDeepslateWallWestLow:
							return 25574
						case PolishedDeepslateWallWestTall:
							return 25575
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25576
						case PolishedDeepslateWallWestLow:
							return 25577
						case PolishedDeepslateWallWestTall:
							return 25578
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25579
						case PolishedDeepslateWallWestLow:
							return 25580
						case PolishedDeepslateWallWestTall:
							return 25581
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25582
						case PolishedDeepslateWallWestLow:
							return 25583
						case PolishedDeepslateWallWestTall:
							return 25584
						}
					}
				}
			}
		case PolishedDeepslateWallNorthTall:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25585
						case PolishedDeepslateWallWestLow:
							return 25586
						case PolishedDeepslateWallWestTall:
							return 25587
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25588
						case PolishedDeepslateWallWestLow:
							return 25589
						case PolishedDeepslateWallWestTall:
							return 25590
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25591
						case PolishedDeepslateWallWestLow:
							return 25592
						case PolishedDeepslateWallWestTall:
							return 25593
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25594
						case PolishedDeepslateWallWestLow:
							return 25595
						case PolishedDeepslateWallWestTall:
							return 25596
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25597
						case PolishedDeepslateWallWestLow:
							return 25598
						case PolishedDeepslateWallWestTall:
							return 25599
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25600
						case PolishedDeepslateWallWestLow:
							return 25601
						case PolishedDeepslateWallWestTall:
							return 25602
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25603
						case PolishedDeepslateWallWestLow:
							return 25604
						case PolishedDeepslateWallWestTall:
							return 25605
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25606
						case PolishedDeepslateWallWestLow:
							return 25607
						case PolishedDeepslateWallWestTall:
							return 25608
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25609
						case PolishedDeepslateWallWestLow:
							return 25610
						case PolishedDeepslateWallWestTall:
							return 25611
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25612
						case PolishedDeepslateWallWestLow:
							return 25613
						case PolishedDeepslateWallWestTall:
							return 25614
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25615
						case PolishedDeepslateWallWestLow:
							return 25616
						case PolishedDeepslateWallWestTall:
							return 25617
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25618
						case PolishedDeepslateWallWestLow:
							return 25619
						case PolishedDeepslateWallWestTall:
							return 25620
						}
					}
				}
			}
		}
	case PolishedDeepslateWallEastTall:
		switch x.North {
		case PolishedDeepslateWallNorthNone:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25621
						case PolishedDeepslateWallWestLow:
							return 25622
						case PolishedDeepslateWallWestTall:
							return 25623
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25624
						case PolishedDeepslateWallWestLow:
							return 25625
						case PolishedDeepslateWallWestTall:
							return 25626
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25627
						case PolishedDeepslateWallWestLow:
							return 25628
						case PolishedDeepslateWallWestTall:
							return 25629
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25630
						case PolishedDeepslateWallWestLow:
							return 25631
						case PolishedDeepslateWallWestTall:
							return 25632
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25633
						case PolishedDeepslateWallWestLow:
							return 25634
						case PolishedDeepslateWallWestTall:
							return 25635
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25636
						case PolishedDeepslateWallWestLow:
							return 25637
						case PolishedDeepslateWallWestTall:
							return 25638
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25639
						case PolishedDeepslateWallWestLow:
							return 25640
						case PolishedDeepslateWallWestTall:
							return 25641
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25642
						case PolishedDeepslateWallWestLow:
							return 25643
						case PolishedDeepslateWallWestTall:
							return 25644
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25645
						case PolishedDeepslateWallWestLow:
							return 25646
						case PolishedDeepslateWallWestTall:
							return 25647
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25648
						case PolishedDeepslateWallWestLow:
							return 25649
						case PolishedDeepslateWallWestTall:
							return 25650
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25651
						case PolishedDeepslateWallWestLow:
							return 25652
						case PolishedDeepslateWallWestTall:
							return 25653
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25654
						case PolishedDeepslateWallWestLow:
							return 25655
						case PolishedDeepslateWallWestTall:
							return 25656
						}
					}
				}
			}
		case PolishedDeepslateWallNorthLow:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25657
						case PolishedDeepslateWallWestLow:
							return 25658
						case PolishedDeepslateWallWestTall:
							return 25659
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25660
						case PolishedDeepslateWallWestLow:
							return 25661
						case PolishedDeepslateWallWestTall:
							return 25662
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25663
						case PolishedDeepslateWallWestLow:
							return 25664
						case PolishedDeepslateWallWestTall:
							return 25665
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25666
						case PolishedDeepslateWallWestLow:
							return 25667
						case PolishedDeepslateWallWestTall:
							return 25668
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25669
						case PolishedDeepslateWallWestLow:
							return 25670
						case PolishedDeepslateWallWestTall:
							return 25671
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25672
						case PolishedDeepslateWallWestLow:
							return 25673
						case PolishedDeepslateWallWestTall:
							return 25674
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25675
						case PolishedDeepslateWallWestLow:
							return 25676
						case PolishedDeepslateWallWestTall:
							return 25677
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25678
						case PolishedDeepslateWallWestLow:
							return 25679
						case PolishedDeepslateWallWestTall:
							return 25680
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25681
						case PolishedDeepslateWallWestLow:
							return 25682
						case PolishedDeepslateWallWestTall:
							return 25683
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25684
						case PolishedDeepslateWallWestLow:
							return 25685
						case PolishedDeepslateWallWestTall:
							return 25686
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25687
						case PolishedDeepslateWallWestLow:
							return 25688
						case PolishedDeepslateWallWestTall:
							return 25689
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25690
						case PolishedDeepslateWallWestLow:
							return 25691
						case PolishedDeepslateWallWestTall:
							return 25692
						}
					}
				}
			}
		case PolishedDeepslateWallNorthTall:
			switch x.South {
			case PolishedDeepslateWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25693
						case PolishedDeepslateWallWestLow:
							return 25694
						case PolishedDeepslateWallWestTall:
							return 25695
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25696
						case PolishedDeepslateWallWestLow:
							return 25697
						case PolishedDeepslateWallWestTall:
							return 25698
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25699
						case PolishedDeepslateWallWestLow:
							return 25700
						case PolishedDeepslateWallWestTall:
							return 25701
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25702
						case PolishedDeepslateWallWestLow:
							return 25703
						case PolishedDeepslateWallWestTall:
							return 25704
						}
					}
				}
			case PolishedDeepslateWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25705
						case PolishedDeepslateWallWestLow:
							return 25706
						case PolishedDeepslateWallWestTall:
							return 25707
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25708
						case PolishedDeepslateWallWestLow:
							return 25709
						case PolishedDeepslateWallWestTall:
							return 25710
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25711
						case PolishedDeepslateWallWestLow:
							return 25712
						case PolishedDeepslateWallWestTall:
							return 25713
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25714
						case PolishedDeepslateWallWestLow:
							return 25715
						case PolishedDeepslateWallWestTall:
							return 25716
						}
					}
				}
			case PolishedDeepslateWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25717
						case PolishedDeepslateWallWestLow:
							return 25718
						case PolishedDeepslateWallWestTall:
							return 25719
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25720
						case PolishedDeepslateWallWestLow:
							return 25721
						case PolishedDeepslateWallWestTall:
							return 25722
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25723
						case PolishedDeepslateWallWestLow:
							return 25724
						case PolishedDeepslateWallWestTall:
							return 25725
						}
					case false:
						switch x.West {
						case PolishedDeepslateWallWestNone:
							return 25726
						case PolishedDeepslateWallWestLow:
							return 25727
						case PolishedDeepslateWallWestTall:
							return 25728
						}
					}
				}
			}
		}
	}
	return 25408 // default state
}

type DeepslateTiles struct{}

func (x DeepslateTiles) Id() uint16 {
	return 25729
}

type DeepslateTileStairsShape string

const (
	DeepslateTileStairsShapeStraight   DeepslateTileStairsShape = "straight"
	DeepslateTileStairsShapeInnerLeft  DeepslateTileStairsShape = "inner_left"
	DeepslateTileStairsShapeInnerRight DeepslateTileStairsShape = "inner_right"
	DeepslateTileStairsShapeOuterLeft  DeepslateTileStairsShape = "outer_left"
	DeepslateTileStairsShapeOuterRight DeepslateTileStairsShape = "outer_right"
)

type DeepslateTileStairsFacing string

const (
	DeepslateTileStairsFacingNorth DeepslateTileStairsFacing = "north"
	DeepslateTileStairsFacingSouth DeepslateTileStairsFacing = "south"
	DeepslateTileStairsFacingWest  DeepslateTileStairsFacing = "west"
	DeepslateTileStairsFacingEast  DeepslateTileStairsFacing = "east"
)

type DeepslateTileStairsHalf string

const (
	DeepslateTileStairsHalfTop    DeepslateTileStairsHalf = "top"
	DeepslateTileStairsHalfBottom DeepslateTileStairsHalf = "bottom"
)

type DeepslateTileStairs struct {
	Shape       DeepslateTileStairsShape
	Waterlogged bool
	Facing      DeepslateTileStairsFacing
	Half        DeepslateTileStairsHalf
}

func (x DeepslateTileStairs) Id() uint16 {
	switch x.Facing {
	case DeepslateTileStairsFacingNorth:
		switch x.Half {
		case DeepslateTileStairsHalfTop:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25730
				case false:
					return 25731
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25732
				case false:
					return 25733
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25734
				case false:
					return 25735
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25736
				case false:
					return 25737
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25738
				case false:
					return 25739
				}
			}
		case DeepslateTileStairsHalfBottom:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25740
				case false:
					return 25741
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25742
				case false:
					return 25743
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25744
				case false:
					return 25745
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25746
				case false:
					return 25747
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25748
				case false:
					return 25749
				}
			}
		}
	case DeepslateTileStairsFacingSouth:
		switch x.Half {
		case DeepslateTileStairsHalfTop:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25750
				case false:
					return 25751
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25752
				case false:
					return 25753
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25754
				case false:
					return 25755
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25756
				case false:
					return 25757
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25758
				case false:
					return 25759
				}
			}
		case DeepslateTileStairsHalfBottom:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25760
				case false:
					return 25761
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25762
				case false:
					return 25763
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25764
				case false:
					return 25765
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25766
				case false:
					return 25767
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25768
				case false:
					return 25769
				}
			}
		}
	case DeepslateTileStairsFacingWest:
		switch x.Half {
		case DeepslateTileStairsHalfTop:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25770
				case false:
					return 25771
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25772
				case false:
					return 25773
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25774
				case false:
					return 25775
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25776
				case false:
					return 25777
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25778
				case false:
					return 25779
				}
			}
		case DeepslateTileStairsHalfBottom:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25780
				case false:
					return 25781
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25782
				case false:
					return 25783
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25784
				case false:
					return 25785
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25786
				case false:
					return 25787
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25788
				case false:
					return 25789
				}
			}
		}
	case DeepslateTileStairsFacingEast:
		switch x.Half {
		case DeepslateTileStairsHalfTop:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25790
				case false:
					return 25791
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25792
				case false:
					return 25793
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25794
				case false:
					return 25795
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25796
				case false:
					return 25797
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25798
				case false:
					return 25799
				}
			}
		case DeepslateTileStairsHalfBottom:
			switch x.Shape {
			case DeepslateTileStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 25800
				case false:
					return 25801
				}
			case DeepslateTileStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 25802
				case false:
					return 25803
				}
			case DeepslateTileStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 25804
				case false:
					return 25805
				}
			case DeepslateTileStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 25806
				case false:
					return 25807
				}
			case DeepslateTileStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 25808
				case false:
					return 25809
				}
			}
		}
	}
	return 25741 // default state
}

type DeepslateTileSlabType string

const (
	DeepslateTileSlabTypeTop    DeepslateTileSlabType = "top"
	DeepslateTileSlabTypeBottom DeepslateTileSlabType = "bottom"
	DeepslateTileSlabTypeDouble DeepslateTileSlabType = "double"
)

type DeepslateTileSlab struct {
	Type        DeepslateTileSlabType
	Waterlogged bool
}

func (x DeepslateTileSlab) Id() uint16 {
	switch x.Type {
	case DeepslateTileSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 25810
		case false:
			return 25811
		}
	case DeepslateTileSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 25812
		case false:
			return 25813
		}
	case DeepslateTileSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 25814
		case false:
			return 25815
		}
	}
	return 25813 // default state
}

type DeepslateTileWallSouth string

const (
	DeepslateTileWallSouthNone DeepslateTileWallSouth = "none"
	DeepslateTileWallSouthLow  DeepslateTileWallSouth = "low"
	DeepslateTileWallSouthTall DeepslateTileWallSouth = "tall"
)

type DeepslateTileWallWest string

const (
	DeepslateTileWallWestNone DeepslateTileWallWest = "none"
	DeepslateTileWallWestLow  DeepslateTileWallWest = "low"
	DeepslateTileWallWestTall DeepslateTileWallWest = "tall"
)

type DeepslateTileWallEast string

const (
	DeepslateTileWallEastNone DeepslateTileWallEast = "none"
	DeepslateTileWallEastLow  DeepslateTileWallEast = "low"
	DeepslateTileWallEastTall DeepslateTileWallEast = "tall"
)

type DeepslateTileWallNorth string

const (
	DeepslateTileWallNorthNone DeepslateTileWallNorth = "none"
	DeepslateTileWallNorthLow  DeepslateTileWallNorth = "low"
	DeepslateTileWallNorthTall DeepslateTileWallNorth = "tall"
)

type DeepslateTileWall struct {
	South       DeepslateTileWallSouth
	Up          bool
	Waterlogged bool
	West        DeepslateTileWallWest
	East        DeepslateTileWallEast
	North       DeepslateTileWallNorth
}

func (x DeepslateTileWall) Id() uint16 {
	switch x.East {
	case DeepslateTileWallEastNone:
		switch x.North {
		case DeepslateTileWallNorthNone:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25816
						case DeepslateTileWallWestLow:
							return 25817
						case DeepslateTileWallWestTall:
							return 25818
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25819
						case DeepslateTileWallWestLow:
							return 25820
						case DeepslateTileWallWestTall:
							return 25821
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25822
						case DeepslateTileWallWestLow:
							return 25823
						case DeepslateTileWallWestTall:
							return 25824
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25825
						case DeepslateTileWallWestLow:
							return 25826
						case DeepslateTileWallWestTall:
							return 25827
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25828
						case DeepslateTileWallWestLow:
							return 25829
						case DeepslateTileWallWestTall:
							return 25830
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25831
						case DeepslateTileWallWestLow:
							return 25832
						case DeepslateTileWallWestTall:
							return 25833
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25834
						case DeepslateTileWallWestLow:
							return 25835
						case DeepslateTileWallWestTall:
							return 25836
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25837
						case DeepslateTileWallWestLow:
							return 25838
						case DeepslateTileWallWestTall:
							return 25839
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25840
						case DeepslateTileWallWestLow:
							return 25841
						case DeepslateTileWallWestTall:
							return 25842
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25843
						case DeepslateTileWallWestLow:
							return 25844
						case DeepslateTileWallWestTall:
							return 25845
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25846
						case DeepslateTileWallWestLow:
							return 25847
						case DeepslateTileWallWestTall:
							return 25848
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25849
						case DeepslateTileWallWestLow:
							return 25850
						case DeepslateTileWallWestTall:
							return 25851
						}
					}
				}
			}
		case DeepslateTileWallNorthLow:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25852
						case DeepslateTileWallWestLow:
							return 25853
						case DeepslateTileWallWestTall:
							return 25854
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25855
						case DeepslateTileWallWestLow:
							return 25856
						case DeepslateTileWallWestTall:
							return 25857
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25858
						case DeepslateTileWallWestLow:
							return 25859
						case DeepslateTileWallWestTall:
							return 25860
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25861
						case DeepslateTileWallWestLow:
							return 25862
						case DeepslateTileWallWestTall:
							return 25863
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25864
						case DeepslateTileWallWestLow:
							return 25865
						case DeepslateTileWallWestTall:
							return 25866
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25867
						case DeepslateTileWallWestLow:
							return 25868
						case DeepslateTileWallWestTall:
							return 25869
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25870
						case DeepslateTileWallWestLow:
							return 25871
						case DeepslateTileWallWestTall:
							return 25872
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25873
						case DeepslateTileWallWestLow:
							return 25874
						case DeepslateTileWallWestTall:
							return 25875
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25876
						case DeepslateTileWallWestLow:
							return 25877
						case DeepslateTileWallWestTall:
							return 25878
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25879
						case DeepslateTileWallWestLow:
							return 25880
						case DeepslateTileWallWestTall:
							return 25881
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25882
						case DeepslateTileWallWestLow:
							return 25883
						case DeepslateTileWallWestTall:
							return 25884
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25885
						case DeepslateTileWallWestLow:
							return 25886
						case DeepslateTileWallWestTall:
							return 25887
						}
					}
				}
			}
		case DeepslateTileWallNorthTall:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25888
						case DeepslateTileWallWestLow:
							return 25889
						case DeepslateTileWallWestTall:
							return 25890
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25891
						case DeepslateTileWallWestLow:
							return 25892
						case DeepslateTileWallWestTall:
							return 25893
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25894
						case DeepslateTileWallWestLow:
							return 25895
						case DeepslateTileWallWestTall:
							return 25896
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25897
						case DeepslateTileWallWestLow:
							return 25898
						case DeepslateTileWallWestTall:
							return 25899
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25900
						case DeepslateTileWallWestLow:
							return 25901
						case DeepslateTileWallWestTall:
							return 25902
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25903
						case DeepslateTileWallWestLow:
							return 25904
						case DeepslateTileWallWestTall:
							return 25905
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25906
						case DeepslateTileWallWestLow:
							return 25907
						case DeepslateTileWallWestTall:
							return 25908
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25909
						case DeepslateTileWallWestLow:
							return 25910
						case DeepslateTileWallWestTall:
							return 25911
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25912
						case DeepslateTileWallWestLow:
							return 25913
						case DeepslateTileWallWestTall:
							return 25914
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25915
						case DeepslateTileWallWestLow:
							return 25916
						case DeepslateTileWallWestTall:
							return 25917
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25918
						case DeepslateTileWallWestLow:
							return 25919
						case DeepslateTileWallWestTall:
							return 25920
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25921
						case DeepslateTileWallWestLow:
							return 25922
						case DeepslateTileWallWestTall:
							return 25923
						}
					}
				}
			}
		}
	case DeepslateTileWallEastLow:
		switch x.North {
		case DeepslateTileWallNorthNone:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25924
						case DeepslateTileWallWestLow:
							return 25925
						case DeepslateTileWallWestTall:
							return 25926
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25927
						case DeepslateTileWallWestLow:
							return 25928
						case DeepslateTileWallWestTall:
							return 25929
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25930
						case DeepslateTileWallWestLow:
							return 25931
						case DeepslateTileWallWestTall:
							return 25932
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25933
						case DeepslateTileWallWestLow:
							return 25934
						case DeepslateTileWallWestTall:
							return 25935
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25936
						case DeepslateTileWallWestLow:
							return 25937
						case DeepslateTileWallWestTall:
							return 25938
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25939
						case DeepslateTileWallWestLow:
							return 25940
						case DeepslateTileWallWestTall:
							return 25941
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25942
						case DeepslateTileWallWestLow:
							return 25943
						case DeepslateTileWallWestTall:
							return 25944
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25945
						case DeepslateTileWallWestLow:
							return 25946
						case DeepslateTileWallWestTall:
							return 25947
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25948
						case DeepslateTileWallWestLow:
							return 25949
						case DeepslateTileWallWestTall:
							return 25950
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25951
						case DeepslateTileWallWestLow:
							return 25952
						case DeepslateTileWallWestTall:
							return 25953
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25954
						case DeepslateTileWallWestLow:
							return 25955
						case DeepslateTileWallWestTall:
							return 25956
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25957
						case DeepslateTileWallWestLow:
							return 25958
						case DeepslateTileWallWestTall:
							return 25959
						}
					}
				}
			}
		case DeepslateTileWallNorthLow:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25960
						case DeepslateTileWallWestLow:
							return 25961
						case DeepslateTileWallWestTall:
							return 25962
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25963
						case DeepslateTileWallWestLow:
							return 25964
						case DeepslateTileWallWestTall:
							return 25965
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25966
						case DeepslateTileWallWestLow:
							return 25967
						case DeepslateTileWallWestTall:
							return 25968
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25969
						case DeepslateTileWallWestLow:
							return 25970
						case DeepslateTileWallWestTall:
							return 25971
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25972
						case DeepslateTileWallWestLow:
							return 25973
						case DeepslateTileWallWestTall:
							return 25974
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25975
						case DeepslateTileWallWestLow:
							return 25976
						case DeepslateTileWallWestTall:
							return 25977
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25978
						case DeepslateTileWallWestLow:
							return 25979
						case DeepslateTileWallWestTall:
							return 25980
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25981
						case DeepslateTileWallWestLow:
							return 25982
						case DeepslateTileWallWestTall:
							return 25983
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25984
						case DeepslateTileWallWestLow:
							return 25985
						case DeepslateTileWallWestTall:
							return 25986
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25987
						case DeepslateTileWallWestLow:
							return 25988
						case DeepslateTileWallWestTall:
							return 25989
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25990
						case DeepslateTileWallWestLow:
							return 25991
						case DeepslateTileWallWestTall:
							return 25992
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25993
						case DeepslateTileWallWestLow:
							return 25994
						case DeepslateTileWallWestTall:
							return 25995
						}
					}
				}
			}
		case DeepslateTileWallNorthTall:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25996
						case DeepslateTileWallWestLow:
							return 25997
						case DeepslateTileWallWestTall:
							return 25998
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 25999
						case DeepslateTileWallWestLow:
							return 26000
						case DeepslateTileWallWestTall:
							return 26001
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26002
						case DeepslateTileWallWestLow:
							return 26003
						case DeepslateTileWallWestTall:
							return 26004
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26005
						case DeepslateTileWallWestLow:
							return 26006
						case DeepslateTileWallWestTall:
							return 26007
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26008
						case DeepslateTileWallWestLow:
							return 26009
						case DeepslateTileWallWestTall:
							return 26010
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26011
						case DeepslateTileWallWestLow:
							return 26012
						case DeepslateTileWallWestTall:
							return 26013
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26014
						case DeepslateTileWallWestLow:
							return 26015
						case DeepslateTileWallWestTall:
							return 26016
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26017
						case DeepslateTileWallWestLow:
							return 26018
						case DeepslateTileWallWestTall:
							return 26019
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26020
						case DeepslateTileWallWestLow:
							return 26021
						case DeepslateTileWallWestTall:
							return 26022
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26023
						case DeepslateTileWallWestLow:
							return 26024
						case DeepslateTileWallWestTall:
							return 26025
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26026
						case DeepslateTileWallWestLow:
							return 26027
						case DeepslateTileWallWestTall:
							return 26028
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26029
						case DeepslateTileWallWestLow:
							return 26030
						case DeepslateTileWallWestTall:
							return 26031
						}
					}
				}
			}
		}
	case DeepslateTileWallEastTall:
		switch x.North {
		case DeepslateTileWallNorthNone:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26032
						case DeepslateTileWallWestLow:
							return 26033
						case DeepslateTileWallWestTall:
							return 26034
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26035
						case DeepslateTileWallWestLow:
							return 26036
						case DeepslateTileWallWestTall:
							return 26037
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26038
						case DeepslateTileWallWestLow:
							return 26039
						case DeepslateTileWallWestTall:
							return 26040
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26041
						case DeepslateTileWallWestLow:
							return 26042
						case DeepslateTileWallWestTall:
							return 26043
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26044
						case DeepslateTileWallWestLow:
							return 26045
						case DeepslateTileWallWestTall:
							return 26046
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26047
						case DeepslateTileWallWestLow:
							return 26048
						case DeepslateTileWallWestTall:
							return 26049
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26050
						case DeepslateTileWallWestLow:
							return 26051
						case DeepslateTileWallWestTall:
							return 26052
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26053
						case DeepslateTileWallWestLow:
							return 26054
						case DeepslateTileWallWestTall:
							return 26055
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26056
						case DeepslateTileWallWestLow:
							return 26057
						case DeepslateTileWallWestTall:
							return 26058
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26059
						case DeepslateTileWallWestLow:
							return 26060
						case DeepslateTileWallWestTall:
							return 26061
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26062
						case DeepslateTileWallWestLow:
							return 26063
						case DeepslateTileWallWestTall:
							return 26064
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26065
						case DeepslateTileWallWestLow:
							return 26066
						case DeepslateTileWallWestTall:
							return 26067
						}
					}
				}
			}
		case DeepslateTileWallNorthLow:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26068
						case DeepslateTileWallWestLow:
							return 26069
						case DeepslateTileWallWestTall:
							return 26070
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26071
						case DeepslateTileWallWestLow:
							return 26072
						case DeepslateTileWallWestTall:
							return 26073
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26074
						case DeepslateTileWallWestLow:
							return 26075
						case DeepslateTileWallWestTall:
							return 26076
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26077
						case DeepslateTileWallWestLow:
							return 26078
						case DeepslateTileWallWestTall:
							return 26079
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26080
						case DeepslateTileWallWestLow:
							return 26081
						case DeepslateTileWallWestTall:
							return 26082
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26083
						case DeepslateTileWallWestLow:
							return 26084
						case DeepslateTileWallWestTall:
							return 26085
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26086
						case DeepslateTileWallWestLow:
							return 26087
						case DeepslateTileWallWestTall:
							return 26088
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26089
						case DeepslateTileWallWestLow:
							return 26090
						case DeepslateTileWallWestTall:
							return 26091
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26092
						case DeepslateTileWallWestLow:
							return 26093
						case DeepslateTileWallWestTall:
							return 26094
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26095
						case DeepslateTileWallWestLow:
							return 26096
						case DeepslateTileWallWestTall:
							return 26097
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26098
						case DeepslateTileWallWestLow:
							return 26099
						case DeepslateTileWallWestTall:
							return 26100
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26101
						case DeepslateTileWallWestLow:
							return 26102
						case DeepslateTileWallWestTall:
							return 26103
						}
					}
				}
			}
		case DeepslateTileWallNorthTall:
			switch x.South {
			case DeepslateTileWallSouthNone:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26104
						case DeepslateTileWallWestLow:
							return 26105
						case DeepslateTileWallWestTall:
							return 26106
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26107
						case DeepslateTileWallWestLow:
							return 26108
						case DeepslateTileWallWestTall:
							return 26109
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26110
						case DeepslateTileWallWestLow:
							return 26111
						case DeepslateTileWallWestTall:
							return 26112
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26113
						case DeepslateTileWallWestLow:
							return 26114
						case DeepslateTileWallWestTall:
							return 26115
						}
					}
				}
			case DeepslateTileWallSouthLow:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26116
						case DeepslateTileWallWestLow:
							return 26117
						case DeepslateTileWallWestTall:
							return 26118
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26119
						case DeepslateTileWallWestLow:
							return 26120
						case DeepslateTileWallWestTall:
							return 26121
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26122
						case DeepslateTileWallWestLow:
							return 26123
						case DeepslateTileWallWestTall:
							return 26124
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26125
						case DeepslateTileWallWestLow:
							return 26126
						case DeepslateTileWallWestTall:
							return 26127
						}
					}
				}
			case DeepslateTileWallSouthTall:
				switch x.Up {
				case true:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26128
						case DeepslateTileWallWestLow:
							return 26129
						case DeepslateTileWallWestTall:
							return 26130
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26131
						case DeepslateTileWallWestLow:
							return 26132
						case DeepslateTileWallWestTall:
							return 26133
						}
					}
				case false:
					switch x.Waterlogged {
					case true:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26134
						case DeepslateTileWallWestLow:
							return 26135
						case DeepslateTileWallWestTall:
							return 26136
						}
					case false:
						switch x.West {
						case DeepslateTileWallWestNone:
							return 26137
						case DeepslateTileWallWestLow:
							return 26138
						case DeepslateTileWallWestTall:
							return 26139
						}
					}
				}
			}
		}
	}
	return 25819 // default state
}

type DeepslateBricks struct{}

func (x DeepslateBricks) Id() uint16 {
	return 26140
}

type DeepslateBrickStairsFacing string

const (
	DeepslateBrickStairsFacingNorth DeepslateBrickStairsFacing = "north"
	DeepslateBrickStairsFacingSouth DeepslateBrickStairsFacing = "south"
	DeepslateBrickStairsFacingWest  DeepslateBrickStairsFacing = "west"
	DeepslateBrickStairsFacingEast  DeepslateBrickStairsFacing = "east"
)

type DeepslateBrickStairsHalf string

const (
	DeepslateBrickStairsHalfTop    DeepslateBrickStairsHalf = "top"
	DeepslateBrickStairsHalfBottom DeepslateBrickStairsHalf = "bottom"
)

type DeepslateBrickStairsShape string

const (
	DeepslateBrickStairsShapeStraight   DeepslateBrickStairsShape = "straight"
	DeepslateBrickStairsShapeInnerLeft  DeepslateBrickStairsShape = "inner_left"
	DeepslateBrickStairsShapeInnerRight DeepslateBrickStairsShape = "inner_right"
	DeepslateBrickStairsShapeOuterLeft  DeepslateBrickStairsShape = "outer_left"
	DeepslateBrickStairsShapeOuterRight DeepslateBrickStairsShape = "outer_right"
)

type DeepslateBrickStairs struct {
	Facing      DeepslateBrickStairsFacing
	Half        DeepslateBrickStairsHalf
	Shape       DeepslateBrickStairsShape
	Waterlogged bool
}

func (x DeepslateBrickStairs) Id() uint16 {
	switch x.Facing {
	case DeepslateBrickStairsFacingNorth:
		switch x.Half {
		case DeepslateBrickStairsHalfTop:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26141
				case false:
					return 26142
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26143
				case false:
					return 26144
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26145
				case false:
					return 26146
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26147
				case false:
					return 26148
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26149
				case false:
					return 26150
				}
			}
		case DeepslateBrickStairsHalfBottom:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26151
				case false:
					return 26152
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26153
				case false:
					return 26154
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26155
				case false:
					return 26156
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26157
				case false:
					return 26158
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26159
				case false:
					return 26160
				}
			}
		}
	case DeepslateBrickStairsFacingSouth:
		switch x.Half {
		case DeepslateBrickStairsHalfTop:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26161
				case false:
					return 26162
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26163
				case false:
					return 26164
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26165
				case false:
					return 26166
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26167
				case false:
					return 26168
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26169
				case false:
					return 26170
				}
			}
		case DeepslateBrickStairsHalfBottom:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26171
				case false:
					return 26172
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26173
				case false:
					return 26174
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26175
				case false:
					return 26176
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26177
				case false:
					return 26178
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26179
				case false:
					return 26180
				}
			}
		}
	case DeepslateBrickStairsFacingWest:
		switch x.Half {
		case DeepslateBrickStairsHalfTop:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26181
				case false:
					return 26182
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26183
				case false:
					return 26184
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26185
				case false:
					return 26186
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26187
				case false:
					return 26188
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26189
				case false:
					return 26190
				}
			}
		case DeepslateBrickStairsHalfBottom:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26191
				case false:
					return 26192
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26193
				case false:
					return 26194
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26195
				case false:
					return 26196
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26197
				case false:
					return 26198
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26199
				case false:
					return 26200
				}
			}
		}
	case DeepslateBrickStairsFacingEast:
		switch x.Half {
		case DeepslateBrickStairsHalfTop:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26201
				case false:
					return 26202
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26203
				case false:
					return 26204
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26205
				case false:
					return 26206
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26207
				case false:
					return 26208
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26209
				case false:
					return 26210
				}
			}
		case DeepslateBrickStairsHalfBottom:
			switch x.Shape {
			case DeepslateBrickStairsShapeStraight:
				switch x.Waterlogged {
				case true:
					return 26211
				case false:
					return 26212
				}
			case DeepslateBrickStairsShapeInnerLeft:
				switch x.Waterlogged {
				case true:
					return 26213
				case false:
					return 26214
				}
			case DeepslateBrickStairsShapeInnerRight:
				switch x.Waterlogged {
				case true:
					return 26215
				case false:
					return 26216
				}
			case DeepslateBrickStairsShapeOuterLeft:
				switch x.Waterlogged {
				case true:
					return 26217
				case false:
					return 26218
				}
			case DeepslateBrickStairsShapeOuterRight:
				switch x.Waterlogged {
				case true:
					return 26219
				case false:
					return 26220
				}
			}
		}
	}
	return 26152 // default state
}

type DeepslateBrickSlabType string

const (
	DeepslateBrickSlabTypeTop    DeepslateBrickSlabType = "top"
	DeepslateBrickSlabTypeBottom DeepslateBrickSlabType = "bottom"
	DeepslateBrickSlabTypeDouble DeepslateBrickSlabType = "double"
)

type DeepslateBrickSlab struct {
	Type        DeepslateBrickSlabType
	Waterlogged bool
}

func (x DeepslateBrickSlab) Id() uint16 {
	switch x.Type {
	case DeepslateBrickSlabTypeTop:
		switch x.Waterlogged {
		case true:
			return 26221
		case false:
			return 26222
		}
	case DeepslateBrickSlabTypeBottom:
		switch x.Waterlogged {
		case true:
			return 26223
		case false:
			return 26224
		}
	case DeepslateBrickSlabTypeDouble:
		switch x.Waterlogged {
		case true:
			return 26225
		case false:
			return 26226
		}
	}
	return 26224 // default state
}

type DeepslateBrickWallWest string

const (
	DeepslateBrickWallWestNone DeepslateBrickWallWest = "none"
	DeepslateBrickWallWestLow  DeepslateBrickWallWest = "low"
	DeepslateBrickWallWestTall DeepslateBrickWallWest = "tall"
)

type DeepslateBrickWallEast string

const (
	DeepslateBrickWallEastNone DeepslateBrickWallEast = "none"
	DeepslateBrickWallEastLow  DeepslateBrickWallEast = "low"
	DeepslateBrickWallEastTall DeepslateBrickWallEast = "tall"
)

type DeepslateBrickWallNorth string

const (
	DeepslateBrickWallNorthNone DeepslateBrickWallNorth = "none"
	DeepslateBrickWallNorthLow  DeepslateBrickWallNorth = "low"
	DeepslateBrickWallNorthTall DeepslateBrickWallNorth = "tall"
)

type DeepslateBrickWallSouth string

const (
	DeepslateBrickWallSouthNone DeepslateBrickWallSouth = "none"
	DeepslateBrickWallSouthLow  DeepslateBrickWallSouth = "low"
	DeepslateBrickWallSouthTall DeepslateBrickWallSouth = "tall"
)

type DeepslateBrickWall struct {
	Waterlogged bool
	West        DeepslateBrickWallWest
	East        DeepslateBrickWallEast
	North       DeepslateBrickWallNorth
	South       DeepslateBrickWallSouth
	Up          bool
}

func (x DeepslateBrickWall) Id() uint16 {
	switch x.South {
	case DeepslateBrickWallSouthNone:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26227
						case DeepslateBrickWallNorthLow:
							return 26263
						case DeepslateBrickWallNorthTall:
							return 26299
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26335
						case DeepslateBrickWallNorthLow:
							return 26371
						case DeepslateBrickWallNorthTall:
							return 26407
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26443
						case DeepslateBrickWallNorthLow:
							return 26479
						case DeepslateBrickWallNorthTall:
							return 26515
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26228
						case DeepslateBrickWallNorthLow:
							return 26264
						case DeepslateBrickWallNorthTall:
							return 26300
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26336
						case DeepslateBrickWallNorthLow:
							return 26372
						case DeepslateBrickWallNorthTall:
							return 26408
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26444
						case DeepslateBrickWallNorthLow:
							return 26480
						case DeepslateBrickWallNorthTall:
							return 26516
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26229
						case DeepslateBrickWallNorthLow:
							return 26265
						case DeepslateBrickWallNorthTall:
							return 26301
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26337
						case DeepslateBrickWallNorthLow:
							return 26373
						case DeepslateBrickWallNorthTall:
							return 26409
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26445
						case DeepslateBrickWallNorthLow:
							return 26481
						case DeepslateBrickWallNorthTall:
							return 26517
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26230
						case DeepslateBrickWallNorthLow:
							return 26266
						case DeepslateBrickWallNorthTall:
							return 26302
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26338
						case DeepslateBrickWallNorthLow:
							return 26374
						case DeepslateBrickWallNorthTall:
							return 26410
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26446
						case DeepslateBrickWallNorthLow:
							return 26482
						case DeepslateBrickWallNorthTall:
							return 26518
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26231
						case DeepslateBrickWallNorthLow:
							return 26267
						case DeepslateBrickWallNorthTall:
							return 26303
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26339
						case DeepslateBrickWallNorthLow:
							return 26375
						case DeepslateBrickWallNorthTall:
							return 26411
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26447
						case DeepslateBrickWallNorthLow:
							return 26483
						case DeepslateBrickWallNorthTall:
							return 26519
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26232
						case DeepslateBrickWallNorthLow:
							return 26268
						case DeepslateBrickWallNorthTall:
							return 26304
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26340
						case DeepslateBrickWallNorthLow:
							return 26376
						case DeepslateBrickWallNorthTall:
							return 26412
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26448
						case DeepslateBrickWallNorthLow:
							return 26484
						case DeepslateBrickWallNorthTall:
							return 26520
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26233
						case DeepslateBrickWallNorthLow:
							return 26269
						case DeepslateBrickWallNorthTall:
							return 26305
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26341
						case DeepslateBrickWallNorthLow:
							return 26377
						case DeepslateBrickWallNorthTall:
							return 26413
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26449
						case DeepslateBrickWallNorthLow:
							return 26485
						case DeepslateBrickWallNorthTall:
							return 26521
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26234
						case DeepslateBrickWallNorthLow:
							return 26270
						case DeepslateBrickWallNorthTall:
							return 26306
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26342
						case DeepslateBrickWallNorthLow:
							return 26378
						case DeepslateBrickWallNorthTall:
							return 26414
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26450
						case DeepslateBrickWallNorthLow:
							return 26486
						case DeepslateBrickWallNorthTall:
							return 26522
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26235
						case DeepslateBrickWallNorthLow:
							return 26271
						case DeepslateBrickWallNorthTall:
							return 26307
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26343
						case DeepslateBrickWallNorthLow:
							return 26379
						case DeepslateBrickWallNorthTall:
							return 26415
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26451
						case DeepslateBrickWallNorthLow:
							return 26487
						case DeepslateBrickWallNorthTall:
							return 26523
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26236
						case DeepslateBrickWallNorthLow:
							return 26272
						case DeepslateBrickWallNorthTall:
							return 26308
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26344
						case DeepslateBrickWallNorthLow:
							return 26380
						case DeepslateBrickWallNorthTall:
							return 26416
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26452
						case DeepslateBrickWallNorthLow:
							return 26488
						case DeepslateBrickWallNorthTall:
							return 26524
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26237
						case DeepslateBrickWallNorthLow:
							return 26273
						case DeepslateBrickWallNorthTall:
							return 26309
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26345
						case DeepslateBrickWallNorthLow:
							return 26381
						case DeepslateBrickWallNorthTall:
							return 26417
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26453
						case DeepslateBrickWallNorthLow:
							return 26489
						case DeepslateBrickWallNorthTall:
							return 26525
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26238
						case DeepslateBrickWallNorthLow:
							return 26274
						case DeepslateBrickWallNorthTall:
							return 26310
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26346
						case DeepslateBrickWallNorthLow:
							return 26382
						case DeepslateBrickWallNorthTall:
							return 26418
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26454
						case DeepslateBrickWallNorthLow:
							return 26490
						case DeepslateBrickWallNorthTall:
							return 26526
						}
					}
				}
			}
		}
	case DeepslateBrickWallSouthLow:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26239
						case DeepslateBrickWallNorthLow:
							return 26275
						case DeepslateBrickWallNorthTall:
							return 26311
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26347
						case DeepslateBrickWallNorthLow:
							return 26383
						case DeepslateBrickWallNorthTall:
							return 26419
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26455
						case DeepslateBrickWallNorthLow:
							return 26491
						case DeepslateBrickWallNorthTall:
							return 26527
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26240
						case DeepslateBrickWallNorthLow:
							return 26276
						case DeepslateBrickWallNorthTall:
							return 26312
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26348
						case DeepslateBrickWallNorthLow:
							return 26384
						case DeepslateBrickWallNorthTall:
							return 26420
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26456
						case DeepslateBrickWallNorthLow:
							return 26492
						case DeepslateBrickWallNorthTall:
							return 26528
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26241
						case DeepslateBrickWallNorthLow:
							return 26277
						case DeepslateBrickWallNorthTall:
							return 26313
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26349
						case DeepslateBrickWallNorthLow:
							return 26385
						case DeepslateBrickWallNorthTall:
							return 26421
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26457
						case DeepslateBrickWallNorthLow:
							return 26493
						case DeepslateBrickWallNorthTall:
							return 26529
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26242
						case DeepslateBrickWallNorthLow:
							return 26278
						case DeepslateBrickWallNorthTall:
							return 26314
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26350
						case DeepslateBrickWallNorthLow:
							return 26386
						case DeepslateBrickWallNorthTall:
							return 26422
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26458
						case DeepslateBrickWallNorthLow:
							return 26494
						case DeepslateBrickWallNorthTall:
							return 26530
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26243
						case DeepslateBrickWallNorthLow:
							return 26279
						case DeepslateBrickWallNorthTall:
							return 26315
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26351
						case DeepslateBrickWallNorthLow:
							return 26387
						case DeepslateBrickWallNorthTall:
							return 26423
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26459
						case DeepslateBrickWallNorthLow:
							return 26495
						case DeepslateBrickWallNorthTall:
							return 26531
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26244
						case DeepslateBrickWallNorthLow:
							return 26280
						case DeepslateBrickWallNorthTall:
							return 26316
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26352
						case DeepslateBrickWallNorthLow:
							return 26388
						case DeepslateBrickWallNorthTall:
							return 26424
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26460
						case DeepslateBrickWallNorthLow:
							return 26496
						case DeepslateBrickWallNorthTall:
							return 26532
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26245
						case DeepslateBrickWallNorthLow:
							return 26281
						case DeepslateBrickWallNorthTall:
							return 26317
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26353
						case DeepslateBrickWallNorthLow:
							return 26389
						case DeepslateBrickWallNorthTall:
							return 26425
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26461
						case DeepslateBrickWallNorthLow:
							return 26497
						case DeepslateBrickWallNorthTall:
							return 26533
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26246
						case DeepslateBrickWallNorthLow:
							return 26282
						case DeepslateBrickWallNorthTall:
							return 26318
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26354
						case DeepslateBrickWallNorthLow:
							return 26390
						case DeepslateBrickWallNorthTall:
							return 26426
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26462
						case DeepslateBrickWallNorthLow:
							return 26498
						case DeepslateBrickWallNorthTall:
							return 26534
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26247
						case DeepslateBrickWallNorthLow:
							return 26283
						case DeepslateBrickWallNorthTall:
							return 26319
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26355
						case DeepslateBrickWallNorthLow:
							return 26391
						case DeepslateBrickWallNorthTall:
							return 26427
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26463
						case DeepslateBrickWallNorthLow:
							return 26499
						case DeepslateBrickWallNorthTall:
							return 26535
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26248
						case DeepslateBrickWallNorthLow:
							return 26284
						case DeepslateBrickWallNorthTall:
							return 26320
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26356
						case DeepslateBrickWallNorthLow:
							return 26392
						case DeepslateBrickWallNorthTall:
							return 26428
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26464
						case DeepslateBrickWallNorthLow:
							return 26500
						case DeepslateBrickWallNorthTall:
							return 26536
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26249
						case DeepslateBrickWallNorthLow:
							return 26285
						case DeepslateBrickWallNorthTall:
							return 26321
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26357
						case DeepslateBrickWallNorthLow:
							return 26393
						case DeepslateBrickWallNorthTall:
							return 26429
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26465
						case DeepslateBrickWallNorthLow:
							return 26501
						case DeepslateBrickWallNorthTall:
							return 26537
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26250
						case DeepslateBrickWallNorthLow:
							return 26286
						case DeepslateBrickWallNorthTall:
							return 26322
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26358
						case DeepslateBrickWallNorthLow:
							return 26394
						case DeepslateBrickWallNorthTall:
							return 26430
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26466
						case DeepslateBrickWallNorthLow:
							return 26502
						case DeepslateBrickWallNorthTall:
							return 26538
						}
					}
				}
			}
		}
	case DeepslateBrickWallSouthTall:
		switch x.Up {
		case true:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26251
						case DeepslateBrickWallNorthLow:
							return 26287
						case DeepslateBrickWallNorthTall:
							return 26323
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26359
						case DeepslateBrickWallNorthLow:
							return 26395
						case DeepslateBrickWallNorthTall:
							return 26431
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26467
						case DeepslateBrickWallNorthLow:
							return 26503
						case DeepslateBrickWallNorthTall:
							return 26539
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26252
						case DeepslateBrickWallNorthLow:
							return 26288
						case DeepslateBrickWallNorthTall:
							return 26324
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26360
						case DeepslateBrickWallNorthLow:
							return 26396
						case DeepslateBrickWallNorthTall:
							return 26432
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26468
						case DeepslateBrickWallNorthLow:
							return 26504
						case DeepslateBrickWallNorthTall:
							return 26540
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26253
						case DeepslateBrickWallNorthLow:
							return 26289
						case DeepslateBrickWallNorthTall:
							return 26325
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26361
						case DeepslateBrickWallNorthLow:
							return 26397
						case DeepslateBrickWallNorthTall:
							return 26433
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26469
						case DeepslateBrickWallNorthLow:
							return 26505
						case DeepslateBrickWallNorthTall:
							return 26541
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26254
						case DeepslateBrickWallNorthLow:
							return 26290
						case DeepslateBrickWallNorthTall:
							return 26326
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26362
						case DeepslateBrickWallNorthLow:
							return 26398
						case DeepslateBrickWallNorthTall:
							return 26434
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26470
						case DeepslateBrickWallNorthLow:
							return 26506
						case DeepslateBrickWallNorthTall:
							return 26542
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26255
						case DeepslateBrickWallNorthLow:
							return 26291
						case DeepslateBrickWallNorthTall:
							return 26327
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26363
						case DeepslateBrickWallNorthLow:
							return 26399
						case DeepslateBrickWallNorthTall:
							return 26435
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26471
						case DeepslateBrickWallNorthLow:
							return 26507
						case DeepslateBrickWallNorthTall:
							return 26543
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26256
						case DeepslateBrickWallNorthLow:
							return 26292
						case DeepslateBrickWallNorthTall:
							return 26328
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26364
						case DeepslateBrickWallNorthLow:
							return 26400
						case DeepslateBrickWallNorthTall:
							return 26436
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26472
						case DeepslateBrickWallNorthLow:
							return 26508
						case DeepslateBrickWallNorthTall:
							return 26544
						}
					}
				}
			}
		case false:
			switch x.Waterlogged {
			case true:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26257
						case DeepslateBrickWallNorthLow:
							return 26293
						case DeepslateBrickWallNorthTall:
							return 26329
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26365
						case DeepslateBrickWallNorthLow:
							return 26401
						case DeepslateBrickWallNorthTall:
							return 26437
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26473
						case DeepslateBrickWallNorthLow:
							return 26509
						case DeepslateBrickWallNorthTall:
							return 26545
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26258
						case DeepslateBrickWallNorthLow:
							return 26294
						case DeepslateBrickWallNorthTall:
							return 26330
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26366
						case DeepslateBrickWallNorthLow:
							return 26402
						case DeepslateBrickWallNorthTall:
							return 26438
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26474
						case DeepslateBrickWallNorthLow:
							return 26510
						case DeepslateBrickWallNorthTall:
							return 26546
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26259
						case DeepslateBrickWallNorthLow:
							return 26295
						case DeepslateBrickWallNorthTall:
							return 26331
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26367
						case DeepslateBrickWallNorthLow:
							return 26403
						case DeepslateBrickWallNorthTall:
							return 26439
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26475
						case DeepslateBrickWallNorthLow:
							return 26511
						case DeepslateBrickWallNorthTall:
							return 26547
						}
					}
				}
			case false:
				switch x.West {
				case DeepslateBrickWallWestNone:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26260
						case DeepslateBrickWallNorthLow:
							return 26296
						case DeepslateBrickWallNorthTall:
							return 26332
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26368
						case DeepslateBrickWallNorthLow:
							return 26404
						case DeepslateBrickWallNorthTall:
							return 26440
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26476
						case DeepslateBrickWallNorthLow:
							return 26512
						case DeepslateBrickWallNorthTall:
							return 26548
						}
					}
				case DeepslateBrickWallWestLow:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26261
						case DeepslateBrickWallNorthLow:
							return 26297
						case DeepslateBrickWallNorthTall:
							return 26333
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26369
						case DeepslateBrickWallNorthLow:
							return 26405
						case DeepslateBrickWallNorthTall:
							return 26441
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26477
						case DeepslateBrickWallNorthLow:
							return 26513
						case DeepslateBrickWallNorthTall:
							return 26549
						}
					}
				case DeepslateBrickWallWestTall:
					switch x.East {
					case DeepslateBrickWallEastNone:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26262
						case DeepslateBrickWallNorthLow:
							return 26298
						case DeepslateBrickWallNorthTall:
							return 26334
						}
					case DeepslateBrickWallEastLow:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26370
						case DeepslateBrickWallNorthLow:
							return 26406
						case DeepslateBrickWallNorthTall:
							return 26442
						}
					case DeepslateBrickWallEastTall:
						switch x.North {
						case DeepslateBrickWallNorthNone:
							return 26478
						case DeepslateBrickWallNorthLow:
							return 26514
						case DeepslateBrickWallNorthTall:
							return 26550
						}
					}
				}
			}
		}
	}
	return 26230 // default state
}

type ChiseledDeepslate struct{}

func (x ChiseledDeepslate) Id() uint16 {
	return 26551
}

type CrackedDeepslateBricks struct{}

func (x CrackedDeepslateBricks) Id() uint16 {
	return 26552
}

type CrackedDeepslateTiles struct{}

func (x CrackedDeepslateTiles) Id() uint16 {
	return 26553
}

type InfestedDeepslateAxis string

const (
	InfestedDeepslateAxisX InfestedDeepslateAxis = "x"
	InfestedDeepslateAxisY InfestedDeepslateAxis = "y"
	InfestedDeepslateAxisZ InfestedDeepslateAxis = "z"
)

type InfestedDeepslate struct {
	Axis InfestedDeepslateAxis
}

func (x InfestedDeepslate) Id() uint16 {
	switch x.Axis {
	case InfestedDeepslateAxisX:
		return 26554
	case InfestedDeepslateAxisY:
		return 26555
	case InfestedDeepslateAxisZ:
		return 26556
	}
	return 26555 // default state
}

type SmoothBasalt struct{}

func (x SmoothBasalt) Id() uint16 {
	return 26557
}

type RawIronBlock struct{}

func (x RawIronBlock) Id() uint16 {
	return 26558
}

type RawCopperBlock struct{}

func (x RawCopperBlock) Id() uint16 {
	return 26559
}

type RawGoldBlock struct{}

func (x RawGoldBlock) Id() uint16 {
	return 26560
}

type PottedAzaleaBush struct{}

func (x PottedAzaleaBush) Id() uint16 {
	return 26561
}

type PottedFloweringAzaleaBush struct{}

func (x PottedFloweringAzaleaBush) Id() uint16 {
	return 26562
}

type OchreFroglightAxis string

const (
	OchreFroglightAxisX OchreFroglightAxis = "x"
	OchreFroglightAxisY OchreFroglightAxis = "y"
	OchreFroglightAxisZ OchreFroglightAxis = "z"
)

type OchreFroglight struct {
	Axis OchreFroglightAxis
}

func (x OchreFroglight) Id() uint16 {
	switch x.Axis {
	case OchreFroglightAxisX:
		return 26563
	case OchreFroglightAxisY:
		return 26564
	case OchreFroglightAxisZ:
		return 26565
	}
	return 26564 // default state
}

type VerdantFroglightAxis string

const (
	VerdantFroglightAxisX VerdantFroglightAxis = "x"
	VerdantFroglightAxisY VerdantFroglightAxis = "y"
	VerdantFroglightAxisZ VerdantFroglightAxis = "z"
)

type VerdantFroglight struct {
	Axis VerdantFroglightAxis
}

func (x VerdantFroglight) Id() uint16 {
	switch x.Axis {
	case VerdantFroglightAxisX:
		return 26566
	case VerdantFroglightAxisY:
		return 26567
	case VerdantFroglightAxisZ:
		return 26568
	}
	return 26567 // default state
}

type PearlescentFroglightAxis string

const (
	PearlescentFroglightAxisX PearlescentFroglightAxis = "x"
	PearlescentFroglightAxisY PearlescentFroglightAxis = "y"
	PearlescentFroglightAxisZ PearlescentFroglightAxis = "z"
)

type PearlescentFroglight struct {
	Axis PearlescentFroglightAxis
}

func (x PearlescentFroglight) Id() uint16 {
	switch x.Axis {
	case PearlescentFroglightAxisX:
		return 26569
	case PearlescentFroglightAxisY:
		return 26570
	case PearlescentFroglightAxisZ:
		return 26571
	}
	return 26570 // default state
}

type Frogspawn struct{}

func (x Frogspawn) Id() uint16 {
	return 26572
}

type ReinforcedDeepslate struct{}

func (x ReinforcedDeepslate) Id() uint16 {
	return 26573
}

type DecoratedPotFacing string

const (
	DecoratedPotFacingNorth DecoratedPotFacing = "north"
	DecoratedPotFacingSouth DecoratedPotFacing = "south"
	DecoratedPotFacingWest  DecoratedPotFacing = "west"
	DecoratedPotFacingEast  DecoratedPotFacing = "east"
)

type DecoratedPot struct {
	Cracked     bool
	Facing      DecoratedPotFacing
	Waterlogged bool
}

func (x DecoratedPot) Id() uint16 {
	switch x.Cracked {
	case true:
		switch x.Facing {
		case DecoratedPotFacingNorth:
			switch x.Waterlogged {
			case true:
				return 26574
			case false:
				return 26575
			}
		case DecoratedPotFacingSouth:
			switch x.Waterlogged {
			case true:
				return 26576
			case false:
				return 26577
			}
		case DecoratedPotFacingWest:
			switch x.Waterlogged {
			case true:
				return 26578
			case false:
				return 26579
			}
		case DecoratedPotFacingEast:
			switch x.Waterlogged {
			case true:
				return 26580
			case false:
				return 26581
			}
		}
	case false:
		switch x.Facing {
		case DecoratedPotFacingNorth:
			switch x.Waterlogged {
			case true:
				return 26582
			case false:
				return 26583
			}
		case DecoratedPotFacingSouth:
			switch x.Waterlogged {
			case true:
				return 26584
			case false:
				return 26585
			}
		case DecoratedPotFacingWest:
			switch x.Waterlogged {
			case true:
				return 26586
			case false:
				return 26587
			}
		case DecoratedPotFacingEast:
			switch x.Waterlogged {
			case true:
				return 26588
			case false:
				return 26589
			}
		}
	}
	return 26583 // default state
}

type CrafterOrientation string

const (
	CrafterOrientationDownEast  CrafterOrientation = "down_east"
	CrafterOrientationDownNorth CrafterOrientation = "down_north"
	CrafterOrientationDownSouth CrafterOrientation = "down_south"
	CrafterOrientationDownWest  CrafterOrientation = "down_west"
	CrafterOrientationUpEast    CrafterOrientation = "up_east"
	CrafterOrientationUpNorth   CrafterOrientation = "up_north"
	CrafterOrientationUpSouth   CrafterOrientation = "up_south"
	CrafterOrientationUpWest    CrafterOrientation = "up_west"
	CrafterOrientationWestUp    CrafterOrientation = "west_up"
	CrafterOrientationEastUp    CrafterOrientation = "east_up"
	CrafterOrientationNorthUp   CrafterOrientation = "north_up"
	CrafterOrientationSouthUp   CrafterOrientation = "south_up"
)

type Crafter struct {
	Crafting    bool
	Orientation CrafterOrientation
	Triggered   bool
}

func (x Crafter) Id() uint16 {
	switch x.Crafting {
	case true:
		switch x.Orientation {
		case CrafterOrientationDownEast:
			switch x.Triggered {
			case true:
				return 26590
			case false:
				return 26591
			}
		case CrafterOrientationDownNorth:
			switch x.Triggered {
			case true:
				return 26592
			case false:
				return 26593
			}
		case CrafterOrientationDownSouth:
			switch x.Triggered {
			case true:
				return 26594
			case false:
				return 26595
			}
		case CrafterOrientationDownWest:
			switch x.Triggered {
			case true:
				return 26596
			case false:
				return 26597
			}
		case CrafterOrientationUpEast:
			switch x.Triggered {
			case true:
				return 26598
			case false:
				return 26599
			}
		case CrafterOrientationUpNorth:
			switch x.Triggered {
			case true:
				return 26600
			case false:
				return 26601
			}
		case CrafterOrientationUpSouth:
			switch x.Triggered {
			case true:
				return 26602
			case false:
				return 26603
			}
		case CrafterOrientationUpWest:
			switch x.Triggered {
			case true:
				return 26604
			case false:
				return 26605
			}
		case CrafterOrientationWestUp:
			switch x.Triggered {
			case true:
				return 26606
			case false:
				return 26607
			}
		case CrafterOrientationEastUp:
			switch x.Triggered {
			case true:
				return 26608
			case false:
				return 26609
			}
		case CrafterOrientationNorthUp:
			switch x.Triggered {
			case true:
				return 26610
			case false:
				return 26611
			}
		case CrafterOrientationSouthUp:
			switch x.Triggered {
			case true:
				return 26612
			case false:
				return 26613
			}
		}
	case false:
		switch x.Orientation {
		case CrafterOrientationDownEast:
			switch x.Triggered {
			case true:
				return 26614
			case false:
				return 26615
			}
		case CrafterOrientationDownNorth:
			switch x.Triggered {
			case true:
				return 26616
			case false:
				return 26617
			}
		case CrafterOrientationDownSouth:
			switch x.Triggered {
			case true:
				return 26618
			case false:
				return 26619
			}
		case CrafterOrientationDownWest:
			switch x.Triggered {
			case true:
				return 26620
			case false:
				return 26621
			}
		case CrafterOrientationUpEast:
			switch x.Triggered {
			case true:
				return 26622
			case false:
				return 26623
			}
		case CrafterOrientationUpNorth:
			switch x.Triggered {
			case true:
				return 26624
			case false:
				return 26625
			}
		case CrafterOrientationUpSouth:
			switch x.Triggered {
			case true:
				return 26626
			case false:
				return 26627
			}
		case CrafterOrientationUpWest:
			switch x.Triggered {
			case true:
				return 26628
			case false:
				return 26629
			}
		case CrafterOrientationWestUp:
			switch x.Triggered {
			case true:
				return 26630
			case false:
				return 26631
			}
		case CrafterOrientationEastUp:
			switch x.Triggered {
			case true:
				return 26632
			case false:
				return 26633
			}
		case CrafterOrientationNorthUp:
			switch x.Triggered {
			case true:
				return 26634
			case false:
				return 26635
			}
		case CrafterOrientationSouthUp:
			switch x.Triggered {
			case true:
				return 26636
			case false:
				return 26637
			}
		}
	}
	return 26635 // default state
}

type TrialSpawnerTrialSpawnerState string

const (
	TrialSpawnerTrialSpawnerStateInactive                 TrialSpawnerTrialSpawnerState = "inactive"
	TrialSpawnerTrialSpawnerStateWaitingForPlayers        TrialSpawnerTrialSpawnerState = "waiting_for_players"
	TrialSpawnerTrialSpawnerStateActive                   TrialSpawnerTrialSpawnerState = "active"
	TrialSpawnerTrialSpawnerStateWaitingForRewardEjection TrialSpawnerTrialSpawnerState = "waiting_for_reward_ejection"
	TrialSpawnerTrialSpawnerStateEjectingReward           TrialSpawnerTrialSpawnerState = "ejecting_reward"
	TrialSpawnerTrialSpawnerStateCooldown                 TrialSpawnerTrialSpawnerState = "cooldown"
)

type TrialSpawner struct {
	TrialSpawnerState TrialSpawnerTrialSpawnerState
}

func (x TrialSpawner) Id() uint16 {
	switch x.TrialSpawnerState {
	case TrialSpawnerTrialSpawnerStateInactive:
		return 26638
	case TrialSpawnerTrialSpawnerStateWaitingForPlayers:
		return 26639
	case TrialSpawnerTrialSpawnerStateActive:
		return 26640
	case TrialSpawnerTrialSpawnerStateWaitingForRewardEjection:
		return 26641
	case TrialSpawnerTrialSpawnerStateEjectingReward:
		return 26642
	case TrialSpawnerTrialSpawnerStateCooldown:
		return 26643
	}
	return 26638 // default state
}
