package main

import (
	"encoding/json"
	"github.com/dave/jennifer/jen"
	"os"
	"slices"
	"strings"
	"unicode"
)

//go:generate bash prepare.sh
//go:generate go run gen.go

type Block struct {
	States []struct {
		Id      int  `json:"id"`
		Default bool `json:"default"`
	}
}

func main() {
	bytes, err := os.ReadFile("generated/reports/blocks.json")
	if err != nil {
		panic(err)
	}

	var blocks map[string]Block
	if err := json.Unmarshal(bytes, &blocks); err != nil {
		panic(err)
	}

	f := jen.NewFile("data")
	f.HeaderComment("Code generated by generation/gen.go. DO NOT EDIT.")
	f.Type().Id("Block").Id("uint16").Line()

	type BlockId struct {
		Name string
		Id   int
	}
	var blockIds []BlockId

	for name, block := range blocks {
		name = strings.TrimPrefix(name, "minecraft:")
		var sb strings.Builder
		iscap := true
		for _, r := range name {
			if r == '_' {
				iscap = true
				continue
			}
			if iscap {
				r = unicode.ToUpper(r)
			}
			sb.WriteRune(r)
			iscap = false
		}
		name = sb.String()

		id := -1
		for _, state := range block.States {
			if state.Default {
				id = state.Id
				break
			}
		}
		if id >= 0 {
			blockIds = append(blockIds, BlockId{
				Name: name,
				Id:   id,
			})
		}
	}

	slices.SortFunc(blockIds, func(a, b BlockId) int {
		if a.Id == b.Id {
			return 0
		}
		if a.Id < b.Id {
			return -1
		}
		return +1
	})

	var defs []jen.Code
	for _, blockId := range blockIds {
		defs = append(defs, jen.Id(blockId.Name).Id("Block").Op("=").Lit(blockId.Id))
	}

	f.Const().Defs(defs...).Line()

	err = f.Save("../zz_block_ids.go")
	if err != nil {
		panic(err)
	}
}
