// Code generated by generation/gen.go. DO NOT EDIT.

package packet

import (
	"bytes"
	"gomc/src/protocol"
	"gomc/src/protocol/types"
)

func init() {
	serverbound[0][0] = func() SerializablePacket {
		return &ServerboundHandshake{}
	}
	serverbound[1][0] = func() SerializablePacket {
		return &ServerboundStatusRequest{}
	}
	serverbound[1][1] = func() SerializablePacket {
		return &ServerboundStatusPing{}
	}
	serverbound[2][0] = func() SerializablePacket {
		return &ServerboundLoginStart{}
	}
	serverbound[2][1] = func() SerializablePacket {
		return &ServerboundLoginEncryptionResponse{}
	}
	serverbound[2][3] = func() SerializablePacket {
		return &ServerboundLoginAck{}
	}
	serverbound[3][0] = func() SerializablePacket {
		return &ServerboundConfigurationClientInformation{}
	}
	serverbound[3][1] = func() SerializablePacket {
		return &ServerboundConfigurationPluginMessage{}
	}
	serverbound[3][2] = func() SerializablePacket {
		return &ServerboundConfigurationFinishAck{}
	}
	serverbound[4][0] = func() SerializablePacket {
		return &ServerboundPlayConfirmTeleport{}
	}
	serverbound[4][5] = func() SerializablePacket {
		return &ServerboundPlayChatMessage{}
	}
	serverbound[4][21] = func() SerializablePacket {
		return &ServerboundPlayKeepAlive{}
	}
	serverbound[4][23] = func() SerializablePacket {
		return &ServerboundPlayUpdatePosition{}
	}
	serverbound[4][24] = func() SerializablePacket {
		return &ServerboundPlayUpdatePositionAndRotation{}
	}
	serverbound[4][25] = func() SerializablePacket {
		return &ServerboundPlayUpdateRotation{}
	}
	serverbound[4][33] = func() SerializablePacket {
		return &ServerboundPlayPlayerAction{}
	}
	serverbound[4][51] = func() SerializablePacket {
		return &ServerboundPlaySwingArm{}
	}
}

func (p *ServerboundHandshake) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.ProtocolVersion.Marshal())
	buf.Write(p.ServerAddress.Marshal())
	buf.Write(p.ServerPort.Marshal())
	buf.Write(p.NextState.Marshal())
	return buf.Bytes()
}

func (p *ServerboundStatusRequest) Serialize() []byte {
	var buf bytes.Buffer
	return buf.Bytes()
}

func (p *ServerboundStatusPing) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Payload.Marshal())
	return buf.Bytes()
}

func (p *ServerboundLoginStart) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Username.Marshal())
	buf.Write(p.UUID.Marshal())
	return buf.Bytes()
}

func (p *ServerboundLoginEncryptionResponse) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.SharedSecret.Marshal())
	buf.Write(p.VerifyToken.Marshal())
	return buf.Bytes()
}

func (p *ServerboundLoginAck) Serialize() []byte {
	var buf bytes.Buffer
	return buf.Bytes()
}

func (p *ServerboundConfigurationClientInformation) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Language.Marshal())
	buf.Write(p.ViewDistance.Marshal())
	buf.Write(p.ChatMode.Marshal())
	buf.Write(p.ChatColors.Marshal())
	buf.Write(p.SkinParts.Marshal())
	buf.Write(p.MainHand.Marshal())
	buf.Write(p.TextFiltering.Marshal())
	buf.Write(p.ServerListings.Marshal())
	return buf.Bytes()
}

func (p *ServerboundConfigurationPluginMessage) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Channel.Marshal())
	buf.Write(p.Data.Marshal())
	return buf.Bytes()
}

func (p *ServerboundConfigurationFinishAck) Serialize() []byte {
	var buf bytes.Buffer
	return buf.Bytes()
}

func (p *ServerboundPlayConfirmTeleport) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.TeleportID.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayChatMessage) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Message.Marshal())
	buf.Write(p.Ignored.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayKeepAlive) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.KeepAliveId.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayUpdatePosition) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.X.Marshal())
	buf.Write(p.Y.Marshal())
	buf.Write(p.Z.Marshal())
	buf.Write(p.OnGround.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayUpdatePositionAndRotation) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.X.Marshal())
	buf.Write(p.Y.Marshal())
	buf.Write(p.Z.Marshal())
	buf.Write(p.Yaw.Marshal())
	buf.Write(p.Pitch.Marshal())
	buf.Write(p.OnGround.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayUpdateRotation) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Yaw.Marshal())
	buf.Write(p.Pitch.Marshal())
	buf.Write(p.OnGround.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlayPlayerAction) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Status.Marshal())
	buf.Write(p.Location.Marshal())
	buf.Write(p.Face.Marshal())
	buf.Write(p.SequenceID.Marshal())
	return buf.Bytes()
}

func (p *ServerboundPlaySwingArm) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Hand.Marshal())
	return buf.Bytes()
}

func (p *ServerboundHandshake) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.ProtocolVersion, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.ServerAddress, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.ServerPort, _, err = types.ReadUShort(r)
	if err != nil {
		return err
	}
	p.NextState, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundStatusRequest) Deserialize(_ []byte) error {
	return nil
}

func (p *ServerboundStatusPing) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Payload, _, err = types.ReadLong(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundLoginStart) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Username, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.UUID, _, err = types.ReadUUID(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundLoginEncryptionResponse) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.SharedSecret, _, err = types.ReadByteBuf(r)
	if err != nil {
		return err
	}
	p.VerifyToken, _, err = types.ReadByteBuf(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundLoginAck) Deserialize(_ []byte) error {
	return nil
}

func (p *ServerboundConfigurationClientInformation) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Language, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.ViewDistance, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.ChatMode, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.ChatColors, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.SkinParts, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.MainHand, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.TextFiltering, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.ServerListings, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundConfigurationPluginMessage) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Channel, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.Data, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundConfigurationFinishAck) Deserialize(_ []byte) error {
	return nil
}

func (p *ServerboundPlayConfirmTeleport) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.TeleportID, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayChatMessage) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Message, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.Ignored, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayKeepAlive) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.KeepAliveId, _, err = types.ReadLong(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayUpdatePosition) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.X, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Y, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Z, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.OnGround, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayUpdatePositionAndRotation) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.X, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Y, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Z, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Yaw, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.Pitch, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.OnGround, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayUpdateRotation) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Yaw, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.Pitch, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.OnGround, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlayPlayerAction) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Status, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.Location, _, err = types.ReadPosition(r)
	if err != nil {
		return err
	}
	p.Face, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.SequenceID, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ServerboundPlaySwingArm) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Hand, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (*ServerboundHandshake) ID() int {
	return 0
}

func (*ServerboundStatusRequest) ID() int {
	return 0
}

func (*ServerboundStatusPing) ID() int {
	return 1
}

func (*ServerboundLoginStart) ID() int {
	return 0
}

func (*ServerboundLoginEncryptionResponse) ID() int {
	return 1
}

func (*ServerboundLoginAck) ID() int {
	return 3
}

func (*ServerboundConfigurationClientInformation) ID() int {
	return 0
}

func (*ServerboundConfigurationPluginMessage) ID() int {
	return 1
}

func (*ServerboundConfigurationFinishAck) ID() int {
	return 2
}

func (*ServerboundPlayConfirmTeleport) ID() int {
	return 0
}

func (*ServerboundPlayChatMessage) ID() int {
	return 5
}

func (*ServerboundPlayKeepAlive) ID() int {
	return 21
}

func (*ServerboundPlayUpdatePosition) ID() int {
	return 23
}

func (*ServerboundPlayUpdatePositionAndRotation) ID() int {
	return 24
}

func (*ServerboundPlayUpdateRotation) ID() int {
	return 25
}

func (*ServerboundPlayPlayerAction) ID() int {
	return 33
}

func (*ServerboundPlaySwingArm) ID() int {
	return 51
}

func (*ServerboundHandshake) State() protocol.State {
	return 0
}

func (*ServerboundStatusRequest) State() protocol.State {
	return 1
}

func (*ServerboundStatusPing) State() protocol.State {
	return 1
}

func (*ServerboundLoginStart) State() protocol.State {
	return 2
}

func (*ServerboundLoginEncryptionResponse) State() protocol.State {
	return 2
}

func (*ServerboundLoginAck) State() protocol.State {
	return 2
}

func (*ServerboundConfigurationClientInformation) State() protocol.State {
	return 3
}

func (*ServerboundConfigurationPluginMessage) State() protocol.State {
	return 3
}

func (*ServerboundConfigurationFinishAck) State() protocol.State {
	return 3
}

func (*ServerboundPlayConfirmTeleport) State() protocol.State {
	return 4
}

func (*ServerboundPlayChatMessage) State() protocol.State {
	return 4
}

func (*ServerboundPlayKeepAlive) State() protocol.State {
	return 4
}

func (*ServerboundPlayUpdatePosition) State() protocol.State {
	return 4
}

func (*ServerboundPlayUpdatePositionAndRotation) State() protocol.State {
	return 4
}

func (*ServerboundPlayUpdateRotation) State() protocol.State {
	return 4
}

func (*ServerboundPlayPlayerAction) State() protocol.State {
	return 4
}

func (*ServerboundPlaySwingArm) State() protocol.State {
	return 4
}
