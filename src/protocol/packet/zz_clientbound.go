// Code generated by generation/gen.go. DO NOT EDIT.

package packet

import (
	"bytes"
	"gomc/src/protocol"
	"gomc/src/protocol/types"
)

func (p *ClientboundStatusResponse) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Json.Marshal())
	return buf.Bytes()
}

func (p *ClientboundStatusPong) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Payload.Marshal())
	return buf.Bytes()
}

func (p *ClientboundLoginDisconnect) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Reason.Marshal())
	return buf.Bytes()
}

func (p *ClientboundLoginEncryptionRequest) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.ServerID.Marshal())
	buf.Write(p.PublicKey.Marshal())
	buf.Write(p.VerifyToken.Marshal())
	return buf.Bytes()
}

func (p *ClientboundLoginSuccess) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.UUID.Marshal())
	buf.Write(p.Username.Marshal())
	buf.Write(p.Zero.Marshal())
	return buf.Bytes()
}

func (p *ClientboundConfigurationFinish) Serialize() []byte {
	var buf bytes.Buffer
	return buf.Bytes()
}

func (p *ClientboundConfigurationRegistryData) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.RegistryDataNBT.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayAckBlockChange) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.SequenceID.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayBlockUpdate) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Location.Marshal())
	buf.Write(p.BlockID.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayGameEvent) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Event.Marshal())
	buf.Write(p.Value.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayKeepAlive) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.KeepAliveId.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayChunkData) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.ChunkX.Marshal())
	buf.Write(p.ChunkZ.Marshal())
	buf.Write(p.Heightmaps.Marshal())
	buf.Write(p.Data.Marshal())
	buf.Write(p.NumBlockEntities.Marshal())
	buf.Write(p.SkyLightMask.Marshal())
	buf.Write(p.BlockLightMask.Marshal())
	buf.Write(p.EmptySkyLightMask.Marshal())
	buf.Write(p.EmptyBlockLightMask.Marshal())
	buf.Write(p.SkyLight.Marshal())
	buf.Write(p.BlockLightArrayCount.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayChunkData2) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Data.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayLogin) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.EntityID.Marshal())
	buf.Write(p.IsHardcore.Marshal())
	buf.Write(types.VarInt(len(p.DimensionNames)).Marshal())
	for _, v := range p.DimensionNames {
		buf.Write(v.Marshal())
	}
	buf.Write(p.MaxPlayers.Marshal())
	buf.Write(p.ViewDistance.Marshal())
	buf.Write(p.SimulationDistance.Marshal())
	buf.Write(p.ReducedDebugInfo.Marshal())
	buf.Write(p.EnableRespawnScreen.Marshal())
	buf.Write(p.LimitedCrafting.Marshal())
	buf.Write(p.DimensionType.Marshal())
	buf.Write(p.DimensionName.Marshal())
	buf.Write(p.HashedSeed.Marshal())
	buf.Write(p.GameMode.Marshal())
	buf.Write(p.PreviousGameMode.Marshal())
	buf.Write(p.IsDebug.Marshal())
	buf.Write(p.IsFlat.Marshal())
	buf.Write(p.HasDeathLocation.Marshal())
	buf.Write(p.PortalCooldown.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayPlayerCapabilities) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Flags.Marshal())
	buf.Write(p.FlyingSpeed.Marshal())
	buf.Write(p.WalkingSpeed.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlayPlayerInfoRemove) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(types.VarInt(len(p.UUIDs)).Marshal())
	for _, v := range p.UUIDs {
		buf.Write(v.Marshal())
	}
	return buf.Bytes()
}

func (p *ClientboundPlaySynchronizePosition) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.X.Marshal())
	buf.Write(p.Y.Marshal())
	buf.Write(p.Z.Marshal())
	buf.Write(p.Yaw.Marshal())
	buf.Write(p.Pitch.Marshal())
	buf.Write(p.Flags.Marshal())
	buf.Write(p.TeleportID.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlaySetCenterChunk) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.ChunkX.Marshal())
	buf.Write(p.ChunkZ.Marshal())
	return buf.Bytes()
}

func (p *ClientboundPlaySystemMessage) Serialize() []byte {
	var buf bytes.Buffer
	buf.Write(p.Content.Marshal())
	buf.Write(p.Overlay.Marshal())
	return buf.Bytes()
}

func (p *ClientboundStatusResponse) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Json, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundStatusPong) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Payload, _, err = types.ReadLong(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundLoginDisconnect) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Reason, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundLoginEncryptionRequest) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.ServerID, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.PublicKey, _, err = types.ReadByteBuf(r)
	if err != nil {
		return err
	}
	p.VerifyToken, _, err = types.ReadByteBuf(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundLoginSuccess) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.UUID, _, err = types.ReadUUID(r)
	if err != nil {
		return err
	}
	p.Username, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.Zero, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundConfigurationFinish) Deserialize(_ []byte) error {
	return nil
}

func (p *ClientboundConfigurationRegistryData) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.RegistryDataNBT, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayAckBlockChange) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.SequenceID, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayBlockUpdate) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Location, _, err = types.ReadPosition(r)
	if err != nil {
		return err
	}
	p.BlockID, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayGameEvent) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Event, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.Value, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayKeepAlive) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.KeepAliveId, _, err = types.ReadLong(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayChunkData) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.ChunkX, _, err = types.ReadInt(r)
	if err != nil {
		return err
	}
	p.ChunkZ, _, err = types.ReadInt(r)
	if err != nil {
		return err
	}
	p.Heightmaps, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	p.Data, _, err = types.ReadByteBuf(r)
	if err != nil {
		return err
	}
	p.NumBlockEntities, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.SkyLightMask, _, err = types.ReadBitSet(r)
	if err != nil {
		return err
	}
	p.BlockLightMask, _, err = types.ReadBitSet(r)
	if err != nil {
		return err
	}
	p.EmptySkyLightMask, _, err = types.ReadBitSet(r)
	if err != nil {
		return err
	}
	p.EmptyBlockLightMask, _, err = types.ReadBitSet(r)
	if err != nil {
		return err
	}
	p.SkyLight, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	p.BlockLightArrayCount, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayChunkData2) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Data, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayLogin) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.EntityID, _, err = types.ReadInt(r)
	if err != nil {
		return err
	}
	p.IsHardcore, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	var nDimensionNames types.VarInt
	nDimensionNames, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.DimensionNames = make([]types.String, nDimensionNames)
	for i := 0; i < len(p.DimensionNames); i++ {
		p.DimensionNames[i], _, err = types.ReadString(r)
		if err != nil {
			return err
		}
	}
	p.MaxPlayers, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.ViewDistance, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.SimulationDistance, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.ReducedDebugInfo, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.EnableRespawnScreen, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.LimitedCrafting, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.DimensionType, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.DimensionName, _, err = types.ReadString(r)
	if err != nil {
		return err
	}
	p.HashedSeed, _, err = types.ReadLong(r)
	if err != nil {
		return err
	}
	p.GameMode, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.PreviousGameMode, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.IsDebug, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.IsFlat, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.HasDeathLocation, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	p.PortalCooldown, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayPlayerCapabilities) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Flags, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.FlyingSpeed, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.WalkingSpeed, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlayPlayerInfoRemove) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	var nUUIDs types.VarInt
	nUUIDs, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.UUIDs = make([]types.UUID, nUUIDs)
	for i := 0; i < len(p.UUIDs); i++ {
		p.UUIDs[i], _, err = types.ReadUUID(r)
		if err != nil {
			return err
		}
	}
	return nil
}

func (p *ClientboundPlaySynchronizePosition) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.X, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Y, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Z, _, err = types.ReadDouble(r)
	if err != nil {
		return err
	}
	p.Yaw, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.Pitch, _, err = types.ReadFloat(r)
	if err != nil {
		return err
	}
	p.Flags, _, err = types.ReadByte(r)
	if err != nil {
		return err
	}
	p.TeleportID, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlaySetCenterChunk) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.ChunkX, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	p.ChunkZ, _, err = types.ReadVarInt(r)
	if err != nil {
		return err
	}
	return nil
}

func (p *ClientboundPlaySystemMessage) Deserialize(b []byte) error {
	var err error
	r := bytes.NewReader(b)
	p.Content, _, err = types.ReadData(r)
	if err != nil {
		return err
	}
	p.Overlay, _, err = types.ReadBoolean(r)
	if err != nil {
		return err
	}
	return nil
}

func (*ClientboundStatusResponse) ID() int {
	return 0
}

func (*ClientboundStatusPong) ID() int {
	return 1
}

func (*ClientboundLoginDisconnect) ID() int {
	return 0
}

func (*ClientboundLoginEncryptionRequest) ID() int {
	return 1
}

func (*ClientboundLoginSuccess) ID() int {
	return 2
}

func (*ClientboundConfigurationFinish) ID() int {
	return 2
}

func (*ClientboundConfigurationRegistryData) ID() int {
	return 5
}

func (*ClientboundPlayAckBlockChange) ID() int {
	return 5
}

func (*ClientboundPlayBlockUpdate) ID() int {
	return 9
}

func (*ClientboundPlayGameEvent) ID() int {
	return 32
}

func (*ClientboundPlayKeepAlive) ID() int {
	return 36
}

func (*ClientboundPlayChunkData) ID() int {
	return 37
}

func (*ClientboundPlayChunkData2) ID() int {
	return 37
}

func (*ClientboundPlayLogin) ID() int {
	return 41
}

func (*ClientboundPlayPlayerCapabilities) ID() int {
	return 54
}

func (*ClientboundPlayPlayerInfoRemove) ID() int {
	return 59
}

func (*ClientboundPlaySynchronizePosition) ID() int {
	return 62
}

func (*ClientboundPlaySetCenterChunk) ID() int {
	return 82
}

func (*ClientboundPlaySystemMessage) ID() int {
	return 105
}

func (*ClientboundStatusResponse) State() protocol.State {
	return 1
}

func (*ClientboundStatusPong) State() protocol.State {
	return 1
}

func (*ClientboundLoginDisconnect) State() protocol.State {
	return 2
}

func (*ClientboundLoginEncryptionRequest) State() protocol.State {
	return 2
}

func (*ClientboundLoginSuccess) State() protocol.State {
	return 2
}

func (*ClientboundConfigurationFinish) State() protocol.State {
	return 3
}

func (*ClientboundConfigurationRegistryData) State() protocol.State {
	return 3
}

func (*ClientboundPlayAckBlockChange) State() protocol.State {
	return 4
}

func (*ClientboundPlayBlockUpdate) State() protocol.State {
	return 4
}

func (*ClientboundPlayGameEvent) State() protocol.State {
	return 4
}

func (*ClientboundPlayKeepAlive) State() protocol.State {
	return 4
}

func (*ClientboundPlayChunkData) State() protocol.State {
	return 4
}

func (*ClientboundPlayChunkData2) State() protocol.State {
	return 4
}

func (*ClientboundPlayLogin) State() protocol.State {
	return 4
}

func (*ClientboundPlayPlayerCapabilities) State() protocol.State {
	return 4
}

func (*ClientboundPlayPlayerInfoRemove) State() protocol.State {
	return 4
}

func (*ClientboundPlaySynchronizePosition) State() protocol.State {
	return 4
}

func (*ClientboundPlaySetCenterChunk) State() protocol.State {
	return 4
}

func (*ClientboundPlaySystemMessage) State() protocol.State {
	return 4
}
